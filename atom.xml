<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CuiJing&#39;s Blog</title>
  
  <subtitle>victory over oneself</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://cuijing.me/"/>
  <updated>2018-03-31T13:30:00.000Z</updated>
  <id>http://cuijing.me/</id>
  
  <author>
    <name>CuiJing</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Homebrew 使用总结</title>
    <link href="http://cuijing.me/2018/03/31/Mac/how-to-used-homebrew/"/>
    <id>http://cuijing.me/2018/03/31/Mac/how-to-used-homebrew/</id>
    <published>2018-03-31T13:30:00.000Z</published>
    <updated>2018-03-31T13:30:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Homebrew-是什么？"><a href="#Homebrew-是什么？" class="headerlink" title="Homebrew 是什么？"></a>Homebrew 是什么？</h2><blockquote><p>Homebrew是Mac OSX上的软件包管理工具，能在Mac中方便的安装软件或者卸载软件，相当于linux下的apt-get、yum神器；Homebrew可以在Mac上安装一些OS X没有的UNIX工具，Homebrew将这些工具统统安装到了 /usr/local/Cellar 目录中，并在 /usr/local/bin 中创建符号链接</p></blockquote><a id="more"></a><p><img src="http://oov0wb0gl.bkt.clouddn.com/2018-03-31-15225036622113.jpg" alt=""></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>Homebrew 的安装只需要一条命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"</span><br></pre></td></tr></table></figure><p>Homebrew安装成功后，会自动创建目录 /usr/local/Cellar 来存放Homebrew安装的程序。</p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="更新-Homebrew-自己"><a href="#更新-Homebrew-自己" class="headerlink" title="更新 Homebrew 自己"></a>更新 Homebrew 自己</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew update</span><br></pre></td></tr></table></figure><h3 id="更新包（formula-你想安装的软件）"><a href="#更新包（formula-你想安装的软件）" class="headerlink" title="更新包（formula 你想安装的软件）"></a>更新包（formula 你想安装的软件）</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 查看哪些包可以更新</span></span></span><br><span class="line">brew outdated</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 更新包</span></span></span><br><span class="line">brew upgrade             # 更新所有的包</span><br><span class="line">brew upgrade $FORMULA    # 更新指定的包</span><br></pre></td></tr></table></figure><h3 id="清理-旧版本与缓存文件"><a href="#清理-旧版本与缓存文件" class="headerlink" title="清理 旧版本与缓存文件"></a>清理 旧版本与缓存文件</h3><p>新版本安装了，那旧版本一般就不需要了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">brew cleanup             # 清理所有包的清理旧版本和缓存文件</span><br><span class="line">brew cleanup $FORMULA    # 清理指定包的旧版本和缓存文件</span><br><span class="line">brew cleanup -n          # 查看可清理的旧版本包和缓存文件，不执行清理操作</span><br></pre></td></tr></table></figure><p>Homebrew 只会清除比当前安装的包更老的版本，所以不用担心有些包没更新但被删了。</p><h3 id="锁定不想更新的包"><a href="#锁定不想更新的包" class="headerlink" title="锁定不想更新的包"></a>锁定不想更新的包</h3><p>brew update 一次可以更新所有的包看起来是非常方便，但使用这个命令可能会把一些我们不希望更新的包给更新了。比如，数据库，尤其是 PostgreSQL 跨 minor 版本升级都要迁移数据库的。</p><blockquote><p>人们对神说那我们该怎办呢？于是就有了 <code>brew pin</code></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew pin $FORMULA      # 锁定某个包</span><br><span class="line">brew unpin $FORMULA    # 取消锁定</span><br></pre></td></tr></table></figure><h3 id="查看包的信息"><a href="#查看包的信息" class="headerlink" title="查看包的信息"></a>查看包的信息</h3><p>brew info 可以查看包的相关信息，最有用的应该是包依赖和相应的命令。比如 Nginx 会提醒你怎么加 launchctl ，PostgreSQL 会告诉你如何迁移数据库。这些信息会在包安装完成后自动显示，如果忘了的话可以用这个命令很方便地查看。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew info $FORMULA    # 显示某个包的信息</span><br><span class="line">brew info             # 显示安装了包数量，文件数量，和总占用空间</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> cui @ Cui-MacBook-Pro <span class="keyword">in</span> ~ [21:20:39]</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> brew info git</span></span><br><span class="line">git: stable 2.16.3 (bottled), HEAD</span><br><span class="line">Distributed revision control system</span><br><span class="line">https://git-scm.com</span><br><span class="line">/usr/local/Cellar/git/2.16.2 (1,496 files, 34.5MB) *</span><br><span class="line">  Poured from bottle on 2018-03-03 at 23:32:35</span><br><span class="line">From: https://github.com/Homebrew/homebrew-core/blob/master/Formula/git.rb</span><br><span class="line">==&gt; Dependencies</span><br><span class="line">Optional: pcre2 ✘, gettext ✔, openssl ✘, curl ✘, perl ✔</span><br><span class="line">==&gt; Options</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> cui @ Cui-MacBook-Pro <span class="keyword">in</span> ~ [21:23:43]</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> brew info</span></span><br><span class="line">20 kegs, 29,559 files, 254.2MB</span><br></pre></td></tr></table></figure><h3 id="显示包的依赖关系"><a href="#显示包的依赖关系" class="headerlink" title="显示包的依赖关系"></a>显示包的依赖关系</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># brew deps 可以显示包的依赖关系，然后判断哪些包是可以安全删除的。</span></span></span><br><span class="line">brew deps --installed --tree # 查看已安装的包的依赖，树形显示</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> brew deps --installed --tree</span></span><br><span class="line">autojump</span><br><span class="line"></span><br><span class="line">bash-completion</span><br><span class="line"></span><br><span class="line">gdbm</span><br><span class="line"></span><br><span class="line">gettext</span><br><span class="line"></span><br><span class="line">git</span><br><span class="line"></span><br><span class="line">libidn2</span><br><span class="line">├── gettext</span><br><span class="line">└── libunistring</span><br><span class="line"></span><br><span class="line">libunistring</span><br><span class="line"></span><br><span class="line">libyaml</span><br><span class="line"></span><br><span class="line">maven</span><br><span class="line"></span><br><span class="line">openssl</span><br><span class="line"></span><br><span class="line">perl</span><br><span class="line"></span><br><span class="line">python</span><br><span class="line">├── gdbm</span><br><span class="line">├── openssl</span><br><span class="line">├── readline</span><br><span class="line">├── sqlite</span><br><span class="line">│   └── readline</span><br><span class="line">└── xz</span><br><span class="line"></span><br><span class="line">readline</span><br><span class="line"></span><br><span class="line">ruby</span><br><span class="line">├── libyaml</span><br><span class="line">├── openssl</span><br><span class="line">└── readline</span><br><span class="line"></span><br><span class="line">sqlite</span><br><span class="line">└── readline</span><br><span class="line"></span><br><span class="line">tree</span><br><span class="line"></span><br><span class="line">vim</span><br><span class="line">├── perl</span><br><span class="line">├── ruby</span><br><span class="line">│   ├── libyaml</span><br><span class="line">│   ├── openssl</span><br><span class="line">│   └── readline</span><br><span class="line">└── python</span><br><span class="line">    ├── gdbm</span><br><span class="line">    ├── openssl</span><br><span class="line">    ├── readline</span><br><span class="line">    ├── sqlite</span><br><span class="line">    │   └── readline</span><br><span class="line">    └── xz</span><br><span class="line"></span><br><span class="line">wget</span><br><span class="line">├── libidn2</span><br><span class="line">│   ├── gettext</span><br><span class="line">│   └── libunistring</span><br><span class="line">└── openssl</span><br><span class="line"></span><br><span class="line">xz</span><br><span class="line"></span><br><span class="line">zsh-syntax-highlighting</span><br></pre></td></tr></table></figure><h2 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h2><h3 id="1-执行-Homebrew-命令报错："><a href="#1-执行-Homebrew-命令报错：" class="headerlink" title="1 执行 Homebrew 命令报错："></a>1 执行 Homebrew 命令报错：</h3><p>2018-03-31 更新 Mac 系统到 10.13.4，使用 brew 命令出现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xcrun: error: invalid active developer path (/Library/Developer/CommandLineTools), missing xcrun at: /Library/Developer/CommandLineTools/usr/bin/xcrun</span><br><span class="line">Error: Failure while executing: git config --local --replace-all homebrew.analyticsmessage true</span><br></pre></td></tr></table></figure><p>解决办法是一条命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 安装 xcode工具包（并不是安装完整的 xcode）</span></span></span><br><span class="line">xcode-select --install</span><br></pre></td></tr></table></figure><h3 id="2-执行-brew-update-命令-卡在命令行"><a href="#2-执行-brew-update-命令-卡在命令行" class="headerlink" title="2. 执行 brew update 命令 卡在命令行"></a>2. 执行 brew update 命令 卡在命令行</h3><ol><li>解决办法是挂代理 （云墙）</li><li>换 brew 源 （动手搜索，网上有教程）</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Homebrew-是什么？&quot;&gt;&lt;a href=&quot;#Homebrew-是什么？&quot; class=&quot;headerlink&quot; title=&quot;Homebrew 是什么？&quot;&gt;&lt;/a&gt;Homebrew 是什么？&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Homebrew是Mac OSX上的软件包管理工具，能在Mac中方便的安装软件或者卸载软件，相当于linux下的apt-get、yum神器；Homebrew可以在Mac上安装一些OS X没有的UNIX工具，Homebrew将这些工具统统安装到了 /usr/local/Cellar 目录中，并在 /usr/local/bin 中创建符号链接&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Mac" scheme="http://cuijing.me/categories/Mac/"/>
    
    
      <category term="Mac" scheme="http://cuijing.me/tags/Mac/"/>
    
      <category term="Homebrew" scheme="http://cuijing.me/tags/Homebrew/"/>
    
  </entry>
  
  <entry>
    <title>Google Cloud 免费云服务</title>
    <link href="http://cuijing.me/2018/03/01/Linux/Google-Cloud-Ubuntu-Free/"/>
    <id>http://cuijing.me/2018/03/01/Linux/Google-Cloud-Ubuntu-Free/</id>
    <published>2018-03-01T03:59:00.000Z</published>
    <updated>2018-03-14T12:30:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="谷歌云-Google-Cloud-免费一年服务"><a href="#谷歌云-Google-Cloud-免费一年服务" class="headerlink" title="谷歌云 Google Cloud 免费一年服务"></a>谷歌云 Google Cloud 免费一年服务</h1><ol><li>因自己是程序猿一只，编程需要，要用 google 搜索</li><li>正好了解到 Google Cloud 大法好</li></ol><a id="more"></a><p><img src="http://oov0wb0gl.bkt.clouddn.com/2018-03-31-15224691475123.jpg" alt=""></p><h2 id="申请免费谷歌云服务器"><a href="#申请免费谷歌云服务器" class="headerlink" title="申请免费谷歌云服务器"></a>申请免费谷歌云服务器</h2><p>要想利用谷歌云搭建XX服务有两个前提条件：</p><ol><li>拥有其中一张信用卡：Visa、MasterCard、JCB；（我的是工商银行信用卡）</li><li>有一个可以临时「自由访问」的网络。</li></ol><p>打开谷歌云：<a href="https://cloud.google.com" target="_blank" rel="noopener">https://cloud.google.com</a> 登录你的谷歌账户然后点击免费试用。<br><img src="http://oov0wb0gl.bkt.clouddn.com/2018-03-31-15224699420538.png" alt="-w1040"></p><p>地区请选择美国，账号选择个人，填写「名称和地址」，不知如何填写的，在浏览器打开：<a href="http://t.cn/Rt85282。会随机生成一个美国公民的身份，然后按照提示填写。**不要用下图的信息**。" target="_blank" rel="noopener">http://t.cn/Rt85282。会随机生成一个美国公民的身份，然后按照提示填写。**不要用下图的信息**。</a><br><img src="http://oov0wb0gl.bkt.clouddn.com/2018-03-31-15224699584905.png" alt="-w738"></p><p>填写「付款方式」，填写你的信用卡号，会扣1美元境外 POS费用，不用怕大概10分钟内就会自己退，到期之后不会自己扣费，持卡人姓名填写上面生成的名字即可。</p><p>点击开始免费试用，再进入「我的控制台」，创建一个项目，项目名称随便</p><p>点击左上角按钮，然后点击「结算」查看谷歌赠送给的 <code>$300</code> 是否到位了。刚注册会显示剩余的赠金：<code>$300</code>，剩余天数：365。</p><p>然后点击：计算 -&gt; Compute Engine -&gt; VM 实例 -&gt; 创建实例。</p><p>按照下图中标注的信息填写，其他默认即可。<br><img src="http://oov0wb0gl.bkt.clouddn.com/2018-03-31-15224706656395.jpg" alt="-w744"></p><p>点击创建，等待创建完成。创建完成之后，「外部 IP」就是服务器的地址。（可以测试一下实例的速度如何，当然也可以不测试，基本是没问题的。测试地址：<a href="http://t.cn/Ry2GtDf，只要均在" target="_blank" rel="noopener">http://t.cn/Ry2GtDf，只要均在</a> 100 毫秒之内，说明就没问题，如果超出就删除这个实例，重新建一个实例试试。 ）</p><h2 id="配置谷歌云服务器"><a href="#配置谷歌云服务器" class="headerlink" title="配置谷歌云服务器"></a>配置谷歌云服务器</h2><p>配置服务器。务必仔细操作。点击下图 SSH 连接<br><img src="http://oov0wb0gl.bkt.clouddn.com/2018-03-31-15224708659351.jpg" alt=""></p><p>在命令行输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1. 切换 root 用户</span></span><br><span class="line">sudo -i</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2. 魔改内核</span></span><br><span class="line">wget -N --no-check-certificate https://raw.githubusercontent.com/FunctionClub/YankeeBBR/master/bbr.sh &amp;&amp; bash bbr.sh install</span><br></pre></td></tr></table></figure><p>输入命令后回车，耐心等待，直到出现下图中的窗口，<br><img src="http://oov0wb0gl.bkt.clouddn.com/2018-03-31-15224712987022.jpg" alt=""></p><p>输入 y，回车。可以等待重启，或者直接关闭该窗口，重新打开。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 3. 切换 root 用户</span></span><br><span class="line">sudo -i</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 4. </span></span><br><span class="line">bash bbr.sh start</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 5. </span></span><br><span class="line">wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocksR.sh &amp;&amp; chmod +x shadowsocksR.sh</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 6. ./shadowsocksR.sh</span></span><br></pre></td></tr></table></figure><p>出现下图所示内容，则证明上面的工作成功。<br><img src="http://oov0wb0gl.bkt.clouddn.com/2018-03-31-15224714436165.jpg" alt=""></p><p>设置密码和端口。在上面所示窗口中输入密码，随便，自己记住就可以，回车；然后会提示输入端口，也是随便，只要在 1-65535 之间就行，我设置的是 8998。</p><p>设置完密码和端口，会提示输入编码方式、混淆方式等，这里直接默认就好，一路回车。在最后一步回车之后，大约需要等待 5、6 分钟，这个过程是在配置服务器，耐心等待就好，千万不要关闭窗口。</p><p>直到出现以下画面<br><img src="http://oov0wb0gl.bkt.clouddn.com/2018-03-31-15224718719623.jpg" alt="-w503"></p><p>配置防火墙规则，搜索 防火墙规则<br><img src="http://oov0wb0gl.bkt.clouddn.com/2018-03-31-15224717177193.jpg" alt="-w730"></p><p><img src="http://oov0wb0gl.bkt.clouddn.com/2018-03-31-15224719828979.jpg" alt=""></p><p>设置协议端口：<br>把端口号设置成刚才我们自己规定的端口号，我的是 8998。修改时输入：tcp:8998; udp:8998，注意，分号“；”后面紧跟一个空格。只设置图中圈红的两个，这两个必须设置，不要漏掉，其余默认。</p><p>终于搭建结束了。。。。。。</p><p>搭建完就可以在你的设备上使用了，全平台支持，只需要下载对应的客户端。Mac、Windows、Android 的客户端可以在 GitHub 上搜索 shadowsocks 自行查找。iOS 的客户端需要 App Store 登录国外 ID，然后搜索 Shadowrocket 或者 Wingy。这些客户端如何使用自行搜索，我不知道怎么使用，你懂。</p><p>这个速度看某 tube 视频网站的 4k 视频无压力。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;谷歌云-Google-Cloud-免费一年服务&quot;&gt;&lt;a href=&quot;#谷歌云-Google-Cloud-免费一年服务&quot; class=&quot;headerlink&quot; title=&quot;谷歌云 Google Cloud 免费一年服务&quot;&gt;&lt;/a&gt;谷歌云 Google Cloud 免费一年服务&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;因自己是程序猿一只，编程需要，要用 google 搜索&lt;/li&gt;
&lt;li&gt;正好了解到 Google Cloud 大法好&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://cuijing.me/categories/Linux/"/>
    
    
      <category term="Ubuntu" scheme="http://cuijing.me/tags/Ubuntu/"/>
    
      <category term="Google Cloud" scheme="http://cuijing.me/tags/Google-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>Java垃圾回收机制（一）</title>
    <link href="http://cuijing.me/2017/06/15/JVM/JavaGC-1/"/>
    <id>http://cuijing.me/2017/06/15/JVM/JavaGC-1/</id>
    <published>2017-06-15T00:30:00.000Z</published>
    <updated>2018-02-21T11:32:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是-Java-堆内存"><a href="#什么是-Java-堆内存" class="headerlink" title="什么是 Java 堆内存"></a>什么是 Java 堆内存</h1><p>堆是在 JVM 启动时创建的，主要用来维护运行时数据，如运行过程中创建的对象和数组都是基于这块内存空间。Java 堆是非常重要的元素，如果我们动态创建的对象没有得到及时回收，持续堆积，最后会导致堆空间被占满，内存溢出。<br>因此，Java 提供了一种垃圾回收机制，在后台创建一个守护进程。该进程会在内存紧张的时候自动跳出来，把堆空间的垃圾全部进行回收，从而保证程序的正常运行。<br><a id="more"></a></p><h1 id="那什么是垃圾呢？"><a href="#那什么是垃圾呢？" class="headerlink" title="那什么是垃圾呢？"></a>那什么是垃圾呢？</h1><p>所谓“垃圾”，就是指所有不再存活的对象。常见的判断是否存活有两种方法：引用计数法和可达性分析。</p><h2 id="引用计数法"><a href="#引用计数法" class="headerlink" title="引用计数法"></a>引用计数法</h2><p>为每一个创建的对象分配一个引用计数器，用来存储该对象被引用的个数。当该个数为零，意味着没有人再使用这个对象，可以认为“对象死亡”。但是，这种方案存在严重的问题，就是无法检测“循环引用”：当两个对象互相引用，即时它俩都不被外界任何东西引用，它俩的计数都不为零，因此永远不会被回收。而实际上对于开发者而言，这两个对象已经完全没有用处了。<br>因此，Java 里没有采用这样的方案来判定对象的“存活性”。</p><h2 id="可达性分析"><a href="#可达性分析" class="headerlink" title="可达性分析"></a>可达性分析</h2><p>这种方案是目前主流语言里采用的对象存活性判断方案。基本思路是把所有引用的对象想象成一棵树，从树的根结点 GC Roots 出发，持续遍历找出所有连接的树枝对象，这些对象则被称为“可达”对象，或称“存活”对象。其余的对象则被视为“死亡”的“不可达”对象，或称“垃圾”。<br>参考下图，object5,object6和object7便是不可达对象，视为“死亡状态”，应该被垃圾回收器回收。<br><img src="http://oov0wb0gl.bkt.clouddn.com/2017-06-14-14974518600738.jpg" alt=""></p><h2 id="GC-Roots-究竟指谁呢？"><a href="#GC-Roots-究竟指谁呢？" class="headerlink" title="GC Roots 究竟指谁呢？"></a>GC Roots 究竟指谁呢？</h2><p>我们可以猜测，GC Roots 本身一定是可达的，这样从它们出发遍历到的对象才能保证一定可达。那么，Java 里有哪些对象是一定可达呢？主要有以下四种：</p><ul><li>虚拟机栈（帧栈中的本地变量表）中引用的对象。</li><li>方法区中静态属性引用的对象。</li><li>方法区中常量引用的对象。</li><li>本地方法栈中JNI引用的对象。</li></ul><p>不少读者可能对这些 GC Roots 似懂非懂，这涉及到 JVM 本身的内存结构等等，未来的文章会再做深入讲解。这里只要知道有这么几种类型的 GC Roots，每次垃圾回收器会从这些根结点开始遍历寻找所有可达节点。</p><h1 id="有哪些方式来回收这些垃圾呢？"><a href="#有哪些方式来回收这些垃圾呢？" class="headerlink" title="有哪些方式来回收这些垃圾呢？"></a>有哪些方式来回收这些垃圾呢？</h1><p>上面已经知道，所有GC Roots不可达的对象都称为垃圾，参考下图，黑色的表示垃圾，灰色表示存活对象，绿色表示空白空间。</p><p><img src="http://oov0wb0gl.bkt.clouddn.com/2017-06-14-14974518742668.jpg" alt=""></p><p>那么，我们如何来回收这些垃圾呢？</p><h2 id="标记－清理"><a href="#标记－清理" class="headerlink" title="标记－清理"></a>标记－清理</h2><p>第一步，所谓“标记”就是利用可达性遍历堆内存，把“存活”对象和“垃圾”对象进行标记，得到的结果如上图；<br>第二步，既然“垃圾”已经标记好了，那我们再遍历一遍，把所有“垃圾”对象所占的空间直接清空即可。<br>结果如下：</p><p><img src="http://oov0wb0gl.bkt.clouddn.com/2017-06-14-14974518839508.jpg" alt=""></p><p>这便是标记－清理方案，简单方便，但是容易产生内存碎片。</p><h2 id="标记－整理"><a href="#标记－整理" class="headerlink" title="标记－整理"></a>标记－整理</h2><p>既然上面的方法会产生内存碎片，那好，我在清理的时候，把所有存活对象扎堆到同一个地方，让它们待在一起，这样就没有内存碎片了。<br>结果如下：<br><img src="http://oov0wb0gl.bkt.clouddn.com/2017-06-14-14974518953238.jpg" alt=""></p><p>这两种方案适合存活对象多，垃圾少的情况，它只需要清理掉少量的垃圾，然后挪动下存活对象就可以了。<br>复制<br>这种方法比较粗暴，直接把堆内存分成两部分，一段时间内只允许在其中一块内存上进行分配，当这块内存被分配完后，则执行垃圾回收，把所有存活对象全部复制到另一块内存上，当前内存则直接全部清空。<br>参考下图：</p><p><img src="http://oov0wb0gl.bkt.clouddn.com/2017-06-14-14974519054146.jpg" alt=""></p><p>起初时只使用上面部分的内存，直到内存使用完毕，才进行垃圾回收，把所有存活对象搬到下半部分，并把上半部分进行清空。<br>这种做法不容易产生碎片，也简单粗暴；但是，它意味着你在一段时间内只能使用一部分的内存，超过这部分内存的话就意味着堆内存里频繁的复制清空。<br>这种方案适合存活对象少，垃圾多的情况，这样在复制时就不需要复制多少对象过去，多数垃圾直接被清空处理。</p><h2 id="Java-的分代回收机制"><a href="#Java-的分代回收机制" class="headerlink" title="Java 的分代回收机制"></a>Java 的分代回收机制</h2><p>上面我们看到有至少三种方法来回收内存，那么 Java 里是如何选择利用这三种回收算法呢？是只用一种还是三种都用呢？</p><h2 id="Java-的堆结构"><a href="#Java-的堆结构" class="headerlink" title="Java 的堆结构"></a>Java 的堆结构</h2><p>在选择回收算法前，我们先来看一下 Java 堆的结构。<br>一块 Java 堆空间一般分成三部分，这三部分用来存储三类数据：</p><ul><li>刚刚创建的对象。在代码运行时会持续不断地创造新的对象，这些新创建的对象会被统一放在一起。因为有很多局部变量等在新创建后很快会变成不可达的对象，快速死去，因此这块区域的特点是存活对象少，垃圾多。形象点描述这块区域为：新生代；</li><li>存活了一段时间的对象。这些对象早早就被创建了，而且一直活了下来。我们把这些存活时间较长的对象放在一起，它们的特点是存活对象多，垃圾少。形象点描述这块区域为：老年代；</li><li>永久存在的对象。比如一些静态文件，这些对象的特点是不需要垃圾回收，永远存活。形象点描述这块区域为：永久代。（不过在 Java 8 里已经把永久代删除了，把这块内存空间给了元空间，后续文章再讲解。）<br>也就是说，常规的 Java 堆至少包括了 新生代 和 老年代 两块内存区域，而且这两块区域有很明显的特征：</li><li>新生代：存活对象少、垃圾多</li><li>老年代：存活对象多、垃圾少</li></ul><p>结合新生代／老年代的存活对象特点和之前提过的几种垃圾回收算法，可以得到如下的回收方案：</p><h2 id="新生代－复制回收机制"><a href="#新生代－复制回收机制" class="headerlink" title="新生代－复制回收机制"></a>新生代－复制回收机制</h2><p>对于新生代区域，由于每次 GC 都会有大量新对象死去，只有少量存活。因此采用复制回收算法，GC 时把少量的存活对象复制过去即可。<br>那么如何设计这个复制算法比较好呢？有以下几种方式：</p><h3 id="思路1-把内存均分成-1-1-两等份"><a href="#思路1-把内存均分成-1-1-两等份" class="headerlink" title="思路1. 把内存均分成 1:1 两等份"></a>思路1. 把内存均分成 1:1 两等份</h3><p>如下图拆分内存。</p><p><img src="http://oov0wb0gl.bkt.clouddn.com/2017-06-14-14974519316371.jpg" alt=""></p><p>每次只使用一半的内存，当这一半满了后，就进行垃圾回收，把存活的对象直接复制到另一半内存，并清空当前一半的内存。<br>这种分法的缺陷是相当于只有一半的可用内存，对于新生代而言，新对象持续不断地被创建，如果只有一半可用内存，那显然要持续不断地进行垃圾回收工作，反而影响到了正常程序的运行，得不偿失。</p><h3 id="思路2-把内存按-9-1-分"><a href="#思路2-把内存按-9-1-分" class="headerlink" title="思路2. 把内存按 9:1 分"></a>思路2. 把内存按 9:1 分</h3><p>既然上面的分法导致可用内存只剩一半，那么我做些调整，把 1:1变成9:1，</p><p><img src="http://oov0wb0gl.bkt.clouddn.com/2017-06-14-14974519421137.jpg" alt=""></p><p>最开始在 9 的内存区使用，当 9 快要满时，执行复制回收，把 9 内仍然存活的对象复制到 1 区，并清空 9区。<br>这样看起来是比上面的方法好了，但是它存在比较严重的问题。<br>当我们把 9 区存活对象复制到 1 区时，由于内存空间比例相差比较大，所以很有可能 1 区放不满，此时就不得不把对象移到 老年区。而这就意味着，可能会有一部分 并不老 的 9 区对象由于 1 区放不下了而被放到了 老年区，可想而知，这破坏了 老年区 的规则。或者说，一定程度上的 老年区 并不一定全是 老年对象。<br>那应该如何才能把真正比较 老 的对象挪到 老年区 呢？</p><h3 id="思路3-把内存按-8-1-1-分"><a href="#思路3-把内存按-8-1-1-分" class="headerlink" title="思路3. 把内存按 8:1:1 分"></a>思路3. 把内存按 8:1:1 分</h3><p>既然 9:1 有可能把年轻对象放到 老年区，那就换成 8:1:1，依次取名为 Eden、Survivor A、Survivor B区，其中Eden意为伊甸园，形容有很多新生对象在里面创建；Survivor区则为幸存者，即经历 GC 后仍然存活下来的对象。<br>工作原理如下：</p><p><img src="http://oov0wb0gl.bkt.clouddn.com/2017-06-14-14974519603515.jpg" alt=""></p><ol><li>首先，Eden区最大，对外提供堆内存。当 Eden 区快要满了，则进行 Minor GC，把存活对象放入Survivor A区，清空 Eden 区；</li><li>Eden区被清空后，继续对外提供堆内存；</li><li>当Eden区再次被填满，此时对Eden区和Survivor A区同时进行 Minor GC，把存活对象放入Survivor B区，同时清空Eden 区和Survivor A区；</li><li>Eden区继续对外提供堆内存，并重复上述过程，即在Eden区填满后，把Eden区和某个Survivor区的存活对象放到另一个Survivor区；</li><li>当某个Survivor区被填满，且仍有对象未被复制完毕时，或者某些对象在反复Survive 15 次左右时，则把这部分剩余对象放到Old区；</li><li>当 Old 区也被填满时，进行 Major GC，对 Old 区进行垃圾回收。</li></ol><p>[注意，在真实的 JVM 环境里，可以通过参数 SurvivorRatio 手动配置Eden区和单个Survivor区的比例，默认为8。]<br>那么，所谓的 Old 区垃圾回收，或称Major GC，应该如何执行呢？</p><h2 id="老年代－标记整理回收机制"><a href="#老年代－标记整理回收机制" class="headerlink" title="老年代－标记整理回收机制"></a>老年代－标记整理回收机制</h2><p>根据上面我们知道，老年代一般存放的是存活时间较久的对象，所以每一次 GC 时，存活对象比较较大，也就是说每次只有少部分对象被回收。<br>因此，根据不同回收机制的特点，这里选择存活对象多，垃圾少的标记整理回收机制，仅仅通过少量地移动对象就能清理垃圾，而且不存在内存碎片化。<br>至此，我们已经了解了 Java 堆内存的分代原理，并了解了不同代根据各自特点采用了不同的回收机制，即新生代采用回收机制，老年代采用标记整理机制。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;什么是-Java-堆内存&quot;&gt;&lt;a href=&quot;#什么是-Java-堆内存&quot; class=&quot;headerlink&quot; title=&quot;什么是 Java 堆内存&quot;&gt;&lt;/a&gt;什么是 Java 堆内存&lt;/h1&gt;&lt;p&gt;堆是在 JVM 启动时创建的，主要用来维护运行时数据，如运行过程中创建的对象和数组都是基于这块内存空间。Java 堆是非常重要的元素，如果我们动态创建的对象没有得到及时回收，持续堆积，最后会导致堆空间被占满，内存溢出。&lt;br&gt;因此，Java 提供了一种垃圾回收机制，在后台创建一个守护进程。该进程会在内存紧张的时候自动跳出来，把堆空间的垃圾全部进行回收，从而保证程序的正常运行。&lt;br&gt;
    
    </summary>
    
      <category term="Java 虚拟机" scheme="http://cuijing.me/categories/Java-%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    
      <category term="Java" scheme="http://cuijing.me/tags/Java/"/>
    
      <category term="JVM" scheme="http://cuijing.me/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>Supervisor linux 进程管理利器</title>
    <link href="http://cuijing.me/2017/06/14/Linux/Supervisor-linux-%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86%E5%88%A9%E5%99%A8/"/>
    <id>http://cuijing.me/2017/06/14/Linux/Supervisor-linux-进程管理利器/</id>
    <published>2017-06-14T13:42:48.000Z</published>
    <updated>2017-08-22T12:30:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="为何使用-Supervisor"><a href="#为何使用-Supervisor" class="headerlink" title="为何使用 Supervisor"></a>为何使用 Supervisor</h1><p>由于公司项目需求，需要将服务器内核升级为高版本。而定制版阿里云服务器不允许用户自行更改内核，于是只好格式化原服务器，选择 Ubuntu 系统 重新安装各种软件。</p><a id="more"></a><p> 2017年年初，公司阿里云服务器版本是阿里云定制版本：</p><p><img src="http://oov0wb0gl.bkt.clouddn.com/2017-06-14-14974479232748.jpg" alt=""></p><p><img src="http://oov0wb0gl.bkt.clouddn.com/2017-06-14-14974493022433.jpg" alt=""></p><p>安装完毕，查看内核（方法有三）如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">oot@iZ23u31elifZ:~# uname -a</span><br><span class="line">Linux iZ23u31elifZ 4.4.0-79-generic #100-Ubuntu SMP Wed May 17 19:58:14 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux</span><br><span class="line"></span><br><span class="line">root@iZ23u31elifZ:~# cat /proc/version</span><br><span class="line">Linux version 4.4.0-79-generic (buildd@lcy01-30) (gcc version 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.4) ) #100-Ubuntu SMP Wed May 17 19:58:14 UTC 2017</span><br><span class="line"></span><br><span class="line">root@iZ23u31elifZ:~# uname -r</span><br><span class="line">4.4.0-79-generic</span><br><span class="line">root@iZ23u31elifZ:~#</span><br></pre></td></tr></table></figure><p>满足内核要求。</p><p>但是满足内核要求后，之前写好且运行正常的进程监控 shell 脚本在 Ubuntu 下不再正常工作了。</p><p>经过一天的研究，决定放弃 shell 脚本，采用廖雪峰老师推荐的 Supervisor 进程监控软件。<a href="http://www.liaoxuefeng.com/article/0013738926914703df5e93589a14c19807f0e285194fe84000" target="_blank" rel="noopener">文章链接地址</a></p><h1 id="supervisor"><a href="#supervisor" class="headerlink" title="supervisor"></a>supervisor</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>Debian / Ubuntu可以直接通过apt安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ apt-get install supervisor</span><br><span class="line"></span><br><span class="line"><span class="comment">## 安装位置在</span></span><br><span class="line">$ <span class="built_in">pwd</span></span><br><span class="line">/etc/supervisor</span><br></pre></td></tr></table></figure><h2 id="脚本编写"><a href="#脚本编写" class="headerlink" title="脚本编写"></a>脚本编写</h2><p>然后，给我们自己开发的应用程序编写一个配置文件，让supervisor来管理它。每个进程的配置文件都可以单独分拆，放在/etc/supervisor/conf.d/目录下，可以.ini作为扩展名（或者以.conf），例如，tomcat.ini 定义了一个gunicorn的进程：</p><h3 id="Tomcat-自启动脚本"><a href="#Tomcat-自启动脚本" class="headerlink" title="Tomcat 自启动脚本"></a>Tomcat 自启动脚本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">root@iZ23u31elifZ:/etc/supervisor/conf.d<span class="comment"># more tomcat_auto.ini</span></span><br><span class="line">[program:tomcat]</span><br><span class="line"><span class="built_in">command</span>=/usr/<span class="built_in">local</span>/share/tomcat8/bin/catalina.sh run</span><br><span class="line">stdout_logfile=/usr/<span class="built_in">local</span>/share/tomcat8/logs/catalina.out</span><br><span class="line">autostart=<span class="literal">true</span></span><br><span class="line">autorestart=<span class="literal">true</span></span><br><span class="line">startsecs=5</span><br><span class="line">priority=1</span><br><span class="line">stopasgroup=<span class="literal">true</span></span><br><span class="line">killasgroup=<span class="literal">true</span></span><br></pre></td></tr></table></figure><p>其中，进程tomcat定义在[program:tomcat]中，command是命令，stdout_logfile是进程日志输出路径。<br>重启supervisor，让配置文件生效，然后运行命令supervisorctl启动进程：</p><h3 id="Java-项目项目自启动"><a href="#Java-项目项目自启动" class="headerlink" title="Java 项目项目自启动"></a>Java 项目项目自启动</h3><h4 id="DPPAlertCenter-的项目启动脚本"><a href="#DPPAlertCenter-的项目启动脚本" class="headerlink" title="DPPAlertCenter 的项目启动脚本"></a>DPPAlertCenter 的项目启动脚本</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">root@iZ23u31elifZ:/home/DPP-LOCAL/DPP-LOCAL-AlertCenter<span class="comment"># more StartDPPLOCALAlertCenter</span></span><br><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/<span class="built_in">local</span>/jdk_64</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=<span class="variable">$CLASSPATH</span>:<span class="variable">$JAVA_HOME</span>/lib/tools.jar:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:./lib/classes12.jar:./lib/dom4j-1.6.1.jar:./lib/log4j-1[1].2.15.jar:./lib/mysql-connector-java-5.1.15-bin.</span><br><span class="line">jar:./lib/sqljdbc4.jar</span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=<span class="variable">$LD_LIBRARY_PATH</span>:<span class="variable">$JAVA_HOME</span>/jre/lib/amd64:<span class="variable">$JAVA_HOME</span>/jre/lib/amd64/native_threads:<span class="variable">$JAVA_HOME</span>/jre/lib/amd64/client:<span class="variable">$JAVA_HOME</span>/jre/lib/amd64/server:./</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /home/DPP-LOCAL/DPP-LOCAL-AlertCenter</span><br><span class="line"></span><br><span class="line"><span class="variable">$JAVA_HOME</span>/bin/java DPPLOCALAlertCenter.Main</span><br></pre></td></tr></table></figure><h4 id="DPPAlertCenter-项目-Supervisor-脚本"><a href="#DPPAlertCenter-项目-Supervisor-脚本" class="headerlink" title="DPPAlertCenter 项目 Supervisor 脚本"></a>DPPAlertCenter 项目 Supervisor 脚本</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[program:DPPAlertCenter]</span><br><span class="line"><span class="built_in">command</span>=sh /home/DPP-LOCAL/DPP-LOCAL-AlertCenter/StartDPPLOCALAlertCenter</span><br><span class="line">stdout_logfile=/home/DPP-LOCAL/DPP-LOCAL-AlertCenter/logs/DPPLOCAL_AlertCenter_</span><br><span class="line">autostart=<span class="literal">true</span></span><br><span class="line">autorestart=<span class="literal">true</span></span><br><span class="line">startsecs=5</span><br><span class="line">priority=2</span><br><span class="line">stopasgroup=<span class="literal">true</span></span><br><span class="line">killasgroup=<span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="Gogs-启动脚本（Gogs-是一款极易搭建的自助-Git-服务）"><a href="#Gogs-启动脚本（Gogs-是一款极易搭建的自助-Git-服务）" class="headerlink" title="Gogs 启动脚本（Gogs 是一款极易搭建的自助 Git 服务）"></a>Gogs 启动脚本（Gogs 是一款极易搭建的自助 Git 服务）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ more gogs_auto.ini</span><br><span class="line">[program:gogs]</span><br><span class="line">directory=/home/git/gogs</span><br><span class="line"><span class="built_in">command</span>=/home/git/gogs/gogs web</span><br><span class="line">autostart=<span class="literal">true</span></span><br><span class="line">autorestart=<span class="literal">true</span></span><br><span class="line">startsecs=10</span><br><span class="line">stdout_logfile=/var/<span class="built_in">log</span>/gogs/stdout.log</span><br><span class="line">stdout_logfile_maxbytes=1MB</span><br><span class="line">stdout_logfile_backups=10</span><br><span class="line">stdout_capture_maxbytes=1MB</span><br><span class="line">stderr_logfile=/var/<span class="built_in">log</span>/gogs/stderr.log</span><br><span class="line">stderr_logfile_maxbytes=1MB</span><br><span class="line">stderr_logfile_backups=10</span><br><span class="line">stderr_capture_maxbytes=1MB</span><br><span class="line">user = git</span><br><span class="line">environment = HOME=<span class="string">"/home/git"</span>, USER=<span class="string">"git"</span></span><br></pre></td></tr></table></figure><h2 id="启动-Supervisor"><a href="#启动-Supervisor" class="headerlink" title="启动 Supervisor"></a>启动 Supervisor</h2><h3 id="启用-amp-关闭"><a href="#启用-amp-关闭" class="headerlink" title="启用 &amp; 关闭"></a>启用 &amp; 关闭</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ supervisord -c /etc/supervisor/supervisord.conf <span class="comment">## 启动  Supervisor</span></span><br><span class="line">$ supervisord                <span class="comment"># 启动supervisor</span></span><br><span class="line">$ supervisorctl reload       <span class="comment"># 修改完配置文件后重新启动supervisor</span></span><br><span class="line">$ supervisorctl status       <span class="comment"># 查看supervisor监管的进程状态</span></span><br><span class="line">$ supervisorctl start 进程名  <span class="comment"># 启动XXX进程</span></span><br><span class="line">$ supervisorctl stop 进程名   <span class="comment"># 停止XXX进程</span></span><br><span class="line">$ supervisorctl stop all：   <span class="comment"># 停止全部进程，注：start、restart、stop都不会载入最新的配置文件。</span></span><br><span class="line">$ supervisorctl update：     <span class="comment"># 根据最新的配置文件，启动新配置或有改动的进程，配置没有改动的进程不会受影响而重启</span></span><br><span class="line"></span><br><span class="line">$ ps aux | grep supervisord</span><br><span class="line">$ <span class="built_in">kill</span> 进程 id  <span class="comment">## 关闭 Supervisor</span></span><br></pre></td></tr></table></figure><h3 id="进程名-启动脚本"><a href="#进程名-启动脚本" class="headerlink" title="进程名-启动脚本"></a>进程名-启动脚本</h3><p>进程名配置：即每个配置文件的 program 对应的值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[program:DPPAlertCenter]</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">启动进程：</span><br><span class="line"><span class="comment"># supervisorctl start  [进程名]</span></span><br><span class="line"></span><br><span class="line">停止进程：</span><br><span class="line"><span class="comment"># supervisorctl stop  [进程名]</span></span><br></pre></td></tr></table></figure><h2 id="Supervisor-图形界面设置"><a href="#Supervisor-图形界面设置" class="headerlink" title="Supervisor 图形界面设置"></a>Supervisor 图形界面设置</h2><p><strong>核心配置：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">root@iZ23u31elifZ:/etc/supervisor<span class="comment"># ls</span></span><br><span class="line">conf.d  supervisord.conf</span><br><span class="line">root@iZ23u31elifZ:/etc/supervisor<span class="comment"># more supervisord.conf</span></span><br><span class="line">; supervisor config file</span><br><span class="line">[unix_http_server]</span><br><span class="line">file=/var/run/supervisor.sock   ; (the path to the socket file)</span><br><span class="line">chmod=0700                       ; sockef file mode (default 0700)</span><br><span class="line">[supervisord]</span><br><span class="line">logfile=/var/<span class="built_in">log</span>/supervisor/supervisord.log ; (main <span class="built_in">log</span> file;default <span class="variable">$CWD</span>/supervisord.log)</span><br><span class="line">pidfile=/var/run/supervisord.pid ; (supervisord pidfile;default supervisord.pid)</span><br><span class="line">childlogdir=/var/<span class="built_in">log</span>/supervisor            ; (<span class="string">'AUTO'</span> child <span class="built_in">log</span> dir, default <span class="variable">$TEMP</span>)</span><br><span class="line">; the below section must remain <span class="keyword">in</span> the config file <span class="keyword">for</span> RPC</span><br><span class="line">; (supervisorctl/web interface) to work, additional interfaces may be</span><br><span class="line">; added by defining them <span class="keyword">in</span> separate rpcinterface: sections</span><br><span class="line">[rpcinterface:supervisor]</span><br><span class="line">supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface</span><br><span class="line">[supervisorctl]</span><br><span class="line">serverurl=unix:///var/run/supervisor.sock ; use a unix:// URL  <span class="keyword">for</span> a unix socket</span><br><span class="line">; The [include] section can just contain the <span class="string">"files"</span> setting.  This</span><br><span class="line">; setting can list multiple files (separated by whitespace or</span><br><span class="line">; newlines).  It can also contain wildcards.  The filenames are</span><br><span class="line">; interpreted as relative to this file.  Included files *cannot*</span><br><span class="line">; include files themselves.</span><br><span class="line">[inet_http_server]          ; 采用HTPP连接supervisord server，默认关闭</span><br><span class="line">port=0.0.0.0:9008           ; 指定可以连接supervisord server的ip地址及其所使用的端口号，*:port针对任何ip开放连接权限</span><br><span class="line">username=best               ; 指定supervisorctl连接时需要使用的用户名，默认不需用户名</span><br><span class="line">password=best8***</span><br><span class="line">[include]</span><br><span class="line">files = /etc/supervisor/conf.d/*.ini  ; *.ini 代表所有某目录下所有的 ini配置文件，后缀名可以为`.conf或者.ini`</span><br></pre></td></tr></table></figure><p>注意看最后有中文注释的地方，配置端口，用户名和密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">port=0.0.0.0:9008           ; 指定可以连接supervisord server的ip地址及其所使用的端口号，*:port针对任何ip开放连接权限</span><br><span class="line">username=best               ; 指定supervisorctl连接时需要使用的用户名，默认不需用户名</span><br><span class="line">password=best8***</span><br></pre></td></tr></table></figure><p>然后浏览器打开相应地址就能看到监控界面啦！跟 ActiveMQ 监控界面类似，不过 Supervisor 要简单许多！<br>如下图</p><p><img src="http://oov0wb0gl.bkt.clouddn.com/2017-06-21-14980199749706.jpg" alt=""></p><h2 id="其他选项"><a href="#其他选项" class="headerlink" title="其他选项"></a>其他选项</h2><p>具体请参考 <a href="http://supervisord.org/" target="_blank" rel="noopener">supervisor文档</a></p><p>Enjoy！！！</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;为何使用-Supervisor&quot;&gt;&lt;a href=&quot;#为何使用-Supervisor&quot; class=&quot;headerlink&quot; title=&quot;为何使用 Supervisor&quot;&gt;&lt;/a&gt;为何使用 Supervisor&lt;/h1&gt;&lt;p&gt;由于公司项目需求，需要将服务器内核升级为高版本。而定制版阿里云服务器不允许用户自行更改内核，于是只好格式化原服务器，选择 Ubuntu 系统 重新安装各种软件。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://cuijing.me/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://cuijing.me/tags/Linux/"/>
    
      <category term="Supervisor" scheme="http://cuijing.me/tags/Supervisor/"/>
    
      <category term="进程管理" scheme="http://cuijing.me/tags/%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>多说评论关闭</title>
    <link href="http://cuijing.me/2017/06/12/Blog/%E5%A4%9A%E8%AF%B4%E8%AF%84%E8%AE%BA%E5%85%B3%E9%97%AD/"/>
    <id>http://cuijing.me/2017/06/12/Blog/多说评论关闭/</id>
    <published>2017-06-12T13:58:48.000Z</published>
    <updated>2018-03-08T15:04:13.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="评论不见了"><a href="#评论不见了" class="headerlink" title="评论不见了"></a>评论不见了</h1><p>今早登录博客，发现博客的评论全不在了。<br><a id="more"></a><br>不要着急，慢慢排查。</p><h2 id="查看主题配置"><a href="#查看主题配置" class="headerlink" title="查看主题配置"></a>查看主题配置</h2><p>难道是是我之前更新文章时，不小心改动啥配置，于是查找HEXO 主题配置 <code>_config.yml</code></p><p><img src="http://oov0wb0gl.bkt.clouddn.com/2017-06-12-14972764897779.jpg" alt=""></p><p>配置是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">duoshuo: &quot;cuijing&quot;</span><br></pre></td></tr></table></figure></p><p>已确认开启了哇！？！？</p><h2 id="查看网络情况"><a href="#查看网络情况" class="headerlink" title="查看网络情况"></a>查看网络情况</h2><p>难道是住处网络问题，于是查看用手机分享 WiFi 给 Mac使用，发现还是看不到评论。</p><p>把 云强 VPN 挂起来 再试，依然依然 看不到评论。</p><p>难道不是网络问题，是官网配置过期了吗？</p><h2 id="查看多说官网"><a href="#查看多说官网" class="headerlink" title="查看多说官网"></a>查看多说官网</h2><p>输入多说评论俨然几个红色提醒：多说已于2017年6月1日关闭</p><p><img src="http://oov0wb0gl.bkt.clouddn.com/2017-06-12-14972769289963.jpg" alt=""></p><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><p>现在官网已经登录不了，数据已经不能恢复了，虽然数据很少，但也有点心塞。</p><p>不管怎样，也曾有它几年的陪伴，在此祝多说插件一路走好！！！</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;评论不见了&quot;&gt;&lt;a href=&quot;#评论不见了&quot; class=&quot;headerlink&quot; title=&quot;评论不见了&quot;&gt;&lt;/a&gt;评论不见了&lt;/h1&gt;&lt;p&gt;今早登录博客，发现博客的评论全不在了。&lt;br&gt;
    
    </summary>
    
    
      <category term="多说" scheme="http://cuijing.me/tags/%E5%A4%9A%E8%AF%B4/"/>
    
      <category term="hexo" scheme="http://cuijing.me/tags/hexo/"/>
    
      <category term="评论系统" scheme="http://cuijing.me/tags/%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>Java NIO 编程</title>
    <link href="http://cuijing.me/2017/06/02/HTTP/5-NIO/"/>
    <id>http://cuijing.me/2017/06/02/HTTP/5-NIO/</id>
    <published>2017-06-02T12:30:00.000Z</published>
    <updated>2018-04-03T11:41:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="NIO-教程"><a href="#NIO-教程" class="headerlink" title="NIO 教程"></a>NIO 教程</h2><p>这部分的内容，推荐一下的学习系列。<br><a href="http://ifeve.com/java-nio-all/" target="_blank" rel="noopener">http://ifeve.com/java-nio-all/</a><br><a id="more"></a><br>Java NIO 系列教程（一）<br>Java NIO 概述 <a href="http://ifeve.com/overview/" target="_blank" rel="noopener">http://ifeve.com/overview/</a><br>其中 Java NIO 中三个非常重要的概念<br>Channel <a href="http://ifeve.com/channels/" target="_blank" rel="noopener">http://ifeve.com/channels/</a><br>buffers <a href="http://ifeve.com/buffers/" target="_blank" rel="noopener">http://ifeve.com/buffers/</a><br>selectors <a href="http://ifeve.com/selectors/" target="_blank" rel="noopener">http://ifeve.com/selectors/</a></p><h2 id="NIO-的原理"><a href="#NIO-的原理" class="headerlink" title="NIO 的原理"></a>NIO 的原理</h2><p><img src="http://oov0wb0gl.bkt.clouddn.com/2018-04-03-NIO非阻塞式服务器示意图.png" alt="NIO非阻塞式服务器示意图"></p><p>从图中可以看出，服务器上所有 Channel（包括 ServerSocketChannel 和 SocketChannel ）都需要向Selector 注册，而该 Selector 则负责监视这些 Socket 的 IO 状态，当其中任意一个或者多个 Channel 具有可用的 IO 操作时，该 Selector 的 <code>select()</code> 方法将会返回大于 0 的整数，该整数值就表示该 Selector 上有多少个 Channel 具有可用的IO操作，并提供了 <code>selectedKeys()</code> 方法来返回这些 Channel 对应的 SelectionKey 集合。正是通过 Selector，使得服务器端只需要不断地调用 Selector 实例的 <code>select()</code> 方法即可知道当前所有 Channel 是否有需要处理的 IO 操作。</p><p>Java NIO 与 IO<br>同步阻塞式IO和非阻塞<br><a href="http://ifeve.com/java-nio-vs-io/" target="_blank" rel="noopener">http://ifeve.com/java-nio-vs-io/</a></p><p>具体例子学习<br>BIO，NIO，AIO<br><a href="https://blog.csdn.net/anxpp/article/details/51512200" target="_blank" rel="noopener">https://blog.csdn.net/anxpp/article/details/51512200</a><br><img src="http://oov0wb0gl.bkt.clouddn.com/2018-04-07-各种IO对比.png" alt="各种IO对比"></p><h2 id="Netty-框架"><a href="#Netty-框架" class="headerlink" title="Netty 框架"></a>Netty 框架</h2><p>netty 原理<br>netty 的通信模型<br><a href="http://www.importnew.com/15656.html" target="_blank" rel="noopener">http://www.importnew.com/15656.html</a><br><img src="http://oov0wb0gl.bkt.clouddn.com/2018-04-03-NIO 模型-1.png" alt="NIO 模型"></p><h3 id="netty的逻辑架构介绍"><a href="#netty的逻辑架构介绍" class="headerlink" title="netty的逻辑架构介绍"></a>netty的逻辑架构介绍</h3><p><img src="http://oov0wb0gl.bkt.clouddn.com/2018-04-03-Netty 逻辑架构.png" alt="Netty 逻辑架构"></p><ul><li><p>Reactor通信调度层：主要职责监听网络的读写和连接操作，负责将网络层的数据读取到内存缓冲区中，然后触发各种网络事件，例如连接创建、连接激活、读事件、写事件等，将这些事件触发到Pipeline中，由Pipeline管理的职责链进行后续处理。由一系列的辅助类完成，包括Reactor线程NioeventLoop以及父类、NioSocketChannel、ButeBuffer等。</p></li><li><p>职责链ChannelPipeline：负责事件在职责链中有序传播，同时负责动态地编排职责链。职责链可以选择监听和处理自己关心的事件，可以拦截处理和向后/向前传播事件。</p></li><li><p>业务逻辑编排层（service ChannelHandler）：分为两类，一类是纯粹的业务逻辑编排，一类是其他的应用层协议插件</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;NIO-教程&quot;&gt;&lt;a href=&quot;#NIO-教程&quot; class=&quot;headerlink&quot; title=&quot;NIO 教程&quot;&gt;&lt;/a&gt;NIO 教程&lt;/h2&gt;&lt;p&gt;这部分的内容，推荐一下的学习系列。&lt;br&gt;&lt;a href=&quot;http://ifeve.com/java-nio-all/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://ifeve.com/java-nio-all/&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="网络编程" scheme="http://cuijing.me/categories/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="网络编程" scheme="http://cuijing.me/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
      <category term="NIO" scheme="http://cuijing.me/tags/NIO/"/>
    
  </entry>
  
  <entry>
    <title>Java 虚拟机 类加载器总结</title>
    <link href="http://cuijing.me/2017/03/18/JVM/Java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%80%BB%E7%BB%93/"/>
    <id>http://cuijing.me/2017/03/18/JVM/Java类加载总结/</id>
    <published>2017-03-18T00:30:00.000Z</published>
    <updated>2018-02-21T12:13:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-类的加载过程"><a href="#1-类的加载过程" class="headerlink" title="1. 类的加载过程"></a>1. 类的加载过程</h2><p>JVM将类加载过程分为主要三个步骤：加载（Loading），链接（Linking）和初始化（Initialize）链接又分为三个步骤，如下图所示类的生命周期：<br><a id="more"></a><br><img src="http://oov0wb0gl.bkt.clouddn.com/2018-04-08-类加载过程.png" alt="类加载过程"></p><ol><li><p>加载：查找并加载类的二进制数据；</p></li><li><p>链接：</p><ol><li>验证：确保被加载类的正确性；</li><li>准备：为类的静态变量分配内存，并将其初始化为默认值；</li><li>解析：把类中的符号引用转换为直接引用；</li></ol></li><li><p>初始化：为类的静态变量赋予正确的初始值；</p></li></ol><p>那为什么我要有验证这一步骤呢？首先如果由编译器生成的class文件，它肯定是符合JVM字节码格式的，但是万一有高手自己写一个 class 文件，让 JVM 加载并运行，用于恶意用途，就不妙了，因此这个 class 文件要先过验证这一关，不符合的话不会让它继续执行的，也是为了安全考虑吧。</p><p>准备阶段和初始化阶段看似有点矛盾，其实是不矛盾的，如果类中有语句：<code>private static int a = 10</code>，它的执行过程是这样的，首先字节码文件被加载到内存后，先进行链接的验证这一步骤，验证通过后准备阶段，给 a 分配内存，因为变量 a 是 static 的，所以此时a等于int类型的默认初始值 0，即 <code>a=0</code> ,然后到解析（后面在说），到初始化这一步骤时，才把 a 的真正的值 10 赋给 a ，此时 <code>a=10</code>。</p><h2 id="2-类的初始化"><a href="#2-类的初始化" class="headerlink" title="2. 类的初始化"></a>2. 类的初始化</h2><p>类什么时候才被初始化：</p><ol><li>创建类的实例，也就是 new 一个对象</li><li>访问某个类或接口的静态变量，或者对该静态变量赋值</li><li>调用类的静态方法</li><li>反射 <code>Class.forName(&quot;me.cuijing.load&quot;)</code></li><li>初始化一个类的子类（会首先初始化子类的父类）</li><li>JVM启动时标明的启动类，即文件名和类名相同的那个类</li></ol><p>只有这6中情况才会导致类的类的初始化。</p><h3 id="类的初始化步骤："><a href="#类的初始化步骤：" class="headerlink" title="类的初始化步骤："></a>类的初始化步骤：</h3><ol><li><p>如果这个类还没有被加载和链接，那先进行加载和链接</p></li><li><p>假如这个类存在直接父类，并且这个类还没有被初始化（注意：在一个类加载器中，类只能初始化一次），那就初始化直接的父类（不适用于接口）</p></li><li><p>加入类中存在初始化语句（如 static 变量和 static 块），那就依次执行这些初始化语句。</p></li></ol><h2 id="3-类的加载"><a href="#3-类的加载" class="headerlink" title="3. 类的加载"></a>3. 类的加载</h2><p>类的加载指的是将类的 <code>.class</code> 文件中的二进制数据读入到内存中，将其放在运行时数据区的方法区内，然后在堆区创建一个这个类的 <code>java.lang.Class</code> 对象，用来封装类在方法区类的对象。</p><p><img src="http://oov0wb0gl.bkt.clouddn.com/2017-06-06-14952769864695.jpg" alt=""></p><p><img src="http://oov0wb0gl.bkt.clouddn.com/2017-06-06-14952769933082.jpg" alt=""></p><p>类的加载的最终产品是位于堆区中的 Class 对象，Class 对象封装了类在方法区内的数据结构，并且向Java程序员提供了访问方法区内的数据结构的接口。</p><p>加载类的方式有以下几种：</p><ol><li>从本地系统直接加载</li><li>通过网络下载.class文件</li><li>从zip，jar等归档文件中加载.class文件</li><li>从专有数据库中提取.class文件</li><li>将Java源文件动态编译为.class文件（服务器）</li></ol><h2 id="4-加载器"><a href="#4-加载器" class="headerlink" title="4. 加载器"></a>4. 加载器</h2><p>JVM的类加载是通过<code>ClassLoader</code>及其子类来完成的，类的层次关系和加载顺序可以由下图来描述：<br><img src="http://oov0wb0gl.bkt.clouddn.com/2017-06-06-14952770145847.jpg" alt=""></p><ol><li><code>Bootstrap ClassLoader</code>: 负责加载<code>$JAVA_HOME</code>中<code>jre/lib/rt.jar</code>里所有的<code>class</code>，由C++实现，不是ClassLoader子类</li><li><code>Extension ClassLoader</code>: 负责加载java平台中扩展功能的一些jar包，包括<code>$JAVA_HOME</code>中<code>jre/lib/*.jar或-Djava.ext.dirs</code>指定目录下的jar包</li><li><code>App ClassLoader</code>: 负责记载<code>classpath</code>中指定的jar包及目录中<code>class</code></li><li><code>Custom ClassLoader</code>: 属于应用程序根据自身需要自定义的<code>ClassLoader</code>，如<code>tomcat、jboss</code>都会根据j2ee规范自行实现<code>ClassLoader</code></li></ol><p>加载过程中会先检查类是否被已加载，检查顺序是自底向上，从<code>Custom ClassLoader</code>到<code>BootStrap ClassLoader</code>逐层检查，只要某个<code>classloader</code>已加载就视为已加载此类，保证此类只所有ClassLoader加载一次。而加载的顺序是自顶向下，也就是由上层来逐层尝试加载此类。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-类的加载过程&quot;&gt;&lt;a href=&quot;#1-类的加载过程&quot; class=&quot;headerlink&quot; title=&quot;1. 类的加载过程&quot;&gt;&lt;/a&gt;1. 类的加载过程&lt;/h2&gt;&lt;p&gt;JVM将类加载过程分为主要三个步骤：加载（Loading），链接（Linking）和初始化（Initialize）链接又分为三个步骤，如下图所示类的生命周期：&lt;br&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://cuijing.me/tags/Java/"/>
    
      <category term="JVM" scheme="http://cuijing.me/tags/JVM/"/>
    
      <category term="类加载器" scheme="http://cuijing.me/tags/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>网络编程基础原理探究</title>
    <link href="http://cuijing.me/2016/07/01/HTTP/4-Java-socket-%E5%8E%9F%E7%90%86%E6%8E%A2%E7%A9%B6/"/>
    <id>http://cuijing.me/2016/07/01/HTTP/4-Java-socket-原理探究/</id>
    <published>2016-07-01T12:30:00.000Z</published>
    <updated>2018-04-03T11:41:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="初衷"><a href="#初衷" class="headerlink" title="初衷"></a>初衷</h2><p>网络 socket 编程大概内容知道，但是具体原理不清楚，这次具体探究一下。<br><a id="more"></a></p><h2 id="tcp-ip-基础"><a href="#tcp-ip-基础" class="headerlink" title="tcp/ip 基础"></a>tcp/ip 基础</h2><h3 id="IP-协议头部"><a href="#IP-协议头部" class="headerlink" title="IP 协议头部"></a>IP 协议头部</h3><p><img src="http://oov0wb0gl.bkt.clouddn.com/2018-04-03-IP 协议首部-1.jpg" alt="IP 协议首部"></p><ul><li><p>版本 Version 字段：占 4 比特。用来表明IP协议实现的版本号，当前一般为 IPv4，即 0100。</p></li><li><p>报头长度 Internet Header Length (IHL) 字段：占 4比特。是头部占32比特的数字，包括可选项。普通IP数据报（没有任何选项），该字段的值是 5，即 160 比特 等于 20 字节。此字段最大值为 60 字节。</p></li><li><p>服务类型 Type of Service (TOS) 字段：占8比特。其中前3比特为优先权子字段（Precedence，现已被忽略）。第8比特保留未用。第4至第7比特分别代表延迟、吞吐量、可靠性和花费。当它们取值为1时分别代表要求最小时延、最大吞吐量、最高可靠性和最小费用。这4比特的服务类型中只能置其中1比特为1。可以全为0，若全为0则表示一般服务。服务类型字段声明了数据报被网络系统传输时可以被怎样处理。例如：TELNET 协议可能要求有最小的延迟，FTP 协议（数据）可能要求有最大吞吐量，SNMP协议可能要求有最高可靠性，NNTP（Network News Transfer Protocol，网络新闻传输协议）可能要求最小费用，而ICMP协议可能无特殊要求（4比特全为0）。实际上，大部分主机会忽略这个字段，但一些动态路由协议如OSPF（Open Shortest Path First Protocol）、IS-IS（Intermediate System to Intermediate System Protocol）可以根据这些字段的值进行路由决策。</p></li><li><p>总长度字段：占16比特。指明整个数据报的长度（以字节为单位）。最大长度为65535字节。</p></li><li><p>标志字段 Identifier ：占16比特。用来唯一地标识主机发送的每一份数据报。通常每发一份报文，它的值会加1。</p></li><li><p>标志位字段 Flags ：占3比特。标志一份数据报是否要求分段。</p></li><li><p>段偏移字段 Fragment Offset：占13比特。如果一份数据报要求分段的话，此字段指明该段偏移距原始数据报开始的位置。</p></li><li><p>生存期 TTL (Time to Live) 字段：占8比特。用来设置数据报最多可以经过的路由器数。由发送数据的源主机设置，通常为32、64、128等。每经过一个路由器，其值减1，直到0时该数据报被丢弃。</p></li><li><p>协议字段 Protocol：占8比特。指明IP层所封装的上层协议类型，如ICMP（1）、IGMP（2） 、TCP（6）、UDP（17）等。</p></li><li><p>头部校验和字段 Header Checksum：占 16 比特。内容是根据IP头部计算得到的校验和码。计算方法是：对头部中每个16比特进行二进制反码求和。（和ICMP、IGMP、TCP、UDP不同，IP不对头部后的数据进行校验）。</p></li><li><p>源IP地址、目标IP地址字段：各占 32 比特。用来标明发送IP数据报文的源主机地址和接收IP报文的目标主机地址。</p></li><li><p>可选项字段：占32比特。用来定义一些任选项：如记录路径、时间戳等。这些选项很少被使用，同时并不是所有主机和路由器都支持这些选项。可选项字段的长度必须是32比特的整数倍，如果不足，必须填充0以达到此长度要求。</p></li></ul><h3 id="TCP-协议头部"><a href="#TCP-协议头部" class="headerlink" title="TCP 协议头部"></a>TCP 协议头部</h3><p><img src="http://oov0wb0gl.bkt.clouddn.com/2018-04-03-tcp 协议.png" alt="tcp 协议"></p><ul><li><p>端口号 [16bit]：网络实现的是不同主机的进程之间的通信。在一个操作系统中有很多进程，当数据到来时要提交给哪个进程进行处理呢？这就需要用到端口号。在TCP头中，有源端口号（Source Port）和目标端口号（Destination Port）。源端口号标识了发送主机的进程，目标端口号标识接受方主机的进程。</p></li><li><p>序号 [32bit]：序号分为发送序号（Sequence Number）和确认序号（Acknowledgment Number）。</p><ol><li><p>发送序号：用来标识从 TCP 源端向 TCP 目的端发送的数据字节流，它表示在这个报文段中的第一个数据字节的顺序号。如果将字节流看作在两个应用程序间的单向流动，则 TCP用顺序号对每个字节进行计数。序号是 32bit 的无符号数，序号到达 2^32 －1 后又从 0 开始。当建立一个新的连接时， SYN 标志变 1，顺序号字段包含由这个主机选择的该连接的初始顺序号 ISN（Initial Sequence Number）。</p></li><li><p>确认序号：包含发送确认的一端所期望收到的下一个顺序号。因此，确认序号应当是上次已成功收到数据字节顺序号加 1。只有 ACK 标志为 1 时确认序号字段才有效。 TCP 为应用层提供全双工服务，这意味数据能在两个方向上独立地进行传输。因此，连接的每一端必须保持每个方向上的传输数据顺序号。</p></li></ol></li><li><p>数据偏移 [4bit]：这里的偏移实际指的是 TCP 首部的长度，它用来表明 TCP 首部中 32bit 字的数目，通过它可以知道一个 TCP 包它的用户数据是从哪里开始的。这个字段占 4bit，如 4bit 的值是 0101，则说明 TCP 首部长度是5 <em> 4 = 20字节。 所以 TCP 的首部长度最大为15 </em> 4 = 60字节。然而没有可选字段，正常长度为 20 字节。</p></li><li><p>保留位 Reserved [6bit]：目前没有使用，它的值都为 0</p></li><li><p>标志位 [6bit]：在 TCP 首部中有 6 个标志比特。他们中的多个可同时被置为 1 。</p><ol><li>URG 紧急指针（urgent pointer）有效</li><li>ACK 确认序号有效</li><li>PSH 指示接收方应该尽快将这个报文段交给应用层而不用等待缓冲区装满</li><li>RST 一般表示断开一个连接</li><li>SYN 同步序号用来发起一个连接</li><li>FIN 发送端完成发送任务（即断开连接）</li></ol></li><li><p>窗口大小（window）[16bit]：窗口的大小，表示源方法最多能接受的字节数。</p></li><li><p>校验和[16bit]：校验和覆盖了整个的 TCP 报文段: TCP 首部和 TCP 数据。这是一个强制性的字段，一定是由发端计算和存储，并由收端进行验证。</p></li><li><p>紧急指针[16bit]：只有当 URG 标志置为1时紧急指针才有效。紧急指针是一个正的偏移量，和序号字段中的值相加表示紧急数据最后一个字节的序号。TCP 的紧急方式是发送端向另一端发送紧急数据的一种方式。</p></li><li><p>TCP选项：是可选的。</p></li></ul><h3 id="tcp-ip-协议栈"><a href="#tcp-ip-协议栈" class="headerlink" title="tcp/ip 协议栈"></a>tcp/ip 协议栈</h3><p><img src="http://oov0wb0gl.bkt.clouddn.com/2018-04-03-tcp.png" alt="tcp"></p><h3 id="tcp-ip-包的封装与解析"><a href="#tcp-ip-包的封装与解析" class="headerlink" title="tcp/ip 包的封装与解析"></a>tcp/ip 包的封装与解析</h3><p><img src="http://oov0wb0gl.bkt.clouddn.com/2018-04-07-15230980806189.jpg" alt=""></p><h3 id="tcp-ip-状态变迁"><a href="#tcp-ip-状态变迁" class="headerlink" title="tcp/ip 状态变迁"></a>tcp/ip 状态变迁</h3><p>TCP 客户端状态变迁图<br><img src="http://oov0wb0gl.bkt.clouddn.com/2018-04-07-TCP-client-状态机.png" alt="TCP-client-状态机"></p><p>TCP 服务端状态变迁图<br><img src="http://oov0wb0gl.bkt.clouddn.com/2018-04-07-TCP-Service-状态机.png" alt="TCP-Service-状态机"></p><ul><li><p>CLOSED：表示初始状态。对服务端和 C 客户端双方都一样。</p></li><li><p>LISTEN：表示监听状态。服务端调用了 listen 函数，可以开始 accept 连接了。</p></li><li><p>SYN_SENT：表示客户端已经发送了 SYN 报文。当客户端调用 connect 函数发起连接时，首先发 SYN 给服务端，然后自己进入 SYN_SENT 状态，并等待服务端发送 ACK + SYN 。</p></li><li><p>SYN_RCVD：表示服务端收到客户端发送 SYN 报文。服务端收到这个报文后，进入SYN_RCVD状态，然后发送 ACK + SYN 给客户端。</p></li><li><p>ESTABLISHED：表示连接已经建立成功了。服务端发送完 ACK + SYN 后进入该状态，客户端收到 ACK 后也进入该状态。</p></li><li><p>FIN_WAIT_1：表示主动关闭连接。无论哪方调用 close 函数发送 FIN 报文都会进入这个这个状态。</p></li><li><p>FIN_WAIT_2：表示被动关闭方同意关闭连接。主动关闭连接方收到被动关闭方返回的 ACK 后，会进入该状态。</p></li><li><p>TIME_WAIT：表示收到对方的FIN报文并发送了 ACK 报文，就等 2MSL 后即可回到 CLOSED 状态了。如果 FIN_WAIT_1 状态下，收到对方同时带FIN标志和ACK标志的报文时，可以直接进入TIME_WAIT状态，而无须经过 FIN_WAIT_2 状态。</p></li><li><p>CLOSING：表示双方同时关闭连接。如果双方几乎同时调用 close 函数，那么会出现双方同时发送FIN报文的情况，就会出现 CLOSING 状态，表示双方都在关闭连接。</p></li><li><p>CLOSE_WAIT：表示被动关闭方等待关闭。当收到对方调用 close 函数发送的FIN报文时，回应对方 ACK 报文，此时进入 CLOSE_WAIT 状态。</p></li><li><p>LAST_ACK：表示被动关闭方发送 FIN 报文后，等待对方的 ACK 报文状态，当收到 ACK 后进入 CLOSED 状态。</p></li></ul><h3 id="TCP-建立连接和释放链接"><a href="#TCP-建立连接和释放链接" class="headerlink" title="TCP 建立连接和释放链接"></a>TCP 建立连接和释放链接</h3><p><img src="http://oov0wb0gl.bkt.clouddn.com/2018-04-07-15230977340828.jpg" alt=""></p><h4 id="建立连接"><a href="#建立连接" class="headerlink" title="建立连接"></a>建立连接</h4><p>设主机 B 运行一个服务器进程，它先发出一个被动打开命令，告诉它的 TCP 要准备接收客户进程的连续请求，然后服务进程就处于听的状态。不断检测是否有客户进程发起连接请求，如有，作出响应。</p><p>设客户进程运行在主机 A 中，他先向自己的 TCP 发出主动打开的命令，表明要向某个 IP 地址的某个端口建立运输连接，过程如下：</p><ol><li>主机 A 的 TCP 向主机 B的 TCP 发出连接请求报文段，其首部中的同步比特 SYN 应置1，同时选择一个序号 x，表明在后面传送数据时的第一个数据字节的序号是 x。</li><li>主机 B 的 TCP 收到连接请求报文段后，如同意，则发送确认。在确认报文段中应将 SYN 置为 1，确认号应为 x+1，同时也为自己选择一个序号 y</li><li>主机 A 的 TCP 收到此报文段后，还要向 B 给出确认，其确认号为 y+1</li><li>主机 A 的 TCP 通知上层应用进程，连接已经建立，当主机 B的 TCP 收到主机 A 的确认后，也通知上层应用进程，连接建立。</li></ol><h4 id="释放连接"><a href="#释放连接" class="headerlink" title="释放连接"></a>释放连接</h4><p>在数据传输完毕之后，通信双方都可以发出释放连接的请求。释放连接的过程为如上图所示：</p><ol><li>数据传输结束后，主机 A 的应用进程先向其 TCP 发出释放连接请求，不在发送数据。TCP 通知对方要释放从 A 到 B 的连接，将发往主机 B 的 TCP 报文段首部的终止比特 FIN 置为 1，序号 u 等于已传送数据的最后一个字节的序号加 1。</li><li>主机 B 的 TCP 收到释放连接通知后发出确认，其序号为 u+1，同时通知应用进程，这样 A 到 B 的连接就释放了，连接处于半关闭状态。主机 B 不再接受主机 A 发来的数据；但主机 B 还向 A 发送数据，主机 A若正确接收数据仍需要发送确认。</li><li>在主机 B 向主机 A 的数据发送结束后，其应用进程就通知 TCP 释放连接。主机 B 发出的连接释放报文段必须将终止比特置为 1，并使其序号w等于前面已经传送过的数据的最后一个字节的序号加 1，还必须重复上次已发送过的 ACK = u+1。</li><li>主机 A 对主机 B 的连接释放报文段发出确认，将 ACK 置为 1，ACK = w+1, seq = u+1。这样才把从 B 到A 的反方向连接释放掉，主机 A 的 TCP 再向其应用进程报告，整个连接已经全部释放。</li></ol><h3 id="socket"><a href="#socket" class="headerlink" title="socket"></a>socket</h3><p>什么是 socket，就是标识一条连接的四元组（源IP，源端口，目的IP，目的端口），socket 主要是为了实现一切皆文件的理念</p><h3 id="网络监控和问题定位"><a href="#网络监控和问题定位" class="headerlink" title="网络监控和问题定位"></a>网络监控和问题定位</h3><h4 id="1-netstat-ss-监控工具"><a href="#1-netstat-ss-监控工具" class="headerlink" title="1. netstat/ss 监控工具"></a>1. <code>netstat/ss</code> 监控工具</h4><p>查看目前的连接的具体情况 <code>netstat -antp | grep</code> (可以是进程，端口，IP)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 各字段的说明如下：</span></span><br><span class="line">Proto:协议，可以是 tcp udp 还有 unix</span><br><span class="line">Recv-Q 接收队列的堆积</span><br><span class="line">Send-Q 发送队列的堆积</span><br><span class="line">Local Adress 本地的IP和端口地址</span><br><span class="line">Foreign Adderss 其他机器的IP地址和端口</span><br><span class="line">State 连接的状态</span><br><span class="line">Pid,Program name 进程号，这个输出和当前用户的权限有关</span><br></pre></td></tr></table></figure><h4 id="2-watch-netstat-s-查看网络的统计信息"><a href="#2-watch-netstat-s-查看网络的统计信息" class="headerlink" title="2. watch netstat -s 查看网络的统计信息"></a>2. <code>watch netstat -s</code> 查看网络的统计信息</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">显示的各协议的统计数据，对于tcp协议来说以下的几个指标要注意</span><br><span class="line">Tcp:</span><br><span class="line">110438168 active connections openings</span><br><span class="line">30277927 passive connection openings</span><br><span class="line">4632847 failed connection attempts</span><br><span class="line">2619908 connection resets received</span><br><span class="line">79 connections established</span><br><span class="line">2141523628 segments received</span><br><span class="line">718706804 segments send out</span><br><span class="line">6475429 segments retransmited</span><br><span class="line">1 bad segments received.</span><br><span class="line">6433848 resets sent</span><br></pre></td></tr></table></figure><h4 id="3-usr-sbin-ss-s-查看网络的统计信息"><a href="#3-usr-sbin-ss-s-查看网络的统计信息" class="headerlink" title="3. /usr/sbin/ss -s 查看网络的统计信息"></a>3. <code>/usr/sbin/ss -s</code> 查看网络的统计信息</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">查看网卡的流量 sar -n DEV 1 100</span><br><span class="line">sar-ndev.png</span><br><span class="line">各字段的含义如下</span><br><span class="line">IFACE</span><br><span class="line">Name of the network interface <span class="keyword">for</span> <span class="built_in">which</span> statistics are reported.</span><br><span class="line">rxpck/s</span><br><span class="line">Total number of packets received per second.</span><br><span class="line">txpck/s</span><br><span class="line">Total number of packets transmitted per second.</span><br><span class="line">rxbyt/s</span><br><span class="line">Total number of bytes received per second.</span><br><span class="line">txbyt/s</span><br><span class="line">Total number of bytes transmitted per second.</span><br><span class="line">rxcmp/s</span><br><span class="line">Number of compressed packets received per second (<span class="keyword">for</span> cslip etc.).</span><br><span class="line">txcmp/s</span><br><span class="line">Number of compressed packets transmitted per second.</span><br><span class="line">rxmcst/s</span><br><span class="line">Number of multicast packets received per second</span><br></pre></td></tr></table></figure><h3 id="4-tcpdump-wireshark-分析工具"><a href="#4-tcpdump-wireshark-分析工具" class="headerlink" title="4. tcpdump/wireshark 分析工具"></a>4. <code>tcpdump/wireshark</code> 分析工具</h3><p><strong>tcpdump 抓包</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 其中i指定网卡，另外可以增加抓包的过滤表达式</span></span><br><span class="line">sudo -u root /usr/sbin/tcpdump -i eth0 -nn <span class="string">'port 80'</span> -w data.pcap</span><br></pre></td></tr></table></figure><p><strong>wireshark分析</strong><br>tcpdump 生成的pcap文件，可以通过wireshark来分析打开</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;初衷&quot;&gt;&lt;a href=&quot;#初衷&quot; class=&quot;headerlink&quot; title=&quot;初衷&quot;&gt;&lt;/a&gt;初衷&lt;/h2&gt;&lt;p&gt;网络 socket 编程大概内容知道，但是具体原理不清楚，这次具体探究一下。&lt;br&gt;
    
    </summary>
    
      <category term="网络编程" scheme="http://cuijing.me/categories/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="HTTP" scheme="http://cuijing.me/tags/HTTP/"/>
    
      <category term="网络编程" scheme="http://cuijing.me/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之 复合模式</title>
    <link href="http://cuijing.me/2016/05/20/Design-Pattern/14-Compound/"/>
    <id>http://cuijing.me/2016/05/20/Design-Pattern/14-Compound/</id>
    <published>2016-05-20T00:30:00.000Z</published>
    <updated>2016-06-03T13:23:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="复合模式-Compound-Pattern"><a href="#复合模式-Compound-Pattern" class="headerlink" title="复合模式 Compound Pattern"></a>复合模式 Compound Pattern</h1><p>在形式上，复合模式确实是多个模式的组合，但满足了这一条并不一定是复合模式，注意它的定义：将多个模式结合起来形成一个“框架”，以解决一般性问题，一提到“框架”，可能最容易联想到的就是MVC吧，不过MVC确实是一个经典的复合模式。<br><a id="more"></a></p><h2 id="MVC与复合模式"><a href="#MVC与复合模式" class="headerlink" title="MVC与复合模式"></a>MVC与复合模式</h2><p>Model，View，Controller各自的职责：</p><p>这里不得不强调一下控制逻辑与应用逻辑（算法逻辑）的区别：<br>所谓控制逻辑，就是判断在当前情景下应该调用什么对象的什么方法<br>而应用逻辑指的是具体对象的具体方法的内部实现（某个复杂的算法，或者一系列的具体处理）<br>（非要细说的话，View里面其实也包含了一点控制逻辑（根据用户动作判断应该调用哪一个Controller），当然，一般情况我们都把这点逻辑忽略不计的）</p><p>MVC的最大优点就是把表现层View与模型Model分离，实现了设计上的松耦合（应对变化）以及代码的复用（View可以随便换，只需要改改新View里面那一丁点儿控制逻辑就好了）</p><p>前面说过了MVC是一种复合模式，那它到底复合了哪些模式，一起看看：</p><h3 id="观察者模式："><a href="#观察者模式：" class="headerlink" title="观察者模式："></a>观察者模式：</h3><p><img src="http://oov0wb0gl.bkt.clouddn.com/2017-06-06-14967177433556.jpg?imageMogr2/blur/1x0/quality/50|imageslim" alt=""></p><p>模型实现观察者模式，当 Model 的状态改变时，相关对象将持续更。使用观察者模式可以让模型完全独立于视图和控制器，同一个模型可以使用不同的视图，甚至可以同时使用多个视图。</p><p>V和C都是M的观察者（Model的状态更新要及时通知V更新视图，或者通知C做相应逻辑处理）</p><h3 id="策略模式："><a href="#策略模式：" class="headerlink" title="策略模式："></a>策略模式：</h3><p><img src="http://oov0wb0gl.bkt.clouddn.com/2017-06-06-14967177859197.jpg?imageMogr2/thumbnail/!50p/blur/1x0/quality/75|imageslim" alt=""></p><p>控制器和视图实现策略模式，控制器是视图的行为，视图根据用户的行为不同 委托 不同的控制器处理用户请求，所以说Controller是View的“策略”，所以View包含的控制逻辑就是“选择策略”，也就是选择控制器Controller。</p><p>使用策略模式可让视图和模型解耦，因为控制器负责和模型交换来传递用户的请求信息，对于工作是怎么完成的，视图是可以完全不知情的。</p><h3 id="组合模式："><a href="#组合模式：" class="headerlink" title="组合模式："></a>组合模式：</h3><p><img src="http://oov0wb0gl.bkt.clouddn.com/2017-06-06-14967178187558.jpg?imageMogr2/thumbnail/!50p/blur/1x0/quality/75|imageslim" alt=""></p><p>View的自身实现应用了组合模式（调用顶层容器的repaint方法，容器内的所有组件都会重绘）</p><p>手机显示框内，或者 web 界面，每个显示组件如果不是组合节点（窗口），就是叶节点（按钮），当控制器告诉视图更新时，只需告诉视图最顶层的组件，组合模式会处理其余的事。</p><p>MVC应用了多个模式，并能够较好的解决设计上的一般性问题，所以被称为复合模式</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;复合模式-Compound-Pattern&quot;&gt;&lt;a href=&quot;#复合模式-Compound-Pattern&quot; class=&quot;headerlink&quot; title=&quot;复合模式 Compound Pattern&quot;&gt;&lt;/a&gt;复合模式 Compound Pattern&lt;/h1&gt;&lt;p&gt;在形式上，复合模式确实是多个模式的组合，但满足了这一条并不一定是复合模式，注意它的定义：将多个模式结合起来形成一个“框架”，以解决一般性问题，一提到“框架”，可能最容易联想到的就是MVC吧，不过MVC确实是一个经典的复合模式。&lt;br&gt;
    
    </summary>
    
      <category term="Design Pattern" scheme="http://cuijing.me/categories/Design-Pattern/"/>
    
    
      <category term="Java" scheme="http://cuijing.me/tags/Java/"/>
    
      <category term="Design Pattern" scheme="http://cuijing.me/tags/Design-Pattern/"/>
    
      <category term="Compound" scheme="http://cuijing.me/tags/Compound/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之 代理模式</title>
    <link href="http://cuijing.me/2016/05/18/Design-Pattern/13-Proxy/"/>
    <id>http://cuijing.me/2016/05/18/Design-Pattern/13-Proxy/</id>
    <published>2016-05-18T00:30:00.000Z</published>
    <updated>2016-06-03T12:44:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="代理模式-Proxy-Pattern"><a href="#代理模式-Proxy-Pattern" class="headerlink" title="代理模式 Proxy Pattern"></a>代理模式 Proxy Pattern</h1><p>为另一个对象提供替身或者占位符以控制这个对象的访问。</p><p>通常代理类内含有一个被代理类的引用。<br><a id="more"></a></p><h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><p><img src="http://oov0wb0gl.bkt.clouddn.com/2017-06-06-14966730936066.jpg?imageMogr2/thumbnail/!50p/blur/1x0/quality/75|imageslim" alt=""></p><h2 id="代理分类"><a href="#代理分类" class="headerlink" title="代理分类"></a>代理分类</h2><h3 id="远程代理"><a href="#远程代理" class="headerlink" title="远程代理"></a>远程代理</h3><p>通过 RMI 和 JNDI 进行远程方法调用，在不同 JVM 中进行交互。</p><h3 id="虚拟代理"><a href="#虚拟代理" class="headerlink" title="虚拟代理"></a>虚拟代理</h3><p>通常利用代理对象来创建和销毁占用较多资源的被代理对象。用来延迟大资源对象的创建。</p><h3 id="动态代理-Dynamic-Proxy"><a href="#动态代理-Dynamic-Proxy" class="headerlink" title="动态代理 Dynamic Proxy"></a>动态代理 Dynamic Proxy</h3><p><img src="http://oov0wb0gl.bkt.clouddn.com/2017-06-06-14966740647238.jpg?imageMogr2/thumbnail/!50p/blur/1x0/quality/75|imageslim" alt=""></p><h4 id="java-lang-reflect-Proxy"><a href="#java-lang-reflect-Proxy" class="headerlink" title="java.lang.reflect.Proxy"></a>java.lang.reflect.Proxy</h4><p>Proxy 提供用于创建动态代理类和实例的静态方法，它还是由这些方法创建的所有动态代理类的超类</p><h4 id="InvocationHandler"><a href="#InvocationHandler" class="headerlink" title="InvocationHandler"></a>InvocationHandler</h4><p>是代理实例的调用处理程序实现的接口，每个代理实例都具有一个关联的调用处理程序。对代理实例调用方法时，将对方法调用进行编码并将其指派到它的调用处理程序的 invoke 方法。</p><h4 id="动态Proxy是这样的一种类"><a href="#动态Proxy是这样的一种类" class="headerlink" title="动态Proxy是这样的一种类:"></a>动态Proxy是这样的一种类:</h4><p>它是在运行生成的类，在生成时你必须提供一组Interface给它，然后该class就宣称它实现了这些interface。你可以把该class的实例当作这些interface中的任何一个来用。当然，这个Dynamic Proxy其实就是一个Proxy，它不会替你作实质性的工作，在生成它的实例时你必须提供一个handler，由它接管实际的工作。</p><h4 id="在使用动态代理类时，我们必须实现InvocationHandler接口"><a href="#在使用动态代理类时，我们必须实现InvocationHandler接口" class="headerlink" title="在使用动态代理类时，我们必须实现InvocationHandler接口"></a>在使用动态代理类时，我们必须实现<code>InvocationHandler</code>接口</h4><p>步骤：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、定义抽象角色 [共同的接口] :动态代理的使用，体会反射是动态语言的关键</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">action</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、定义真实角色 :被代理类</span></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">RealSubject</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println( <span class="string">"我是被代理类，记得要执行我！"</span> );</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3、定义代理角色 :定义代理类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">      Object obj;<span class="comment">// 实现了接口的被代理类的对象的声明</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 作用：①给被代理的对象实例化②返回一个代理类的对象</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> Object <span class="title">blind</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">             <span class="keyword">this</span>.obj = obj;</span><br><span class="line">             <span class="keyword">return</span> Proxy.newProxyInstance(obj.getClass().getClassLoader(), obj</span><br><span class="line">                        .getClass().getInterfaces(), <span class="keyword">this</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//当通过代理类的对象发起对被重写的方法的调用时，都会转换为对如下的invoke方法的调用</span></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span></span></span><br><span class="line"><span class="function">                   <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">             <span class="comment">//method方法的返回值时returnVal</span></span><br><span class="line">            Object returnVal = method.invoke(obj, args);</span><br><span class="line">            <span class="keyword">return</span> returnVal; </span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestProxy</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">             <span class="comment">//1.被代理类的对象</span></span><br><span class="line">            RealSubject real = <span class="keyword">new</span> RealSubject();</span><br><span class="line">             <span class="comment">//2.创建一个实现了InvacationHandler接口的代理类的对象</span></span><br><span class="line">            MyInvocationHandler handler = <span class="keyword">new</span> MyInvocationHandler();</span><br><span class="line">             <span class="comment">//3.调用blind()方法，动态的返回一个同样实现了real所在类实现的接口Subject的代理类的对象。</span></span><br><span class="line">            Object obj = handler.blind(real);</span><br><span class="line">            Subject sub = (Subject)obj; <span class="comment">//此时sub就是代理类的对象</span></span><br><span class="line">            sub.action(); <span class="comment">//转到对InvacationHandler接口的实现类的invoke()方法的调用</span></span><br><span class="line">                       </span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;代理模式-Proxy-Pattern&quot;&gt;&lt;a href=&quot;#代理模式-Proxy-Pattern&quot; class=&quot;headerlink&quot; title=&quot;代理模式 Proxy Pattern&quot;&gt;&lt;/a&gt;代理模式 Proxy Pattern&lt;/h1&gt;&lt;p&gt;为另一个对象提供替身或者占位符以控制这个对象的访问。&lt;/p&gt;
&lt;p&gt;通常代理类内含有一个被代理类的引用。&lt;br&gt;
    
    </summary>
    
      <category term="Design Pattern" scheme="http://cuijing.me/categories/Design-Pattern/"/>
    
    
      <category term="Java" scheme="http://cuijing.me/tags/Java/"/>
    
      <category term="Design Pattern" scheme="http://cuijing.me/tags/Design-Pattern/"/>
    
      <category term="Proxy" scheme="http://cuijing.me/tags/Proxy/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之 状态模式</title>
    <link href="http://cuijing.me/2016/05/16/Design-Pattern/12-State/"/>
    <id>http://cuijing.me/2016/05/16/Design-Pattern/12-State/</id>
    <published>2016-05-16T00:30:00.000Z</published>
    <updated>2016-06-03T12:24:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="状态模式-State-Pattern"><a href="#状态模式-State-Pattern" class="headerlink" title="状态模式 State Pattern"></a>状态模式 State Pattern</h1><h2 id="定义状态模式"><a href="#定义状态模式" class="headerlink" title="定义状态模式"></a>定义状态模式</h2><p>允许对象在内部状态改变时改变它的行为，对象看起来好像修改了它的类。</p><p>可以将状态封装成一个独立的类<br><a id="more"></a></p><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p><img src="http://oov0wb0gl.bkt.clouddn.com/2017-06-06-14966719451493.jpg?imageMogr2/thumbnail/!50p/blur/1x0/quality/75|imageslim" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;状态模式-State-Pattern&quot;&gt;&lt;a href=&quot;#状态模式-State-Pattern&quot; class=&quot;headerlink&quot; title=&quot;状态模式 State Pattern&quot;&gt;&lt;/a&gt;状态模式 State Pattern&lt;/h1&gt;&lt;h2 id=&quot;定义状态模式&quot;&gt;&lt;a href=&quot;#定义状态模式&quot; class=&quot;headerlink&quot; title=&quot;定义状态模式&quot;&gt;&lt;/a&gt;定义状态模式&lt;/h2&gt;&lt;p&gt;允许对象在内部状态改变时改变它的行为，对象看起来好像修改了它的类。&lt;/p&gt;
&lt;p&gt;可以将状态封装成一个独立的类&lt;br&gt;
    
    </summary>
    
      <category term="Design Pattern" scheme="http://cuijing.me/categories/Design-Pattern/"/>
    
    
      <category term="Java" scheme="http://cuijing.me/tags/Java/"/>
    
      <category term="Design Pattern" scheme="http://cuijing.me/tags/Design-Pattern/"/>
    
      <category term="State" scheme="http://cuijing.me/tags/State/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之 组合模式</title>
    <link href="http://cuijing.me/2016/05/14/Design-Pattern/11-Composite/"/>
    <id>http://cuijing.me/2016/05/14/Design-Pattern/11-Composite/</id>
    <published>2016-05-14T00:30:00.000Z</published>
    <updated>2016-06-03T11:22:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="组合模式-Composite-Pattern"><a href="#组合模式-Composite-Pattern" class="headerlink" title="组合模式  Composite Pattern"></a>组合模式  Composite Pattern</h1><h2 id="定义组合模式"><a href="#定义组合模式" class="headerlink" title="定义组合模式"></a>定义组合模式</h2><p>允许你将对象组合成树形结构来表现 “整体/部分” 层次结构。组合能让客户以一致方式处理个别对象以及对象组合。<br><a id="more"></a></p><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p><img src="http://oov0wb0gl.bkt.clouddn.com/2017-06-06-14966508990133.jpg?imageMogr2/thumbnail/!50p/blur/1x0/quality/75|imageslim" alt=""></p><h3 id="例图"><a href="#例图" class="headerlink" title="例图"></a>例图</h3><p><img src="http://oov0wb0gl.bkt.clouddn.com/2017-06-06-14966509825025.jpg?imageMogr2/thumbnail/!50p/blur/1x0/quality/75|imageslim" alt=""></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">MenuComponent</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(MenuComponent menuComponent)</span> </span>&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(MenuComponent menuComponent)</span> </span>&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> MenuComponent <span class="title">getChild</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isVegetarian</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Iterator <span class="title">createIterator</span><span class="params">()</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Menu</span> <span class="keyword">extends</span> <span class="title">MenuComponent</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">ArrayList menuComponents = <span class="keyword">new</span> ArrayList();</span><br><span class="line">String name;</span><br><span class="line">String description;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Menu</span><span class="params">(String name, String description)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.description = description;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(MenuComponent menuComponent)</span> </span>&#123;</span><br><span class="line">menuComponents.add(menuComponent);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(MenuComponent menuComponent)</span> </span>&#123;</span><br><span class="line">menuComponents.remove(menuComponent);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> MenuComponent <span class="title">getChild</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (MenuComponent)menuComponents.get(i);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> description;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Iterator <span class="title">createIterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> CompositeIterator(menuComponents.iterator());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.print(<span class="string">"\n"</span> + getName());</span><br><span class="line">System.out.println(<span class="string">", "</span> + getDescription());</span><br><span class="line">System.out.println(<span class="string">"---------------------"</span>);</span><br><span class="line">  </span><br><span class="line">Iterator iterator = menuComponents.iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">MenuComponent menuComponent = </span><br><span class="line">(MenuComponent)iterator.next();</span><br><span class="line">menuComponent.print();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MenuItem</span> <span class="keyword">extends</span> <span class="title">MenuComponent</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">String name;</span><br><span class="line">String description;</span><br><span class="line"><span class="keyword">boolean</span> vegetarian;</span><br><span class="line"><span class="keyword">double</span> price;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MenuItem</span><span class="params">(String name, </span></span></span><br><span class="line"><span class="function"><span class="params">                String description, </span></span></span><br><span class="line"><span class="function"><span class="params">                <span class="keyword">boolean</span> vegetarian, </span></span></span><br><span class="line"><span class="function"><span class="params">                <span class="keyword">double</span> price)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.description = description;</span><br><span class="line"><span class="keyword">this</span>.vegetarian = vegetarian;</span><br><span class="line"><span class="keyword">this</span>.price = price;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> description;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> price;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isVegetarian</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> vegetarian;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 空 Iterator</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Iterator <span class="title">createIterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> NullIterator();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.print(<span class="string">"  "</span> + getName());</span><br><span class="line"><span class="keyword">if</span> (isVegetarian()) &#123;</span><br><span class="line">System.out.print(<span class="string">"(v)"</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">", "</span> + getPrice());</span><br><span class="line">System.out.println(<span class="string">"     -- "</span> + getDescription());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CompositeIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span> </span>&#123;</span><br><span class="line"><span class="comment">// Stack继承于Vector，意味着Vector拥有的属性和功能</span></span><br><span class="line">Stack stack = <span class="keyword">new</span> Stack();</span><br><span class="line">   </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CompositeIterator</span><span class="params">(Iterator iterator)</span> </span>&#123;</span><br><span class="line">stack.push(iterator);</span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (hasNext()) &#123;</span><br><span class="line">    <span class="comment">/* peek()取出栈顶元素，不执行删除 */</span></span><br><span class="line">Iterator iterator = (Iterator) stack.peek();  MenuComponent component = (MenuComponent) iterator.next();</span><br><span class="line"><span class="keyword">if</span> (component <span class="keyword">instanceof</span> Menu) &#123;</span><br><span class="line">stack.push(component.createIterator());</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> component;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (stack.empty()) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">Iterator iterator = (Iterator) stack.peek();</span><br><span class="line"><span class="keyword">if</span> (!iterator.hasNext()) &#123;</span><br><span class="line"><span class="comment">/* pop() 取出栈顶元素，且执行删除 */</span></span><br><span class="line">stack.pop();</span><br><span class="line"><span class="keyword">return</span> hasNext();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Waitress</span> </span>&#123;</span><br><span class="line">MenuComponent allMenus;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Waitress</span><span class="params">(MenuComponent allMenus)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.allMenus = allMenus;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printMenu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">allMenus.print();</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printVegetarianMenu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Iterator iterator = allMenus.createIterator();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"\nVEGETARIAN MENU\n----"</span>);</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">MenuComponent menuComponent = </span><br><span class="line">(MenuComponent)iterator.next();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (menuComponent.isVegetarian()) &#123;</span><br><span class="line">menuComponent.print();</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (UnsupportedOperationException e) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NullIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MenuTestDrive</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">MenuComponent pancakeHouseMenu = </span><br><span class="line"><span class="keyword">new</span> Menu(<span class="string">"PANCAKE HOUSE MENU"</span>, <span class="string">"Breakfast"</span>);</span><br><span class="line">MenuComponent dinerMenu = </span><br><span class="line"><span class="keyword">new</span> Menu(<span class="string">"DINER MENU"</span>, <span class="string">"Lunch"</span>);</span><br><span class="line">MenuComponent cafeMenu = </span><br><span class="line"><span class="keyword">new</span> Menu(<span class="string">"CAFE MENU"</span>, <span class="string">"Dinner"</span>);</span><br><span class="line">MenuComponent dessertMenu = </span><br><span class="line"><span class="keyword">new</span> Menu(<span class="string">"DESSERT MENU"</span>, <span class="string">"Dessert of course!"</span>);</span><br><span class="line">  </span><br><span class="line">MenuComponent allMenus = <span class="keyword">new</span> Menu(<span class="string">"ALL MENUS"</span>, <span class="string">"All menus combined"</span>);</span><br><span class="line">  </span><br><span class="line">allMenus.add(pancakeHouseMenu);</span><br><span class="line">allMenus.add(dinerMenu);</span><br><span class="line">allMenus.add(cafeMenu);</span><br><span class="line">  </span><br><span class="line">pancakeHouseMenu.add(<span class="keyword">new</span> MenuItem(</span><br><span class="line"><span class="string">"K&amp;B's Pancake Breakfast"</span>, </span><br><span class="line"><span class="string">"Pancakes with scrambled eggs, and toast"</span>, </span><br><span class="line"><span class="keyword">true</span>,</span><br><span class="line"><span class="number">2.99</span>));</span><br><span class="line">pancakeHouseMenu.add(<span class="keyword">new</span> MenuItem(</span><br><span class="line"><span class="string">"Regular Pancake Breakfast"</span>, </span><br><span class="line"><span class="string">"Pancakes with fried eggs, sausage"</span>, </span><br><span class="line"><span class="keyword">false</span>,</span><br><span class="line"><span class="number">2.99</span>));</span><br><span class="line">pancakeHouseMenu.add(<span class="keyword">new</span> MenuItem(</span><br><span class="line"><span class="string">"Blueberry Pancakes"</span>,</span><br><span class="line"><span class="string">"Pancakes made with fresh blueberries, and blueberry syrup"</span>,</span><br><span class="line"><span class="keyword">true</span>,</span><br><span class="line"><span class="number">3.49</span>));</span><br><span class="line">pancakeHouseMenu.add(<span class="keyword">new</span> MenuItem(</span><br><span class="line"><span class="string">"Waffles"</span>,</span><br><span class="line"><span class="string">"Waffles, with your choice of blueberries or strawberries"</span>,</span><br><span class="line"><span class="keyword">true</span>,</span><br><span class="line"><span class="number">3.59</span>));</span><br><span class="line"></span><br><span class="line">dinerMenu.add(<span class="keyword">new</span> MenuItem(</span><br><span class="line"><span class="string">"Vegetarian BLT"</span>,</span><br><span class="line"><span class="string">"(Fakin') Bacon with lettuce &amp; tomato on whole wheat"</span>, </span><br><span class="line"><span class="keyword">true</span>, </span><br><span class="line"><span class="number">2.99</span>));</span><br><span class="line">dinerMenu.add(<span class="keyword">new</span> MenuItem(</span><br><span class="line"><span class="string">"BLT"</span>,</span><br><span class="line"><span class="string">"Bacon with lettuce &amp; tomato on whole wheat"</span>, </span><br><span class="line"><span class="keyword">false</span>, </span><br><span class="line"><span class="number">2.99</span>));</span><br><span class="line">dinerMenu.add(<span class="keyword">new</span> MenuItem(</span><br><span class="line"><span class="string">"Soup of the day"</span>,</span><br><span class="line"><span class="string">"A bowl of the soup of the day, with a side of potato salad"</span>, </span><br><span class="line"><span class="keyword">false</span>, </span><br><span class="line"><span class="number">3.29</span>));</span><br><span class="line">dinerMenu.add(<span class="keyword">new</span> MenuItem(</span><br><span class="line"><span class="string">"Hotdog"</span>,</span><br><span class="line"><span class="string">"A hot dog, with saurkraut, relish, onions, topped with cheese"</span>,</span><br><span class="line"><span class="keyword">false</span>, </span><br><span class="line"><span class="number">3.05</span>));</span><br><span class="line">dinerMenu.add(<span class="keyword">new</span> MenuItem(</span><br><span class="line"><span class="string">"Steamed Veggies and Brown Rice"</span>,</span><br><span class="line"><span class="string">"A medly of steamed vegetables over brown rice"</span>, </span><br><span class="line"><span class="keyword">true</span>, </span><br><span class="line"><span class="number">3.99</span>));</span><br><span class="line"> </span><br><span class="line">dinerMenu.add(<span class="keyword">new</span> MenuItem(</span><br><span class="line"><span class="string">"Pasta"</span>,</span><br><span class="line"><span class="string">"Spaghetti with Marinara Sauce, and a slice of sourdough bread"</span>,</span><br><span class="line"><span class="keyword">true</span>, </span><br><span class="line"><span class="number">3.89</span>));</span><br><span class="line">   </span><br><span class="line">dinerMenu.add(dessertMenu);</span><br><span class="line">  </span><br><span class="line">dessertMenu.add(<span class="keyword">new</span> MenuItem(</span><br><span class="line"><span class="string">"Apple Pie"</span>,</span><br><span class="line"><span class="string">"Apple pie with a flakey crust, topped with vanilla icecream"</span>,</span><br><span class="line"><span class="keyword">true</span>,</span><br><span class="line"><span class="number">1.59</span>));</span><br><span class="line">dessertMenu.add(<span class="keyword">new</span> MenuItem(</span><br><span class="line"><span class="string">"Cheesecake"</span>,</span><br><span class="line"><span class="string">"Creamy New York cheesecake, with a chocolate graham crust"</span>,</span><br><span class="line"><span class="keyword">true</span>,</span><br><span class="line"><span class="number">1.99</span>));</span><br><span class="line">dessertMenu.add(<span class="keyword">new</span> MenuItem(</span><br><span class="line"><span class="string">"Sorbet"</span>,</span><br><span class="line"><span class="string">"A scoop of raspberry and a scoop of lime"</span>,</span><br><span class="line"><span class="keyword">true</span>,</span><br><span class="line"><span class="number">1.89</span>));</span><br><span class="line"></span><br><span class="line">cafeMenu.add(<span class="keyword">new</span> MenuItem(</span><br><span class="line"><span class="string">"Veggie Burger and Air Fries"</span>,</span><br><span class="line"><span class="string">"Veggie burger on a whole wheat bun, lettuce, tomato, and fries"</span>,</span><br><span class="line"><span class="keyword">true</span>, </span><br><span class="line"><span class="number">3.99</span>));</span><br><span class="line">cafeMenu.add(<span class="keyword">new</span> MenuItem(</span><br><span class="line"><span class="string">"Soup of the day"</span>,</span><br><span class="line"><span class="string">"A cup of the soup of the day, with a side salad"</span>,</span><br><span class="line"><span class="keyword">false</span>, </span><br><span class="line"><span class="number">3.69</span>));</span><br><span class="line">cafeMenu.add(<span class="keyword">new</span> MenuItem(</span><br><span class="line"><span class="string">"Burrito"</span>,</span><br><span class="line"><span class="string">"A large burrito, with whole pinto beans, salsa, guacamole"</span>,</span><br><span class="line"><span class="keyword">true</span>, </span><br><span class="line"><span class="number">4.29</span>));</span><br><span class="line"> </span><br><span class="line">Waitress waitress = <span class="keyword">new</span> Waitress(allMenus);</span><br><span class="line">   </span><br><span class="line">waitress.printVegetarianMenu();</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;组合模式-Composite-Pattern&quot;&gt;&lt;a href=&quot;#组合模式-Composite-Pattern&quot; class=&quot;headerlink&quot; title=&quot;组合模式  Composite Pattern&quot;&gt;&lt;/a&gt;组合模式  Composite Pattern&lt;/h1&gt;&lt;h2 id=&quot;定义组合模式&quot;&gt;&lt;a href=&quot;#定义组合模式&quot; class=&quot;headerlink&quot; title=&quot;定义组合模式&quot;&gt;&lt;/a&gt;定义组合模式&lt;/h2&gt;&lt;p&gt;允许你将对象组合成树形结构来表现 “整体/部分” 层次结构。组合能让客户以一致方式处理个别对象以及对象组合。&lt;br&gt;
    
    </summary>
    
      <category term="Design Pattern" scheme="http://cuijing.me/categories/Design-Pattern/"/>
    
    
      <category term="Java" scheme="http://cuijing.me/tags/Java/"/>
    
      <category term="Design Pattern" scheme="http://cuijing.me/tags/Design-Pattern/"/>
    
      <category term="Composite" scheme="http://cuijing.me/tags/Composite/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之 迭代器模式</title>
    <link href="http://cuijing.me/2016/05/12/Design-Pattern/10-Iteratior/"/>
    <id>http://cuijing.me/2016/05/12/Design-Pattern/10-Iteratior/</id>
    <published>2016-05-12T00:30:00.000Z</published>
    <updated>2016-06-02T14:22:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="迭代器模式-Iterator-Pattern"><a href="#迭代器模式-Iterator-Pattern" class="headerlink" title="迭代器模式 Iterator Pattern"></a>迭代器模式 Iterator Pattern</h1><h2 id="设计原则-九："><a href="#设计原则-九：" class="headerlink" title="设计原则 九："></a>设计原则 九：</h2><p>单一责任原则，一个类应该只有一个引起变化的原因。<br>将一个责任只委派给一个类。<br>类的每个责任都有一个潜在的改变区域，超过一个责任意味着超过一个改变区域，<br><a id="more"></a></p><h2 id="定义迭代器模式："><a href="#定义迭代器模式：" class="headerlink" title="定义迭代器模式："></a>定义迭代器模式：</h2><p>提供一种方法顺序访问一个聚合对象中的各个元素，而又不暴露其内部的表示。</p><p>用迭代器来封装集合对象的遍历细节，使调用者能够通过统一的接口来实现对集合的遍历，迭代器也给集合对象提供了一定的保护，想要遍历集合，直接调用迭代器的方法就好了，我们不知道也不必知道集合内部的数据管理方式。</p><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p><img src="http://oov0wb0gl.bkt.clouddn.com/2017-06-06-14966492302764.jpg?imageMogr2/thumbnail/!50p/blur/1x0/quality/75|imageslim" alt=""></p><h3 id="例图"><a href="#例图" class="headerlink" title="例图"></a>例图</h3><p><img src="http://oov0wb0gl.bkt.clouddn.com/2017-06-06-14966491063692.jpg?imageMogr2/thumbnail/!50p/blur/1x0/quality/75|imageslim" alt=""></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>迭代器接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> IteratorPattern;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义迭代器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterator</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 集合内是否存在下一个元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回集合内的下一个元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Object <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还需要实现一些具体的迭代器来实现遍历细节：<br>Array迭代器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> IteratorPattern;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现数组迭代器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span></span>&#123;</span><br><span class="line">    MyObject[] arr;  <span class="comment">//自定义对象数组</span></span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;   <span class="comment">//当前索引</span></span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayIterator</span><span class="params">(MyObject[] arr)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.arr = arr;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &lt; arr.length &amp;&amp; arr[index] != <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MyObject mo = arr[index];</span><br><span class="line">        index++;</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">return</span> mo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>P.S.注意Array迭代器的hasNext方法的具体实现<br>List迭代器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> IteratorPattern;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现List迭代器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span></span>&#123;</span><br><span class="line">    List&lt;MyObject&gt; list; <span class="comment">//集合对象</span></span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;       <span class="comment">//当前索引</span></span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ListIterator</span><span class="params">(List&lt;MyObject&gt; list)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &lt; list.size())</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MyObject mo = list.get(index);</span><br><span class="line">        index++;</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">return</span> mo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有了这些具体迭代器，我们只需要一个循环就可以搞定了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 打印集合所有内容</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> iter 集合的迭代器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printObjs</span><span class="params">(Iterator iter)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(iter.hasNext())&#123;</span><br><span class="line">        System.out.println(iter.next().toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;迭代器模式-Iterator-Pattern&quot;&gt;&lt;a href=&quot;#迭代器模式-Iterator-Pattern&quot; class=&quot;headerlink&quot; title=&quot;迭代器模式 Iterator Pattern&quot;&gt;&lt;/a&gt;迭代器模式 Iterator Pattern&lt;/h1&gt;&lt;h2 id=&quot;设计原则-九：&quot;&gt;&lt;a href=&quot;#设计原则-九：&quot; class=&quot;headerlink&quot; title=&quot;设计原则 九：&quot;&gt;&lt;/a&gt;设计原则 九：&lt;/h2&gt;&lt;p&gt;单一责任原则，一个类应该只有一个引起变化的原因。&lt;br&gt;将一个责任只委派给一个类。&lt;br&gt;类的每个责任都有一个潜在的改变区域，超过一个责任意味着超过一个改变区域，&lt;br&gt;
    
    </summary>
    
      <category term="Design Pattern" scheme="http://cuijing.me/categories/Design-Pattern/"/>
    
    
      <category term="Java" scheme="http://cuijing.me/tags/Java/"/>
    
      <category term="Design Pattern" scheme="http://cuijing.me/tags/Design-Pattern/"/>
    
      <category term="Iterator" scheme="http://cuijing.me/tags/Iterator/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之 模板方法模式</title>
    <link href="http://cuijing.me/2016/05/02/Design-Pattern/9-Template/"/>
    <id>http://cuijing.me/2016/05/02/Design-Pattern/9-Template/</id>
    <published>2016-05-02T00:30:00.000Z</published>
    <updated>2016-06-02T13:12:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="模板方法模式-Template-Method-Pattern"><a href="#模板方法模式-Template-Method-Pattern" class="headerlink" title="模板方法模式 Template Method Pattern"></a>模板方法模式 Template Method Pattern</h1><h2 id="设计原则-八："><a href="#设计原则-八：" class="headerlink" title="设计原则 八："></a>设计原则 八：</h2><p>好莱坞原则，别调用（打电话给）我们，我们会调用（打电话给）你</p><p>即高层组件对低层组件的调用方式。<br><a id="more"></a></p><h2 id="定义模板方法模式"><a href="#定义模板方法模式" class="headerlink" title="定义模板方法模式"></a>定义模板方法模式</h2><p>在一个方法中定义一个算法的骨架，而将一些步奏延迟到子类中去。模板方法模式使得子类可在不改变算法结构的前提下，重新定义算法中的某些步奏。</p><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p><img src="http://oov0wb0gl.bkt.clouddn.com/2017-06-06-14965920339459.jpg?imageMogr2/thumbnail/!50p/blur/1x0/quality/75|imageslim" alt=""></p><h3 id="例图"><a href="#例图" class="headerlink" title="例图"></a>例图</h3><p><img src="http://oov0wb0gl.bkt.clouddn.com/2017-06-06-14965919685451.jpg?imageMogr2/thumbnail/!50p/blur/1x0/quality/75|imageslim" alt=""></p><h3 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h3><p>此处的 hook() 方法，钩子方法是一种被声明在抽象类中的方法，但只有默认的实现或者空的。钩子的存在，让子类有能力对算法的不同点进行挂钩，是否挂钩由子类自行决定。</p><p><img src="http://oov0wb0gl.bkt.clouddn.com/2017-06-06-14965920976245.jpg?imageMogr2/thumbnail/!50p/blur/1x0/quality/75|imageslim" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;模板方法模式-Template-Method-Pattern&quot;&gt;&lt;a href=&quot;#模板方法模式-Template-Method-Pattern&quot; class=&quot;headerlink&quot; title=&quot;模板方法模式 Template Method Pattern&quot;&gt;&lt;/a&gt;模板方法模式 Template Method Pattern&lt;/h1&gt;&lt;h2 id=&quot;设计原则-八：&quot;&gt;&lt;a href=&quot;#设计原则-八：&quot; class=&quot;headerlink&quot; title=&quot;设计原则 八：&quot;&gt;&lt;/a&gt;设计原则 八：&lt;/h2&gt;&lt;p&gt;好莱坞原则，别调用（打电话给）我们，我们会调用（打电话给）你&lt;/p&gt;
&lt;p&gt;即高层组件对低层组件的调用方式。&lt;br&gt;
    
    </summary>
    
      <category term="Design Pattern" scheme="http://cuijing.me/categories/Design-Pattern/"/>
    
    
      <category term="Java" scheme="http://cuijing.me/tags/Java/"/>
    
      <category term="Design Pattern" scheme="http://cuijing.me/tags/Design-Pattern/"/>
    
      <category term="Template Method" scheme="http://cuijing.me/tags/Template-Method/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之 外观模式</title>
    <link href="http://cuijing.me/2016/04/12/Design-Pattern/8-Facade/"/>
    <id>http://cuijing.me/2016/04/12/Design-Pattern/8-Facade/</id>
    <published>2016-04-12T00:30:00.000Z</published>
    <updated>2016-06-02T12:22:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="外观模式-Facade-Pattern"><a href="#外观模式-Facade-Pattern" class="headerlink" title="外观模式 Facade Pattern"></a>外观模式 Facade Pattern</h1><h2 id="设计原则-七："><a href="#设计原则-七：" class="headerlink" title="设计原则 七："></a>设计原则 七：</h2><p>最少知识原则，只和密友交谈。</p><p>维护此原则的方针，就任何对象而言，在该对象的方法内，我们只调用属于以下范围的方法：<br><a id="more"></a></p><ol><li>该对象本身</li><li>被当做方法的参数而传进来的对象</li><li>此方法所创建和实例化的对象</li><li>对象的任何组件</li></ol><p>将朋友圈子保持最小。<br>以上告诉我们，如果某对象是调用其他方法的返回结果，不要调用该对象的方法。</p><p><img src="http://oov0wb0gl.bkt.clouddn.com/2017-06-06-14965914952560.jpg?imageMogr2/thumbnail/!50p/blur/1x0/quality/75|imageslim" alt=""></p><h2 id="定义外观模式"><a href="#定义外观模式" class="headerlink" title="定义外观模式"></a>定义外观模式</h2><p>提供了一个统一的接口，用来访问子系统中的一群接口。外观模式定义了一个高层接口，让子系统更容易使用。</p><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p><img src="http://oov0wb0gl.bkt.clouddn.com/2017-06-06-14965909161806.jpg?imageMogr2/thumbnail/!50p/blur/1x0/quality/75|imageslim" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;外观模式-Facade-Pattern&quot;&gt;&lt;a href=&quot;#外观模式-Facade-Pattern&quot; class=&quot;headerlink&quot; title=&quot;外观模式 Facade Pattern&quot;&gt;&lt;/a&gt;外观模式 Facade Pattern&lt;/h1&gt;&lt;h2 id=&quot;设计原则-七：&quot;&gt;&lt;a href=&quot;#设计原则-七：&quot; class=&quot;headerlink&quot; title=&quot;设计原则 七：&quot;&gt;&lt;/a&gt;设计原则 七：&lt;/h2&gt;&lt;p&gt;最少知识原则，只和密友交谈。&lt;/p&gt;
&lt;p&gt;维护此原则的方针，就任何对象而言，在该对象的方法内，我们只调用属于以下范围的方法：&lt;br&gt;
    
    </summary>
    
      <category term="Design Pattern" scheme="http://cuijing.me/categories/Design-Pattern/"/>
    
    
      <category term="Java" scheme="http://cuijing.me/tags/Java/"/>
    
      <category term="Design Pattern" scheme="http://cuijing.me/tags/Design-Pattern/"/>
    
      <category term="Facade" scheme="http://cuijing.me/tags/Facade/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之 适配器模式</title>
    <link href="http://cuijing.me/2016/04/08/Design-Pattern/7-Adapter/"/>
    <id>http://cuijing.me/2016/04/08/Design-Pattern/7-Adapter/</id>
    <published>2016-04-08T00:30:00.000Z</published>
    <updated>2016-06-02T11:41:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="适配器模式-Adapter-Pattern"><a href="#适配器模式-Adapter-Pattern" class="headerlink" title="适配器模式 Adapter Pattern"></a>适配器模式 Adapter Pattern</h1><h2 id="定义适配器模式"><a href="#定义适配器模式" class="headerlink" title="定义适配器模式"></a>定义适配器模式</h2><p>将一个类的接口转换为客户期望的另一个接口。适配器让原本接口不兼容的类合作无间。</p><p>Java 适配器模式的应用，将枚举Enumeration 适配到迭代器 Iterator<br><a id="more"></a></p><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p><img src="http://oov0wb0gl.bkt.clouddn.com/2017-06-06-14965896293720.jpg?imageMogr2/thumbnail/!50p/blur/1x0/quality/75|imageslim" alt=""><br>由类图可以看到，适配器实现目标接口，并且组合一个被适配者，</p><h2 id="实例代码"><a href="#实例代码" class="headerlink" title="实例代码"></a>实例代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Duck</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Turkey</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">gobble</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MallardDuck</span> <span class="keyword">implements</span> <span class="title">Duck</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Quack"</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"I'm flying"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TurkeyAdapter</span> <span class="keyword">implements</span> <span class="title">Duck</span> </span>&#123;</span><br><span class="line">Turkey turkey;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TurkeyAdapter</span><span class="params">(Turkey turkey)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.turkey = turkey;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">turkey.gobble();</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">turkey.fly();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> headfirst.adapter.ducks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DuckTestDrive</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">MallardDuck duck = <span class="keyword">new</span> MallardDuck();</span><br><span class="line"> </span><br><span class="line">WildTurkey turkey = <span class="keyword">new</span> WildTurkey();</span><br><span class="line">Duck turkeyAdapter = <span class="keyword">new</span> TurkeyAdapter(turkey);</span><br><span class="line">   </span><br><span class="line">System.out.println(<span class="string">"The Turkey says..."</span>);</span><br><span class="line">turkey.gobble();</span><br><span class="line">turkey.fly();</span><br><span class="line"> </span><br><span class="line">System.out.println(<span class="string">"\nThe Duck says..."</span>);</span><br><span class="line">testDuck(duck);</span><br><span class="line">  </span><br><span class="line">System.out.println(<span class="string">"\nThe TurkeyAdapter says..."</span>);</span><br><span class="line">testDuck(turkeyAdapter);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testDuck</span><span class="params">(Duck duck)</span> </span>&#123;</span><br><span class="line">duck.quack();</span><br><span class="line">duck.fly();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;适配器模式-Adapter-Pattern&quot;&gt;&lt;a href=&quot;#适配器模式-Adapter-Pattern&quot; class=&quot;headerlink&quot; title=&quot;适配器模式 Adapter Pattern&quot;&gt;&lt;/a&gt;适配器模式 Adapter Pattern&lt;/h1&gt;&lt;h2 id=&quot;定义适配器模式&quot;&gt;&lt;a href=&quot;#定义适配器模式&quot; class=&quot;headerlink&quot; title=&quot;定义适配器模式&quot;&gt;&lt;/a&gt;定义适配器模式&lt;/h2&gt;&lt;p&gt;将一个类的接口转换为客户期望的另一个接口。适配器让原本接口不兼容的类合作无间。&lt;/p&gt;
&lt;p&gt;Java 适配器模式的应用，将枚举Enumeration 适配到迭代器 Iterator&lt;br&gt;
    
    </summary>
    
      <category term="Design Pattern" scheme="http://cuijing.me/categories/Design-Pattern/"/>
    
    
      <category term="Java" scheme="http://cuijing.me/tags/Java/"/>
    
      <category term="Design Pattern" scheme="http://cuijing.me/tags/Design-Pattern/"/>
    
      <category term="Adapter" scheme="http://cuijing.me/tags/Adapter/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之 命令模式</title>
    <link href="http://cuijing.me/2016/03/04/Design-Pattern/6-Command/"/>
    <id>http://cuijing.me/2016/03/04/Design-Pattern/6-Command/</id>
    <published>2016-03-04T00:30:00.000Z</published>
    <updated>2016-06-02T11:11:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="命令模式-Command-Pattern"><a href="#命令模式-Command-Pattern" class="headerlink" title="命令模式 Command Pattern"></a>命令模式 Command Pattern</h1><h2 id="定义命令模式"><a href="#定义命令模式" class="headerlink" title="定义命令模式"></a>定义命令模式</h2><p>将请求封装成对象，以便使用不同的请求，队列或者日志来参数化其他对象。命令模式也支持可撤销的操作。<br><a id="more"></a></p><p>现实世界中任何一个稍微复杂的子系统都应当有一套命令，比如餐馆的运行机制：<br>顾客A来到餐馆点一碗面（发出请求） -&gt; 柜台服务员记录下来（创建命令） -&gt; 服务员把小票扔给厨房 -&gt; 厨师C很快做好了一碗面（请求被执行）<br>顾客不知道将由谁来做这碗面，柜台服务员也不知道，厨师不知道是谁点了这碗面，只知道做完面就可以休息了</p><p>是不是与命令模式很相像？</p><p>不妨用代码来实现上面的机制</p><p>首先，我们需要一个命令接口，毕竟命令才是命令模式的核心，没有命令，一切都是空想</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> CommandPattern;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义Command接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>; <span class="comment">//只需要定义一个统一的执行方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有了命令还需要执行者，否则只有将军没有小兵，餐馆的执行者当然是厨师：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package CommandPattern;</span><br><span class="line"> </span><br><span class="line">/**</span><br><span class="line"> * 定义Chef基类</span><br><span class="line"> */</span><br><span class="line">public abstract class Chef &#123;</span><br><span class="line">    //在此定义厨师的公共属性</span><br><span class="line">     </span><br><span class="line">    /**</span><br><span class="line">     * 定义烹饪方法</span><br><span class="line">     */</span><br><span class="line">    public abstract void cook();</span><br><span class="line">    //在此定义其它有用的方法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们还需要实现具体的厨师，术业有专攻：<br>做面的厨师：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">package CommandPattern;</span><br><span class="line"> </span><br><span class="line">/**</span><br><span class="line"> * 定义专业做面的厨师</span><br><span class="line"> */</span><br><span class="line">public class NoodlesChef extends Chef&#123;</span><br><span class="line"> </span><br><span class="line">    @Override</span><br><span class="line">    public void cook() &#123;</span><br><span class="line">        System.out.println(&quot;做好了一碗美味的拉面&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>做饼的厨师：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">package CommandPattern;</span><br><span class="line"> </span><br><span class="line">/**</span><br><span class="line"> * 定义专业做饼的厨师</span><br><span class="line"> */</span><br><span class="line">public class PieChef extends Chef&#123;</span><br><span class="line"> </span><br><span class="line">    @Override</span><br><span class="line">    public void cook() &#123;</span><br><span class="line">        System.out.println(&quot;做好了一块香喷喷的大饼&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有了小兵，有了将军，我们还需要一套完整的命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">package CommandPattern;</span><br><span class="line"> </span><br><span class="line">/**</span><br><span class="line"> * 实现具体NoodlesCommand</span><br><span class="line"> */</span><br><span class="line">public class NoodlesCommand implements Command&#123;</span><br><span class="line">    private NoodlesChef chef;//专业做面的厨师</span><br><span class="line">     </span><br><span class="line">    public NoodlesCommand()&#123;</span><br><span class="line">        chef = new NoodlesChef();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    @Override</span><br><span class="line">    public void execute() &#123;</span><br><span class="line">        chef.cook();</span><br><span class="line">        //调用其它需要的方法</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">package CommandPattern;</span><br><span class="line"> </span><br><span class="line">/**</span><br><span class="line"> * 实现具体PieCommand</span><br><span class="line"> */</span><br><span class="line">public class PieCommand implements Command&#123;</span><br><span class="line">    private PieChef chef;//专业做饼的厨师</span><br><span class="line">     </span><br><span class="line">    public PieCommand()&#123;</span><br><span class="line">        chef = new PieChef();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    @Override</span><br><span class="line">    public void execute() &#123;</span><br><span class="line">        chef.cook();</span><br><span class="line">        //调用其它需要的方法</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>准备工作做好了，餐馆可以开张了<br>三.效果示例<br>需要一个Test类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">package CommandPattern;</span><br><span class="line"> </span><br><span class="line">/**</span><br><span class="line"> * 实现测试类</span><br><span class="line"> */</span><br><span class="line">public class Test &#123;</span><br><span class="line">     </span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        System.out.println(&quot;Command Pattern餐馆开张。。&quot;);</span><br><span class="line">        System.out.println(&quot;第一位客户X先生&quot;);</span><br><span class="line">        System.out.println(&quot;X先生：你好，我需要一碗面，我饿极了&quot;);</span><br><span class="line">        NoodlesCommand nCmd = new NoodlesCommand();</span><br><span class="line">        System.out.println(&quot;柜台服务员：好的，我已经记下了，马上就好&quot;);</span><br><span class="line">        System.out.println(&quot;柜台服务员：厨房~~,接单&quot;);</span><br><span class="line">        nCmd.execute();</span><br><span class="line">        System.out.println(&quot;X先生：真快啊！&quot;);</span><br><span class="line">         </span><br><span class="line">        System.out.println();</span><br><span class="line">         </span><br><span class="line">        System.out.println(&quot;第二位客户XX先生&quot;);</span><br><span class="line">        System.out.println(&quot;XX先生：你好，我需要一块饼，20分钟后来取&quot;);</span><br><span class="line">        PieCommand pCmd = new PieCommand();</span><br><span class="line">        System.out.println(&quot;柜台服务员：好的，我已经记下了&quot;);</span><br><span class="line">        System.out.println(&quot;15分钟后&quot;);</span><br><span class="line">        System.out.println(&quot;柜台服务员：厨房~~,接单&quot;);</span><br><span class="line">        pCmd.execute();</span><br><span class="line">        System.out.println(&quot;XX先生：真准时啊！&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果示例：<br><img src="http://oov0wb0gl.bkt.clouddn.com/2017-06-06-14965868809639.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;命令模式-Command-Pattern&quot;&gt;&lt;a href=&quot;#命令模式-Command-Pattern&quot; class=&quot;headerlink&quot; title=&quot;命令模式 Command Pattern&quot;&gt;&lt;/a&gt;命令模式 Command Pattern&lt;/h1&gt;&lt;h2 id=&quot;定义命令模式&quot;&gt;&lt;a href=&quot;#定义命令模式&quot; class=&quot;headerlink&quot; title=&quot;定义命令模式&quot;&gt;&lt;/a&gt;定义命令模式&lt;/h2&gt;&lt;p&gt;将请求封装成对象，以便使用不同的请求，队列或者日志来参数化其他对象。命令模式也支持可撤销的操作。&lt;br&gt;
    
    </summary>
    
      <category term="Design Pattern" scheme="http://cuijing.me/categories/Design-Pattern/"/>
    
    
      <category term="Java" scheme="http://cuijing.me/tags/Java/"/>
    
      <category term="Design Pattern" scheme="http://cuijing.me/tags/Design-Pattern/"/>
    
      <category term="Command" scheme="http://cuijing.me/tags/Command/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之 单例模式</title>
    <link href="http://cuijing.me/2016/02/12/Design-Pattern/5-Singleton/"/>
    <id>http://cuijing.me/2016/02/12/Design-Pattern/5-Singleton/</id>
    <published>2016-02-12T00:30:00.000Z</published>
    <updated>2016-06-01T13:51:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="单例模式-Singleton-Pattern"><a href="#单例模式-Singleton-Pattern" class="headerlink" title="单例模式 Singleton Pattern"></a>单例模式 Singleton Pattern</h1><ol><li>私有化 构造器</li><li>私有化 静态变量 </li><li>公有化 对象获取函数返回一个实例<a id="more"></a></li></ol><h2 id="定义单例模式"><a href="#定义单例模式" class="headerlink" title="定义单例模式"></a>定义单例模式</h2><p>确保一个类只有一个实例，并提供一个全局访问点。</p><h3 id="懒汉单例模式"><a href="#懒汉单例模式" class="headerlink" title="懒汉单例模式"></a>懒汉单例模式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 最经典的懒汉单件模式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123; </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton instance;<span class="comment">//定义静态实例变量</span></span><br><span class="line">     </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义私有构造方法，防止从外部new实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//初始化操作</span></span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供全局访问点</span></span><br><span class="line"><span class="comment">     * 双重检查加锁</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 该类的实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class)&#123;</span><br><span class="line">                <span class="keyword">if</span>(instance == <span class="keyword">null</span>)</span><br><span class="line">                    instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 其它有用的属性和行为</span></span><br><span class="line"><span class="comment">     * 毕竟应用了单件模式的类仍然具有原本的功能</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">volatile ：原子性。它作用是解决是因为</span><br><span class="line">//1：分配对象的内存空间</span><br><span class="line">//2：初始化对象</span><br><span class="line">//3：设置instance指向刚分配的内存地址</span><br><span class="line"></span><br><span class="line">2 初始化对象 与 3 设置 instance 指向分配的内存地址可</span><br><span class="line">能会发生顺序交换，导致问题</span><br><span class="line"></span><br><span class="line">volatile关键字会告诉编译器，不要对该对象进行编译优化</span><br></pre></td></tr></table></figure><h3 id="饿汗单例模式"><a href="#饿汗单例模式" class="headerlink" title="饿汗单例模式"></a>饿汗单例模式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 饿汉单件模式</span><br><span class="line"> */</span><br><span class="line">public class Singleton &#123; </span><br><span class="line">    </span><br><span class="line">    private static Singleton instance = new Singleton();//定义静态实例变量</span><br><span class="line">     </span><br><span class="line">    /**</span><br><span class="line">     * 定义私有构造方法，防止从外部new实例</span><br><span class="line">     */</span><br><span class="line">    private Singleton()&#123;</span><br><span class="line">        //初始化操作</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    /**</span><br><span class="line">     * 提供全局访问点</span><br><span class="line">     * @return 该类的实例</span><br><span class="line">     */</span><br><span class="line">    public static Singleton getInstance()&#123;</span><br><span class="line">        return instance;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    /**</span><br><span class="line">     * 其它有用的属性和行为</span><br><span class="line">     * 毕竟应用了单件模式的类仍然具有原本的功能</span><br><span class="line">     */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多个class-loader环境下的单件模式"><a href="#多个class-loader环境下的单件模式" class="headerlink" title="多个class loader环境下的单件模式"></a>多个class loader环境下的单件模式</h2><p>如果存在多个类加载器，多个类加载器可能同时加载我们的单件类，从而产生多个实例<br>对于这种情况，我们可以显式指定使用哪一个class loader来加载单件类，这样就有效避免了上述问题</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;单例模式-Singleton-Pattern&quot;&gt;&lt;a href=&quot;#单例模式-Singleton-Pattern&quot; class=&quot;headerlink&quot; title=&quot;单例模式 Singleton Pattern&quot;&gt;&lt;/a&gt;单例模式 Singleton Pattern&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;私有化 构造器&lt;/li&gt;
&lt;li&gt;私有化 静态变量 &lt;/li&gt;
&lt;li&gt;公有化 对象获取函数返回一个实例
    
    </summary>
    
      <category term="Design Pattern" scheme="http://cuijing.me/categories/Design-Pattern/"/>
    
    
      <category term="Java" scheme="http://cuijing.me/tags/Java/"/>
    
      <category term="Design Pattern" scheme="http://cuijing.me/tags/Design-Pattern/"/>
    
      <category term="Singleton" scheme="http://cuijing.me/tags/Singleton/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之 工厂方法模式</title>
    <link href="http://cuijing.me/2016/01/15/Design-Pattern/4-Factory/"/>
    <id>http://cuijing.me/2016/01/15/Design-Pattern/4-Factory/</id>
    <published>2016-01-15T00:30:00.000Z</published>
    <updated>2016-06-01T13:31:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="工厂模式-Factory-Pattern"><a href="#工厂模式-Factory-Pattern" class="headerlink" title="工厂模式 Factory Pattern"></a>工厂模式 Factory Pattern</h1><h2 id="设计原则-六："><a href="#设计原则-六：" class="headerlink" title="设计原则 六："></a>设计原则 六：</h2><p>依赖倒置原则 (Dependency Inversion Principe)</p><p>要依赖抽象，不要依赖具体类。<br><a id="more"></a><br>不要让高层组件依赖低层组件，要让“二者”依赖抽象。</p><ol><li><p>变量不可以持有具体类的引用（如果使用 new 就会有具体类的引用，可以使用工厂模式帮助我们避开此问题）</p></li><li><p>不要让类派生自具体类（可以派生自接口或抽象类）</p></li><li><p>不要实现基类中已经实现的方法。（若覆盖基类已实现的方法，那此基类就不是真正适合被继承的抽象。基类中已实现的方法应该由所有子类共享。）</p></li></ol><h2 id="简单工厂模式-Simple-Factory-Pattern"><a href="#简单工厂模式-Simple-Factory-Pattern" class="headerlink" title="简单工厂模式 Simple Factory Pattern"></a>简单工厂模式 Simple Factory Pattern</h2><p><img src="http://oov0wb0gl.bkt.clouddn.com/2017-06-06-14965702919588.jpg?imageMogr2/thumbnail/!50p/blur/1x0/quality/75|imageslim" alt=""></p><p>也就是常用的在Factory类中定义静态方法负责new对象的方式。</p><p>严格地说，这种被称为“简单工厂模式”的方式根本不能称之为“模式”，虽然静态工厂方法并不是真正的“设计模式”，但这种方式的应用也很广泛，也能带来一些好处，所以我们不能因为它不是“设计模式”就抛弃它。</p><h2 id="工厂模式-Factory-Pattern-1"><a href="#工厂模式-Factory-Pattern-1" class="headerlink" title="工厂模式 Factory Pattern"></a>工厂模式 Factory Pattern</h2><p>定义了一个创建对象的接口，但由子类来决定要实例化的类是哪一个。工厂方法让类把实例化推迟到了子类。</p><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p><img src="http://oov0wb0gl.bkt.clouddn.com/2017-06-06-14965707463136.jpg?imageMogr2/thumbnail/!50p/blur/1x0/quality/75|imageslim" alt=""></p><h3 id="例图"><a href="#例图" class="headerlink" title="例图"></a>例图</h3><p><img src="http://oov0wb0gl.bkt.clouddn.com/2017-06-06-14965704463626.jpg?imageMogr2/thumbnail/!50p/blur/1x0/quality/75|imageslim" alt=""></p><h2 id="抽象工厂模式-Abstract-Factory-Pattern"><a href="#抽象工厂模式-Abstract-Factory-Pattern" class="headerlink" title="抽象工厂模式 Abstract Factory Pattern"></a>抽象工厂模式 Abstract Factory Pattern</h2><p>提供一个接口，用创建相关或依赖对象的家族，而不需要明确指定具体类。</p><p><img src="http://oov0wb0gl.bkt.clouddn.com/2017-06-06-14965717879510.jpg?imageMogr2/thumbnail/!50p/blur/1x0/quality/75|imageslim" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;工厂模式-Factory-Pattern&quot;&gt;&lt;a href=&quot;#工厂模式-Factory-Pattern&quot; class=&quot;headerlink&quot; title=&quot;工厂模式 Factory Pattern&quot;&gt;&lt;/a&gt;工厂模式 Factory Pattern&lt;/h1&gt;&lt;h2 id=&quot;设计原则-六：&quot;&gt;&lt;a href=&quot;#设计原则-六：&quot; class=&quot;headerlink&quot; title=&quot;设计原则 六：&quot;&gt;&lt;/a&gt;设计原则 六：&lt;/h2&gt;&lt;p&gt;依赖倒置原则 (Dependency Inversion Principe)&lt;/p&gt;
&lt;p&gt;要依赖抽象，不要依赖具体类。&lt;br&gt;
    
    </summary>
    
      <category term="Design Pattern" scheme="http://cuijing.me/categories/Design-Pattern/"/>
    
    
      <category term="Java" scheme="http://cuijing.me/tags/Java/"/>
    
      <category term="Design Pattern" scheme="http://cuijing.me/tags/Design-Pattern/"/>
    
      <category term="Factory" scheme="http://cuijing.me/tags/Factory/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之 装饰者模式</title>
    <link href="http://cuijing.me/2016/01/15/Design-Pattern/3-Decorator/"/>
    <id>http://cuijing.me/2016/01/15/Design-Pattern/3-Decorator/</id>
    <published>2016-01-15T00:30:00.000Z</published>
    <updated>2016-06-01T12:21:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="装饰者模式-Decorator-Pattern"><a href="#装饰者模式-Decorator-Pattern" class="headerlink" title="装饰者模式 Decorator Pattern"></a>装饰者模式 Decorator Pattern</h1><h2 id="设计原则-五："><a href="#设计原则-五：" class="headerlink" title="设计原则 五："></a>设计原则 五：</h2><p>开放-关闭原则，类应该对拓展开放，对修改关闭。</p><a id="more"></a><h2 id="定义装饰者模式"><a href="#定义装饰者模式" class="headerlink" title="定义装饰者模式"></a>定义装饰者模式</h2><p>装饰者模式：动态地将责任附加到对象上。若要扩展功能，装饰者提供了比继承更有弹性的替代方案。</p><p>Java 装饰者者模式的应用，Java I/O 流的</p><ol><li><p>装饰者和被装饰对象有相同的超类型。</p></li><li><p>你可以用一个或多个装饰者包装一个对象。</p></li><li><p>既然装饰者和被装饰对象有相同的超类型，所以在任何需要原始对象（被包装的）的场合， 可以用装饰过的对象代替它。</p></li><li><p><strong>装饰者可以在所委托被装饰者的行为之前与/或之后，加上自己的行为，以达到特定的目的。（重要）</strong></p></li><li><p>对象可以在任何时候被装饰，所以可以在运行时动态地、不限量地用你喜欢的装饰者来装饰 对象。</p></li></ol><h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><p><img src="http://oov0wb0gl.bkt.clouddn.com/2017-06-06-14965638692559.jpg?imageMogr2/thumbnail/!50p/blur/1x0/quality/75|imageslim" alt=""></p><h2 id="例图"><a href="#例图" class="headerlink" title="例图"></a>例图</h2><p><img src="http://oov0wb0gl.bkt.clouddn.com/2017-06-06-14965642291858.jpg?imageMogr2/thumbnail/!50p/blur/1x0/quality/75|imageslim" alt=""></p><h3 id="装饰者类解析"><a href="#装饰者类解析" class="headerlink" title="装饰者类解析"></a>装饰者类解析</h3><p><img src="http://oov0wb0gl.bkt.clouddn.com/2017-06-06-14965653302132.jpg?imageMogr2/thumbnail/!50p/blur/1x0/quality/75|imageslim" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> headfirst.decorator.starbuzz;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Beverage</span> </span>&#123;</span><br><span class="line">String description = <span class="string">"Unknown Beverage"</span>;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> description;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> headfirst.decorator.starbuzz;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">CondimentDecorator</span> <span class="keyword">extends</span> <span class="title">Beverage</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getDescription</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> headfirst.decorator.starbuzz;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DarkRoast</span> <span class="keyword">extends</span> <span class="title">Beverage</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">DarkRoast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">description = <span class="string">"Dark Roast Coffee"</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> .<span class="number">99</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> headfirst.decorator.starbuzz;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Decaf</span> <span class="keyword">extends</span> <span class="title">Beverage</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Decaf</span><span class="params">()</span> </span>&#123;</span><br><span class="line">description = <span class="string">"Decaf Coffee"</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1.05</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> headfirst.decorator.starbuzz;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Espresso</span> <span class="keyword">extends</span> <span class="title">Beverage</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Espresso</span><span class="params">()</span> </span>&#123;</span><br><span class="line">description = <span class="string">"Espresso"</span>;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1.99</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> headfirst.decorator.starbuzz;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HouseBlend</span> <span class="keyword">extends</span> <span class="title">Beverage</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HouseBlend</span><span class="params">()</span> </span>&#123;</span><br><span class="line">description = <span class="string">"House Blend Coffee"</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> .<span class="number">89</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> headfirst.decorator.starbuzz;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Milk</span> <span class="keyword">extends</span> <span class="title">CondimentDecorator</span> </span>&#123;</span><br><span class="line">Beverage beverage;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Milk</span><span class="params">(Beverage beverage)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.beverage = beverage;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> beverage.getDescription() + <span class="string">", Milk"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> .<span class="number">10</span> + beverage.cost();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> headfirst.decorator.starbuzz;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mocha</span> <span class="keyword">extends</span> <span class="title">CondimentDecorator</span> </span>&#123;</span><br><span class="line">Beverage beverage;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Mocha</span><span class="params">(Beverage beverage)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.beverage = beverage;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> beverage.getDescription() + <span class="string">", Mocha"</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> .<span class="number">20</span> + beverage.cost();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> headfirst.decorator.starbuzz;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Soy</span> <span class="keyword">extends</span> <span class="title">CondimentDecorator</span> </span>&#123;</span><br><span class="line">Beverage beverage;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Soy</span><span class="params">(Beverage beverage)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.beverage = beverage;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> beverage.getDescription() + <span class="string">", Soy"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> .<span class="number">15</span> + beverage.cost();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> headfirst.decorator.starbuzz;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Whip</span> <span class="keyword">extends</span> <span class="title">CondimentDecorator</span> </span>&#123;</span><br><span class="line">Beverage beverage;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Whip</span><span class="params">(Beverage beverage)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.beverage = beverage;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> beverage.getDescription() + <span class="string">", Whip"</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> .<span class="number">10</span> + beverage.cost();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> headfirst.decorator.starbuzz;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StarbuzzCoffee</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">Beverage beverage = <span class="keyword">new</span> Espresso();</span><br><span class="line">System.out.println(beverage.getDescription() </span><br><span class="line">+ <span class="string">" $"</span> + beverage.cost());</span><br><span class="line"> </span><br><span class="line">Beverage beverage2 = <span class="keyword">new</span> DarkRoast();</span><br><span class="line">beverage2 = <span class="keyword">new</span> Mocha(beverage2);</span><br><span class="line">beverage2 = <span class="keyword">new</span> Mocha(beverage2);</span><br><span class="line">beverage2 = <span class="keyword">new</span> Whip(beverage2);</span><br><span class="line">System.out.println(beverage2.getDescription() </span><br><span class="line">+ <span class="string">" $"</span> + beverage2.cost());</span><br><span class="line"> </span><br><span class="line">Beverage beverage3 = <span class="keyword">new</span> HouseBlend();</span><br><span class="line">beverage3 = <span class="keyword">new</span> Soy(beverage3);</span><br><span class="line">beverage3 = <span class="keyword">new</span> Mocha(beverage3);</span><br><span class="line">beverage3 = <span class="keyword">new</span> Whip(beverage3);</span><br><span class="line">System.out.println(beverage3.getDescription() </span><br><span class="line">+ <span class="string">" $"</span> + beverage3.cost());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;装饰者模式-Decorator-Pattern&quot;&gt;&lt;a href=&quot;#装饰者模式-Decorator-Pattern&quot; class=&quot;headerlink&quot; title=&quot;装饰者模式 Decorator Pattern&quot;&gt;&lt;/a&gt;装饰者模式 Decorator Pattern&lt;/h1&gt;&lt;h2 id=&quot;设计原则-五：&quot;&gt;&lt;a href=&quot;#设计原则-五：&quot; class=&quot;headerlink&quot; title=&quot;设计原则 五：&quot;&gt;&lt;/a&gt;设计原则 五：&lt;/h2&gt;&lt;p&gt;开放-关闭原则，类应该对拓展开放，对修改关闭。&lt;/p&gt;
    
    </summary>
    
      <category term="Design Pattern" scheme="http://cuijing.me/categories/Design-Pattern/"/>
    
    
      <category term="Java" scheme="http://cuijing.me/tags/Java/"/>
    
      <category term="Design Pattern" scheme="http://cuijing.me/tags/Design-Pattern/"/>
    
      <category term="Decorator" scheme="http://cuijing.me/tags/Decorator/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之 观察者模式</title>
    <link href="http://cuijing.me/2016/01/10/Design-Pattern/2-Observer/"/>
    <id>http://cuijing.me/2016/01/10/Design-Pattern/2-Observer/</id>
    <published>2016-01-10T00:30:00.000Z</published>
    <updated>2016-06-01T11:31:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="观察者模式-Observer-Pattern"><a href="#观察者模式-Observer-Pattern" class="headerlink" title="观察者模式 Observer Pattern"></a>观察者模式 Observer Pattern</h1><p>出版者＋订阅者 = 观察者模式</p><p>出版者（主题：subject）<br>订阅者（观察者：observer）<br><a id="more"></a><br><img src="http://oov0wb0gl.bkt.clouddn.com/2017-06-06-14965526256852.jpg?imageMogr2/blur/1x0/quality/50|imageslim" alt=""></p><h2 id="设计原则-四："><a href="#设计原则-四：" class="headerlink" title="设计原则 四："></a>设计原则 四：</h2><p>为了交互对象之间的松耦合设计而努力。</p><h2 id="定义观察者模式"><a href="#定义观察者模式" class="headerlink" title="定义观察者模式"></a>定义观察者模式</h2><p>观察者模式定义了对象之间的一对多依赖，这样一来，当对象改变状态时，它的所有依赖者都会收到通知并自动更新。</p><p>Java有多种观察者模式的实现，包括了通用的java.util. Observable。</p><h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><p><img src="http://oov0wb0gl.bkt.clouddn.com/2017-06-06-14965529720032.jpg?imageMogr2/blur/1x0/quality/50|imageslim" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package headfirst.observer.weather;</span><br><span class="line"></span><br><span class="line">public interface Subject &#123;</span><br><span class="line">public void registerObserver(Observer o);</span><br><span class="line">public void removeObserver(Observer o);</span><br><span class="line">public void notifyObservers();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public interface Observer &#123;</span><br><span class="line">public void update(float temp, float humidity, float pressure);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public interface DisplayElement &#123;</span><br><span class="line">public void display();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">package headfirst.observer.weather;</span><br><span class="line"></span><br><span class="line">import java.util.*;</span><br><span class="line"></span><br><span class="line">public class WeatherData implements Subject &#123;</span><br><span class="line">private ArrayList observers;</span><br><span class="line">private float temperature;</span><br><span class="line">private float humidity;</span><br><span class="line">private float pressure;</span><br><span class="line"></span><br><span class="line">public WeatherData() &#123;</span><br><span class="line">observers = new ArrayList();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void registerObserver(Observer o) &#123;</span><br><span class="line">observers.add(o);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void removeObserver(Observer o) &#123;</span><br><span class="line">int i = observers.indexOf(o);</span><br><span class="line">if (i &gt;= 0) &#123;</span><br><span class="line">observers.remove(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void notifyObservers() &#123;</span><br><span class="line">for (int i = 0; i &lt; observers.size(); i++) &#123;</span><br><span class="line">Observer observer = (Observer)observers.get(i);</span><br><span class="line">observer.update(temperature, humidity, pressure);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void measurementsChanged() &#123;</span><br><span class="line">notifyObservers();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setMeasurements(float temperature, float humidity, float pressure) &#123;</span><br><span class="line">this.temperature = temperature;</span><br><span class="line">this.humidity = humidity;</span><br><span class="line">this.pressure = pressure;</span><br><span class="line">measurementsChanged();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// other WeatherData methods here</span><br><span class="line"></span><br><span class="line">public float getTemperature() &#123;</span><br><span class="line">return temperature;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public float getHumidity() &#123;</span><br><span class="line">return humidity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public float getPressure() &#123;</span><br><span class="line">return pressure;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">package headfirst.observer.weather;</span><br><span class="line"></span><br><span class="line">public class CurrentConditionsDisplay implements Observer, DisplayElement &#123;</span><br><span class="line">private float temperature;</span><br><span class="line">private float humidity;</span><br><span class="line">private Subject weatherData;</span><br><span class="line"></span><br><span class="line">public CurrentConditionsDisplay(Subject weatherData) &#123;</span><br><span class="line">this.weatherData = weatherData;</span><br><span class="line">weatherData.registerObserver(this);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void update(float temperature, float humidity, float pressure) &#123;</span><br><span class="line">this.temperature = temperature;</span><br><span class="line">this.humidity = humidity;</span><br><span class="line">display();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void display() &#123;</span><br><span class="line">System.out.println(&quot;Current conditions: &quot; + temperature </span><br><span class="line">+ &quot;F degrees and &quot; + humidity + &quot;% humidity&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">package headfirst.observer.weather;</span><br><span class="line"></span><br><span class="line">import java.util.*;</span><br><span class="line"></span><br><span class="line">public class ForecastDisplay implements Observer, DisplayElement &#123;</span><br><span class="line">private float currentPressure = 29.92f;  </span><br><span class="line">private float lastPressure;</span><br><span class="line">private WeatherData weatherData;</span><br><span class="line"></span><br><span class="line">public ForecastDisplay(WeatherData weatherData) &#123;</span><br><span class="line">this.weatherData = weatherData;</span><br><span class="line">weatherData.registerObserver(this);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void update(float temp, float humidity, float pressure) &#123;</span><br><span class="line">                lastPressure = currentPressure;</span><br><span class="line">currentPressure = pressure;</span><br><span class="line"></span><br><span class="line">display();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void display() &#123;</span><br><span class="line">System.out.print(&quot;Forecast: &quot;);</span><br><span class="line">if (currentPressure &gt; lastPressure) &#123;</span><br><span class="line">System.out.println(&quot;Improving weather on the way!&quot;);</span><br><span class="line">&#125; else if (currentPressure == lastPressure) &#123;</span><br><span class="line">System.out.println(&quot;More of the same&quot;);</span><br><span class="line">&#125; else if (currentPressure &lt; lastPressure) &#123;</span><br><span class="line">System.out.println(&quot;Watch out for cooler, rainy weather&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">package headfirst.observer.weather;</span><br><span class="line"></span><br><span class="line">import java.util.*;</span><br><span class="line"></span><br><span class="line">public class WeatherStation &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">WeatherData weatherData = new WeatherData();</span><br><span class="line"></span><br><span class="line">CurrentConditionsDisplay currentDisplay = </span><br><span class="line">new CurrentConditionsDisplay(weatherData);</span><br><span class="line">StatisticsDisplay statisticsDisplay = new StatisticsDisplay(weatherData);</span><br><span class="line">ForecastDisplay forecastDisplay = new ForecastDisplay(weatherData);</span><br><span class="line"></span><br><span class="line">weatherData.setMeasurements(80, 65, 30.4f);</span><br><span class="line">weatherData.setMeasurements(82, 70, 29.2f);</span><br><span class="line">weatherData.setMeasurements(78, 90, 29.2f);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;观察者模式-Observer-Pattern&quot;&gt;&lt;a href=&quot;#观察者模式-Observer-Pattern&quot; class=&quot;headerlink&quot; title=&quot;观察者模式 Observer Pattern&quot;&gt;&lt;/a&gt;观察者模式 Observer Pattern&lt;/h1&gt;&lt;p&gt;出版者＋订阅者 = 观察者模式&lt;/p&gt;
&lt;p&gt;出版者（主题：subject）&lt;br&gt;订阅者（观察者：observer）&lt;br&gt;
    
    </summary>
    
      <category term="Design Pattern" scheme="http://cuijing.me/categories/Design-Pattern/"/>
    
    
      <category term="Java" scheme="http://cuijing.me/tags/Java/"/>
    
      <category term="Design Pattern" scheme="http://cuijing.me/tags/Design-Pattern/"/>
    
      <category term="Observer" scheme="http://cuijing.me/tags/Observer/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之 策略模式</title>
    <link href="http://cuijing.me/2016/01/08/Design-Pattern/1-Strategy/"/>
    <id>http://cuijing.me/2016/01/08/Design-Pattern/1-Strategy/</id>
    <published>2016-01-08T00:30:00.000Z</published>
    <updated>2016-06-01T11:21:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="策略模式-Strategy-Pattern"><a href="#策略模式-Strategy-Pattern" class="headerlink" title="策略模式 Strategy Pattern"></a>策略模式 Strategy Pattern</h1><h2 id="设计原则-一："><a href="#设计原则-一：" class="headerlink" title="设计原则 一："></a>设计原则 一：</h2><p>找出应用中可能需要变化之处， 把它们独立出来， 不要和那些不需要变化的代码混在一起。<br><a id="more"></a></p><h2 id="设计原则-二："><a href="#设计原则-二：" class="headerlink" title="设计原则 二："></a>设计原则 二：</h2><p>针对接口编程，而不是针对实现编程。</p><p>针对接口编程真正的意思是针对超类型（supertype） 编程。利用多态， 程序可以针对超类型编程， 执行时会根据实际状况执行到真正的行为， 不会被绑死在超类型的行为上。 </p><p>超类型： 通常是一个抽象类或者是一个接口</p><h2 id="设计原则-三："><a href="#设计原则-三：" class="headerlink" title="设计原则 三："></a>设计原则 三：</h2><p>（当我们需要扩展类的行为时）多用组合，少用继承。</p><p>使用组合建立系统具有很大的弹性， 不仅可将算法族封装成类，更可以在运行时动态地改变行为， 只要组合的行为对象， 符合正确的接口标准即可。</p><h2 id="策略模式定义："><a href="#策略模式定义：" class="headerlink" title="策略模式定义："></a>策略模式定义：</h2><p>策略模式定义了算法族， 分别封装起来， 让它们之间可以互相替换， 此模式让算法的变化独立于使用算法的客户。</p><p><img src="http://oov0wb0gl.bkt.clouddn.com/2017-06-09-2017-06-06-14965513657651-1.jpg" alt="2017-06-06-14965513657651"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;策略模式-Strategy-Pattern&quot;&gt;&lt;a href=&quot;#策略模式-Strategy-Pattern&quot; class=&quot;headerlink&quot; title=&quot;策略模式 Strategy Pattern&quot;&gt;&lt;/a&gt;策略模式 Strategy Pattern&lt;/h1&gt;&lt;h2 id=&quot;设计原则-一：&quot;&gt;&lt;a href=&quot;#设计原则-一：&quot; class=&quot;headerlink&quot; title=&quot;设计原则 一：&quot;&gt;&lt;/a&gt;设计原则 一：&lt;/h2&gt;&lt;p&gt;找出应用中可能需要变化之处， 把它们独立出来， 不要和那些不需要变化的代码混在一起。&lt;br&gt;
    
    </summary>
    
      <category term="Design Pattern" scheme="http://cuijing.me/categories/Design-Pattern/"/>
    
    
      <category term="Java" scheme="http://cuijing.me/tags/Java/"/>
    
      <category term="Design Pattern" scheme="http://cuijing.me/tags/Design-Pattern/"/>
    
      <category term="Strategy" scheme="http://cuijing.me/tags/Strategy/"/>
    
  </entry>
  
  <entry>
    <title>集合框架之 TreeSet</title>
    <link href="http://cuijing.me/2015/10/18/Java/8-Collection-Map/17-TreeSet/"/>
    <id>http://cuijing.me/2015/10/18/Java/8-Collection-Map/17-TreeSet/</id>
    <published>2015-10-18T00:30:00.000Z</published>
    <updated>2016-05-01T11:30:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TreeSet简介"><a href="#TreeSet简介" class="headerlink" title="TreeSet简介"></a>TreeSet简介</h1><p>TreeSet 是一个有序的集合，它的作用是提供有序的Set集合。它继承于AbstractSet抽象类，实现了NavigableSet<e>, Cloneable, java.io.Serializable接口。<br><a id="more"></a><br>TreeSet 继承于AbstractSet，所以它是一个Set集合，具有Set的属性和方法。<br>TreeSet 实现了NavigableSet接口，意味着它支持一系列的导航方法。比如查找与指定目标最匹配项。<br>TreeSet 实现了Cloneable接口，意味着它能被克隆。<br>TreeSet 实现了java.io.Serializable接口，意味着它支持序列化。</e></p><p>TreeSet是基于TreeMap实现的。TreeSet中的元素支持2种排序方式：自然排序 或者 根据创建TreeSet 时提供的 Comparator 进行排序。这取决于使用的构造方法。<br>TreeSet为基本操作（add、remove 和 contains）提供受保证的 log(n) 时间开销。<br>另外，TreeSet是非同步的。 它的iterator 方法返回的迭代器是fail-fast的。</p><h1 id="TreeSet的构造函数"><a href="#TreeSet的构造函数" class="headerlink" title="TreeSet的构造函数"></a>TreeSet的构造函数</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认构造函数。使用该构造函数，TreeSet中的元素按照自然排序进行排列。</span></span><br><span class="line">TreeSet()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建的TreeSet包含collection</span></span><br><span class="line">TreeSet(Collection&lt;? extends E&gt; collection)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定TreeSet的比较器</span></span><br><span class="line">TreeSet(Comparator&lt;? <span class="keyword">super</span> E&gt; comparator)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建的TreeSet包含set</span></span><br><span class="line">TreeSet(SortedSet&lt;E&gt; set)</span><br></pre></td></tr></table></figure><h1 id="TreeSet的API"><a href="#TreeSet的API" class="headerlink" title="TreeSet的API"></a>TreeSet的API</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span>                   <span class="title">add</span><span class="params">(E object)</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span>                   <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; collection)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span>                      <span class="title">clear</span><span class="params">()</span></span></span><br><span class="line"><span class="function">Object                    <span class="title">clone</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span>                   <span class="title">contains</span><span class="params">(Object object)</span></span></span><br><span class="line"><span class="function">E                         <span class="title">first</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span>                   <span class="title">isEmpty</span><span class="params">()</span></span></span><br><span class="line"><span class="function">E                         <span class="title">last</span><span class="params">()</span></span></span><br><span class="line"><span class="function">E                         <span class="title">pollFirst</span><span class="params">()</span></span></span><br><span class="line"><span class="function">E                         <span class="title">pollLast</span><span class="params">()</span></span></span><br><span class="line"><span class="function">E                         <span class="title">lower</span><span class="params">(E e)</span></span></span><br><span class="line"><span class="function">E                         <span class="title">floor</span><span class="params">(E e)</span></span></span><br><span class="line"><span class="function">E                         <span class="title">ceiling</span><span class="params">(E e)</span></span></span><br><span class="line"><span class="function">E                         <span class="title">higher</span><span class="params">(E e)</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span>                   <span class="title">remove</span><span class="params">(Object object)</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span>                       <span class="title">size</span><span class="params">()</span></span></span><br><span class="line"><span class="function">Comparator&lt;? <span class="keyword">super</span> E&gt;     <span class="title">comparator</span><span class="params">()</span></span></span><br><span class="line"><span class="function">Iterator&lt;E&gt;               <span class="title">iterator</span><span class="params">()</span></span></span><br><span class="line"><span class="function">Iterator&lt;E&gt;               <span class="title">descendingIterator</span><span class="params">()</span></span></span><br><span class="line"><span class="function">SortedSet&lt;E&gt;              <span class="title">headSet</span><span class="params">(E end)</span></span></span><br><span class="line"><span class="function">NavigableSet&lt;E&gt;           <span class="title">descendingSet</span><span class="params">()</span></span></span><br><span class="line"><span class="function">NavigableSet&lt;E&gt;           <span class="title">headSet</span><span class="params">(E end, <span class="keyword">boolean</span> endInclusive)</span></span></span><br><span class="line"><span class="function">SortedSet&lt;E&gt;              <span class="title">subSet</span><span class="params">(E start, E end)</span></span></span><br><span class="line"><span class="function">NavigableSet&lt;E&gt;           <span class="title">subSet</span><span class="params">(E start, <span class="keyword">boolean</span> startInclusive, E end, <span class="keyword">boolean</span> endInclusive)</span></span></span><br><span class="line"><span class="function">NavigableSet&lt;E&gt;           <span class="title">tailSet</span><span class="params">(E start, <span class="keyword">boolean</span> startInclusive)</span></span></span><br><span class="line"><span class="function">SortedSet&lt;E&gt;              <span class="title">tailSet</span><span class="params">(E start)</span></span></span><br></pre></td></tr></table></figure><p>说明：</p><ol><li>TreeSet是有序的Set集合，因此支持add、remove、get等方法。</li><li>和NavigableSet一样，TreeSet的导航方法大致可以区分为两类，一类时提供元素项的导航方法，返回某个元素；另一类时提供集合的导航方法，返回某个集合。</li></ol><p><strong>lower、floor、higher和 ceiling 分别返回小于、小于等于、大于等于、大于给定元素的元素，如果不存在这样的元素，则返回 null。</strong></p><h1 id="TreeSet数据结构"><a href="#TreeSet数据结构" class="headerlink" title="TreeSet数据结构"></a>TreeSet数据结构</h1><p>TreeSet的继承关系</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">java.lang.Object</span><br><span class="line">   ↳     java.util.AbstractCollection&lt;E&gt;</span><br><span class="line">         ↳     java.util.AbstractSet&lt;E&gt;</span><br><span class="line">               ↳     java.util.TreeSet&lt;E&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeSet</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractSet</span>&lt;<span class="title">E</span>&gt;        </span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">NavigableSet</span>&lt;<span class="title">E</span>&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>TreeSet与Collection关系图：</p><p><img src="http://oov0wb0gl.bkt.clouddn.com/2017-06-08-14969332446589.jpg" alt=""></p><p>从图中可以看出：</p><ol><li>TreeSet继承于AbstractSet，并且实现了NavigableSet接口。</li><li>TreeSet的本质是一个”有序的，并且没有重复元素”的集合，它是通过TreeMap实现的。TreeSet中含有一个”NavigableMap类型的成员变量”m，而m实际上是”TreeMap的实例”。</li></ol><h1 id="TreeSet源码解析-基于JDK1-6-0-45"><a href="#TreeSet源码解析-基于JDK1-6-0-45" class="headerlink" title="TreeSet源码解析(基于JDK1.6.0_45)"></a>TreeSet源码解析(基于JDK1.6.0_45)</h1><p>为了更了解TreeSet的原理，下面对TreeSet源码代码作出分析。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeSet</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractSet</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">NavigableSet</span>&lt;<span class="title">E</span>&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// NavigableMap对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> NavigableMap&lt;E,Object&gt; m;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// TreeSet是通过TreeMap实现的，</span></span><br><span class="line">    <span class="comment">// PRESENT是键-值对中的值。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object PRESENT = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不带参数的构造函数。创建一个空的TreeMap</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TreeSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="keyword">new</span> TreeMap&lt;E,Object&gt;());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将TreeMap赋值给 "NavigableMap对象m"</span></span><br><span class="line">    TreeSet(NavigableMap&lt;E,Object&gt; m) &#123;</span><br><span class="line">        <span class="keyword">this</span>.m = m;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 带比较器的构造函数。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TreeSet</span><span class="params">(Comparator&lt;? <span class="keyword">super</span> E&gt; comparator)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="keyword">new</span> TreeMap&lt;E,Object&gt;(comparator));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建TreeSet，并将集合c中的全部元素都添加到TreeSet中</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TreeSet</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>();</span><br><span class="line">        <span class="comment">// 将集合c中的元素全部添加到TreeSet中</span></span><br><span class="line">        addAll(c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建TreeSet，并将s中的全部元素都添加到TreeSet中</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TreeSet</span><span class="params">(SortedSet&lt;E&gt; s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(s.comparator());</span><br><span class="line">        addAll(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回TreeSet的顺序排列的迭代器。</span></span><br><span class="line">    <span class="comment">// 因为TreeSet时TreeMap实现的，所以这里实际上时返回TreeMap的“键集”对应的迭代器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m.navigableKeySet().iterator();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回TreeSet的逆序排列的迭代器。</span></span><br><span class="line">    <span class="comment">// 因为TreeSet时TreeMap实现的，所以这里实际上时返回TreeMap的“键集”对应的迭代器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title">descendingIterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m.descendingKeySet().iterator();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回TreeSet的大小</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回TreeSet是否为空</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回TreeSet是否包含对象(o)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m.containsKey(o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加e到TreeSet中</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m.put(e, PRESENT)==<span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除TreeSet中的对象o</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m.remove(o)==PRESENT;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清空TreeSet</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        m.clear();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将集合c中的全部元素添加到TreeSet中</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Use linear-time version if applicable</span></span><br><span class="line">        <span class="keyword">if</span> (m.size()==<span class="number">0</span> &amp;&amp; c.size() &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">            c <span class="keyword">instanceof</span> SortedSet &amp;&amp;</span><br><span class="line">            m <span class="keyword">instanceof</span> TreeMap) &#123;</span><br><span class="line">            SortedSet&lt;? extends E&gt; set = (SortedSet&lt;? extends E&gt;) c;</span><br><span class="line">            TreeMap&lt;E,Object&gt; map = (TreeMap&lt;E, Object&gt;) m;</span><br><span class="line">            Comparator&lt;? <span class="keyword">super</span> E&gt; cc = (Comparator&lt;? <span class="keyword">super</span> E&gt;) set.comparator();</span><br><span class="line">            Comparator&lt;? <span class="keyword">super</span> E&gt; mc = map.comparator();</span><br><span class="line">            <span class="keyword">if</span> (cc==mc || (cc != <span class="keyword">null</span> &amp;&amp; cc.equals(mc))) &#123;</span><br><span class="line">                map.addAllForTreeSet(set, PRESENT);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.addAll(c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回子Set，实际上是通过TreeMap的subMap()实现的。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> NavigableSet&lt;E&gt; <span class="title">subSet</span><span class="params">(E fromElement, <span class="keyword">boolean</span> fromInclusive,</span></span></span><br><span class="line"><span class="function"><span class="params">                                  E toElement,   <span class="keyword">boolean</span> toInclusive)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TreeSet&lt;E&gt;(m.subMap(fromElement, fromInclusive,</span><br><span class="line">                                       toElement,   toInclusive));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回Set的头部，范围是：从头部到toElement。</span></span><br><span class="line">    <span class="comment">// inclusive是是否包含toElement的标志</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> NavigableSet&lt;E&gt; <span class="title">headSet</span><span class="params">(E toElement, <span class="keyword">boolean</span> inclusive)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TreeSet&lt;E&gt;(m.headMap(toElement, inclusive));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回Set的尾部，范围是：从fromElement到结尾。</span></span><br><span class="line">    <span class="comment">// inclusive是是否包含fromElement的标志</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> NavigableSet&lt;E&gt; <span class="title">tailSet</span><span class="params">(E fromElement, <span class="keyword">boolean</span> inclusive)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TreeSet&lt;E&gt;(m.tailMap(fromElement, inclusive));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回子Set。范围是：从fromElement(包括)到toElement(不包括)。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SortedSet&lt;E&gt; <span class="title">subSet</span><span class="params">(E fromElement, E toElement)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> subSet(fromElement, <span class="keyword">true</span>, toElement, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回Set的头部，范围是：从头部到toElement(不包括)。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SortedSet&lt;E&gt; <span class="title">headSet</span><span class="params">(E toElement)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> headSet(toElement, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回Set的尾部，范围是：从fromElement到结尾(不包括)。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SortedSet&lt;E&gt; <span class="title">tailSet</span><span class="params">(E fromElement)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tailSet(fromElement, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回Set的比较器</span></span><br><span class="line">    <span class="keyword">public</span> Comparator&lt;? <span class="keyword">super</span> E&gt; comparator() &#123;</span><br><span class="line">        <span class="keyword">return</span> m.comparator();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回Set的第一个元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">first</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m.firstKey();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回Set的最后一个元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">first</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">last</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m.lastKey();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回Set中小于e的最大元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">lower</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m.lowerKey(e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回Set中小于/等于e的最大元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">floor</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m.floorKey(e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回Set中大于/等于e的最小元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">ceiling</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m.ceilingKey(e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回Set中大于e的最小元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">higher</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m.higherKey(e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取第一个元素，并将该元素从TreeMap中删除。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">pollFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map.Entry&lt;E,?&gt; e = m.pollFirstEntry();</span><br><span class="line">        <span class="keyword">return</span> (e == <span class="keyword">null</span>)? <span class="keyword">null</span> : e.getKey();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取最后一个元素，并将该元素从TreeMap中删除。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">pollLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map.Entry&lt;E,?&gt; e = m.pollLastEntry();</span><br><span class="line">        <span class="keyword">return</span> (e == <span class="keyword">null</span>)? <span class="keyword">null</span> : e.getKey();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 克隆一个TreeSet，并返回Object对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        TreeSet&lt;E&gt; clone = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            clone = (TreeSet&lt;E&gt;) <span class="keyword">super</span>.clone();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InternalError();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        clone.m = <span class="keyword">new</span> TreeMap&lt;E,Object&gt;(m);</span><br><span class="line">        <span class="keyword">return</span> clone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// java.io.Serializable的写入函数</span></span><br><span class="line">    <span class="comment">// 将TreeSet的“比较器、容量，所有的元素值”都写入到输出流中</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeObject</span><span class="params">(java.io.ObjectOutputStream s)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> java.io.IOException </span>&#123;</span><br><span class="line">        s.defaultWriteObject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 写入比较器</span></span><br><span class="line">        s.writeObject(m.comparator());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 写入容量</span></span><br><span class="line">        s.writeInt(m.size());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 写入“TreeSet中的每一个元素”</span></span><br><span class="line">        <span class="keyword">for</span> (Iterator i=m.keySet().iterator(); i.hasNext(); )</span><br><span class="line">            s.writeObject(i.next());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// java.io.Serializable的读取函数：根据写入方式读出</span></span><br><span class="line">    <span class="comment">// 先将TreeSet的“比较器、容量、所有的元素值”依次读出</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">// Read in any hidden stuff</span></span><br><span class="line">        s.defaultReadObject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从输入流中读取TreeSet的“比较器”</span></span><br><span class="line">        Comparator&lt;? <span class="keyword">super</span> E&gt; c = (Comparator&lt;? <span class="keyword">super</span> E&gt;) s.readObject();</span><br><span class="line"></span><br><span class="line">        TreeMap&lt;E,Object&gt; tm;</span><br><span class="line">        <span class="keyword">if</span> (c==<span class="keyword">null</span>)</span><br><span class="line">            tm = <span class="keyword">new</span> TreeMap&lt;E,Object&gt;();</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            tm = <span class="keyword">new</span> TreeMap&lt;E,Object&gt;(c);</span><br><span class="line">        m = tm;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从输入流中读取TreeSet的“容量”</span></span><br><span class="line">        <span class="keyword">int</span> size = s.readInt();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从输入流中读取TreeSet的“全部元素”</span></span><br><span class="line">        tm.readTreeSet(size, s, PRESENT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// TreeSet的序列版本号</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">2479143000061671589L</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><ol><li>TreeSet实际上是TreeMap实现的。当我们构造TreeSet时；若使用不带参数的构造函数，则TreeSet的使用自然比较器；若用户需要使用自定义的比较器，则需要使用带比较器的参数。</li><li>TreeSet是非线程安全的。</li><li>TreeSet实现java.io.Serializable的方式。当写入到输出流时，依次写入“比较器、容量、全部元素”；当读出输入流时，再依次读取。</li></ol><h1 id="TreeSet遍历方式"><a href="#TreeSet遍历方式" class="headerlink" title="TreeSet遍历方式"></a>TreeSet遍历方式</h1><h2 id="Iterator顺序遍历"><a href="#Iterator顺序遍历" class="headerlink" title="Iterator顺序遍历"></a>Iterator顺序遍历</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(Iterator iter = set.iterator(); iter.hasNext(); ) &#123; </span><br><span class="line">    iter.next();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Iterator倒序遍历"><a href="#Iterator倒序遍历" class="headerlink" title="Iterator倒序遍历"></a>Iterator倒序遍历</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设set是TreeSet对象</span></span><br><span class="line"><span class="keyword">for</span>(Iterator iter = set.descendingIterator(); iter.hasNext(); ) &#123; </span><br><span class="line">    iter.next();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="for-each遍历HashSet"><a href="#for-each遍历HashSet" class="headerlink" title="for-each遍历HashSet"></a>for-each遍历HashSet</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设set是TreeSet对象，并且set中元素是String类型</span></span><br><span class="line">String[] arr = (String[])set.toArray(<span class="keyword">new</span> String[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">for</span> (String str:arr)</span><br><span class="line">    System.out.printf(<span class="string">"for each : %s\n"</span>, str);</span><br></pre></td></tr></table></figure><p>TreeSet不支持快速随机遍历，只能通过迭代器进行遍历！</p><p>TreeSet遍历测试程序如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desc</span> TreeSet的遍历程序</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> skywang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@email</span> kuiwu-wang@163.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeSetIteratorTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TreeSet set = <span class="keyword">new</span> TreeSet();</span><br><span class="line">        set.add(<span class="string">"aaa"</span>);</span><br><span class="line">        set.add(<span class="string">"aaa"</span>);</span><br><span class="line">        set.add(<span class="string">"bbb"</span>);</span><br><span class="line">        set.add(<span class="string">"eee"</span>);</span><br><span class="line">        set.add(<span class="string">"ddd"</span>);</span><br><span class="line">        set.add(<span class="string">"ccc"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 顺序遍历TreeSet</span></span><br><span class="line">        ascIteratorThroughIterator(set) ;</span><br><span class="line">        <span class="comment">// 逆序遍历TreeSet</span></span><br><span class="line">        descIteratorThroughIterator(set);</span><br><span class="line">        <span class="comment">// 通过for-each遍历TreeSet。不推荐！此方法需要先将Set转换为数组</span></span><br><span class="line">        foreachTreeSet(set);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 顺序遍历TreeSet</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ascIteratorThroughIterator</span><span class="params">(TreeSet set)</span> </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">"\n ---- Ascend Iterator ----\n"</span>);</span><br><span class="line">        <span class="keyword">for</span>(Iterator iter = set.iterator(); iter.hasNext(); ) &#123;</span><br><span class="line">            System.out.printf(<span class="string">"asc : %s\n"</span>, iter.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 逆序遍历TreeSet</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">descIteratorThroughIterator</span><span class="params">(TreeSet set)</span> </span>&#123;</span><br><span class="line">        System.out.printf(<span class="string">"\n ---- Descend Iterator ----\n"</span>);</span><br><span class="line">        <span class="keyword">for</span>(Iterator iter = set.descendingIterator(); iter.hasNext(); )</span><br><span class="line">            System.out.printf(<span class="string">"desc : %s\n"</span>, (String)iter.next());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过for-each遍历TreeSet。不推荐！此方法需要先将Set转换为数组</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">foreachTreeSet</span><span class="params">(TreeSet set)</span> </span>&#123;</span><br><span class="line">        System.out.printf(<span class="string">"\n ---- For-each ----\n"</span>);</span><br><span class="line">        String[] arr = (String[])set.toArray(<span class="keyword">new</span> String[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">for</span> (String str:arr)</span><br><span class="line">            System.out.printf(<span class="string">"for each : %s\n"</span>, str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> ---- Ascend Iterator ----</span><br><span class="line">asc : aaa</span><br><span class="line">asc : bbb</span><br><span class="line">asc : ccc</span><br><span class="line">asc : ddd</span><br><span class="line">asc : eee</span><br><span class="line"></span><br><span class="line"> ---- Descend Iterator ----</span><br><span class="line">desc : eee</span><br><span class="line">desc : ddd</span><br><span class="line">desc : ccc</span><br><span class="line">desc : bbb</span><br><span class="line">desc : aaa</span><br><span class="line"></span><br><span class="line"> ---- For-each ----</span><br><span class="line"><span class="keyword">for</span> each : aaa</span><br><span class="line"><span class="keyword">for</span> each : bbb</span><br><span class="line"><span class="keyword">for</span> each : ccc</span><br><span class="line"><span class="keyword">for</span> each : ddd</span><br><span class="line"><span class="keyword">for</span> each : eee</span><br></pre></td></tr></table></figure><h1 id="TreeSet示例"><a href="#TreeSet示例" class="headerlink" title="TreeSet示例"></a>TreeSet示例</h1><p>下面通过实例学习如何使用TreeSet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desc</span> TreeSet的API测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> skywang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@email</span> kuiwu-wang@163.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeSetTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        testTreeSetAPIs();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 测试TreeSet的api</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testTreeSetAPIs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String val;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 新建TreeSet</span></span><br><span class="line">        TreeSet tSet = <span class="keyword">new</span> TreeSet();</span><br><span class="line">        <span class="comment">// 将元素添加到TreeSet中</span></span><br><span class="line">        tSet.add(<span class="string">"aaa"</span>);</span><br><span class="line">        <span class="comment">// Set中不允许重复元素，所以只会保存一个“aaa”</span></span><br><span class="line">        tSet.add(<span class="string">"aaa"</span>);</span><br><span class="line">        tSet.add(<span class="string">"bbb"</span>);</span><br><span class="line">        tSet.add(<span class="string">"eee"</span>);</span><br><span class="line">        tSet.add(<span class="string">"ddd"</span>);</span><br><span class="line">        tSet.add(<span class="string">"ccc"</span>);</span><br><span class="line">        System.out.println(<span class="string">"TreeSet:"</span>+tSet);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印TreeSet的实际大小</span></span><br><span class="line">        System.out.printf(<span class="string">"size : %d\n"</span>, tSet.size());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 导航方法</span></span><br><span class="line">        <span class="comment">// floor(小于、等于)</span></span><br><span class="line">        System.out.printf(<span class="string">"floor bbb: %s\n"</span>, tSet.floor(<span class="string">"bbb"</span>));</span><br><span class="line">        <span class="comment">// lower(小于)</span></span><br><span class="line">        System.out.printf(<span class="string">"lower bbb: %s\n"</span>, tSet.lower(<span class="string">"bbb"</span>));</span><br><span class="line">        <span class="comment">// ceiling(大于、等于)</span></span><br><span class="line">        System.out.printf(<span class="string">"ceiling bbb: %s\n"</span>, tSet.ceiling(<span class="string">"bbb"</span>));</span><br><span class="line">        System.out.printf(<span class="string">"ceiling eee: %s\n"</span>, tSet.ceiling(<span class="string">"eee"</span>));</span><br><span class="line">        <span class="comment">// ceiling(大于)</span></span><br><span class="line">        System.out.printf(<span class="string">"higher bbb: %s\n"</span>, tSet.higher(<span class="string">"bbb"</span>));</span><br><span class="line">        <span class="comment">// subSet()</span></span><br><span class="line">        System.out.printf(<span class="string">"subSet(aaa, true, ccc, true): %s\n"</span>, tSet.subSet(<span class="string">"aaa"</span>, <span class="keyword">true</span>, <span class="string">"ccc"</span>, <span class="keyword">true</span>));</span><br><span class="line">        System.out.printf(<span class="string">"subSet(aaa, true, ccc, false): %s\n"</span>, tSet.subSet(<span class="string">"aaa"</span>, <span class="keyword">true</span>, <span class="string">"ccc"</span>, <span class="keyword">false</span>));</span><br><span class="line">        System.out.printf(<span class="string">"subSet(aaa, false, ccc, true): %s\n"</span>, tSet.subSet(<span class="string">"aaa"</span>, <span class="keyword">false</span>, <span class="string">"ccc"</span>, <span class="keyword">true</span>));</span><br><span class="line">        System.out.printf(<span class="string">"subSet(aaa, false, ccc, false): %s\n"</span>, tSet.subSet(<span class="string">"aaa"</span>, <span class="keyword">false</span>, <span class="string">"ccc"</span>, <span class="keyword">false</span>));</span><br><span class="line">        <span class="comment">// headSet()</span></span><br><span class="line">        System.out.printf(<span class="string">"headSet(ccc, true): %s\n"</span>, tSet.headSet(<span class="string">"ccc"</span>, <span class="keyword">true</span>));</span><br><span class="line">        System.out.printf(<span class="string">"headSet(ccc, false): %s\n"</span>, tSet.headSet(<span class="string">"ccc"</span>, <span class="keyword">false</span>));</span><br><span class="line">        <span class="comment">// tailSet()</span></span><br><span class="line">        System.out.printf(<span class="string">"tailSet(ccc, true): %s\n"</span>, tSet.tailSet(<span class="string">"ccc"</span>, <span class="keyword">true</span>));</span><br><span class="line">        System.out.printf(<span class="string">"tailSet(ccc, false): %s\n"</span>, tSet.tailSet(<span class="string">"ccc"</span>, <span class="keyword">false</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除“ccc”</span></span><br><span class="line">        tSet.remove(<span class="string">"ccc"</span>);</span><br><span class="line">        <span class="comment">// 将Set转换为数组</span></span><br><span class="line">        String[] arr = (String[])tSet.toArray(<span class="keyword">new</span> String[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">for</span> (String str:arr)</span><br><span class="line">            System.out.printf(<span class="string">"for each : %s\n"</span>, str);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印TreeSet</span></span><br><span class="line">        System.out.printf(<span class="string">"TreeSet:%s\n"</span>, tSet);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历TreeSet</span></span><br><span class="line">        <span class="keyword">for</span>(Iterator iter = tSet.iterator(); iter.hasNext(); ) &#123;</span><br><span class="line">            System.out.printf(<span class="string">"iter : %s\n"</span>, iter.next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除并返回第一个元素</span></span><br><span class="line">        val = (String)tSet.pollFirst();</span><br><span class="line">        System.out.printf(<span class="string">"pollFirst=%s, set=%s\n"</span>, val, tSet);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除并返回最后一个元素</span></span><br><span class="line">        val = (String)tSet.pollLast();</span><br><span class="line">        System.out.printf(<span class="string">"pollLast=%s, set=%s\n"</span>, val, tSet);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 清空HashSet</span></span><br><span class="line">        tSet.clear();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出HashSet是否为空</span></span><br><span class="line">        System.out.printf(<span class="string">"%s\n"</span>, tSet.isEmpty()?<span class="string">"set is empty"</span>:<span class="string">"set is not empty"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">TreeSet:[aaa, bbb, ccc, ddd, eee]</span><br><span class="line">size : <span class="number">5</span></span><br><span class="line">floor bbb: bbb</span><br><span class="line">lower bbb: aaa</span><br><span class="line">ceiling bbb: bbb</span><br><span class="line">ceiling eee: eee</span><br><span class="line">higher bbb: ccc</span><br><span class="line">subSet(aaa, <span class="keyword">true</span>, ccc, <span class="keyword">true</span>): [aaa, bbb, ccc]</span><br><span class="line">subSet(aaa, <span class="keyword">true</span>, ccc, <span class="keyword">false</span>): [aaa, bbb]</span><br><span class="line">subSet(aaa, <span class="keyword">false</span>, ccc, <span class="keyword">true</span>): [bbb, ccc]</span><br><span class="line">subSet(aaa, <span class="keyword">false</span>, ccc, <span class="keyword">false</span>): [bbb]</span><br><span class="line">headSet(ccc, <span class="keyword">true</span>): [aaa, bbb, ccc]</span><br><span class="line">headSet(ccc, <span class="keyword">false</span>): [aaa, bbb]</span><br><span class="line">tailSet(ccc, <span class="keyword">true</span>): [ccc, ddd, eee]</span><br><span class="line">tailSet(ccc, <span class="keyword">false</span>): [ddd, eee]</span><br><span class="line"><span class="keyword">for</span> each : aaa</span><br><span class="line"><span class="keyword">for</span> each : bbb</span><br><span class="line"><span class="keyword">for</span> each : ddd</span><br><span class="line"><span class="keyword">for</span> each : eee</span><br><span class="line">TreeSet:[aaa, bbb, ddd, eee]</span><br><span class="line">iter : aaa</span><br><span class="line">iter : bbb</span><br><span class="line">iter : ddd</span><br><span class="line">iter : eee</span><br><span class="line">pollFirst=aaa, set=[bbb, ddd, eee]</span><br><span class="line">pollLast=eee, set=[bbb, ddd]</span><br><span class="line">set is empty</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;TreeSet简介&quot;&gt;&lt;a href=&quot;#TreeSet简介&quot; class=&quot;headerlink&quot; title=&quot;TreeSet简介&quot;&gt;&lt;/a&gt;TreeSet简介&lt;/h1&gt;&lt;p&gt;TreeSet 是一个有序的集合，它的作用是提供有序的Set集合。它继承于AbstractSet抽象类，实现了NavigableSet&lt;e&gt;, Cloneable, java.io.Serializable接口。&lt;br&gt;
    
    </summary>
    
      <category term="Java 集合" scheme="http://cuijing.me/categories/Java-%E9%9B%86%E5%90%88/"/>
    
    
      <category term="Java" scheme="http://cuijing.me/tags/Java/"/>
    
      <category term="Set" scheme="http://cuijing.me/tags/Set/"/>
    
      <category term="TreeSet" scheme="http://cuijing.me/tags/TreeSet/"/>
    
  </entry>
  
  <entry>
    <title>集合框架之 Iterator 和 Enumeration 比较</title>
    <link href="http://cuijing.me/2015/10/18/Java/8-Collection-Map/18-Iterator-and-Enumeration/"/>
    <id>http://cuijing.me/2015/10/18/Java/8-Collection-Map/18-Iterator-and-Enumeration/</id>
    <published>2015-10-18T00:30:00.000Z</published>
    <updated>2016-05-01T11:32:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Iterator和Enumeration区别"><a href="#Iterator和Enumeration区别" class="headerlink" title="Iterator和Enumeration区别"></a>Iterator和Enumeration区别</h1><p>在Java集合中，我们通常都通过 “Iterator(迭代器)” 或 “Enumeration(枚举类)” 去遍历集合。今天，我们就一起学习一下它们之间到底有什么区别。</p><p>我们先看看 Enumeration.java 和 Iterator.java的源码，再说它们的区别。<br><a id="more"></a><br>Enumeration是一个接口，它的源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Enumeration</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">hasMoreElements</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">E <span class="title">nextElement</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Iterator也是一个接口，它的源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">E <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看完代码了，我们再来说说它们之间的区别。</p><ol><li><p>函数接口不同</p><ol><li>Enumeration只有2个函数接口。通过Enumeration，我们只能读取集合的数据，而不能对数据进行修改。</li><li>Iterator只有3个函数接口。Iterator除了能读取集合的数据之外，也能数据进行删除操作。</li></ol></li><li><p>Iterator支持fail-fast机制，而Enumeration不支持。</p><ol><li>Enumeration 是JDK 1.0添加的接口。使用到它的函数包括Vector、Hashtable等类，这些类都是JDK 1.0中加入的，Enumeration存在的目的就是为它们提供遍历接口。Enumeration本身并没有支持同步，而在Vector、Hashtable实现Enumeration时，添加了同步。</li><li>而Iterator 是JDK 1.2才添加的接口，它也是为了HashMap、ArrayList等集合提供遍历接口。Iterator是支持fail-fast机制的：当多个线程对同一个集合的内容进行操作时，就可能会产生fail-fast事件。</li></ol></li></ol><h1 id="Iterator和Enumeration实例"><a href="#Iterator和Enumeration实例" class="headerlink" title="Iterator和Enumeration实例"></a>Iterator和Enumeration实例</h1><p>下面，我们编写一个Hashtable，然后分别通过 Iterator 和 Enumeration 去遍历它，比较它们的效率。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Map.Entry;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 测试分别通过 Iterator 和 Enumeration 去遍历Hashtable</span></span><br><span class="line"><span class="comment"> * @author skywang</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IteratorEnumeration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> val;</span><br><span class="line">        Random r = <span class="keyword">new</span> Random();</span><br><span class="line">        Hashtable table = <span class="keyword">new</span> Hashtable();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">100000</span>; i++) &#123;</span><br><span class="line">            <span class="comment">// 随机获取一个[0,100)之间的数字</span></span><br><span class="line">            val = r.nextInt(<span class="number">100</span>);</span><br><span class="line">            table.put(String.valueOf(i), val);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过Iterator遍历Hashtable</span></span><br><span class="line">        iterateHashtable(table) ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过Enumeration遍历Hashtable</span></span><br><span class="line">        enumHashtable(table);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 通过Iterator遍历Hashtable</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">iterateHashtable</span><span class="params">(Hashtable table)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        Iterator iter = table.entrySet().iterator();</span><br><span class="line">        <span class="keyword">while</span>(iter.hasNext()) &#123;</span><br><span class="line">            <span class="comment">//System.out.println("iter:"+iter.next());</span></span><br><span class="line">            iter.next();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">        countTime(startTime, endTime);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 通过Enumeration遍历Hashtable</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">enumHashtable</span><span class="params">(Hashtable table)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        Enumeration enu = table.elements();</span><br><span class="line">        <span class="keyword">while</span>(enu.hasMoreElements()) &#123;</span><br><span class="line">            <span class="comment">//System.out.println("enu:"+enu.nextElement());</span></span><br><span class="line">            enu.nextElement();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">        countTime(startTime, endTime);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">countTime</span><span class="params">(<span class="keyword">long</span> start, <span class="keyword">long</span> end)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"time: "</span>+(end-start)+<span class="string">"ms"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">time: <span class="number">9</span>ms</span><br><span class="line">time: <span class="number">5</span>ms</span><br></pre></td></tr></table></figure><p>从中，我们可以看出。Enumeration 比 Iterator 的遍历速度更快。为什么呢？<br>这是因为，Hashtable中Iterator是通过Enumeration去实现的，而且Iterator添加了对fail-fast机制的支持；所以，执行的操作自然要多一些。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Iterator和Enumeration区别&quot;&gt;&lt;a href=&quot;#Iterator和Enumeration区别&quot; class=&quot;headerlink&quot; title=&quot;Iterator和Enumeration区别&quot;&gt;&lt;/a&gt;Iterator和Enumeration区别&lt;/h1&gt;&lt;p&gt;在Java集合中，我们通常都通过 “Iterator(迭代器)” 或 “Enumeration(枚举类)” 去遍历集合。今天，我们就一起学习一下它们之间到底有什么区别。&lt;/p&gt;
&lt;p&gt;我们先看看 Enumeration.java 和 Iterator.java的源码，再说它们的区别。&lt;br&gt;
    
    </summary>
    
      <category term="Java 集合" scheme="http://cuijing.me/categories/Java-%E9%9B%86%E5%90%88/"/>
    
    
      <category term="Java" scheme="http://cuijing.me/tags/Java/"/>
    
      <category term="Iterator" scheme="http://cuijing.me/tags/Iterator/"/>
    
      <category term="Enumeration" scheme="http://cuijing.me/tags/Enumeration/"/>
    
  </entry>
  
  <entry>
    <title>集合框架之 Set</title>
    <link href="http://cuijing.me/2015/09/15/Java/8-Collection-Map/15-Set/"/>
    <id>http://cuijing.me/2015/09/15/Java/8-Collection-Map/15-Set/</id>
    <published>2015-09-15T00:30:00.000Z</published>
    <updated>2016-05-01T11:36:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h1><p>前面，我们已经系统的对List和Map进行了学习。接下来，我们开始可以学习Set。相信经过Map的了解之后，学习Set会容易很多。毕竟，Set的实现类都是基于Map来实现的(HashSet是通过HashMap实现的，TreeSet是通过TreeMap实现的)。</p><p>首先，我们看看Set架构。<br><a id="more"></a><br><img src="http://oov0wb0gl.bkt.clouddn.com/2017-06-08-14969275258628.jpg" alt=""></p><ol><li>Set 是继承于Collection的接口。它是一个不允许有重复元素的集合。</li><li>AbstractSet 是一个抽象类，它继承于AbstractCollection，AbstractCollection实现了Set中的绝大部分函数，为Set的实现类提供了便利。</li><li>HastSet 和 TreeSet 是Set的两个实现类。<ol><li>HashSet依赖于HashMap，它实际上是通过HashMap实现的。HashSet中的元素是无序的。</li><li>TreeSet依赖于TreeMap，它实际上是通过TreeMap实现的。TreeSet中的元素是有序的。</li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Set&quot;&gt;&lt;a href=&quot;#Set&quot; class=&quot;headerlink&quot; title=&quot;Set&quot;&gt;&lt;/a&gt;Set&lt;/h1&gt;&lt;p&gt;前面，我们已经系统的对List和Map进行了学习。接下来，我们开始可以学习Set。相信经过Map的了解之后，学习Set会容易很多。毕竟，Set的实现类都是基于Map来实现的(HashSet是通过HashMap实现的，TreeSet是通过TreeMap实现的)。&lt;/p&gt;
&lt;p&gt;首先，我们看看Set架构。&lt;br&gt;
    
    </summary>
    
      <category term="Java 集合" scheme="http://cuijing.me/categories/Java-%E9%9B%86%E5%90%88/"/>
    
    
      <category term="Java" scheme="http://cuijing.me/tags/Java/"/>
    
      <category term="Set" scheme="http://cuijing.me/tags/Set/"/>
    
  </entry>
  
  <entry>
    <title>集合框架之 Map总结</title>
    <link href="http://cuijing.me/2015/09/15/Java/8-Collection-Map/14-Map%E6%80%BB%E7%BB%93/"/>
    <id>http://cuijing.me/2015/09/15/Java/8-Collection-Map/14-Map总结/</id>
    <published>2015-09-15T00:30:00.000Z</published>
    <updated>2016-05-01T11:38:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Map-总结"><a href="#Map-总结" class="headerlink" title="Map 总结"></a>Map 总结</h1><p>学完了Map的全部内容，我们再回头看看Map的框架图。</p><p><img src="http://oov0wb0gl.bkt.clouddn.com/2017-06-08-14969090857546.jpg" alt=""><br><a id="more"></a></p><h1 id="Map概括"><a href="#Map概括" class="headerlink" title="Map概括"></a>Map概括</h1><ol><li>Map 是“键值对”映射的抽象接口。</li><li>AbstractMap 实现了Map中的绝大部分函数接口。它减少了“Map的实现类”的重复编码。</li><li>SortedMap 有序的“键值对”映射接口。</li><li>NavigableMap 是继承于SortedMap的，支持导航函数的接口。</li><li>HashMap, Hashtable, TreeMap, WeakHashMap这4个类是“键值对”映射的实现类。它们各有区别！<ol><li><strong>HashMap</strong>  是基于“拉链法”实现的散列表。一般用于单线程程序中。</li><li><strong>Hashtable</strong>  也是基于“拉链法”实现的散列表。它一般用于多线程程序中。</li><li><strong>WeakHashMap</strong>  也是基于“拉链法”实现的散列表，它一般也用于单线程程序中。相比HashMap，WeakHashMap中的键是“弱键”，当“弱键”被GC回收时，它对应的键值对也会被从WeakHashMap中删除；而HashMap中的键是强键。</li><li><strong>TreeMap</strong>  是有序的散列表，它是通过红黑树实现的。它一般用于单线程中存储有序的映射。</li></ol></li></ol><h1 id="HashMap和Hashtable异同"><a href="#HashMap和Hashtable异同" class="headerlink" title="HashMap和Hashtable异同"></a>HashMap和Hashtable异同</h1><h2 id="HashMap和Hashtable的相同点"><a href="#HashMap和Hashtable的相同点" class="headerlink" title="HashMap和Hashtable的相同点"></a>HashMap和Hashtable的相同点</h2><p><img src="http://oov0wb0gl.bkt.clouddn.com/2017-06-08-14969123240836.jpg" alt=""></p><p>HashMap和Hashtable都是存储“键值对(key-value)”的散列表，而且都是采用拉链法实现的。</p><h3 id="存储的思想都是："><a href="#存储的思想都是：" class="headerlink" title="存储的思想都是："></a>存储的思想都是：</h3><p>通过table数组存储，数组的每一个元素都是一个Entry；而一个Entry就是一个单向链表，Entry链表中的每一个节点就保存了key-value键值对数据。</p><h3 id="添加key-value键值对："><a href="#添加key-value键值对：" class="headerlink" title="添加key-value键值对："></a>添加key-value键值对：</h3><p>首先，根据key值计算出哈希值，再计算出数组索引(即，该key-value在table中的索引)。然后，根据数组索引找到Entry(即，单向链表)，再遍历单向链表，将key和链表中的每一个节点的key进行对比。若key已经存在Entry链表中，则用该value值取代旧的value值；若key不存在Entry链表中，则新建一个key-value节点，并将该节点插入Entry链表的表头位置。</p><h3 id="删除key-value键值对："><a href="#删除key-value键值对：" class="headerlink" title="删除key-value键值对："></a>删除key-value键值对：</h3><p>删除键值对，相比于“添加键值对”来说，简单很多。首先，还是根据key计算出哈希值，再计算出数组索引(即，该key-value在table中的索引)。然后，根据索引找出Entry(即，单向链表)。若节点key-value存在与链表Entry中，则删除链表中的节点即可。</p><p>上面介绍了HashMap和Hashtable的相同点。正是由于它们都是散列表，我们关注更多的是“它们的区别，以及它们分别适合在什么情况下使用”。那接下来，我们先看看它们的区别。</p><h2 id="HashMap和Hashtable的不同点"><a href="#HashMap和Hashtable的不同点" class="headerlink" title="HashMap和Hashtable的不同点"></a>HashMap和Hashtable的不同点</h2><h3 id="继承和实现方式不同"><a href="#继承和实现方式不同" class="headerlink" title="继承和实现方式不同"></a>继承和实现方式不同</h3><p><img src="http://oov0wb0gl.bkt.clouddn.com/2017-06-08-14969321029224.jpg" alt=""></p><p>HashMap 继承于AbstractMap，实现了Map、Cloneable、java.io.Serializable接口。<br>Hashtable 继承于Dictionary，实现了Map、Cloneable、java.io.Serializable接口。</p><p>HashMap的定义:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">Cloneable</span>, <span class="title">Serializable</span> </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure><p>Hashtable的定义:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hashtable</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">Dictionary</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure><p>从中，我们可以看出：<br>1.1 HashMap和Hashtable都实现了Map、Cloneable、java.io.Serializable接口。<br>      实现了Map接口，意味着它们都支持key-value键值对操作。支持“添加key-value键值对”、“获取key”、“获取value”、“获取map大小”、“清空map”等基本的key-value键值对操作。<br>      实现了Cloneable接口，意味着它能被克隆。<br>      实现了java.io.Serializable接口，意味着它们支持序列化，能通过序列化去传输。</p><p>1.2 HashMap继承于AbstractMap，而Hashtable继承于Dictionary<br>      Dictionary是一个抽象类，它直接继承于Object类，没有实现任何接口。Dictionary类是JDK 1.0的引入的。虽然Dictionary也支持“添加key-value键值对”、“获取value”、“获取大小”等基本操作，但它的API函数比Map少；而且             Dictionary一般是通过Enumeration(枚举类)去遍历，Map则是通过Iterator(迭代器)去遍历。 然而‘由于Hashtable也实现了Map接口，所以，它即支持Enumeration遍历，也支持Iterator遍历。关于这点，后面还会进一步说明。<br>      AbstractMap是一个抽象类，它实现了Map接口的绝大部分API函数；为Map的具体实现类提供了极大的便利。它是JDK 1.2新增的类。</p><h3 id="线程安全不同"><a href="#线程安全不同" class="headerlink" title="线程安全不同"></a>线程安全不同</h3><p>Hashtable的几乎所有函数都是同步的，即它是线程安全的，支持多线程。<br>而HashMap的函数则是非同步的，它不是线程安全的。若要在多线程中使用HashMap，需要我们额外的进行同步处理。 对HashMap的同步处理可以使用Collections类提供的synchronizedMap静态方法，或者直接使用JDK 5.0之后提供的java.util.concurrent包里的ConcurrentHashMap类。</p><h3 id="对null值的处理不同"><a href="#对null值的处理不同" class="headerlink" title="对null值的处理不同"></a>对null值的处理不同</h3><p>HashMap的key、value都可以为null。<br>Hashtable的key、value都不可以为null。</p><p>我们先看看HashMap和Hashtable “添加key-value”的方法</p><p>HashMap的添加key-value的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将“key-value”添加到HashMap中</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 若“key为null”，则将该键值对添加到table[0]中。</span></span><br><span class="line">    <span class="keyword">if</span> (key == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> putForNullKey(value);</span><br><span class="line">    <span class="comment">// 若“key不为null”，则计算该key的哈希值，然后将其添加到该哈希值对应的链表中。</span></span><br><span class="line">    <span class="keyword">int</span> hash = hash(key.hashCode());</span><br><span class="line">    <span class="keyword">int</span> i = indexFor(hash, table.length);</span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[i]; e != <span class="keyword">null</span>; e = e.next) &#123;</span><br><span class="line">        Object k;</span><br><span class="line">        <span class="comment">// 若“该key”对应的键值对已经存在，则用新的value取代旧的value。然后退出！</span></span><br><span class="line">        <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;</span><br><span class="line">            V oldValue = e.value;</span><br><span class="line">            e.value = value;</span><br><span class="line">            e.recordAccess(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 若“该key”对应的键值对不存在，则将“key-value”添加到table中</span></span><br><span class="line">    modCount++;</span><br><span class="line">    addEntry(hash, key, value, i);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// putForNullKey()的作用是将“key为null”键值对添加到table[0]位置</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> V <span class="title">putForNullKey</span><span class="params">(V value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[<span class="number">0</span>]; e != <span class="keyword">null</span>; e = e.next) &#123;</span><br><span class="line">        <span class="keyword">if</span> (e.key == <span class="keyword">null</span>) &#123;</span><br><span class="line">            V oldValue = e.value;</span><br><span class="line">            e.value = value;</span><br><span class="line">            <span class="comment">// recordAccess()函数什么也没有做</span></span><br><span class="line">            e.recordAccess(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 添加第1个“key为null”的元素都table中的时候，会执行到这里。</span></span><br><span class="line">    <span class="comment">// 它的作用是将“设置table[0]的key为null，值为value”。</span></span><br><span class="line">    modCount++;</span><br><span class="line">    addEntry(<span class="number">0</span>, <span class="keyword">null</span>, value, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Hashtable的添加key-value的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将“key-value”添加到Hashtable中</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Hashtable中不能插入value为null的元素！！！</span></span><br><span class="line">    <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 若“Hashtable中已存在键为key的键值对”，</span></span><br><span class="line">    <span class="comment">// 则用“新的value”替换“旧的value”</span></span><br><span class="line">    Entry tab[] = table;</span><br><span class="line">    <span class="comment">// Hashtable中不能插入key为null的元素！！！</span></span><br><span class="line">    <span class="comment">// 否则，下面的语句会抛出异常！</span></span><br><span class="line">    <span class="keyword">int</span> hash = key.hashCode();</span><br><span class="line">    <span class="keyword">int</span> index = (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;</span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e = tab[index] ; e != <span class="keyword">null</span> ; e = e.next) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((e.hash == hash) &amp;&amp; e.key.equals(key)) &#123;</span><br><span class="line">            V old = e.value;</span><br><span class="line">            e.value = value;</span><br><span class="line">            <span class="keyword">return</span> old;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 若“Hashtable中不存在键为key的键值对”，</span></span><br><span class="line">    <span class="comment">// (01) 将“修改统计数”+1</span></span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="comment">// (02) 若“Hashtable实际容量” &gt; “阈值”(阈值=总的容量 * 加载因子)</span></span><br><span class="line">    <span class="comment">//  则调整Hashtable的大小</span></span><br><span class="line">    <span class="keyword">if</span> (count &gt;= threshold) &#123;</span><br><span class="line">        <span class="comment">// Rehash the table if the threshold is exceeded</span></span><br><span class="line">        rehash();</span><br><span class="line"></span><br><span class="line">        tab = table;</span><br><span class="line">        index = (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// (03) 将“Hashtable中index”位置的Entry(链表)保存到e中 Entry&lt;K,V&gt; e = tab[index];</span></span><br><span class="line">    <span class="comment">// (04) 创建“新的Entry节点”，并将“新的Entry”插入“Hashtable的index位置”，并设置e为“新的Entry”的下一个元素(即“新Entry”为链表表头)。        </span></span><br><span class="line">    tab[index] = <span class="keyword">new</span> Entry&lt;K,V&gt;(hash, key, value, e);</span><br><span class="line">    <span class="comment">// (05) 将“Hashtable的实际容量”+1</span></span><br><span class="line">    count++;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据上面的代码，我们可以看出：</p><p>Hashtable的key或value，都不能为null！否则，会抛出异常NullPointerException。<br>HashMap的key、value都可以为null。 当HashMap的key为null时，HashMap会将其固定的插入table[0]位置(即HashMap散列表的第一个位置)；而且table[0]处只会容纳一个key为null的值，当有多个key为null的值插入的时候，table[0]会保留最后插入的value。</p><h3 id="支持的遍历种类不同"><a href="#支持的遍历种类不同" class="headerlink" title="支持的遍历种类不同"></a>支持的遍历种类不同</h3><p>HashMap只支持Iterator(迭代器)遍历。</p><p>而Hashtable支持Iterator(迭代器)和Enumeration(枚举器)两种方式遍历。</p><p>Enumeration 是JDK 1.0添加的接口，只有hasMoreElements(), nextElement() 两个API接口，不能通过Enumeration()对元素进行修改 。<br>而Iterator 是JDK 1.2才添加的接口，支持hasNext(), next(), remove() 三个API接口。HashMap也是JDK 1.2版本才添加的，所以用Iterator取代Enumeration，HashMap只支持Iterator遍历。</p><h3 id="Iterator迭代器的遍历顺序不同"><a href="#Iterator迭代器的遍历顺序不同" class="headerlink" title="Iterator迭代器的遍历顺序不同"></a>Iterator迭代器的遍历顺序不同</h3><p>HashMap是“从前向后”的遍历数组；再对数组具体某一项对应的链表，从表头开始进行遍历。<br>Hashtabl是“从后往前”的遍历数组；再对数组具体某一项对应的链表，从表头开始进行遍历。</p><h3 id="容量的初始值-和-增加方式都不一样"><a href="#容量的初始值-和-增加方式都不一样" class="headerlink" title="容量的初始值 和 增加方式都不一样"></a>容量的初始值 和 增加方式都不一样</h3><p>HashMap默认的容量大小是16；增加容量时，每次将容量变为“原始容量x2”。<br>Hashtable默认的容量大小是11；增加容量时，每次将容量变为“原始容量x2 + 1”。</p><p>HashMap 和 Hashtable 默认的“加载因子” 都是0.75。</p><h3 id="添加key-value时的hash值算法不同"><a href="#添加key-value时的hash值算法不同" class="headerlink" title="添加key-value时的hash值算法不同"></a>添加key-value时的hash值算法不同</h3><p>HashMap 添加元素时，是使用自定义的哈希算法。<br>Hashtable 没有自定义哈希算法，而直接采用的key的hashCode()。</p><p>HashMap 添加元素时，是使用自定义的哈希算法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(<span class="keyword">int</span> h)</span> </span>&#123;</span><br><span class="line">    h ^= (h &gt;&gt;&gt; <span class="number">20</span>) ^ (h &gt;&gt;&gt; <span class="number">12</span>);</span><br><span class="line">    <span class="keyword">return</span> h ^ (h &gt;&gt;&gt; <span class="number">7</span>) ^ (h &gt;&gt;&gt; <span class="number">4</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将“key-value”添加到HashMap中</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 若“key为null”，则将该键值对添加到table[0]中。</span></span><br><span class="line">    <span class="keyword">if</span> (key == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> putForNullKey(value);</span><br><span class="line">    <span class="comment">// 若“key不为null”，则计算该key的哈希值，然后将其添加到该哈希值对应的链表中。</span></span><br><span class="line">    <span class="keyword">int</span> hash = hash(key.hashCode());</span><br><span class="line">    <span class="keyword">int</span> i = indexFor(hash, table.length);</span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[i]; e != <span class="keyword">null</span>; e = e.next) &#123;</span><br><span class="line">        Object k;</span><br><span class="line">        <span class="comment">// 若“该key”对应的键值对已经存在，则用新的value取代旧的value。然后退出！</span></span><br><span class="line">        <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;</span><br><span class="line">            V oldValue = e.value;</span><br><span class="line">            e.value = value;</span><br><span class="line">            e.recordAccess(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 若“该key”对应的键值对不存在，则将“key-value”添加到table中</span></span><br><span class="line">    modCount++;</span><br><span class="line">    addEntry(hash, key, value, i);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Hashtable 没有自定义哈希算法，而直接采用的key的hashCode()。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Hashtable中不能插入value为null的元素！！！</span></span><br><span class="line">    <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 若“Hashtable中已存在键为key的键值对”，</span></span><br><span class="line">    <span class="comment">// 则用“新的value”替换“旧的value”</span></span><br><span class="line">    Entry tab[] = table;</span><br><span class="line">    <span class="keyword">int</span> hash = key.hashCode();</span><br><span class="line">    <span class="keyword">int</span> index = (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;</span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e = tab[index] ; e != <span class="keyword">null</span> ; e = e.next) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((e.hash == hash) &amp;&amp; e.key.equals(key)) &#123;</span><br><span class="line">            V old = e.value;</span><br><span class="line">            e.value = value;</span><br><span class="line">            <span class="keyword">return</span> old;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 若“Hashtable中不存在键为key的键值对”，</span></span><br><span class="line">    <span class="comment">// (01) 将“修改统计数”+1</span></span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="comment">// (02) 若“Hashtable实际容量” &gt; “阈值”(阈值=总的容量 * 加载因子)</span></span><br><span class="line">    <span class="comment">//  则调整Hashtable的大小</span></span><br><span class="line">    <span class="keyword">if</span> (count &gt;= threshold) &#123;</span><br><span class="line">        <span class="comment">// Rehash the table if the threshold is exceeded</span></span><br><span class="line">        rehash();</span><br><span class="line"></span><br><span class="line">        tab = table;</span><br><span class="line">        index = (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// (03) 将“Hashtable中index”位置的Entry(链表)保存到e中</span></span><br><span class="line">    Entry&lt;K,V&gt; e = tab[index];</span><br><span class="line">    <span class="comment">// (04) 创建“新的Entry节点”，并将“新的Entry”插入“Hashtable的index位置”，并设置e为“新的Entry”的下一个元素(即“新Entry”为链表表头)。        </span></span><br><span class="line">    tab[index] = <span class="keyword">new</span> Entry&lt;K,V&gt;(hash, key, value, e);</span><br><span class="line">    <span class="comment">// (05) 将“Hashtable的实际容量”+1</span></span><br><span class="line">    count++;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="HashMap和Hashtable使用的情景"><a href="#HashMap和Hashtable使用的情景" class="headerlink" title="HashMap和Hashtable使用的情景"></a>HashMap和Hashtable使用的情景</h2><p>其实，若了解它们之间的不同之处后，可以很容易的区分根据情况进行取舍。例如：(01) 若在单线程中，我们往往会选择HashMap；而在多线程中，则会选择Hashtable。(02)，若不能插入null元素，则选择Hashtable；否则，可以选择HashMap。<br>但这个不是绝对的标准。例如，在多线程中，我们可以自己对HashMap进行同步，也可以选择<strong>ConcurrentHashMap</strong>。当HashMap和Hashtable都不能满足自己的需求时，还可以考虑新定义一个类，继承或重新实现散列表；当然，一般情况下是不需要的了。</p><h1 id="HashMap和WeakHashMap异同"><a href="#HashMap和WeakHashMap异同" class="headerlink" title="HashMap和WeakHashMap异同"></a>HashMap和WeakHashMap异同</h1><h2 id="HashMap和WeakHashMap的相同点"><a href="#HashMap和WeakHashMap的相同点" class="headerlink" title="HashMap和WeakHashMap的相同点"></a>HashMap和WeakHashMap的相同点</h2><ol><li>它们都是散列表，存储的是“键值对”映射。</li><li>它们都继承于AbstractMap，并且实现Map基础。</li><li>它们的构造函数都一样。它们都包括4个构造函数，而且函数的参数都一样。</li><li>默认的容量大小是16，默认的加载因子是0.75。</li><li>它们的“键”和“值”都允许为null。</li><li>它们都是“非同步的”。</li></ol><h2 id="HashMap和WeakHashMap的不同点"><a href="#HashMap和WeakHashMap的不同点" class="headerlink" title="HashMap和WeakHashMap的不同点"></a>HashMap和WeakHashMap的不同点</h2><ol><li><p>HashMap实现了Cloneable和Serializable接口，而WeakHashMap没有。<br>HashMap实现Cloneable，意味着它能通过clone()克隆自己。<br>HashMap实现Serializable，意味着它支持序列化，能通过序列化去传输。</p></li><li><p>HashMap的“键”是“强引用(StrongReference)”，而WeakHashMap的键是“弱引用(WeakReference)”。<br>WeakReference的“弱键”能实现WeakReference对“键值对”的动态回收。当“弱键”不再被使用到时，GC会回收它，WeakReference也会将“弱键”对应的键值对删除。</p></li></ol><p>这个“弱键”实现的动态回收“键值对”的原理呢？其实，通过WeakReference(弱引用)和ReferenceQueue(引用队列)实现的。 首先，我们需要了解WeakHashMap中：</p><ol><li>“键”是WeakReference，即key是弱键。</li><li>ReferenceQueue是一个引用队列，它是和WeakHashMap联合使用的。当弱引用所引用的对象被垃圾回收，Java虚拟机就会把这个弱引用加入到与之关联的引用队列中。 WeakHashMap中的ReferenceQueue是queue。</li><li>WeakHashMap是通过数组实现的，我们假设这个数组是table。</li></ol><p>接下来，说说“动态回收”的步骤。</p><ol><li>新建WeakHashMap，将“键值对”添加到WeakHashMap中。<pre><code>将“键值对”添加到WeakHashMap中时，添加的键都是弱键。实际上，WeakHashMap是通过数组table保存Entry(键值对)；每一个Entry实际上是一个单向链表，即Entry是键值对链表。</code></pre></li><li>当某“弱键”不再被其它对象引用，并被GC回收时。在GC回收该“弱键”时，这个“弱键”也同时会被添加到queue队列中。<pre><code>例如，当我们在将“弱键”key添加到WeakHashMap之后；后来将key设为null。这时，便没有外部外部对象再引用该了key。接着，当Java虚拟机的GC回收内存时，会回收key的相关内存；同时，将key添加到queue队列中。</code></pre></li><li>当下一次我们需要操作WeakHashMap时，会先同步table和queue。table中保存了全部的键值对，而queue中保存被GC回收的“弱键”；同步它们，就是删除table中被GC回收的“弱键”对应的键值对。<br>例如，当我们“读取WeakHashMap中的元素或获取WeakReference的大小时”，它会先同步table和queue，目的是“删除table中被GC回收的‘弱键’对应的键值对”。删除的方法就是逐个比较“table中元素的‘键’和queue中的‘键’”，若它们相当，则删除“table中的该键值对”。</li></ol><h1 id="HashMap和WeakHashMap的比较测试程序"><a href="#HashMap和WeakHashMap的比较测试程序" class="headerlink" title="HashMap和WeakHashMap的比较测试程序"></a>HashMap和WeakHashMap的比较测试程序</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.WeakHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.lang.ref.WeakReference;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desc</span> HashMap 和 WeakHashMap比较程序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> skywang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@email</span> kuiwu-wang@163.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CompareHashmapAndWeakhashmap</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 当“弱键”是String时，比较HashMap和WeakHashMap</span></span><br><span class="line">        compareWithString();</span><br><span class="line">        <span class="comment">// 当“弱键”是自定义类型时，比较HashMap和WeakHashMap</span></span><br><span class="line">        compareWithSelfClass();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 遍历map，并打印map的大小</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">iteratorAndCountMap</span><span class="params">(Map map)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 遍历map</span></span><br><span class="line">        <span class="keyword">for</span> (Iterator iter = map.entrySet().iterator();</span><br><span class="line">                iter.hasNext();  ) &#123;</span><br><span class="line">            Map.Entry en = (Map.Entry)iter.next();</span><br><span class="line">            System.out.printf(<span class="string">"map entry : %s - %s\n "</span>,en.getKey(), en.getValue());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印HashMap的实际大小</span></span><br><span class="line">        System.out.printf(<span class="string">" map size:%s\n\n"</span>, map.size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过String对象测试HashMap和WeakHashMap</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">compareWithString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 新建4个String字符串</span></span><br><span class="line">        String w1 = <span class="keyword">new</span> String(<span class="string">"W1"</span>);</span><br><span class="line">        String w2 = <span class="keyword">new</span> String(<span class="string">"W2"</span>);</span><br><span class="line">        String h1 = <span class="keyword">new</span> String(<span class="string">"H1"</span>);</span><br><span class="line">        String h2 = <span class="keyword">new</span> String(<span class="string">"H2"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 新建 WeakHashMap对象，并将w1,w2添加到 WeakHashMap中</span></span><br><span class="line">        Map wmap = <span class="keyword">new</span> WeakHashMap();</span><br><span class="line">        wmap.put(w1, <span class="string">"w1"</span>);</span><br><span class="line">        wmap.put(w2, <span class="string">"w2"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 新建 HashMap对象，并将h1,h2添加到 WeakHashMap中</span></span><br><span class="line">        Map hmap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        hmap.put(h1, <span class="string">"h1"</span>);</span><br><span class="line">        hmap.put(h2, <span class="string">"h2"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除HashMap中的“h1”。</span></span><br><span class="line">        <span class="comment">// 结果：删除“h1”之后，HashMap中只有 h2 ！</span></span><br><span class="line">        hmap.remove(h1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将WeakHashMap中的w1设置null，并执行gc()。系统会回收w1</span></span><br><span class="line">        <span class="comment">// 结果：w1是“弱键”，被GC回收后，WeakHashMap中w1对应的键值对，也会被从WeakHashMap中删除。</span></span><br><span class="line">        <span class="comment">//       w2是“弱键”，但它不是null，不会被GC回收；也就不会被从WeakHashMap中删除。</span></span><br><span class="line">        <span class="comment">// 因此，WeakHashMap中只有 w2</span></span><br><span class="line">        <span class="comment">// 注意：若去掉“w1=null” 或者“System.gc()”，结果都会不一样！</span></span><br><span class="line">        w1 = <span class="keyword">null</span>;</span><br><span class="line">        System.gc();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历并打印HashMap的大小</span></span><br><span class="line">        System.out.printf(<span class="string">" -- HashMap --\n"</span>);</span><br><span class="line">        iteratorAndCountMap(hmap);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历并打印WeakHashMap的大小</span></span><br><span class="line">        System.out.printf(<span class="string">" -- WeakHashMap --\n"</span>);</span><br><span class="line">        iteratorAndCountMap(wmap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过自定义类测试HashMap和WeakHashMap</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">compareWithSelfClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 新建4个自定义对象</span></span><br><span class="line">        Self s1 = <span class="keyword">new</span> Self(<span class="number">10</span>);</span><br><span class="line">        Self s2 = <span class="keyword">new</span> Self(<span class="number">20</span>);</span><br><span class="line">        Self s3 = <span class="keyword">new</span> Self(<span class="number">30</span>);</span><br><span class="line">        Self s4 = <span class="keyword">new</span> Self(<span class="number">40</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 新建 WeakHashMap对象，并将s1,s2添加到 WeakHashMap中</span></span><br><span class="line">        Map wmap = <span class="keyword">new</span> WeakHashMap();</span><br><span class="line">        wmap.put(s1, <span class="string">"s1"</span>);</span><br><span class="line">        wmap.put(s2, <span class="string">"s2"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 新建 HashMap对象，并将s3,s4添加到 WeakHashMap中</span></span><br><span class="line">        Map hmap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        hmap.put(s3, <span class="string">"s3"</span>);</span><br><span class="line">        hmap.put(s4, <span class="string">"s4"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除HashMap中的s3。</span></span><br><span class="line">        <span class="comment">// 结果：删除s3之后，HashMap中只有 s4 ！</span></span><br><span class="line">        hmap.remove(s3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将WeakHashMap中的s1设置null，并执行gc()。系统会回收w1</span></span><br><span class="line">        <span class="comment">// 结果：s1是“弱键”，被GC回收后，WeakHashMap中s1对应的键值对，也会被从WeakHashMap中删除。</span></span><br><span class="line">        <span class="comment">//       w2是“弱键”，但它不是null，不会被GC回收；也就不会被从WeakHashMap中删除。</span></span><br><span class="line">        <span class="comment">// 因此，WeakHashMap中只有 s2</span></span><br><span class="line">        <span class="comment">// 注意：若去掉“s1=null” 或者“System.gc()”，结果都会不一样！</span></span><br><span class="line">        s1 = <span class="keyword">null</span>;</span><br><span class="line">        System.gc();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        // 休眠500ms</span></span><br><span class="line"><span class="comment">        try &#123;</span></span><br><span class="line"><span class="comment">            Thread.sleep(500);</span></span><br><span class="line"><span class="comment">        &#125; catch (InterruptedException e) &#123;</span></span><br><span class="line"><span class="comment">            e.printStackTrace();</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        // */</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 遍历并打印HashMap的大小</span></span><br><span class="line">        System.out.printf(<span class="string">" -- Self-def HashMap --\n"</span>);</span><br><span class="line">        iteratorAndCountMap(hmap);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历并打印WeakHashMap的大小</span></span><br><span class="line">        System.out.printf(<span class="string">" -- Self-def WeakHashMap --\n"</span>);</span><br><span class="line">        iteratorAndCountMap(wmap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Self</span> </span>&#123; </span><br><span class="line">        <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Self</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.id = id;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 覆盖finalize()方法</span></span><br><span class="line">        <span class="comment">// 在GC回收时会被执行</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finalize</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>.finalize();</span><br><span class="line">            System.out.printf(<span class="string">"GC Self: id=%d addr=0x%s)\n"</span>, id, <span class="keyword">this</span>);</span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> -- HashMap --</span><br><span class="line">map entry : H2 - h2</span><br><span class="line">map size:<span class="number">1</span></span><br><span class="line"></span><br><span class="line"> -- WeakHashMap --</span><br><span class="line">map entry : W2 - w2</span><br><span class="line">map size:<span class="number">1</span></span><br><span class="line"></span><br><span class="line"> -- Self-def HashMap --</span><br><span class="line">map entry : CompareHashmapAndWeakhashmap$Self@<span class="number">1f</span>f9dc36 - s4</span><br><span class="line">map size:<span class="number">1</span></span><br><span class="line"></span><br><span class="line"> -- Self-def WeakHashMap --</span><br><span class="line">GC Self: id=<span class="number">10</span> addr=<span class="number">0xC</span>ompareHashmapAndWeakhashmap$Self@<span class="number">12276</span>af2)</span><br><span class="line">map entry : CompareHashmapAndWeakhashmap$Self@<span class="number">59</span>de3f2d - s2</span><br><span class="line">map size:<span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Map-总结&quot;&gt;&lt;a href=&quot;#Map-总结&quot; class=&quot;headerlink&quot; title=&quot;Map 总结&quot;&gt;&lt;/a&gt;Map 总结&lt;/h1&gt;&lt;p&gt;学完了Map的全部内容，我们再回头看看Map的框架图。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://oov0wb0gl.bkt.clouddn.com/2017-06-08-14969090857546.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Java 集合" scheme="http://cuijing.me/categories/Java-%E9%9B%86%E5%90%88/"/>
    
    
      <category term="Java" scheme="http://cuijing.me/tags/Java/"/>
    
      <category term="Map" scheme="http://cuijing.me/tags/Map/"/>
    
  </entry>
  
  <entry>
    <title>集合框架之 HashSet</title>
    <link href="http://cuijing.me/2015/09/15/Java/8-Collection-Map/16-HashSet/"/>
    <id>http://cuijing.me/2015/09/15/Java/8-Collection-Map/16-HashSet/</id>
    <published>2015-09-15T00:30:00.000Z</published>
    <updated>2016-05-01T11:34:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HashSet-简介"><a href="#HashSet-简介" class="headerlink" title="HashSet 简介"></a>HashSet 简介</h1><p>HashSet 是一个没有重复元素的集合。</p><p>它是由HashMap实现的，不保证元素的顺序，而且HashSet允许使用 null 元素。<br>HashSet是非同步的。如果多个线程同时访问一个哈希 set，而其中至少一个线程修改了该 set，那么它必须 保持外部同步。这通常是通过对自然封装该 set 的对象执行同步操作来完成的。如果不存在这样的对象，则应该使用 Collections.synchronizedSet 方法来“包装” set。最好在创建时完成这一操作，以防止对该 set 进行意外的不同步访问：<br><a id="more"></a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set s = Collections.synchronizedSet(<span class="keyword">new</span> HashSet(...));</span><br></pre></td></tr></table></figure></p><p>HashSet通过iterator()返回的迭代器是fail-fast的。</p><h1 id="HashSet的构造函数"><a href="#HashSet的构造函数" class="headerlink" title="HashSet的构造函数"></a>HashSet的构造函数</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 默认构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashSet</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 带集合的构造函数</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashSet</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 指定HashSet初始容量和加载因子的构造函数</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashSet</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 指定HashSet初始容量的构造函数</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashSet</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 指定HashSet初始容量和加载因子的构造函数,dummy没有任何作用</span></span></span><br><span class="line"><span class="function"><span class="title">HashSet</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor, <span class="keyword">boolean</span> dummy)</span></span></span><br></pre></td></tr></table></figure><h1 id="HashSet的主要API"><a href="#HashSet的主要API" class="headerlink" title="HashSet的主要API"></a>HashSet的主要API</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span>         <span class="title">add</span><span class="params">(E object)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span>            <span class="title">clear</span><span class="params">()</span></span></span><br><span class="line"><span class="function">Object          <span class="title">clone</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span>         <span class="title">contains</span><span class="params">(Object object)</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span>         <span class="title">isEmpty</span><span class="params">()</span></span></span><br><span class="line"><span class="function">Iterator&lt;E&gt;     <span class="title">iterator</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span>         <span class="title">remove</span><span class="params">(Object object)</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span>             <span class="title">size</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><h1 id="HashSet数据结构"><a href="#HashSet数据结构" class="headerlink" title="HashSet数据结构"></a>HashSet数据结构</h1><p>HashSet的继承关系如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">java.lang.Object</span><br><span class="line">   ↳     java.util.AbstractCollection&lt;E&gt;</span><br><span class="line">         ↳     java.util.AbstractSet&lt;E&gt;</span><br><span class="line">               ↳     java.util.HashSet&lt;E&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashSet</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">AbstractSet</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">Set</span>&lt;<span class="title">E</span>&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure></p><p>HashSet与Map关系图：</p><p><img src="http://oov0wb0gl.bkt.clouddn.com/2017-06-08-14969314205402.jpg" alt=""></p><p>从图中可以看出：</p><ol><li>HashSet继承于AbstractSet，并且实现了Set接口。</li><li>HashSet的本质是一个”没有重复元素”的集合，它是通过HashMap实现的。HashSet中含有一个”HashMap类型的成员变量”map，HashSet的操作函数，实际上都是通过map实现的。</li></ol><h1 id="HashSet源码解析-基于JDK1-6-0-45"><a href="#HashSet源码解析-基于JDK1-6-0-45" class="headerlink" title="HashSet源码解析(基于JDK1.6.0_45)"></a>HashSet源码解析(基于JDK1.6.0_45)</h1><p>为了更了解HashSet的原理，下面对HashSet源码代码作出分析。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashSet</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">AbstractSet</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">Set</span>&lt;<span class="title">E</span>&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">5024744406713321676L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// HashSet是通过map(HashMap对象)保存内容的</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> HashMap&lt;E,Object&gt; map;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// PRESENT是向map中插入key-value对应的value</span></span><br><span class="line">    <span class="comment">// 因为HashSet中只需要用到key，而HashMap是key-value键值对；</span></span><br><span class="line">    <span class="comment">// 所以，向map中添加键值对时，键值对的值固定是PRESENT</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object PRESENT = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 默认构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HashSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 调用HashMap的默认构造函数，创建map</span></span><br><span class="line">        map = <span class="keyword">new</span> HashMap&lt;E,Object&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 带集合的构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HashSet</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建map。</span></span><br><span class="line">        <span class="comment">// 为什么要调用Math.max((int) (c.size()/.75f) + 1, 16)，从 (c.size()/.75f) + 1 和 16 中选择一个比较大的树呢？        </span></span><br><span class="line">        <span class="comment">// 首先，说明(c.size()/.75f) + 1</span></span><br><span class="line">        <span class="comment">//   因为从HashMap的效率(时间成本和空间成本)考虑，HashMap的加载因子是0.75。</span></span><br><span class="line">        <span class="comment">//   当HashMap的“阈值”(阈值=HashMap总的大小*加载因子) &lt; “HashMap实际大小”时，</span></span><br><span class="line">        <span class="comment">//   就需要将HashMap的容量翻倍。</span></span><br><span class="line">        <span class="comment">//   所以，(c.size()/.75f) + 1 计算出来的正好是总的空间大小。</span></span><br><span class="line">        <span class="comment">// 接下来，说明为什么是 16 。</span></span><br><span class="line">        <span class="comment">//   HashMap的总的大小，必须是2的指数倍。若创建HashMap时，指定的大小不是2的指数倍；</span></span><br><span class="line">        <span class="comment">//   HashMap的构造函数中也会重新计算，找出比“指定大小”大的最小的2的指数倍的数。</span></span><br><span class="line">        <span class="comment">//   所以，这里指定为16是从性能考虑。避免重复计算。</span></span><br><span class="line">        map = <span class="keyword">new</span> HashMap&lt;E,Object&gt;(Math.max((<span class="keyword">int</span>) (c.size()/.<span class="number">75f</span>) + <span class="number">1</span>, <span class="number">16</span>));</span><br><span class="line">        <span class="comment">// 将集合(c)中的全部元素添加到HashSet中</span></span><br><span class="line">        addAll(c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定HashSet初始容量和加载因子的构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HashSet</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">        map = <span class="keyword">new</span> HashMap&lt;E,Object&gt;(initialCapacity, loadFactor);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定HashSet初始容量的构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HashSet</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">        map = <span class="keyword">new</span> HashMap&lt;E,Object&gt;(initialCapacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    HashSet(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor, <span class="keyword">boolean</span> dummy) &#123;</span><br><span class="line">        map = <span class="keyword">new</span> LinkedHashMap&lt;E,Object&gt;(initialCapacity, loadFactor);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回HashSet的迭代器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 实际上返回的是HashMap的“key集合的迭代器”</span></span><br><span class="line">        <span class="keyword">return</span> map.keySet().iterator();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> map.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> map.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> map.containsKey(o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将元素(e)添加到HashSet中</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> map.put(e, PRESENT)==<span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除HashSet中的元素(o)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> map.remove(o)==PRESENT;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        map.clear();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 克隆一个HashSet，并返回Object对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            HashSet&lt;E&gt; newSet = (HashSet&lt;E&gt;) <span class="keyword">super</span>.clone();</span><br><span class="line">            newSet.map = (HashMap&lt;E, Object&gt;) map.clone();</span><br><span class="line">            <span class="keyword">return</span> newSet;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InternalError();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// java.io.Serializable的写入函数</span></span><br><span class="line">    <span class="comment">// 将HashSet的“总的容量，加载因子，实际容量，所有的元素”都写入到输出流中</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeObject</span><span class="params">(java.io.ObjectOutputStream s)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> java.io.IOException </span>&#123;</span><br><span class="line">        <span class="comment">// Write out any hidden serialization magic</span></span><br><span class="line">        s.defaultWriteObject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Write out HashMap capacity and load factor</span></span><br><span class="line">        s.writeInt(map.capacity());</span><br><span class="line">        s.writeFloat(map.loadFactor());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Write out size</span></span><br><span class="line">        s.writeInt(map.size());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Write out all elements in the proper order.</span></span><br><span class="line">        <span class="keyword">for</span> (Iterator i=map.keySet().iterator(); i.hasNext(); )</span><br><span class="line">            s.writeObject(i.next());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// java.io.Serializable的读取函数</span></span><br><span class="line">    <span class="comment">// 将HashSet的“总的容量，加载因子，实际容量，所有的元素”依次读出</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">// Read in any hidden serialization magic</span></span><br><span class="line">        s.defaultReadObject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Read in HashMap capacity and load factor and create backing HashMap</span></span><br><span class="line">        <span class="keyword">int</span> capacity = s.readInt();</span><br><span class="line">        <span class="keyword">float</span> loadFactor = s.readFloat();</span><br><span class="line">        map = (((HashSet)<span class="keyword">this</span>) <span class="keyword">instanceof</span> LinkedHashSet ?</span><br><span class="line">               <span class="keyword">new</span> LinkedHashMap&lt;E,Object&gt;(capacity, loadFactor) :</span><br><span class="line">               <span class="keyword">new</span> HashMap&lt;E,Object&gt;(capacity, loadFactor));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Read in size</span></span><br><span class="line">        <span class="keyword">int</span> size = s.readInt();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Read in all elements in the proper order.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;size; i++) &#123;</span><br><span class="line">            E e = (E) s.readObject();</span><br><span class="line">            map.put(e, PRESENT);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明： HashSet的代码实际上非常简单，通过上面的注释应该很能够看懂。它是通过HashMap实现的，若对HashSet的理解有困难，建议先学习以下HashMap；学完HashMap之后，在学习HashSet就非常容易了。</p><h1 id="HashSet遍历方式"><a href="#HashSet遍历方式" class="headerlink" title="HashSet遍历方式"></a>HashSet遍历方式</h1><h2 id="通过Iterator遍历HashSet"><a href="#通过Iterator遍历HashSet" class="headerlink" title="通过Iterator遍历HashSet"></a>通过Iterator遍历HashSet</h2><p>第一步：根据iterator()获取HashSet的迭代器。<br>第二步：遍历迭代器获取各个元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设set是HashSet对象</span></span><br><span class="line"><span class="keyword">for</span>(Iterator iterator = set.iterator();</span><br><span class="line">       iterator.hasNext(); ) &#123; </span><br><span class="line">    iterator.next();</span><br><span class="line">&#125; </span><br><span class="line">```  </span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">## 通过for-each遍历HashSet</span><br><span class="line"></span><br><span class="line">第一步：根据toArray()获取HashSet的元素集合对应的数组。</span><br><span class="line">第二步：遍历数组，获取各个元素。</span><br><span class="line"></span><br><span class="line"><span class="comment">// 假设set是HashSet对象，并且set中元素是String类型</span></span><br><span class="line">String[] arr = (String[])set.toArray(<span class="keyword">new</span> String[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">for</span> (String str:arr)</span><br><span class="line">    System.out.printf(<span class="string">"for each : %s\n"</span>, str);</span><br><span class="line">HashSet的遍历测试程序如下： </span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @desc 介绍HashSet遍历方法</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @author skywang</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashSetIteratorTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 新建HashSet</span></span><br><span class="line">        HashSet set = <span class="keyword">new</span> HashSet();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加元素 到HashSet中</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++)</span><br><span class="line">            set.add(<span class="string">""</span>+i);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过Iterator遍历HashSet</span></span><br><span class="line">        iteratorHashSet(set) ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过for-each遍历HashSet</span></span><br><span class="line">        foreachHashSet(set);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 通过Iterator遍历HashSet。推荐方式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">iteratorHashSet</span><span class="params">(HashSet set)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(Iterator iterator = set.iterator();</span><br><span class="line">               iterator.hasNext(); ) &#123;</span><br><span class="line">            System.out.printf(<span class="string">"iterator : %s\n"</span>, iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 通过for-each遍历HashSet。不推荐！此方法需要先将Set转换为数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">foreachHashSet</span><span class="params">(HashSet set)</span> </span>&#123;</span><br><span class="line">        String[] arr = (String[])set.toArray(<span class="keyword">new</span> String[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">for</span> (String str:arr)</span><br><span class="line">            System.out.printf(<span class="string">"for each : %s\n"</span>, str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">iterator : <span class="number">3</span></span><br><span class="line">iterator : <span class="number">2</span></span><br><span class="line">iterator : <span class="number">1</span></span><br><span class="line">iterator : <span class="number">0</span></span><br><span class="line">iterator : <span class="number">4</span></span><br><span class="line"><span class="keyword">for</span> each : <span class="number">3</span></span><br><span class="line"><span class="keyword">for</span> each : <span class="number">2</span></span><br><span class="line"><span class="keyword">for</span> each : <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> each : <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> each : <span class="number">4</span></span><br></pre></td></tr></table></figure><h1 id="HashSet示例"><a href="#HashSet示例" class="headerlink" title="HashSet示例"></a>HashSet示例</h1><p>下面我们通过实例学习如何使用HashSet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @desc HashSet常用API的使用。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @author skywang</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashSetTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// HashSet常用API</span></span><br><span class="line">        testHashSetAPIs() ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * HashSet除了iterator()和add()之外的其它常用API</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testHashSetAPIs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 新建HashSet</span></span><br><span class="line">        HashSet set = <span class="keyword">new</span> HashSet();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将元素添加到Set中</span></span><br><span class="line">        set.add(<span class="string">"a"</span>);</span><br><span class="line">        set.add(<span class="string">"b"</span>);</span><br><span class="line">        set.add(<span class="string">"c"</span>);</span><br><span class="line">        set.add(<span class="string">"d"</span>);</span><br><span class="line">        set.add(<span class="string">"e"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印HashSet的实际大小</span></span><br><span class="line">        System.out.printf(<span class="string">"size : %d\n"</span>, set.size());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断HashSet是否包含某个值</span></span><br><span class="line">        System.out.printf(<span class="string">"HashSet contains a :%s\n"</span>, set.contains(<span class="string">"a"</span>));</span><br><span class="line">        System.out.printf(<span class="string">"HashSet contains g :%s\n"</span>, set.contains(<span class="string">"g"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除HashSet中的“e”</span></span><br><span class="line">        set.remove(<span class="string">"e"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将Set转换为数组</span></span><br><span class="line">        String[] arr = (String[])set.toArray(<span class="keyword">new</span> String[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">for</span> (String str:arr)</span><br><span class="line">            System.out.printf(<span class="string">"for each : %s\n"</span>, str);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 新建一个包含b、c、f的HashSet</span></span><br><span class="line">        HashSet otherset = <span class="keyword">new</span> HashSet();</span><br><span class="line">        otherset.add(<span class="string">"b"</span>);</span><br><span class="line">        otherset.add(<span class="string">"c"</span>);</span><br><span class="line">        otherset.add(<span class="string">"f"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 克隆一个removeset，内容和set一模一样</span></span><br><span class="line">        HashSet removeset = (HashSet)set.clone();</span><br><span class="line">        <span class="comment">// 删除“removeset中，属于otherSet的元素”</span></span><br><span class="line">        removeset.removeAll(otherset);</span><br><span class="line">        <span class="comment">// 打印removeset</span></span><br><span class="line">        System.out.printf(<span class="string">"removeset : %s\n"</span>, removeset);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 克隆一个retainset，内容和set一模一样</span></span><br><span class="line">        HashSet retainset = (HashSet)set.clone();</span><br><span class="line">        <span class="comment">// 保留“retainset中，属于otherSet的元素”</span></span><br><span class="line">        retainset.retainAll(otherset);</span><br><span class="line">        <span class="comment">// 打印retainset</span></span><br><span class="line">        System.out.printf(<span class="string">"retainset : %s\n"</span>, retainset);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历HashSet</span></span><br><span class="line">        <span class="keyword">for</span>(Iterator iterator = set.iterator();</span><br><span class="line">               iterator.hasNext(); ) </span><br><span class="line">            System.out.printf(<span class="string">"iterator : %s\n"</span>, iterator.next());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 清空HashSet</span></span><br><span class="line">        set.clear();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出HashSet是否为空</span></span><br><span class="line">        System.out.printf(<span class="string">"%s\n"</span>, set.isEmpty()?<span class="string">"set is empty"</span>:<span class="string">"set is not empty"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">size : <span class="number">5</span></span><br><span class="line">HashSet contains a :<span class="keyword">true</span></span><br><span class="line">HashSet contains g :<span class="keyword">false</span></span><br><span class="line"><span class="keyword">for</span> each : d</span><br><span class="line"><span class="keyword">for</span> each : b</span><br><span class="line"><span class="keyword">for</span> each : c</span><br><span class="line"><span class="keyword">for</span> each : a</span><br><span class="line">removeset : [d, a]</span><br><span class="line">retainset : [b, c]</span><br><span class="line">iterator : d</span><br><span class="line">iterator : b</span><br><span class="line">iterator : c</span><br><span class="line">iterator : a</span><br><span class="line">set is empty</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;HashSet-简介&quot;&gt;&lt;a href=&quot;#HashSet-简介&quot; class=&quot;headerlink&quot; title=&quot;HashSet 简介&quot;&gt;&lt;/a&gt;HashSet 简介&lt;/h1&gt;&lt;p&gt;HashSet 是一个没有重复元素的集合。&lt;/p&gt;
&lt;p&gt;它是由HashMap实现的，不保证元素的顺序，而且HashSet允许使用 null 元素。&lt;br&gt;HashSet是非同步的。如果多个线程同时访问一个哈希 set，而其中至少一个线程修改了该 set，那么它必须 保持外部同步。这通常是通过对自然封装该 set 的对象执行同步操作来完成的。如果不存在这样的对象，则应该使用 Collections.synchronizedSet 方法来“包装” set。最好在创建时完成这一操作，以防止对该 set 进行意外的不同步访问：&lt;br&gt;
    
    </summary>
    
      <category term="Java 集合" scheme="http://cuijing.me/categories/Java-%E9%9B%86%E5%90%88/"/>
    
    
      <category term="Java" scheme="http://cuijing.me/tags/Java/"/>
    
      <category term="Set" scheme="http://cuijing.me/tags/Set/"/>
    
      <category term="HashSet" scheme="http://cuijing.me/tags/HashSet/"/>
    
  </entry>
  
  <entry>
    <title>集合框架之 WeakHashMap</title>
    <link href="http://cuijing.me/2015/09/06/Java/8-Collection-Map/13-WeakHashMap/"/>
    <id>http://cuijing.me/2015/09/06/Java/8-Collection-Map/13-WeakHashMap/</id>
    <published>2015-09-06T00:30:00.000Z</published>
    <updated>2016-05-01T11:40:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="WeakHashMap简介"><a href="#WeakHashMap简介" class="headerlink" title="WeakHashMap简介"></a>WeakHashMap简介</h1><p>WeakHashMap 继承于AbstractMap，实现了Map接口。和HashMap一样，WeakHashMap 也是一个散列表，它存储的内容也是键值对(key-value)映射，而且键和值都可以是null。<br><a id="more"></a><br>不过WeakHashMap的键是“弱键”。在 WeakHashMap 中，当某个键不再正常使用时，会被从WeakHashMap中被自动移除。更精确地说，对于一个给定的键，其映射的存在并不阻止垃圾回收器对该键的丢弃，这就使该键成为可终止的，被终止，然后被回收。某个键被终止时，它对应的键值对也就从映射中有效地移除了。</p><p>这个“弱键”的原理呢？大致上就是，通过WeakReference和ReferenceQueue实现的。 WeakHashMap的key是“弱键”，即是WeakReference类型的；ReferenceQueue是一个队列，它会保存被GC回收的“弱键”。实现步骤是：</p><ol><li>新建WeakHashMap，将“键值对”添加到WeakHashMap中。<br> 实际上，WeakHashMap是通过数组table保存Entry(键值对)；每一个Entry实际上是一个单向链表，即Entry是键值对链表。</li><li>当某“弱键”不再被其它对象引用，并被GC回收时。在GC回收该“弱键”时，这个“弱键”也同时会被添加到ReferenceQueue(queue)队列中。</li><li>当下一次我们需要操作WeakHashMap时，会先同步table和queue。table中保存了全部的键值对，而queue中保存被GC回收的键值对；同步它们，就是删除table中被GC回收的键值对。</li></ol><p>这就是“弱键”如何被自动从WeakHashMap中删除的步骤了。</p><p>和HashMap一样，WeakHashMap是不同步的。可以使用 Collections.synchronizedMap 方法来构造同步的 WeakHashMap。</p><h1 id="WeakHashMap的构造函数"><a href="#WeakHashMap的构造函数" class="headerlink" title="WeakHashMap的构造函数"></a>WeakHashMap的构造函数</h1><p>WeakHashMap共有4个构造函数,如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认构造函数。</span></span><br><span class="line">WeakHashMap()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定“容量大小”的构造函数</span></span><br><span class="line">WeakHashMap(<span class="keyword">int</span> capacity)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定“容量大小”和“加载因子”的构造函数</span></span><br><span class="line">WeakHashMap(<span class="keyword">int</span> capacity, <span class="keyword">float</span> loadFactor)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 包含“子Map”的构造函数</span></span><br><span class="line">WeakHashMap(Map&lt;? extends K, ? extends V&gt; map)</span><br></pre></td></tr></table></figure><h1 id="WeakHashMap的API"><a href="#WeakHashMap的API" class="headerlink" title="WeakHashMap的API"></a>WeakHashMap的API</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span>                   <span class="title">clear</span><span class="params">()</span></span></span><br><span class="line"><span class="function">Object                 <span class="title">clone</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span>                <span class="title">containsKey</span><span class="params">(Object key)</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span>                <span class="title">containsValue</span><span class="params">(Object value)</span></span></span><br><span class="line"><span class="function">Set&lt;Entry&lt;K, V&gt;&gt;       <span class="title">entrySet</span><span class="params">()</span></span></span><br><span class="line"><span class="function">V                      <span class="title">get</span><span class="params">(Object key)</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span>                <span class="title">isEmpty</span><span class="params">()</span></span></span><br><span class="line"><span class="function">Set&lt;K&gt;                 <span class="title">keySet</span><span class="params">()</span></span></span><br><span class="line"><span class="function">V                      <span class="title">put</span><span class="params">(K key, V value)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span>                   <span class="title">putAll</span><span class="params">(Map&lt;? extends K, ? extends V&gt; map)</span></span></span><br><span class="line"><span class="function">V                      <span class="title">remove</span><span class="params">(Object key)</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span>                    <span class="title">size</span><span class="params">()</span></span></span><br><span class="line"><span class="function">Collection&lt;V&gt;          <span class="title">values</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><h1 id="WeakHashMap数据结构"><a href="#WeakHashMap数据结构" class="headerlink" title="WeakHashMap数据结构"></a>WeakHashMap数据结构</h1><p>WeakHashMap的继承关系如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">java.lang.Object</span><br><span class="line">   ↳     java.util.AbstractMap&lt;K, V&gt;</span><br><span class="line">         ↳     java.util.WeakHashMap&lt;K, V&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeakHashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>WeakHashMap与Map关系如下图：</p><p><img src="http://oov0wb0gl.bkt.clouddn.com/2017-06-08-14969059989097.jpg" alt=""></p><p>从图中可以看出：</p><ol><li>WeakHashMap继承于AbstractMap，并且实现了Map接口。</li><li>WeakHashMap是哈希表，但是它的键是”弱键”。WeakHashMap中保护几个重要的成员变量：table, size, threshold, loadFactor, modCount, queue。<ol><li><strong>table</strong> 是一个Entry[]数组类型，而Entry实际上就是一个单向链表。哈希表的”key-value键值对”都是存储在Entry数组中的。 </li><li><strong>size</strong> 是Hashtable的大小，它是Hashtable保存的键值对的数量。 </li><li><strong>threshold</strong> 是Hashtable的阈值，用于判断是否需要调整Hashtable的容量。threshold的值=”容量*加载因子”。</li><li><strong>loadFactor</strong> 就是加载因子。 </li><li><strong>modCount</strong> 是用来实现fail-fast机制的</li><li><strong>queue</strong> 保存的是“已被GC清除”的“弱引用的键”。</li></ol></li></ol><h1 id="WeakHashMap源码解析-基于JDK1-6-0-45"><a href="#WeakHashMap源码解析-基于JDK1-6-0-45" class="headerlink" title="WeakHashMap源码解析(基于JDK1.6.0_45)"></a>WeakHashMap源码解析(基于JDK1.6.0_45)</h1><p>下面对WeakHashMap的源码进行说明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.util;</span><br><span class="line"><span class="keyword">import</span> java.lang.ref.WeakReference;</span><br><span class="line"><span class="keyword">import</span> java.lang.ref.ReferenceQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeakHashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 默认的初始容量是16，必须是2的幂。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最大容量（必须是2的幂且小于2的30次方，传入容量过大将被这个值替换）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 默认加载因子</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 存储数据的Entry数组，长度是2的幂。</span></span><br><span class="line">    <span class="comment">// WeakHashMap是采用拉链法实现的，每一个Entry本质上是一个单向链表</span></span><br><span class="line">    <span class="keyword">private</span> Entry[] table;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// WeakHashMap的大小，它是WeakHashMap保存的键值对的数量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// WeakHashMap的阈值，用于判断是否需要调整WeakHashMap的容量（threshold = 容量*加载因子）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> threshold;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加载因子实际大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">float</span> loadFactor;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// queue保存的是“已被GC清除”的“弱引用的键”。</span></span><br><span class="line">    <span class="comment">// 弱引用和ReferenceQueue 是联合使用的：如果弱引用所引用的对象被垃圾回收，</span></span><br><span class="line">    <span class="comment">// Java虚拟机就会把这个弱引用加入到与之关联的引用队列中</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ReferenceQueue&lt;K&gt; queue = <span class="keyword">new</span> ReferenceQueue&lt;K&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// WeakHashMap被改变的次数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> modCount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定“容量大小”和“加载因子”的构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WeakHashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal Initial Capacity: "</span>+</span><br><span class="line">                                               initialCapacity);</span><br><span class="line">        <span class="comment">// WeakHashMap的最大容量只能是MAXIMUM_CAPACITY</span></span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">            initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal Load factor: "</span>+</span><br><span class="line">                                               loadFactor);</span><br><span class="line">        <span class="comment">// 找出“大于initialCapacity”的最小的2的幂</span></span><br><span class="line">        <span class="keyword">int</span> capacity = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (capacity &lt; initialCapacity)</span><br><span class="line">            capacity &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 创建Entry数组，用来保存数据</span></span><br><span class="line">        table = <span class="keyword">new</span> Entry[capacity];</span><br><span class="line">        <span class="comment">// 设置“加载因子”</span></span><br><span class="line">        <span class="keyword">this</span>.loadFactor = loadFactor;</span><br><span class="line">        <span class="comment">// 设置“WeakHashMap阈值”，当WeakHashMap中存储数据的数量达到threshold时，</span></span><br><span class="line">        <span class="comment">// 就需要将WeakHashMap的容量加倍。</span></span><br><span class="line">        threshold = (<span class="keyword">int</span>)(capacity * loadFactor);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定“容量大小”的构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WeakHashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 默认构造函数。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WeakHashMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR;</span><br><span class="line">        threshold = (<span class="keyword">int</span>)(DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">        table = <span class="keyword">new</span> Entry[DEFAULT_INITIAL_CAPACITY];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 包含“子Map”的构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WeakHashMap</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(Math.max((<span class="keyword">int</span>) (m.size() / DEFAULT_LOAD_FACTOR) + <span class="number">1</span>, <span class="number">16</span>),</span><br><span class="line">             DEFAULT_LOAD_FACTOR);</span><br><span class="line">        <span class="comment">// 将m中的全部元素逐个添加到WeakHashMap中</span></span><br><span class="line">        putAll(m);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 键为null的mask值。</span></span><br><span class="line">    <span class="comment">// 因为WeakReference中允许“null的key”，若直接插入“null的key”，将其当作弱引用时，会被删除。</span></span><br><span class="line">    <span class="comment">// 因此，这里对于“key为null”的清空，都统一替换为“key为NULL_KEY”，“NULL_KEY”是“静态的final常量”。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object NULL_KEY = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对“null的key”进行特殊处理</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Object <span class="title">maskNull</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (key == <span class="keyword">null</span> ? NULL_KEY : key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 还原对“null的key”的特殊处理</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> &lt;K&gt; <span class="function">K <span class="title">unmaskNull</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (K) (key == NULL_KEY ? <span class="keyword">null</span> : key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断“x”和“y”是否相等</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">eq</span><span class="params">(Object x, Object y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x == y || x.equals(y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回索引值</span></span><br><span class="line">    <span class="comment">// h &amp; (length-1)保证返回值的小于length</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">indexFor</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> h &amp; (length-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清空table中无用键值对。原理如下：</span></span><br><span class="line">    <span class="comment">// (01) 当WeakHashMap中某个“弱引用的key”由于没有再被引用而被GC收回时，</span></span><br><span class="line">    <span class="comment">//   被回收的“该弱引用key”也被会被添加到"ReferenceQueue(queue)"中。</span></span><br><span class="line">    <span class="comment">// (02) 当我们执行expungeStaleEntries时，</span></span><br><span class="line">    <span class="comment">//   就遍历"ReferenceQueue(queue)"中的所有key</span></span><br><span class="line">    <span class="comment">//   然后就在“WeakReference的table”中删除与“ReferenceQueue(queue)中key”对应的键值对</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">expungeStaleEntries</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Entry&lt;K,V&gt; e;</span><br><span class="line">        <span class="keyword">while</span> ( (e = (Entry&lt;K,V&gt;) queue.poll()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> h = e.hash;</span><br><span class="line">            <span class="keyword">int</span> i = indexFor(h, table.length);</span><br><span class="line"></span><br><span class="line">            Entry&lt;K,V&gt; prev = table[i];</span><br><span class="line">            Entry&lt;K,V&gt; p = prev;</span><br><span class="line">            <span class="keyword">while</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">                Entry&lt;K,V&gt; next = p.next;</span><br><span class="line">                <span class="keyword">if</span> (p == e) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (prev == e)</span><br><span class="line">                        table[i] = next;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        prev.next = next;</span><br><span class="line">                    e.next = <span class="keyword">null</span>;  <span class="comment">// Help GC</span></span><br><span class="line">                    e.value = <span class="keyword">null</span>; <span class="comment">//  "   "</span></span><br><span class="line">                    size--;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                prev = p;</span><br><span class="line">                p = next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取WeakHashMap的table(存放键值对的数组)</span></span><br><span class="line">    <span class="keyword">private</span> Entry[] getTable() &#123;</span><br><span class="line">        <span class="comment">// 删除table中“已被GC回收的key对应的键值对”</span></span><br><span class="line">        expungeStaleEntries();</span><br><span class="line">        <span class="keyword">return</span> table;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取WeakHashMap的实际大小</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (size == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 删除table中“已被GC回收的key对应的键值对”</span></span><br><span class="line">        expungeStaleEntries();</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size() == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取key对应的value</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        Object k = maskNull(key);</span><br><span class="line">        <span class="comment">// 获取key的hash值。</span></span><br><span class="line">        <span class="keyword">int</span> h = HashMap.hash(k.hashCode());</span><br><span class="line">        Entry[] tab = getTable();</span><br><span class="line">        <span class="keyword">int</span> index = indexFor(h, tab.length);</span><br><span class="line">        Entry&lt;K,V&gt; e = tab[index];</span><br><span class="line">        <span class="comment">// 在“该hash值对应的链表”上查找“键值等于key”的元素</span></span><br><span class="line">        <span class="keyword">while</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (e.hash == h &amp;&amp; eq(k, e.get()))</span><br><span class="line">                <span class="keyword">return</span> e.value;</span><br><span class="line">            e = e.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// WeakHashMap是否包含key</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsKey</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getEntry(key) != <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回“键为key”的键值对</span></span><br><span class="line">    <span class="function">Entry&lt;K,V&gt; <span class="title">getEntry</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        Object k = maskNull(key);</span><br><span class="line">        <span class="keyword">int</span> h = HashMap.hash(k.hashCode());</span><br><span class="line">        Entry[] tab = getTable();</span><br><span class="line">        <span class="keyword">int</span> index = indexFor(h, tab.length);</span><br><span class="line">        Entry&lt;K,V&gt; e = tab[index];</span><br><span class="line">        <span class="keyword">while</span> (e != <span class="keyword">null</span> &amp;&amp; !(e.hash == h &amp;&amp; eq(k, e.get())))</span><br><span class="line">            e = e.next;</span><br><span class="line">        <span class="keyword">return</span> e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将“key-value”添加到WeakHashMap中</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">        K k = (K) maskNull(key);</span><br><span class="line">        <span class="keyword">int</span> h = HashMap.hash(k.hashCode());</span><br><span class="line">        Entry[] tab = getTable();</span><br><span class="line">        <span class="keyword">int</span> i = indexFor(h, tab.length);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;K,V&gt; e = tab[i]; e != <span class="keyword">null</span>; e = e.next) &#123;</span><br><span class="line">            <span class="comment">// 若“该key”对应的键值对已经存在，则用新的value取代旧的value。然后退出！</span></span><br><span class="line">            <span class="keyword">if</span> (h == e.hash &amp;&amp; eq(k, e.get())) &#123;</span><br><span class="line">                V oldValue = e.value;</span><br><span class="line">                <span class="keyword">if</span> (value != oldValue)</span><br><span class="line">                    e.value = value;</span><br><span class="line">                <span class="keyword">return</span> oldValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 若“该key”对应的键值对不存在于WeakHashMap中，则将“key-value”添加到table中</span></span><br><span class="line">        modCount++;</span><br><span class="line">        Entry&lt;K,V&gt; e = tab[i];</span><br><span class="line">        tab[i] = <span class="keyword">new</span> Entry&lt;K,V&gt;(k, value, queue, h, e);</span><br><span class="line">        <span class="keyword">if</span> (++size &gt;= threshold)</span><br><span class="line">            resize(tab.length * <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重新调整WeakHashMap的大小，newCapacity是调整后的单位</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> newCapacity)</span> </span>&#123;</span><br><span class="line">        Entry[] oldTable = getTable();</span><br><span class="line">        <span class="keyword">int</span> oldCapacity = oldTable.length;</span><br><span class="line">        <span class="keyword">if</span> (oldCapacity == MAXIMUM_CAPACITY) &#123;</span><br><span class="line">            threshold = Integer.MAX_VALUE;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 新建一个newTable，将“旧的table”的全部元素添加到“新的newTable”中，</span></span><br><span class="line">        <span class="comment">// 然后，将“新的newTable”赋值给“旧的table”。</span></span><br><span class="line">        Entry[] newTable = <span class="keyword">new</span> Entry[newCapacity];</span><br><span class="line">        transfer(oldTable, newTable);</span><br><span class="line">        table = newTable;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (size &gt;= threshold / <span class="number">2</span>) &#123;</span><br><span class="line">            threshold = (<span class="keyword">int</span>)(newCapacity * loadFactor);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 删除table中“已被GC回收的key对应的键值对”</span></span><br><span class="line">            expungeStaleEntries();</span><br><span class="line">            transfer(newTable, oldTable);</span><br><span class="line">            table = oldTable;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将WeakHashMap中的全部元素都添加到newTable中</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(Entry[] src, Entry[] dest)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; src.length; ++j) &#123;</span><br><span class="line">            Entry&lt;K,V&gt; e = src[j];</span><br><span class="line">            src[j] = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">while</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">                Entry&lt;K,V&gt; next = e.next;</span><br><span class="line">                Object key = e.get();</span><br><span class="line">                <span class="keyword">if</span> (key == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    e.next = <span class="keyword">null</span>;  <span class="comment">// Help GC</span></span><br><span class="line">                    e.value = <span class="keyword">null</span>; <span class="comment">//  "   "</span></span><br><span class="line">                    size--;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">int</span> i = indexFor(e.hash, dest.length);</span><br><span class="line">                    e.next = dest[i];</span><br><span class="line">                    dest[i] = e;</span><br><span class="line">                &#125;</span><br><span class="line">                e = next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将"m"的全部元素都添加到WeakHashMap中</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">putAll</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> numKeysToBeAdded = m.size();</span><br><span class="line">        <span class="keyword">if</span> (numKeysToBeAdded == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 计算容量是否足够，</span></span><br><span class="line">        <span class="comment">// 若“当前实际容量 &lt; 需要的容量”，则将容量x2。</span></span><br><span class="line">        <span class="keyword">if</span> (numKeysToBeAdded &gt; threshold) &#123;</span><br><span class="line">            <span class="keyword">int</span> targetCapacity = (<span class="keyword">int</span>)(numKeysToBeAdded / loadFactor + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (targetCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">                targetCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">            <span class="keyword">int</span> newCapacity = table.length;</span><br><span class="line">            <span class="keyword">while</span> (newCapacity &lt; targetCapacity)</span><br><span class="line">                newCapacity &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (newCapacity &gt; table.length)</span><br><span class="line">                resize(newCapacity);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将“m”中的元素逐个添加到WeakHashMap中。</span></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;? extends K, ? extends V&gt; e : m.entrySet())</span><br><span class="line">            put(e.getKey(), e.getValue());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除“键为key”元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">remove</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        Object k = maskNull(key);</span><br><span class="line">        <span class="comment">// 获取哈希值。</span></span><br><span class="line">        <span class="keyword">int</span> h = HashMap.hash(k.hashCode());</span><br><span class="line">        Entry[] tab = getTable();</span><br><span class="line">        <span class="keyword">int</span> i = indexFor(h, tab.length);</span><br><span class="line">        Entry&lt;K,V&gt; prev = tab[i];</span><br><span class="line">        Entry&lt;K,V&gt; e = prev;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除链表中“键为key”的元素</span></span><br><span class="line">        <span class="comment">// 本质是“删除单向链表中的节点”</span></span><br><span class="line">        <span class="keyword">while</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Entry&lt;K,V&gt; next = e.next;</span><br><span class="line">            <span class="keyword">if</span> (h == e.hash &amp;&amp; eq(k, e.get())) &#123;</span><br><span class="line">                modCount++;</span><br><span class="line">                size--;</span><br><span class="line">                <span class="keyword">if</span> (prev == e)</span><br><span class="line">                    tab[i] = next;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    prev.next = next;</span><br><span class="line">                <span class="keyword">return</span> e.value;</span><br><span class="line">            &#125;</span><br><span class="line">            prev = e;</span><br><span class="line">            e = next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除“键值对”</span></span><br><span class="line">    <span class="function">Entry&lt;K,V&gt; <span class="title">removeMapping</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Map.Entry))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        Entry[] tab = getTable();</span><br><span class="line">        Map.Entry entry = (Map.Entry)o;</span><br><span class="line">        Object k = maskNull(entry.getKey());</span><br><span class="line">        <span class="keyword">int</span> h = HashMap.hash(k.hashCode());</span><br><span class="line">        <span class="keyword">int</span> i = indexFor(h, tab.length);</span><br><span class="line">        Entry&lt;K,V&gt; prev = tab[i];</span><br><span class="line">        Entry&lt;K,V&gt; e = prev;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除链表中的“键值对e”</span></span><br><span class="line">        <span class="comment">// 本质是“删除单向链表中的节点”</span></span><br><span class="line">        <span class="keyword">while</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Entry&lt;K,V&gt; next = e.next;</span><br><span class="line">            <span class="keyword">if</span> (h == e.hash &amp;&amp; e.equals(entry)) &#123;</span><br><span class="line">                modCount++;</span><br><span class="line">                size--;</span><br><span class="line">                <span class="keyword">if</span> (prev == e)</span><br><span class="line">                    tab[i] = next;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    prev.next = next;</span><br><span class="line">                <span class="keyword">return</span> e;</span><br><span class="line">            &#125;</span><br><span class="line">            prev = e;</span><br><span class="line">            e = next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清空WeakHashMap，将所有的元素设为null</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (queue.poll() != <span class="keyword">null</span>)</span><br><span class="line">            ;</span><br><span class="line"></span><br><span class="line">        modCount++;</span><br><span class="line">        Entry[] tab = table;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tab.length; ++i)</span><br><span class="line">            tab[i] = <span class="keyword">null</span>;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (queue.poll() != <span class="keyword">null</span>)</span><br><span class="line">            ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否包含“值为value”的元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsValue</span><span class="params">(Object value)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 若“value为null”，则调用containsNullValue()查找</span></span><br><span class="line">        <span class="keyword">if</span> (value==<span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> containsNullValue();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 若“value不为null”，则查找WeakHashMap中是否有值为value的节点。</span></span><br><span class="line">        Entry[] tab = getTable();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = tab.length ; i-- &gt; <span class="number">0</span> ;)</span><br><span class="line">            <span class="keyword">for</span> (Entry e = tab[i] ; e != <span class="keyword">null</span> ; e = e.next)</span><br><span class="line">                <span class="keyword">if</span> (value.equals(e.value))</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否包含null值</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">containsNullValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Entry[] tab = getTable();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = tab.length ; i-- &gt; <span class="number">0</span> ;)</span><br><span class="line">            <span class="keyword">for</span> (Entry e = tab[i] ; e != <span class="keyword">null</span> ; e = e.next)</span><br><span class="line">                <span class="keyword">if</span> (e.value==<span class="keyword">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Entry是单向链表。</span></span><br><span class="line">    <span class="comment">// 它是 “WeakHashMap链式存储法”对应的链表。</span></span><br><span class="line">    <span class="comment">// 它实现了Map.Entry 接口，即实现getKey(), getValue(), setValue(V value), equals(Object o), hashCode()这些函数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">WeakReference</span>&lt;<span class="title">K</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> V value;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> hash;</span><br><span class="line">        <span class="comment">// 指向下一个节点</span></span><br><span class="line">        <span class="keyword">private</span> Entry&lt;K,V&gt; next;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构造函数。</span></span><br><span class="line">        Entry(K key, V value,</span><br><span class="line">          ReferenceQueue&lt;K&gt; queue,</span><br><span class="line">              <span class="keyword">int</span> hash, Entry&lt;K,V&gt; next) &#123;</span><br><span class="line">            <span class="keyword">super</span>(key, queue);</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">            <span class="keyword">this</span>.hash  = hash;</span><br><span class="line">            <span class="keyword">this</span>.next  = next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> K <span class="title">getKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> WeakHashMap.&lt;K&gt;unmaskNull(get());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> V <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> V <span class="title">setValue</span><span class="params">(V newValue)</span> </span>&#123;</span><br><span class="line">        V oldValue = value;</span><br><span class="line">            value = newValue;</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断两个Entry是否相等</span></span><br><span class="line">        <span class="comment">// 若两个Entry的“key”和“value”都相等，则返回true。</span></span><br><span class="line">        <span class="comment">// 否则，返回false</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Map.Entry))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            Map.Entry e = (Map.Entry)o;</span><br><span class="line">            Object k1 = getKey();</span><br><span class="line">            Object k2 = e.getKey();</span><br><span class="line">            <span class="keyword">if</span> (k1 == k2 || (k1 != <span class="keyword">null</span> &amp;&amp; k1.equals(k2))) &#123;</span><br><span class="line">                Object v1 = getValue();</span><br><span class="line">                Object v2 = e.getValue();</span><br><span class="line">                <span class="keyword">if</span> (v1 == v2 || (v1 != <span class="keyword">null</span> &amp;&amp; v1.equals(v2)))</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 实现hashCode()</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            Object k = getKey();</span><br><span class="line">            Object v = getValue();</span><br><span class="line">            <span class="keyword">return</span>  ((k==<span class="keyword">null</span> ? <span class="number">0</span> : k.hashCode()) ^</span><br><span class="line">                     (v==<span class="keyword">null</span> ? <span class="number">0</span> : v.hashCode()));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> getKey() + <span class="string">"="</span> + getValue();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// HashIterator是WeakHashMap迭代器的抽象出来的父类，实现了公共了函数。</span></span><br><span class="line">    <span class="comment">// 它包含“key迭代器(KeyIterator)”、“Value迭代器(ValueIterator)”和“Entry迭代器(EntryIterator)”3个子类。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">HashIterator</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">        <span class="comment">// 当前索引</span></span><br><span class="line">        <span class="keyword">int</span> index;</span><br><span class="line">        <span class="comment">// 当前元素</span></span><br><span class="line">        Entry&lt;K,V&gt; entry = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 上一次返回元素</span></span><br><span class="line">        Entry&lt;K,V&gt; lastReturned = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// expectedModCount用于实现fast-fail机制。</span></span><br><span class="line">        <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 下一个键(强引用)</span></span><br><span class="line">        Object nextKey = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 当前键(强引用)</span></span><br><span class="line">        Object currentKey = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构造函数</span></span><br><span class="line">        HashIterator() &#123;</span><br><span class="line">            index = (size() != <span class="number">0</span> ? table.length : <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 是否存在下一个元素</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            Entry[] t = table;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 一个Entry就是一个单向链表</span></span><br><span class="line">            <span class="comment">// 若该Entry的下一个节点不为空，就将next指向下一个节点;</span></span><br><span class="line">            <span class="comment">// 否则，将next指向下一个链表(也是下一个Entry)的不为null的节点。</span></span><br><span class="line">            <span class="keyword">while</span> (nextKey == <span class="keyword">null</span>) &#123;</span><br><span class="line">                Entry&lt;K,V&gt; e = entry;</span><br><span class="line">                <span class="keyword">int</span> i = index;</span><br><span class="line">                <span class="keyword">while</span> (e == <span class="keyword">null</span> &amp;&amp; i &gt; <span class="number">0</span>)</span><br><span class="line">                    e = t[--i];</span><br><span class="line">                entry = e;</span><br><span class="line">                index = i;</span><br><span class="line">                <span class="keyword">if</span> (e == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    currentKey = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                nextKey = e.get(); <span class="comment">// hold on to key in strong ref</span></span><br><span class="line">                <span class="keyword">if</span> (nextKey == <span class="keyword">null</span>)</span><br><span class="line">                    entry = entry.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取下一个元素</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> Entry&lt;K,V&gt; <span class="title">nextEntry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">            <span class="keyword">if</span> (nextKey == <span class="keyword">null</span> &amp;&amp; !hasNext())</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line"></span><br><span class="line">            lastReturned = entry;</span><br><span class="line">            entry = entry.next;</span><br><span class="line">            currentKey = nextKey;</span><br><span class="line">            nextKey = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">return</span> lastReturned;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除当前元素</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (lastReturned == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">            <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line"></span><br><span class="line">            WeakHashMap.<span class="keyword">this</span>.remove(currentKey);</span><br><span class="line">            expectedModCount = modCount;</span><br><span class="line">            lastReturned = <span class="keyword">null</span>;</span><br><span class="line">            currentKey = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// value的迭代器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ValueIterator</span> <span class="keyword">extends</span> <span class="title">HashIterator</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> V <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> nextEntry().value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// key的迭代器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">KeyIterator</span> <span class="keyword">extends</span> <span class="title">HashIterator</span>&lt;<span class="title">K</span>&gt; </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> K <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> nextEntry().getKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Entry的迭代器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">EntryIterator</span> <span class="keyword">extends</span> <span class="title">HashIterator</span>&lt;<span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> Map.<span class="function">Entry&lt;K,V&gt; <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> nextEntry();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// WeakHashMap的Entry对应的集合</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回“key的集合”，实际上返回一个“KeySet对象”</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;K&gt; <span class="title">keySet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Set&lt;K&gt; ks = keySet;</span><br><span class="line">        <span class="keyword">return</span> (ks != <span class="keyword">null</span> ? ks : (keySet = <span class="keyword">new</span> KeySet()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Key对应的集合</span></span><br><span class="line">    <span class="comment">// KeySet继承于AbstractSet，说明该集合中没有重复的Key。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">KeySet</span> <span class="keyword">extends</span> <span class="title">AbstractSet</span>&lt;<span class="title">K</span>&gt; </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Iterator&lt;K&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> KeyIterator();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> WeakHashMap.<span class="keyword">this</span>.size();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> containsKey(o);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (containsKey(o)) &#123;</span><br><span class="line">                WeakHashMap.<span class="keyword">this</span>.remove(o);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            WeakHashMap.<span class="keyword">this</span>.clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回“value集合”，实际上返回的是一个Values对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;V&gt; <span class="title">values</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Collection&lt;V&gt; vs = values;</span><br><span class="line">        <span class="keyword">return</span> (vs != <span class="keyword">null</span> ?  vs : (values = <span class="keyword">new</span> Values()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// “value集合”</span></span><br><span class="line">    <span class="comment">// Values继承于AbstractCollection，不同于“KeySet继承于AbstractSet”，</span></span><br><span class="line">    <span class="comment">// Values中的元素能够重复。因为不同的key可以指向相同的value。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Values</span> <span class="keyword">extends</span> <span class="title">AbstractCollection</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Iterator&lt;V&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ValueIterator();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> WeakHashMap.<span class="keyword">this</span>.size();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> containsValue(o);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            WeakHashMap.<span class="keyword">this</span>.clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回“WeakHashMap的Entry集合”</span></span><br><span class="line">    <span class="comment">// 它实际是返回一个EntrySet对象</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet() &#123;</span><br><span class="line">        Set&lt;Map.Entry&lt;K,V&gt;&gt; es = entrySet;</span><br><span class="line">        <span class="keyword">return</span> es != <span class="keyword">null</span> ? es : (entrySet = <span class="keyword">new</span> EntrySet());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// EntrySet对应的集合</span></span><br><span class="line">    <span class="comment">// EntrySet继承于AbstractSet，说明该集合中没有重复的EntrySet。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">EntrySet</span> <span class="keyword">extends</span> <span class="title">AbstractSet</span>&lt;<span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> Iterator&lt;Map.Entry&lt;K,V&gt;&gt; iterator() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> EntryIterator();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 是否包含“值(o)”</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Map.Entry))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            Map.Entry e = (Map.Entry)o;</span><br><span class="line">            Object k = e.getKey();</span><br><span class="line">            Entry candidate = getEntry(e.getKey());</span><br><span class="line">            <span class="keyword">return</span> candidate != <span class="keyword">null</span> &amp;&amp; candidate.equals(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除“值(o)”</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> removeMapping(o) != <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回WeakHashMap的大小</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> WeakHashMap.<span class="keyword">this</span>.size();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 清空WeakHashMap</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            WeakHashMap.<span class="keyword">this</span>.clear();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 拷贝函数。将WeakHashMap中的全部元素都拷贝到List中</span></span><br><span class="line">        <span class="keyword">private</span> List&lt;Map.Entry&lt;K,V&gt;&gt; deepCopy() &#123;</span><br><span class="line">            List&lt;Map.Entry&lt;K,V&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;Map.Entry&lt;K,V&gt;&gt;(size());</span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;K,V&gt; e : <span class="keyword">this</span>)</span><br><span class="line">                list.add(<span class="keyword">new</span> AbstractMap.SimpleEntry&lt;K,V&gt;(e));</span><br><span class="line">            <span class="keyword">return</span> list;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回Entry对应的Object[]数组</span></span><br><span class="line">        <span class="keyword">public</span> Object[] toArray() &#123;</span><br><span class="line">            <span class="keyword">return</span> deepCopy().toArray();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回Entry对应的T[]数组(T[]我们新建数组时，定义的数组类型)</span></span><br><span class="line">        <span class="keyword">public</span> &lt;T&gt; T[] toArray(T[] a) &#123;</span><br><span class="line">            <span class="keyword">return</span> deepCopy().toArray(a);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：WeakHashMap和HashMap都是通过”拉链法”实现的散列表。它们的源码绝大部分内容都一样，这里就只是对它们不同的部分就是说明。</p><p>WeakReference是“弱键”实现的哈希表。</p><p><strong>它这个“弱键”的目的就是：实现对“键值对”的动态回收。</strong> 当“弱键”不再被使用到时，GC会回收它，WeakReference也会将“弱键”对应的键值对删除。</p><p>“弱键”是一个“弱引用(WeakReference)”，在Java中，WeakReference和ReferenceQueue 是联合使用的。在WeakHashMap中亦是如此：如果弱引用所引用的对象被垃圾回收，Java虚拟机就会把这个弱引用加入到与之关联的引用队列中。 接着，WeakHashMap会根据“引用队列”，来删除“WeakHashMap中已被GC回收的‘弱键’对应的键值对”。</p><p>另外，理解上面思想的重点是通过 expungeStaleEntries() 函数去理解。</p><h1 id="WeakHashMap遍历方式"><a href="#WeakHashMap遍历方式" class="headerlink" title="WeakHashMap遍历方式"></a>WeakHashMap遍历方式</h1><h2 id="遍历WeakHashMap的键值对"><a href="#遍历WeakHashMap的键值对" class="headerlink" title="遍历WeakHashMap的键值对"></a>遍历WeakHashMap的键值对</h2><p>第一步：根据entrySet()获取WeakHashMap的“键值对”的Set集合。<br>第二步：通过Iterator迭代器遍历“第一步”得到的集合。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设map是WeakHashMap对象</span></span><br><span class="line"><span class="comment">// map中的key是String类型，value是Integer类型</span></span><br><span class="line">Integer integ = <span class="keyword">null</span>;</span><br><span class="line">Iterator iter = map.entrySet().iterator();</span><br><span class="line"><span class="keyword">while</span>(iter.hasNext()) &#123;</span><br><span class="line">    Map.Entry entry = (Map.Entry)iter.next();</span><br><span class="line">    <span class="comment">// 获取key</span></span><br><span class="line">    key = (String)entry.getKey();</span><br><span class="line">        <span class="comment">// 获取value</span></span><br><span class="line">    integ = (Integer)entry.getValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="遍历WeakHashMap的键"><a href="#遍历WeakHashMap的键" class="headerlink" title="遍历WeakHashMap的键"></a>遍历WeakHashMap的键</h2><p>第一步：根据keySet()获取WeakHashMap的“键”的Set集合。<br>第二步：通过Iterator迭代器遍历“第一步”得到的集合。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设map是WeakHashMap对象</span></span><br><span class="line"><span class="comment">// map中的key是String类型，value是Integer类型</span></span><br><span class="line">String key = <span class="keyword">null</span>;</span><br><span class="line">Integer integ = <span class="keyword">null</span>;</span><br><span class="line">Iterator iter = map.keySet().iterator();</span><br><span class="line"><span class="keyword">while</span> (iter.hasNext()) &#123;</span><br><span class="line">        <span class="comment">// 获取key</span></span><br><span class="line">    key = (String)iter.next();</span><br><span class="line">        <span class="comment">// 根据key，获取value</span></span><br><span class="line">    integ = (Integer)map.get(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="遍历WeakHashMap的值"><a href="#遍历WeakHashMap的值" class="headerlink" title="遍历WeakHashMap的值"></a>遍历WeakHashMap的值</h2><p>第一步：根据value()获取WeakHashMap的“值”的集合。<br>第二步：通过Iterator迭代器遍历“第一步”得到的集合。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设map是WeakHashMap对象</span></span><br><span class="line"><span class="comment">// map中的key是String类型，value是Integer类型</span></span><br><span class="line">Integer value = <span class="keyword">null</span>;</span><br><span class="line">Collection c = map.values();</span><br><span class="line">Iterator iter= c.iterator();</span><br><span class="line"><span class="keyword">while</span> (iter.hasNext()) &#123;</span><br><span class="line">    value = (Integer)iter.next();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>WeakHashMap遍历测试程序如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.WeakHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Map.Entry;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @desc 遍历WeakHashMap的测试程序。</span></span><br><span class="line"><span class="comment"> *   (01) 通过entrySet()去遍历key、value，参考实现函数：</span></span><br><span class="line"><span class="comment"> *        iteratorHashMapByEntryset()</span></span><br><span class="line"><span class="comment"> *   (02) 通过keySet()去遍历key、value，参考实现函数：</span></span><br><span class="line"><span class="comment"> *        iteratorHashMapByKeyset()</span></span><br><span class="line"><span class="comment"> *   (03) 通过values()去遍历value，参考实现函数：</span></span><br><span class="line"><span class="comment"> *        iteratorHashMapJustValues()</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @author skywang</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeakHashMapIteratorTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> val = <span class="number">0</span>;</span><br><span class="line">        String key = <span class="keyword">null</span>;</span><br><span class="line">        Integer value = <span class="keyword">null</span>;</span><br><span class="line">        Random r = <span class="keyword">new</span> Random();</span><br><span class="line">        WeakHashMap map = <span class="keyword">new</span> WeakHashMap();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">12</span>; i++) &#123;</span><br><span class="line">            <span class="comment">// 随机获取一个[0,100)之间的数字</span></span><br><span class="line">            val = r.nextInt(<span class="number">100</span>);</span><br><span class="line">            </span><br><span class="line">            key = String.valueOf(val);</span><br><span class="line">            value = r.nextInt(<span class="number">5</span>);</span><br><span class="line">            <span class="comment">// 添加到WeakHashMap中</span></span><br><span class="line">            map.put(key, value);</span><br><span class="line">            System.out.println(<span class="string">" key:"</span>+key+<span class="string">" value:"</span>+value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 通过entrySet()遍历WeakHashMap的key-value</span></span><br><span class="line">        iteratorHashMapByEntryset(map) ;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 通过keySet()遍历WeakHashMap的key-value</span></span><br><span class="line">        iteratorHashMapByKeyset(map) ;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 单单遍历WeakHashMap的value</span></span><br><span class="line">        iteratorHashMapJustValues(map);        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 通过entry set遍历WeakHashMap</span></span><br><span class="line"><span class="comment">     * 效率高!</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">iteratorHashMapByEntryset</span><span class="params">(WeakHashMap map)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (map == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"\niterator WeakHashMap By entryset"</span>);</span><br><span class="line">        String key = <span class="keyword">null</span>;</span><br><span class="line">        Integer integ = <span class="keyword">null</span>;</span><br><span class="line">        Iterator iter = map.entrySet().iterator();</span><br><span class="line">        <span class="keyword">while</span>(iter.hasNext()) &#123;</span><br><span class="line">            Map.Entry entry = (Map.Entry)iter.next();</span><br><span class="line">            </span><br><span class="line">            key = (String)entry.getKey();</span><br><span class="line">            integ = (Integer)entry.getValue();</span><br><span class="line">            System.out.println(key+<span class="string">" -- "</span>+integ.intValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 通过keyset来遍历WeakHashMap</span></span><br><span class="line"><span class="comment">     * 效率低!</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">iteratorHashMapByKeyset</span><span class="params">(WeakHashMap map)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (map == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"\niterator WeakHashMap By keyset"</span>);</span><br><span class="line">        String key = <span class="keyword">null</span>;</span><br><span class="line">        Integer integ = <span class="keyword">null</span>;</span><br><span class="line">        Iterator iter = map.keySet().iterator();</span><br><span class="line">        <span class="keyword">while</span> (iter.hasNext()) &#123;</span><br><span class="line">            key = (String)iter.next();</span><br><span class="line">            integ = (Integer)map.get(key);</span><br><span class="line">            System.out.println(key+<span class="string">" -- "</span>+integ.intValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 遍历WeakHashMap的values</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">iteratorHashMapJustValues</span><span class="params">(WeakHashMap map)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (map == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        </span><br><span class="line">        Collection c = map.values();</span><br><span class="line">        Iterator iter= c.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iter.hasNext()) &#123;</span><br><span class="line">            System.out.println(iter.next());</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="WeakHashMap示例"><a href="#WeakHashMap示例" class="headerlink" title="WeakHashMap示例"></a>WeakHashMap示例</h1><p>下面通过实例来学习如何使用WeakHashMap</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.WeakHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.lang.ref.WeakReference;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desc</span> WeakHashMap测试程序</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> skywang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@email</span> kuiwu-wang@163.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeakHashMapTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        testWeakHashMapAPIs();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testWeakHashMapAPIs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 初始化3个“弱键”</span></span><br><span class="line">        String w1 = <span class="keyword">new</span> String(<span class="string">"one"</span>);</span><br><span class="line">        String w2 = <span class="keyword">new</span> String(<span class="string">"two"</span>);</span><br><span class="line">        String w3 = <span class="keyword">new</span> String(<span class="string">"three"</span>);</span><br><span class="line">        <span class="comment">// 新建WeakHashMap</span></span><br><span class="line">        Map wmap = <span class="keyword">new</span> WeakHashMap();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加键值对</span></span><br><span class="line">        wmap.put(w1, <span class="string">"w1"</span>);</span><br><span class="line">        wmap.put(w2, <span class="string">"w2"</span>);</span><br><span class="line">        wmap.put(w3, <span class="string">"w3"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印出wmap</span></span><br><span class="line">        System.out.printf(<span class="string">"\nwmap:%s\n"</span>,wmap );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// containsKey(Object key) :是否包含键key</span></span><br><span class="line">        System.out.printf(<span class="string">"contains key two : %s\n"</span>,wmap.containsKey(<span class="string">"two"</span>));</span><br><span class="line">        System.out.printf(<span class="string">"contains key five : %s\n"</span>,wmap.containsKey(<span class="string">"five"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// containsValue(Object value) :是否包含值value</span></span><br><span class="line">        System.out.printf(<span class="string">"contains value 0 : %s\n"</span>,wmap.containsValue(<span class="keyword">new</span> Integer(<span class="number">0</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// remove(Object key) ： 删除键key对应的键值对</span></span><br><span class="line">        wmap.remove(<span class="string">"three"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.printf(<span class="string">"wmap: %s\n"</span>,wmap );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// ---- 测试 WeakHashMap 的自动回收特性 ----</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 将w1设置null。</span></span><br><span class="line">        <span class="comment">// 这意味着“弱键”w1再没有被其它对象引用，调用gc时会回收WeakHashMap中与“w1”对应的键值对</span></span><br><span class="line">        w1 = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 内存回收。这里，会回收WeakHashMap中与“w1”对应的键值对</span></span><br><span class="line">        System.gc();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历WeakHashMap</span></span><br><span class="line">        Iterator iter = wmap.entrySet().iterator();</span><br><span class="line">        <span class="keyword">while</span> (iter.hasNext()) &#123;</span><br><span class="line">            Map.Entry en = (Map.Entry)iter.next();</span><br><span class="line">            System.out.printf(<span class="string">"next : %s - %s\n"</span>,en.getKey(),en.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 打印WeakHashMap的实际大小</span></span><br><span class="line">        System.out.printf(<span class="string">" after gc WeakHashMap size:%s\n"</span>, wmap.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wmap:&#123;three=w3, one=w1, two=w2&#125;</span><br><span class="line">contains key two : <span class="keyword">true</span></span><br><span class="line">contains key five : <span class="keyword">false</span></span><br><span class="line">contains value <span class="number">0</span> : <span class="keyword">false</span></span><br><span class="line">wmap: &#123;one=w1, two=w2&#125;</span><br><span class="line">next : two - w2</span><br><span class="line"> after gc WeakHashMap size:<span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;WeakHashMap简介&quot;&gt;&lt;a href=&quot;#WeakHashMap简介&quot; class=&quot;headerlink&quot; title=&quot;WeakHashMap简介&quot;&gt;&lt;/a&gt;WeakHashMap简介&lt;/h1&gt;&lt;p&gt;WeakHashMap 继承于AbstractMap，实现了Map接口。和HashMap一样，WeakHashMap 也是一个散列表，它存储的内容也是键值对(key-value)映射，而且键和值都可以是null。&lt;br&gt;
    
    </summary>
    
      <category term="Java 集合" scheme="http://cuijing.me/categories/Java-%E9%9B%86%E5%90%88/"/>
    
    
      <category term="Java" scheme="http://cuijing.me/tags/Java/"/>
    
      <category term="Map" scheme="http://cuijing.me/tags/Map/"/>
    
      <category term="WeakHashMap" scheme="http://cuijing.me/tags/WeakHashMap/"/>
    
  </entry>
  
  <entry>
    <title>集合框架之 TreeMap</title>
    <link href="http://cuijing.me/2015/08/08/Java/8-Collection-Map/12-TreeMap/"/>
    <id>http://cuijing.me/2015/08/08/Java/8-Collection-Map/12-TreeMap/</id>
    <published>2015-08-08T00:30:00.000Z</published>
    <updated>2016-05-01T12:26:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TreeMap-简介"><a href="#TreeMap-简介" class="headerlink" title="TreeMap 简介"></a>TreeMap 简介</h1><p>TreeMap 是一个有序的key-value集合，它是通过红黑树实现的。<br>TreeMap 继承于AbstractMap，所以它是一个Map，即一个key-value集合。<br>TreeMap 实现了NavigableMap接口，意味着它支持一系列的导航方法。比如返回有序的key集合。<br>TreeMap 实现了Cloneable接口，意味着它能被克隆。<br>TreeMap 实现了java.io.Serializable接口，意味着它支持序列化。</p><p>TreeMap基于红黑树（Red-Black tree）实现。该映射根据其键的自然顺序进行排序，或者根据创建映射时提供的 Comparator 进行排序，具体取决于使用的构造方法。<br>TreeMap的基本操作 containsKey、get、put 和 remove 的时间复杂度是 log(n) 。<br>另外，TreeMap是非同步的。 它的iterator 方法返回的迭代器是fail-fastl的。<br><a id="more"></a></p><h1 id="TreeMap的构造函数"><a href="#TreeMap的构造函数" class="headerlink" title="TreeMap的构造函数"></a>TreeMap的构造函数</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认构造函数。使用该构造函数，TreeMap中的元素按照自然排序进行排列。</span></span><br><span class="line">TreeMap()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建的TreeMap包含Map</span></span><br><span class="line">TreeMap(Map&lt;? extends K, ? extends V&gt; copyFrom)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定Tree的比较器</span></span><br><span class="line">TreeMap(Comparator&lt;? <span class="keyword">super</span> K&gt; comparator)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建的TreeSet包含copyFrom</span></span><br><span class="line">TreeMap(SortedMap&lt;K, ? extends V&gt; copyFrom)</span><br></pre></td></tr></table></figure><h1 id="TreeMap的API"><a href="#TreeMap的API" class="headerlink" title="TreeMap的API"></a>TreeMap的API</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Entry&lt;K, V&gt;                <span class="title">ceilingEntry</span><span class="params">(K key)</span></span></span><br><span class="line"><span class="function">K                          <span class="title">ceilingKey</span><span class="params">(K key)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span>                       <span class="title">clear</span><span class="params">()</span></span></span><br><span class="line"><span class="function">Object                     <span class="title">clone</span><span class="params">()</span></span></span><br><span class="line"><span class="function">Comparator&lt;? <span class="keyword">super</span> K&gt;      <span class="title">comparator</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span>                    <span class="title">containsKey</span><span class="params">(Object key)</span></span></span><br><span class="line"><span class="function">NavigableSet&lt;K&gt;            <span class="title">descendingKeySet</span><span class="params">()</span></span></span><br><span class="line"><span class="function">NavigableMap&lt;K, V&gt;         <span class="title">descendingMap</span><span class="params">()</span></span></span><br><span class="line"><span class="function">Set&lt;Entry&lt;K, V&gt;&gt;           <span class="title">entrySet</span><span class="params">()</span></span></span><br><span class="line"><span class="function">Entry&lt;K, V&gt;                <span class="title">firstEntry</span><span class="params">()</span></span></span><br><span class="line"><span class="function">K                          <span class="title">firstKey</span><span class="params">()</span></span></span><br><span class="line"><span class="function">Entry&lt;K, V&gt;                <span class="title">floorEntry</span><span class="params">(K key)</span></span></span><br><span class="line"><span class="function">K                          <span class="title">floorKey</span><span class="params">(K key)</span></span></span><br><span class="line"><span class="function">V                          <span class="title">get</span><span class="params">(Object key)</span></span></span><br><span class="line"><span class="function">NavigableMap&lt;K, V&gt;         <span class="title">headMap</span><span class="params">(K to, <span class="keyword">boolean</span> inclusive)</span></span></span><br><span class="line"><span class="function">SortedMap&lt;K, V&gt;            <span class="title">headMap</span><span class="params">(K toExclusive)</span></span></span><br><span class="line"><span class="function">Entry&lt;K, V&gt;                <span class="title">higherEntry</span><span class="params">(K key)</span></span></span><br><span class="line"><span class="function">K                          <span class="title">higherKey</span><span class="params">(K key)</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span>                    <span class="title">isEmpty</span><span class="params">()</span></span></span><br><span class="line"><span class="function">Set&lt;K&gt;                     <span class="title">keySet</span><span class="params">()</span></span></span><br><span class="line"><span class="function">Entry&lt;K, V&gt;                <span class="title">lastEntry</span><span class="params">()</span></span></span><br><span class="line"><span class="function">K                          <span class="title">lastKey</span><span class="params">()</span></span></span><br><span class="line"><span class="function">Entry&lt;K, V&gt;                <span class="title">lowerEntry</span><span class="params">(K key)</span></span></span><br><span class="line"><span class="function">K                          <span class="title">lowerKey</span><span class="params">(K key)</span></span></span><br><span class="line"><span class="function">NavigableSet&lt;K&gt;            <span class="title">navigableKeySet</span><span class="params">()</span></span></span><br><span class="line"><span class="function">Entry&lt;K, V&gt;                <span class="title">pollFirstEntry</span><span class="params">()</span></span></span><br><span class="line"><span class="function">Entry&lt;K, V&gt;                <span class="title">pollLastEntry</span><span class="params">()</span></span></span><br><span class="line"><span class="function">V                          <span class="title">put</span><span class="params">(K key, V value)</span></span></span><br><span class="line"><span class="function">V                          <span class="title">remove</span><span class="params">(Object key)</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span>                        <span class="title">size</span><span class="params">()</span></span></span><br><span class="line"><span class="function">SortedMap&lt;K, V&gt;            <span class="title">subMap</span><span class="params">(K fromInclusive, K toExclusive)</span></span></span><br><span class="line"><span class="function">NavigableMap&lt;K, V&gt;         <span class="title">subMap</span><span class="params">(K from, <span class="keyword">boolean</span> fromInclusive, K to, <span class="keyword">boolean</span> toInclusive)</span></span></span><br><span class="line"><span class="function">NavigableMap&lt;K, V&gt;         <span class="title">tailMap</span><span class="params">(K from, <span class="keyword">boolean</span> inclusive)</span></span></span><br><span class="line"><span class="function">SortedMap&lt;K, V&gt;            <span class="title">tailMap</span><span class="params">(K fromInclusive)</span></span></span><br></pre></td></tr></table></figure><h1 id="TreeMap数据结构"><a href="#TreeMap数据结构" class="headerlink" title="TreeMap数据结构"></a>TreeMap数据结构</h1><p>TreeMap的继承关系</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">java.lang.Object</span><br><span class="line">   ↳     java.util.AbstractMap&lt;K, V&gt;</span><br><span class="line">         ↳     java.util.TreeMap&lt;K, V&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">NavigableMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>TreeMap与Map关系图：</p><p><img src="http://oov0wb0gl.bkt.clouddn.com/2017-06-08-14968879665172.jpg" alt=""></p><p>从图中可以看出：</p><ol><li>TreeMap实现继承于AbstractMap，并且实现了NavigableMap接口。</li><li>TreeMap的本质是R-B Tree(红黑树)，它包含几个重要的成员变量： root, size, comparator。<br>　　root 是红黑数的根节点。它是Entry类型，Entry是红黑数的节点，它包含了红黑数的6个基本组成成分：key(键)、value(值)、left(左孩子)、right(右孩子)、parent(父节点)、color(颜色)。Entry节点根据key进行排序，Entry节点包含的内容为value。<br>　　红黑数排序时，根据Entry中的key进行排序；Entry中的key比较大小是根据比较器comparator来进行判断的。<br>　　size是红黑数中节点的个数。</li></ol><p>关于红黑数的具体算法，请参考”红黑树(一) 原理和算法详细介绍”。</p><h1 id="TreeMap源码解析-基于JDK1-6-0-45"><a href="#TreeMap源码解析-基于JDK1-6-0-45" class="headerlink" title="TreeMap源码解析(基于JDK1.6.0_45)"></a>TreeMap源码解析(基于JDK1.6.0_45)</h1><p>为了更了解TreeMap的原理，下面对TreeMap源码代码作出分析。我们先给出源码内容，后面再对源码进行详细说明，当然，源码内容中也包含了详细的代码注释。</p><p>说明:</p><p>在详细介绍TreeMap的代码之前，我们先建立一个整体概念。<br>TreeMap是通过红黑树实现的，TreeMap存储的是key-value键值对，TreeMap的排序是基于对key的排序。<br>TreeMap提供了操作“key”、“key-value”、“value”等方法，也提供了对TreeMap这颗树进行整体操作的方法，如获取子树、反向树。<br>后面的解说内容分为几部分,<br>首先，介绍TreeMap的核心，即红黑树相关部分；<br>然后，介绍TreeMap的主要函数；<br>再次，介绍TreeMap实现的几个接口；<br>最后，补充介绍TreeMap的其它内容。</p><p>TreeMap本质上是一颗红黑树。要彻底理解TreeMap，建议读者先理解红黑树。关于红黑树的原理，可以参考：红黑树(一) 原理和算法详细介绍 <a href="http://www.cnblogs.com/skywang12345/p/3245399.html#a1" target="_blank" rel="noopener">http://www.cnblogs.com/skywang12345/p/3245399.html#a1</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br><span class="line">1029</span><br><span class="line">1030</span><br><span class="line">1031</span><br><span class="line">1032</span><br><span class="line">1033</span><br><span class="line">1034</span><br><span class="line">1035</span><br><span class="line">1036</span><br><span class="line">1037</span><br><span class="line">1038</span><br><span class="line">1039</span><br><span class="line">1040</span><br><span class="line">1041</span><br><span class="line">1042</span><br><span class="line">1043</span><br><span class="line">1044</span><br><span class="line">1045</span><br><span class="line">1046</span><br><span class="line">1047</span><br><span class="line">1048</span><br><span class="line">1049</span><br><span class="line">1050</span><br><span class="line">1051</span><br><span class="line">1052</span><br><span class="line">1053</span><br><span class="line">1054</span><br><span class="line">1055</span><br><span class="line">1056</span><br><span class="line">1057</span><br><span class="line">1058</span><br><span class="line">1059</span><br><span class="line">1060</span><br><span class="line">1061</span><br><span class="line">1062</span><br><span class="line">1063</span><br><span class="line">1064</span><br><span class="line">1065</span><br><span class="line">1066</span><br><span class="line">1067</span><br><span class="line">1068</span><br><span class="line">1069</span><br><span class="line">1070</span><br><span class="line">1071</span><br><span class="line">1072</span><br><span class="line">1073</span><br><span class="line">1074</span><br><span class="line">1075</span><br><span class="line">1076</span><br><span class="line">1077</span><br><span class="line">1078</span><br><span class="line">1079</span><br><span class="line">1080</span><br><span class="line">1081</span><br><span class="line">1082</span><br><span class="line">1083</span><br><span class="line">1084</span><br><span class="line">1085</span><br><span class="line">1086</span><br><span class="line">1087</span><br><span class="line">1088</span><br><span class="line">1089</span><br><span class="line">1090</span><br><span class="line">1091</span><br><span class="line">1092</span><br><span class="line">1093</span><br><span class="line">1094</span><br><span class="line">1095</span><br><span class="line">1096</span><br><span class="line">1097</span><br><span class="line">1098</span><br><span class="line">1099</span><br><span class="line">1100</span><br><span class="line">1101</span><br><span class="line">1102</span><br><span class="line">1103</span><br><span class="line">1104</span><br><span class="line">1105</span><br><span class="line">1106</span><br><span class="line">1107</span><br><span class="line">1108</span><br><span class="line">1109</span><br><span class="line">1110</span><br><span class="line">1111</span><br><span class="line">1112</span><br><span class="line">1113</span><br><span class="line">1114</span><br><span class="line">1115</span><br><span class="line">1116</span><br><span class="line">1117</span><br><span class="line">1118</span><br><span class="line">1119</span><br><span class="line">1120</span><br><span class="line">1121</span><br><span class="line">1122</span><br><span class="line">1123</span><br><span class="line">1124</span><br><span class="line">1125</span><br><span class="line">1126</span><br><span class="line">1127</span><br><span class="line">1128</span><br><span class="line">1129</span><br><span class="line">1130</span><br><span class="line">1131</span><br><span class="line">1132</span><br><span class="line">1133</span><br><span class="line">1134</span><br><span class="line">1135</span><br><span class="line">1136</span><br><span class="line">1137</span><br><span class="line">1138</span><br><span class="line">1139</span><br><span class="line">1140</span><br><span class="line">1141</span><br><span class="line">1142</span><br><span class="line">1143</span><br><span class="line">1144</span><br><span class="line">1145</span><br><span class="line">1146</span><br><span class="line">1147</span><br><span class="line">1148</span><br><span class="line">1149</span><br><span class="line">1150</span><br><span class="line">1151</span><br><span class="line">1152</span><br><span class="line">1153</span><br><span class="line">1154</span><br><span class="line">1155</span><br><span class="line">1156</span><br><span class="line">1157</span><br><span class="line">1158</span><br><span class="line">1159</span><br><span class="line">1160</span><br><span class="line">1161</span><br><span class="line">1162</span><br><span class="line">1163</span><br><span class="line">1164</span><br><span class="line">1165</span><br><span class="line">1166</span><br><span class="line">1167</span><br><span class="line">1168</span><br><span class="line">1169</span><br><span class="line">1170</span><br><span class="line">1171</span><br><span class="line">1172</span><br><span class="line">1173</span><br><span class="line">1174</span><br><span class="line">1175</span><br><span class="line">1176</span><br><span class="line">1177</span><br><span class="line">1178</span><br><span class="line">1179</span><br><span class="line">1180</span><br><span class="line">1181</span><br><span class="line">1182</span><br><span class="line">1183</span><br><span class="line">1184</span><br><span class="line">1185</span><br><span class="line">1186</span><br><span class="line">1187</span><br><span class="line">1188</span><br><span class="line">1189</span><br><span class="line">1190</span><br><span class="line">1191</span><br><span class="line">1192</span><br><span class="line">1193</span><br><span class="line">1194</span><br><span class="line">1195</span><br><span class="line">1196</span><br><span class="line">1197</span><br><span class="line">1198</span><br><span class="line">1199</span><br><span class="line">1200</span><br><span class="line">1201</span><br><span class="line">1202</span><br><span class="line">1203</span><br><span class="line">1204</span><br><span class="line">1205</span><br><span class="line">1206</span><br><span class="line">1207</span><br><span class="line">1208</span><br><span class="line">1209</span><br><span class="line">1210</span><br><span class="line">1211</span><br><span class="line">1212</span><br><span class="line">1213</span><br><span class="line">1214</span><br><span class="line">1215</span><br><span class="line">1216</span><br><span class="line">1217</span><br><span class="line">1218</span><br><span class="line">1219</span><br><span class="line">1220</span><br><span class="line">1221</span><br><span class="line">1222</span><br><span class="line">1223</span><br><span class="line">1224</span><br><span class="line">1225</span><br><span class="line">1226</span><br><span class="line">1227</span><br><span class="line">1228</span><br><span class="line">1229</span><br><span class="line">1230</span><br><span class="line">1231</span><br><span class="line">1232</span><br><span class="line">1233</span><br><span class="line">1234</span><br><span class="line">1235</span><br><span class="line">1236</span><br><span class="line">1237</span><br><span class="line">1238</span><br><span class="line">1239</span><br><span class="line">1240</span><br><span class="line">1241</span><br><span class="line">1242</span><br><span class="line">1243</span><br><span class="line">1244</span><br><span class="line">1245</span><br><span class="line">1246</span><br><span class="line">1247</span><br><span class="line">1248</span><br><span class="line">1249</span><br><span class="line">1250</span><br><span class="line">1251</span><br><span class="line">1252</span><br><span class="line">1253</span><br><span class="line">1254</span><br><span class="line">1255</span><br><span class="line">1256</span><br><span class="line">1257</span><br><span class="line">1258</span><br><span class="line">1259</span><br><span class="line">1260</span><br><span class="line">1261</span><br><span class="line">1262</span><br><span class="line">1263</span><br><span class="line">1264</span><br><span class="line">1265</span><br><span class="line">1266</span><br><span class="line">1267</span><br><span class="line">1268</span><br><span class="line">1269</span><br><span class="line">1270</span><br><span class="line">1271</span><br><span class="line">1272</span><br><span class="line">1273</span><br><span class="line">1274</span><br><span class="line">1275</span><br><span class="line">1276</span><br><span class="line">1277</span><br><span class="line">1278</span><br><span class="line">1279</span><br><span class="line">1280</span><br><span class="line">1281</span><br><span class="line">1282</span><br><span class="line">1283</span><br><span class="line">1284</span><br><span class="line">1285</span><br><span class="line">1286</span><br><span class="line">1287</span><br><span class="line">1288</span><br><span class="line">1289</span><br><span class="line">1290</span><br><span class="line">1291</span><br><span class="line">1292</span><br><span class="line">1293</span><br><span class="line">1294</span><br><span class="line">1295</span><br><span class="line">1296</span><br><span class="line">1297</span><br><span class="line">1298</span><br><span class="line">1299</span><br><span class="line">1300</span><br><span class="line">1301</span><br><span class="line">1302</span><br><span class="line">1303</span><br><span class="line">1304</span><br><span class="line">1305</span><br><span class="line">1306</span><br><span class="line">1307</span><br><span class="line">1308</span><br><span class="line">1309</span><br><span class="line">1310</span><br><span class="line">1311</span><br><span class="line">1312</span><br><span class="line">1313</span><br><span class="line">1314</span><br><span class="line">1315</span><br><span class="line">1316</span><br><span class="line">1317</span><br><span class="line">1318</span><br><span class="line">1319</span><br><span class="line">1320</span><br><span class="line">1321</span><br><span class="line">1322</span><br><span class="line">1323</span><br><span class="line">1324</span><br><span class="line">1325</span><br><span class="line">1326</span><br><span class="line">1327</span><br><span class="line">1328</span><br><span class="line">1329</span><br><span class="line">1330</span><br><span class="line">1331</span><br><span class="line">1332</span><br><span class="line">1333</span><br><span class="line">1334</span><br><span class="line">1335</span><br><span class="line">1336</span><br><span class="line">1337</span><br><span class="line">1338</span><br><span class="line">1339</span><br><span class="line">1340</span><br><span class="line">1341</span><br><span class="line">1342</span><br><span class="line">1343</span><br><span class="line">1344</span><br><span class="line">1345</span><br><span class="line">1346</span><br><span class="line">1347</span><br><span class="line">1348</span><br><span class="line">1349</span><br><span class="line">1350</span><br><span class="line">1351</span><br><span class="line">1352</span><br><span class="line">1353</span><br><span class="line">1354</span><br><span class="line">1355</span><br><span class="line">1356</span><br><span class="line">1357</span><br><span class="line">1358</span><br><span class="line">1359</span><br><span class="line">1360</span><br><span class="line">1361</span><br><span class="line">1362</span><br><span class="line">1363</span><br><span class="line">1364</span><br><span class="line">1365</span><br><span class="line">1366</span><br><span class="line">1367</span><br><span class="line">1368</span><br><span class="line">1369</span><br><span class="line">1370</span><br><span class="line">1371</span><br><span class="line">1372</span><br><span class="line">1373</span><br><span class="line">1374</span><br><span class="line">1375</span><br><span class="line">1376</span><br><span class="line">1377</span><br><span class="line">1378</span><br><span class="line">1379</span><br><span class="line">1380</span><br><span class="line">1381</span><br><span class="line">1382</span><br><span class="line">1383</span><br><span class="line">1384</span><br><span class="line">1385</span><br><span class="line">1386</span><br><span class="line">1387</span><br><span class="line">1388</span><br><span class="line">1389</span><br><span class="line">1390</span><br><span class="line">1391</span><br><span class="line">1392</span><br><span class="line">1393</span><br><span class="line">1394</span><br><span class="line">1395</span><br><span class="line">1396</span><br><span class="line">1397</span><br><span class="line">1398</span><br><span class="line">1399</span><br><span class="line">1400</span><br><span class="line">1401</span><br><span class="line">1402</span><br><span class="line">1403</span><br><span class="line">1404</span><br><span class="line">1405</span><br><span class="line">1406</span><br><span class="line">1407</span><br><span class="line">1408</span><br><span class="line">1409</span><br><span class="line">1410</span><br><span class="line">1411</span><br><span class="line">1412</span><br><span class="line">1413</span><br><span class="line">1414</span><br><span class="line">1415</span><br><span class="line">1416</span><br><span class="line">1417</span><br><span class="line">1418</span><br><span class="line">1419</span><br><span class="line">1420</span><br><span class="line">1421</span><br><span class="line">1422</span><br><span class="line">1423</span><br><span class="line">1424</span><br><span class="line">1425</span><br><span class="line">1426</span><br><span class="line">1427</span><br><span class="line">1428</span><br><span class="line">1429</span><br><span class="line">1430</span><br><span class="line">1431</span><br><span class="line">1432</span><br><span class="line">1433</span><br><span class="line">1434</span><br><span class="line">1435</span><br><span class="line">1436</span><br><span class="line">1437</span><br><span class="line">1438</span><br><span class="line">1439</span><br><span class="line">1440</span><br><span class="line">1441</span><br><span class="line">1442</span><br><span class="line">1443</span><br><span class="line">1444</span><br><span class="line">1445</span><br><span class="line">1446</span><br><span class="line">1447</span><br><span class="line">1448</span><br><span class="line">1449</span><br><span class="line">1450</span><br><span class="line">1451</span><br><span class="line">1452</span><br><span class="line">1453</span><br><span class="line">1454</span><br><span class="line">1455</span><br><span class="line">1456</span><br><span class="line">1457</span><br><span class="line">1458</span><br><span class="line">1459</span><br><span class="line">1460</span><br><span class="line">1461</span><br><span class="line">1462</span><br><span class="line">1463</span><br><span class="line">1464</span><br><span class="line">1465</span><br><span class="line">1466</span><br><span class="line">1467</span><br><span class="line">1468</span><br><span class="line">1469</span><br><span class="line">1470</span><br><span class="line">1471</span><br><span class="line">1472</span><br><span class="line">1473</span><br><span class="line">1474</span><br><span class="line">1475</span><br><span class="line">1476</span><br><span class="line">1477</span><br><span class="line">1478</span><br><span class="line">1479</span><br><span class="line">1480</span><br><span class="line">1481</span><br><span class="line">1482</span><br><span class="line">1483</span><br><span class="line">1484</span><br><span class="line">1485</span><br><span class="line">1486</span><br><span class="line">1487</span><br><span class="line">1488</span><br><span class="line">1489</span><br><span class="line">1490</span><br><span class="line">1491</span><br><span class="line">1492</span><br><span class="line">1493</span><br><span class="line">1494</span><br><span class="line">1495</span><br><span class="line">1496</span><br><span class="line">1497</span><br><span class="line">1498</span><br><span class="line">1499</span><br><span class="line">1500</span><br><span class="line">1501</span><br><span class="line">1502</span><br><span class="line">1503</span><br><span class="line">1504</span><br><span class="line">1505</span><br><span class="line">1506</span><br><span class="line">1507</span><br><span class="line">1508</span><br><span class="line">1509</span><br><span class="line">1510</span><br><span class="line">1511</span><br><span class="line">1512</span><br><span class="line">1513</span><br><span class="line">1514</span><br><span class="line">1515</span><br><span class="line">1516</span><br><span class="line">1517</span><br><span class="line">1518</span><br><span class="line">1519</span><br><span class="line">1520</span><br><span class="line">1521</span><br><span class="line">1522</span><br><span class="line">1523</span><br><span class="line">1524</span><br><span class="line">1525</span><br><span class="line">1526</span><br><span class="line">1527</span><br><span class="line">1528</span><br><span class="line">1529</span><br><span class="line">1530</span><br><span class="line">1531</span><br><span class="line">1532</span><br><span class="line">1533</span><br><span class="line">1534</span><br><span class="line">1535</span><br><span class="line">1536</span><br><span class="line">1537</span><br><span class="line">1538</span><br><span class="line">1539</span><br><span class="line">1540</span><br><span class="line">1541</span><br><span class="line">1542</span><br><span class="line">1543</span><br><span class="line">1544</span><br><span class="line">1545</span><br><span class="line">1546</span><br><span class="line">1547</span><br><span class="line">1548</span><br><span class="line">1549</span><br><span class="line">1550</span><br><span class="line">1551</span><br><span class="line">1552</span><br><span class="line">1553</span><br><span class="line">1554</span><br><span class="line">1555</span><br><span class="line">1556</span><br><span class="line">1557</span><br><span class="line">1558</span><br><span class="line">1559</span><br><span class="line">1560</span><br><span class="line">1561</span><br><span class="line">1562</span><br><span class="line">1563</span><br><span class="line">1564</span><br><span class="line">1565</span><br><span class="line">1566</span><br><span class="line">1567</span><br><span class="line">1568</span><br><span class="line">1569</span><br><span class="line">1570</span><br><span class="line">1571</span><br><span class="line">1572</span><br><span class="line">1573</span><br><span class="line">1574</span><br><span class="line">1575</span><br><span class="line">1576</span><br><span class="line">1577</span><br><span class="line">1578</span><br><span class="line">1579</span><br><span class="line">1580</span><br><span class="line">1581</span><br><span class="line">1582</span><br><span class="line">1583</span><br><span class="line">1584</span><br><span class="line">1585</span><br><span class="line">1586</span><br><span class="line">1587</span><br><span class="line">1588</span><br><span class="line">1589</span><br><span class="line">1590</span><br><span class="line">1591</span><br><span class="line">1592</span><br><span class="line">1593</span><br><span class="line">1594</span><br><span class="line">1595</span><br><span class="line">1596</span><br><span class="line">1597</span><br><span class="line">1598</span><br><span class="line">1599</span><br><span class="line">1600</span><br><span class="line">1601</span><br><span class="line">1602</span><br><span class="line">1603</span><br><span class="line">1604</span><br><span class="line">1605</span><br><span class="line">1606</span><br><span class="line">1607</span><br><span class="line">1608</span><br><span class="line">1609</span><br><span class="line">1610</span><br><span class="line">1611</span><br><span class="line">1612</span><br><span class="line">1613</span><br><span class="line">1614</span><br><span class="line">1615</span><br><span class="line">1616</span><br><span class="line">1617</span><br><span class="line">1618</span><br><span class="line">1619</span><br><span class="line">1620</span><br><span class="line">1621</span><br><span class="line">1622</span><br><span class="line">1623</span><br><span class="line">1624</span><br><span class="line">1625</span><br><span class="line">1626</span><br><span class="line">1627</span><br><span class="line">1628</span><br><span class="line">1629</span><br><span class="line">1630</span><br><span class="line">1631</span><br><span class="line">1632</span><br><span class="line">1633</span><br><span class="line">1634</span><br><span class="line">1635</span><br><span class="line">1636</span><br><span class="line">1637</span><br><span class="line">1638</span><br><span class="line">1639</span><br><span class="line">1640</span><br><span class="line">1641</span><br><span class="line">1642</span><br><span class="line">1643</span><br><span class="line">1644</span><br><span class="line">1645</span><br><span class="line">1646</span><br><span class="line">1647</span><br><span class="line">1648</span><br><span class="line">1649</span><br><span class="line">1650</span><br><span class="line">1651</span><br><span class="line">1652</span><br><span class="line">1653</span><br><span class="line">1654</span><br><span class="line">1655</span><br><span class="line">1656</span><br><span class="line">1657</span><br><span class="line">1658</span><br><span class="line">1659</span><br><span class="line">1660</span><br><span class="line">1661</span><br><span class="line">1662</span><br><span class="line">1663</span><br><span class="line">1664</span><br><span class="line">1665</span><br><span class="line">1666</span><br><span class="line">1667</span><br><span class="line">1668</span><br><span class="line">1669</span><br><span class="line">1670</span><br><span class="line">1671</span><br><span class="line">1672</span><br><span class="line">1673</span><br><span class="line">1674</span><br><span class="line">1675</span><br><span class="line">1676</span><br><span class="line">1677</span><br><span class="line">1678</span><br><span class="line">1679</span><br><span class="line">1680</span><br><span class="line">1681</span><br><span class="line">1682</span><br><span class="line">1683</span><br><span class="line">1684</span><br><span class="line">1685</span><br><span class="line">1686</span><br><span class="line">1687</span><br><span class="line">1688</span><br><span class="line">1689</span><br><span class="line">1690</span><br><span class="line">1691</span><br><span class="line">1692</span><br><span class="line">1693</span><br><span class="line">1694</span><br><span class="line">1695</span><br><span class="line">1696</span><br><span class="line">1697</span><br><span class="line">1698</span><br><span class="line">1699</span><br><span class="line">1700</span><br><span class="line">1701</span><br><span class="line">1702</span><br><span class="line">1703</span><br><span class="line">1704</span><br><span class="line">1705</span><br><span class="line">1706</span><br><span class="line">1707</span><br><span class="line">1708</span><br><span class="line">1709</span><br><span class="line">1710</span><br><span class="line">1711</span><br><span class="line">1712</span><br><span class="line">1713</span><br><span class="line">1714</span><br><span class="line">1715</span><br><span class="line">1716</span><br><span class="line">1717</span><br><span class="line">1718</span><br><span class="line">1719</span><br><span class="line">1720</span><br><span class="line">1721</span><br><span class="line">1722</span><br><span class="line">1723</span><br><span class="line">1724</span><br><span class="line">1725</span><br><span class="line">1726</span><br><span class="line">1727</span><br><span class="line">1728</span><br><span class="line">1729</span><br><span class="line">1730</span><br><span class="line">1731</span><br><span class="line">1732</span><br><span class="line">1733</span><br><span class="line">1734</span><br><span class="line">1735</span><br><span class="line">1736</span><br><span class="line">1737</span><br><span class="line">1738</span><br><span class="line">1739</span><br><span class="line">1740</span><br><span class="line">1741</span><br><span class="line">1742</span><br><span class="line">1743</span><br><span class="line">1744</span><br><span class="line">1745</span><br><span class="line">1746</span><br><span class="line">1747</span><br><span class="line">1748</span><br><span class="line">1749</span><br><span class="line">1750</span><br><span class="line">1751</span><br><span class="line">1752</span><br><span class="line">1753</span><br><span class="line">1754</span><br><span class="line">1755</span><br><span class="line">1756</span><br><span class="line">1757</span><br><span class="line">1758</span><br><span class="line">1759</span><br><span class="line">1760</span><br><span class="line">1761</span><br><span class="line">1762</span><br><span class="line">1763</span><br><span class="line">1764</span><br><span class="line">1765</span><br><span class="line">1766</span><br><span class="line">1767</span><br><span class="line">1768</span><br><span class="line">1769</span><br><span class="line">1770</span><br><span class="line">1771</span><br><span class="line">1772</span><br><span class="line">1773</span><br><span class="line">1774</span><br><span class="line">1775</span><br><span class="line">1776</span><br><span class="line">1777</span><br><span class="line">1778</span><br><span class="line">1779</span><br><span class="line">1780</span><br><span class="line">1781</span><br><span class="line">1782</span><br><span class="line">1783</span><br><span class="line">1784</span><br><span class="line">1785</span><br><span class="line">1786</span><br><span class="line">1787</span><br><span class="line">1788</span><br><span class="line">1789</span><br><span class="line">1790</span><br><span class="line">1791</span><br><span class="line">1792</span><br><span class="line">1793</span><br><span class="line">1794</span><br><span class="line">1795</span><br><span class="line">1796</span><br><span class="line">1797</span><br><span class="line">1798</span><br><span class="line">1799</span><br><span class="line">1800</span><br><span class="line">1801</span><br><span class="line">1802</span><br><span class="line">1803</span><br><span class="line">1804</span><br><span class="line">1805</span><br><span class="line">1806</span><br><span class="line">1807</span><br><span class="line">1808</span><br><span class="line">1809</span><br><span class="line">1810</span><br><span class="line">1811</span><br><span class="line">1812</span><br><span class="line">1813</span><br><span class="line">1814</span><br><span class="line">1815</span><br><span class="line">1816</span><br><span class="line">1817</span><br><span class="line">1818</span><br><span class="line">1819</span><br><span class="line">1820</span><br><span class="line">1821</span><br><span class="line">1822</span><br><span class="line">1823</span><br><span class="line">1824</span><br><span class="line">1825</span><br><span class="line">1826</span><br><span class="line">1827</span><br><span class="line">1828</span><br><span class="line">1829</span><br><span class="line">1830</span><br><span class="line">1831</span><br><span class="line">1832</span><br><span class="line">1833</span><br><span class="line">1834</span><br><span class="line">1835</span><br><span class="line">1836</span><br><span class="line">1837</span><br><span class="line">1838</span><br><span class="line">1839</span><br><span class="line">1840</span><br><span class="line">1841</span><br><span class="line">1842</span><br><span class="line">1843</span><br><span class="line">1844</span><br><span class="line">1845</span><br><span class="line">1846</span><br><span class="line">1847</span><br><span class="line">1848</span><br><span class="line">1849</span><br><span class="line">1850</span><br><span class="line">1851</span><br><span class="line">1852</span><br><span class="line">1853</span><br><span class="line">1854</span><br><span class="line">1855</span><br><span class="line">1856</span><br><span class="line">1857</span><br><span class="line">1858</span><br><span class="line">1859</span><br><span class="line">1860</span><br><span class="line">1861</span><br><span class="line">1862</span><br><span class="line">1863</span><br><span class="line">1864</span><br><span class="line">1865</span><br><span class="line">1866</span><br><span class="line">1867</span><br><span class="line">1868</span><br><span class="line">1869</span><br><span class="line">1870</span><br><span class="line">1871</span><br><span class="line">1872</span><br><span class="line">1873</span><br><span class="line">1874</span><br><span class="line">1875</span><br><span class="line">1876</span><br><span class="line">1877</span><br><span class="line">1878</span><br><span class="line">1879</span><br><span class="line">1880</span><br><span class="line">1881</span><br><span class="line">1882</span><br><span class="line">1883</span><br><span class="line">1884</span><br><span class="line">1885</span><br><span class="line">1886</span><br><span class="line">1887</span><br><span class="line">1888</span><br><span class="line">1889</span><br><span class="line">1890</span><br><span class="line">1891</span><br><span class="line">1892</span><br><span class="line">1893</span><br><span class="line">1894</span><br><span class="line">1895</span><br><span class="line">1896</span><br><span class="line">1897</span><br><span class="line">1898</span><br><span class="line">1899</span><br><span class="line">1900</span><br><span class="line">1901</span><br><span class="line">1902</span><br><span class="line">1903</span><br><span class="line">1904</span><br><span class="line">1905</span><br><span class="line">1906</span><br><span class="line">1907</span><br><span class="line">1908</span><br><span class="line">1909</span><br><span class="line">1910</span><br><span class="line">1911</span><br><span class="line">1912</span><br><span class="line">1913</span><br><span class="line">1914</span><br><span class="line">1915</span><br><span class="line">1916</span><br><span class="line">1917</span><br><span class="line">1918</span><br><span class="line">1919</span><br><span class="line">1920</span><br><span class="line">1921</span><br><span class="line">1922</span><br><span class="line">1923</span><br><span class="line">1924</span><br><span class="line">1925</span><br><span class="line">1926</span><br><span class="line">1927</span><br><span class="line">1928</span><br><span class="line">1929</span><br><span class="line">1930</span><br><span class="line">1931</span><br><span class="line">1932</span><br><span class="line">1933</span><br><span class="line">1934</span><br><span class="line">1935</span><br><span class="line">1936</span><br><span class="line">1937</span><br><span class="line">1938</span><br><span class="line">1939</span><br><span class="line">1940</span><br><span class="line">1941</span><br><span class="line">1942</span><br><span class="line">1943</span><br><span class="line">1944</span><br><span class="line">1945</span><br><span class="line">1946</span><br><span class="line">1947</span><br><span class="line">1948</span><br><span class="line">1949</span><br><span class="line">1950</span><br><span class="line">1951</span><br><span class="line">1952</span><br><span class="line">1953</span><br><span class="line">1954</span><br><span class="line">1955</span><br><span class="line">1956</span><br><span class="line">1957</span><br><span class="line">1958</span><br><span class="line">1959</span><br><span class="line">1960</span><br><span class="line">1961</span><br><span class="line">1962</span><br><span class="line">1963</span><br><span class="line">1964</span><br><span class="line">1965</span><br><span class="line">1966</span><br><span class="line">1967</span><br><span class="line">1968</span><br><span class="line">1969</span><br><span class="line">1970</span><br><span class="line">1971</span><br><span class="line">1972</span><br><span class="line">1973</span><br><span class="line">1974</span><br><span class="line">1975</span><br><span class="line">1976</span><br><span class="line">1977</span><br><span class="line">1978</span><br><span class="line">1979</span><br><span class="line">1980</span><br><span class="line">1981</span><br><span class="line">1982</span><br><span class="line">1983</span><br><span class="line">1984</span><br><span class="line">1985</span><br><span class="line">1986</span><br><span class="line">1987</span><br><span class="line">1988</span><br><span class="line">1989</span><br><span class="line">1990</span><br><span class="line">1991</span><br><span class="line">1992</span><br><span class="line">1993</span><br><span class="line">1994</span><br><span class="line">1995</span><br><span class="line">1996</span><br><span class="line">1997</span><br><span class="line">1998</span><br><span class="line">1999</span><br><span class="line">2000</span><br><span class="line">2001</span><br><span class="line">2002</span><br><span class="line">2003</span><br><span class="line">2004</span><br><span class="line">2005</span><br><span class="line">2006</span><br><span class="line">2007</span><br><span class="line">2008</span><br><span class="line">2009</span><br><span class="line">2010</span><br><span class="line">2011</span><br><span class="line">2012</span><br><span class="line">2013</span><br><span class="line">2014</span><br><span class="line">2015</span><br><span class="line">2016</span><br><span class="line">2017</span><br><span class="line">2018</span><br><span class="line">2019</span><br><span class="line">2020</span><br><span class="line">2021</span><br><span class="line">2022</span><br><span class="line">2023</span><br><span class="line">2024</span><br><span class="line">2025</span><br><span class="line">2026</span><br><span class="line">2027</span><br><span class="line">2028</span><br><span class="line">2029</span><br><span class="line">2030</span><br><span class="line">2031</span><br><span class="line">2032</span><br><span class="line">2033</span><br><span class="line">2034</span><br><span class="line">2035</span><br><span class="line">2036</span><br><span class="line">2037</span><br><span class="line">2038</span><br><span class="line">2039</span><br><span class="line">2040</span><br><span class="line">2041</span><br><span class="line">2042</span><br><span class="line">2043</span><br><span class="line">2044</span><br><span class="line">2045</span><br><span class="line">2046</span><br><span class="line">2047</span><br><span class="line">2048</span><br><span class="line">2049</span><br><span class="line">2050</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">implements</span> <span class="title">NavigableMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 比较器。用来给TreeMap排序</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Comparator&lt;? <span class="keyword">super</span> K&gt; comparator;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// TreeMap是红黑树实现的，root是红黑书的根节点</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> Entry&lt;K,V&gt; root = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 红黑树的节点总数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 记录红黑树的修改次数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">int</span> modCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 默认构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TreeMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        comparator = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 带比较器的构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TreeMap</span><span class="params">(Comparator&lt;? <span class="keyword">super</span> K&gt; comparator)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.comparator = comparator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 带Map的构造函数，Map会成为TreeMap的子集</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TreeMap</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;</span><br><span class="line">        comparator = <span class="keyword">null</span>;</span><br><span class="line">        putAll(m);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 带SortedMap的构造函数，SortedMap会成为TreeMap的子集</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TreeMap</span><span class="params">(SortedMap&lt;K, ? extends V&gt; m)</span> </span>&#123;</span><br><span class="line">        comparator = m.comparator();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            buildFromSorted(m.size(), m.entrySet().iterator(), <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (java.io.IOException cannotHappen) &#123;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException cannotHappen) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回TreeMap中是否包含“键(key)”</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsKey</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getEntry(key) != <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回TreeMap中是否包含"值(value)"</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsValue</span><span class="params">(Object value)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// getFirstEntry() 是返回红黑树的第一个节点</span></span><br><span class="line">        <span class="comment">// successor(e) 是获取节点e的后继节点</span></span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;K,V&gt; e = getFirstEntry(); e != <span class="keyword">null</span>; e = successor(e))</span><br><span class="line">            <span class="keyword">if</span> (valEquals(value, e.value))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取“键(key)”对应的“值(value)”</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取“键”为key的节点(p)</span></span><br><span class="line">        Entry&lt;K,V&gt; p = getEntry(key);</span><br><span class="line">        <span class="comment">// 若节点(p)为null，返回null；否则，返回节点对应的值</span></span><br><span class="line">        <span class="keyword">return</span> (p==<span class="keyword">null</span> ? <span class="keyword">null</span> : p.value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Comparator&lt;? <span class="keyword">super</span> K&gt; comparator() &#123;</span><br><span class="line">        <span class="keyword">return</span> comparator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取第一个节点对应的key</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> K <span class="title">firstKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> key(getFirstEntry());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取最后一个节点对应的key</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> K <span class="title">lastKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> key(getLastEntry());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将map中的全部节点添加到TreeMap中</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">putAll</span><span class="params">(Map&lt;? extends K, ? extends V&gt; map)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取map的大小</span></span><br><span class="line">        <span class="keyword">int</span> mapSize = map.size();</span><br><span class="line">        <span class="comment">// 如果TreeMap的大小是0,且map的大小不是0,且map是已排序的“key-value对”</span></span><br><span class="line">        <span class="keyword">if</span> (size==<span class="number">0</span> &amp;&amp; mapSize!=<span class="number">0</span> &amp;&amp; map <span class="keyword">instanceof</span> SortedMap) &#123;</span><br><span class="line">            Comparator c = ((SortedMap)map).comparator();</span><br><span class="line">            <span class="comment">// 如果TreeMap和map的比较器相等；</span></span><br><span class="line">            <span class="comment">// 则将map的元素全部拷贝到TreeMap中，然后返回！</span></span><br><span class="line">            <span class="keyword">if</span> (c == comparator || (c != <span class="keyword">null</span> &amp;&amp; c.equals(comparator))) &#123;</span><br><span class="line">                ++modCount;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    buildFromSorted(mapSize, map.entrySet().iterator(),</span><br><span class="line">                                <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (java.io.IOException cannotHappen) &#123;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ClassNotFoundException cannotHappen) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 调用AbstractMap中的putAll();</span></span><br><span class="line">        <span class="comment">// AbstractMap中的putAll()又会调用到TreeMap的put()</span></span><br><span class="line">        <span class="keyword">super</span>.putAll(map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取TreeMap中“键”为key的节点</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> Entry&lt;K,V&gt; <span class="title">getEntry</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 若“比较器”为null，则通过getEntryUsingComparator()获取“键”为key的节点</span></span><br><span class="line">        <span class="keyword">if</span> (comparator != <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> getEntryUsingComparator(key);</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        Comparable&lt;? <span class="keyword">super</span> K&gt; k = (Comparable&lt;? <span class="keyword">super</span> K&gt;) key;</span><br><span class="line">        <span class="comment">// 将p设为根节点</span></span><br><span class="line">        Entry&lt;K,V&gt; p = root;</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> cmp = k.compareTo(p.key);</span><br><span class="line">            <span class="comment">// 若“p的key” &lt; key，则p=“p的左孩子”</span></span><br><span class="line">            <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)</span><br><span class="line">                p = p.left;</span><br><span class="line">            <span class="comment">// 若“p的key” &gt; key，则p=“p的右孩子”</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>)</span><br><span class="line">                p = p.right;</span><br><span class="line">            <span class="comment">// 若“p的key” = key，则返回节点p</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取TreeMap中“键”为key的节点(对应TreeMap的比较器不是null的情况)</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> Entry&lt;K,V&gt; <span class="title">getEntryUsingComparator</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        K k = (K) key;</span><br><span class="line">        Comparator&lt;? <span class="keyword">super</span> K&gt; cpr = comparator;</span><br><span class="line">        <span class="keyword">if</span> (cpr != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 将p设为根节点</span></span><br><span class="line">            Entry&lt;K,V&gt; p = root;</span><br><span class="line">            <span class="keyword">while</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> cmp = cpr.compare(k, p.key);</span><br><span class="line">                <span class="comment">// 若“p的key” &lt; key，则p=“p的左孩子”</span></span><br><span class="line">                <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)</span><br><span class="line">                    p = p.left;</span><br><span class="line">                <span class="comment">// 若“p的key” &gt; key，则p=“p的左孩子”</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>)</span><br><span class="line">                    p = p.right;</span><br><span class="line">                <span class="comment">// 若“p的key” = key，则返回节点p</span></span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">return</span> p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取TreeMap中大于或等于key的最小的节点；</span></span><br><span class="line">    <span class="comment">// 若不存在(即TreeMap中所有节点的键都比key大)，就返回null</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> Entry&lt;K,V&gt; <span class="title">getCeilingEntry</span><span class="params">(K key)</span> </span>&#123;</span><br><span class="line">        Entry&lt;K,V&gt; p = root;</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> cmp = compare(key, p.key);</span><br><span class="line">            <span class="comment">// 情况一：若“p的key” &gt; key。</span></span><br><span class="line">            <span class="comment">// 若 p 存在左孩子，则设 p=“p的左孩子”；</span></span><br><span class="line">            <span class="comment">// 否则，返回p</span></span><br><span class="line">            <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (p.left != <span class="keyword">null</span>)</span><br><span class="line">                    p = p.left;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">return</span> p;</span><br><span class="line">            <span class="comment">// 情况二：若“p的key” &lt; key。</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 若 p 存在右孩子，则设 p=“p的右孩子”</span></span><br><span class="line">                <span class="keyword">if</span> (p.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    p = p.right;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 若 p 不存在右孩子，则找出 p 的后继节点，并返回</span></span><br><span class="line">                    <span class="comment">// 注意：这里返回的 “p的后继节点”有2种可能性：第一，null；第二，TreeMap中大于key的最小的节点。</span></span><br><span class="line">                    <span class="comment">//   理解这一点的核心是，getCeilingEntry是从root开始遍历的。</span></span><br><span class="line">                    <span class="comment">//   若getCeilingEntry能走到这一步，那么，它之前“已经遍历过的节点的key”都 &gt; key。</span></span><br><span class="line">                    <span class="comment">//   能理解上面所说的，那么就很容易明白，为什么“p的后继节点”又2种可能性了。</span></span><br><span class="line">                    Entry&lt;K,V&gt; parent = p.parent;</span><br><span class="line">                    Entry&lt;K,V&gt; ch = p;</span><br><span class="line">                    <span class="keyword">while</span> (parent != <span class="keyword">null</span> &amp;&amp; ch == parent.right) &#123;</span><br><span class="line">                        ch = parent;</span><br><span class="line">                        parent = parent.parent;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> parent;</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="comment">// 情况三：若“p的key” = key。</span></span><br><span class="line">            &#125; <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取TreeMap中不大于key的最大的节点；</span></span><br><span class="line">    <span class="comment">// 若不存在(即TreeMap中所有节点的键都比key小)，就返回null</span></span><br><span class="line">    <span class="comment">// getFloorEntry的原理和getCeilingEntry类似，这里不再多说。</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> Entry&lt;K,V&gt; <span class="title">getFloorEntry</span><span class="params">(K key)</span> </span>&#123;</span><br><span class="line">        Entry&lt;K,V&gt; p = root;</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> cmp = compare(key, p.key);</span><br><span class="line">            <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (p.right != <span class="keyword">null</span>)</span><br><span class="line">                    p = p.right;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">return</span> p;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (p.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    p = p.left;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    Entry&lt;K,V&gt; parent = p.parent;</span><br><span class="line">                    Entry&lt;K,V&gt; ch = p;</span><br><span class="line">                    <span class="keyword">while</span> (parent != <span class="keyword">null</span> &amp;&amp; ch == parent.left) &#123;</span><br><span class="line">                        ch = parent;</span><br><span class="line">                        parent = parent.parent;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> parent;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> p;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取TreeMap中大于key的最小的节点。</span></span><br><span class="line">    <span class="comment">// 若不存在，就返回null。</span></span><br><span class="line">    <span class="comment">//   请参照getCeilingEntry来对getHigherEntry进行理解。</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> Entry&lt;K,V&gt; <span class="title">getHigherEntry</span><span class="params">(K key)</span> </span>&#123;</span><br><span class="line">        Entry&lt;K,V&gt; p = root;</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> cmp = compare(key, p.key);</span><br><span class="line">            <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (p.left != <span class="keyword">null</span>)</span><br><span class="line">                    p = p.left;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">return</span> p;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (p.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    p = p.right;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    Entry&lt;K,V&gt; parent = p.parent;</span><br><span class="line">                    Entry&lt;K,V&gt; ch = p;</span><br><span class="line">                    <span class="keyword">while</span> (parent != <span class="keyword">null</span> &amp;&amp; ch == parent.right) &#123;</span><br><span class="line">                        ch = parent;</span><br><span class="line">                        parent = parent.parent;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> parent;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取TreeMap中小于key的最大的节点。</span></span><br><span class="line">    <span class="comment">// 若不存在，就返回null。</span></span><br><span class="line">    <span class="comment">//   请参照getCeilingEntry来对getLowerEntry进行理解。</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> Entry&lt;K,V&gt; <span class="title">getLowerEntry</span><span class="params">(K key)</span> </span>&#123;</span><br><span class="line">        Entry&lt;K,V&gt; p = root;</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> cmp = compare(key, p.key);</span><br><span class="line">            <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (p.right != <span class="keyword">null</span>)</span><br><span class="line">                    p = p.right;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">return</span> p;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (p.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    p = p.left;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    Entry&lt;K,V&gt; parent = p.parent;</span><br><span class="line">                    Entry&lt;K,V&gt; ch = p;</span><br><span class="line">                    <span class="keyword">while</span> (parent != <span class="keyword">null</span> &amp;&amp; ch == parent.left) &#123;</span><br><span class="line">                        ch = parent;</span><br><span class="line">                        parent = parent.parent;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> parent;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将“key, value”添加到TreeMap中</span></span><br><span class="line">    <span class="comment">// 理解TreeMap的前提是掌握“红黑树”。</span></span><br><span class="line">    <span class="comment">// 若理解“红黑树中添加节点”的算法，则很容易理解put。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">        Entry&lt;K,V&gt; t = root;</span><br><span class="line">        <span class="comment">// 若红黑树为空，则插入根节点</span></span><br><span class="line">        <span class="keyword">if</span> (t == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// TBD:</span></span><br><span class="line">        <span class="comment">// 5045147: (coll) Adding null to an empty TreeSet should</span></span><br><span class="line">        <span class="comment">// throw NullPointerException</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// compare(key, key); // type check</span></span><br><span class="line">            root = <span class="keyword">new</span> Entry&lt;K,V&gt;(key, value, <span class="keyword">null</span>);</span><br><span class="line">            size = <span class="number">1</span>;</span><br><span class="line">            modCount++;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> cmp;</span><br><span class="line">        Entry&lt;K,V&gt; parent;</span><br><span class="line">        <span class="comment">// split comparator and comparable paths</span></span><br><span class="line">        Comparator&lt;? <span class="keyword">super</span> K&gt; cpr = comparator;</span><br><span class="line">        <span class="comment">// 在二叉树(红黑树是特殊的二叉树)中，找到(key, value)的插入位置。</span></span><br><span class="line">        <span class="comment">// 红黑树是以key来进行排序的，所以这里以key来进行查找。</span></span><br><span class="line">        <span class="keyword">if</span> (cpr != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                parent = t;</span><br><span class="line">                cmp = cpr.compare(key, t.key);</span><br><span class="line">                <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)</span><br><span class="line">                    t = t.left;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>)</span><br><span class="line">                    t = t.right;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">return</span> t.setValue(value);</span><br><span class="line">            &#125; <span class="keyword">while</span> (t != <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (key == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">            Comparable&lt;? <span class="keyword">super</span> K&gt; k = (Comparable&lt;? <span class="keyword">super</span> K&gt;) key;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                parent = t;</span><br><span class="line">                cmp = k.compareTo(t.key);</span><br><span class="line">                <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)</span><br><span class="line">                    t = t.left;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>)</span><br><span class="line">                    t = t.right;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">return</span> t.setValue(value);</span><br><span class="line">            &#125; <span class="keyword">while</span> (t != <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 新建红黑树的节点(e)</span></span><br><span class="line">        Entry&lt;K,V&gt; e = <span class="keyword">new</span> Entry&lt;K,V&gt;(key, value, parent);</span><br><span class="line">        <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)</span><br><span class="line">            parent.left = e;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            parent.right = e;</span><br><span class="line">        <span class="comment">// 红黑树插入节点后，不再是一颗红黑树；</span></span><br><span class="line">        <span class="comment">// 这里通过fixAfterInsertion的处理，来恢复红黑树的特性。</span></span><br><span class="line">        fixAfterInsertion(e);</span><br><span class="line">        size++;</span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除TreeMap中的键为key的节点，并返回节点的值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">remove</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 找到键为key的节点</span></span><br><span class="line">        Entry&lt;K,V&gt; p = getEntry(key);</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 保存节点的值</span></span><br><span class="line">        V oldValue = p.value;</span><br><span class="line">        <span class="comment">// 删除节点</span></span><br><span class="line">        deleteEntry(p);</span><br><span class="line">        <span class="keyword">return</span> oldValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清空红黑树</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        modCount++;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">        root = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 克隆一个TreeMap，并返回Object对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        TreeMap&lt;K,V&gt; clone = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            clone = (TreeMap&lt;K,V&gt;) <span class="keyword">super</span>.clone();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InternalError();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Put clone into "virgin" state (except for comparator)</span></span><br><span class="line">        clone.root = <span class="keyword">null</span>;</span><br><span class="line">        clone.size = <span class="number">0</span>;</span><br><span class="line">        clone.modCount = <span class="number">0</span>;</span><br><span class="line">        clone.entrySet = <span class="keyword">null</span>;</span><br><span class="line">        clone.navigableKeySet = <span class="keyword">null</span>;</span><br><span class="line">        clone.descendingMap = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Initialize clone with our mappings</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            clone.buildFromSorted(size, entrySet().iterator(), <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (java.io.IOException cannotHappen) &#123;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException cannotHappen) &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> clone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取第一个节点(对外接口)。</span></span><br><span class="line">    <span class="keyword">public</span> Map.<span class="function">Entry&lt;K,V&gt; <span class="title">firstEntry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> exportEntry(getFirstEntry());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取最后一个节点(对外接口)。</span></span><br><span class="line">    <span class="keyword">public</span> Map.<span class="function">Entry&lt;K,V&gt; <span class="title">lastEntry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> exportEntry(getLastEntry());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取第一个节点，并将改节点从TreeMap中删除。</span></span><br><span class="line">    <span class="keyword">public</span> Map.<span class="function">Entry&lt;K,V&gt; <span class="title">pollFirstEntry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取第一个节点</span></span><br><span class="line">        Entry&lt;K,V&gt; p = getFirstEntry();</span><br><span class="line">        Map.Entry&lt;K,V&gt; result = exportEntry(p);</span><br><span class="line">        <span class="comment">// 删除第一个节点</span></span><br><span class="line">        <span class="keyword">if</span> (p != <span class="keyword">null</span>)</span><br><span class="line">            deleteEntry(p);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取最后一个节点，并将改节点从TreeMap中删除。</span></span><br><span class="line">    <span class="keyword">public</span> Map.<span class="function">Entry&lt;K,V&gt; <span class="title">pollLastEntry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取最后一个节点</span></span><br><span class="line">        Entry&lt;K,V&gt; p = getLastEntry();</span><br><span class="line">        Map.Entry&lt;K,V&gt; result = exportEntry(p);</span><br><span class="line">        <span class="comment">// 删除最后一个节点</span></span><br><span class="line">        <span class="keyword">if</span> (p != <span class="keyword">null</span>)</span><br><span class="line">            deleteEntry(p);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回小于key的最大的键值对，没有的话返回null</span></span><br><span class="line">    <span class="keyword">public</span> Map.<span class="function">Entry&lt;K,V&gt; <span class="title">lowerEntry</span><span class="params">(K key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> exportEntry(getLowerEntry(key));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回小于key的最大的键值对所对应的KEY，没有的话返回null</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> K <span class="title">lowerKey</span><span class="params">(K key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> keyOrNull(getLowerEntry(key));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回不大于key的最大的键值对，没有的话返回null</span></span><br><span class="line">    <span class="keyword">public</span> Map.<span class="function">Entry&lt;K,V&gt; <span class="title">floorEntry</span><span class="params">(K key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> exportEntry(getFloorEntry(key));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回不大于key的最大的键值对所对应的KEY，没有的话返回null</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> K <span class="title">floorKey</span><span class="params">(K key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> keyOrNull(getFloorEntry(key));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回不小于key的最小的键值对，没有的话返回null</span></span><br><span class="line">    <span class="keyword">public</span> Map.<span class="function">Entry&lt;K,V&gt; <span class="title">ceilingEntry</span><span class="params">(K key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> exportEntry(getCeilingEntry(key));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回不小于key的最小的键值对所对应的KEY，没有的话返回null</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> K <span class="title">ceilingKey</span><span class="params">(K key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> keyOrNull(getCeilingEntry(key));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回大于key的最小的键值对，没有的话返回null</span></span><br><span class="line">    <span class="keyword">public</span> Map.<span class="function">Entry&lt;K,V&gt; <span class="title">higherEntry</span><span class="params">(K key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> exportEntry(getHigherEntry(key));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回大于key的最小的键值对所对应的KEY，没有的话返回null</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> K <span class="title">higherKey</span><span class="params">(K key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> keyOrNull(getHigherEntry(key));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// TreeMap的红黑树节点对应的集合</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> EntrySet entrySet = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">// KeySet为KeySet导航类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> KeySet&lt;K&gt; navigableKeySet = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">// descendingMap为键值对的倒序“映射”</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> NavigableMap&lt;K,V&gt; descendingMap = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回TreeMap的“键的集合”</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;K&gt; <span class="title">keySet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> navigableKeySet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取“可导航”的Key的集合</span></span><br><span class="line">    <span class="comment">// 实际上是返回KeySet类的对象。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> NavigableSet&lt;K&gt; <span class="title">navigableKeySet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        KeySet&lt;K&gt; nks = navigableKeySet;</span><br><span class="line">        <span class="keyword">return</span> (nks != <span class="keyword">null</span>) ? nks : (navigableKeySet = <span class="keyword">new</span> KeySet(<span class="keyword">this</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回“TreeMap的值对应的集合”</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;V&gt; <span class="title">values</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Collection&lt;V&gt; vs = values;</span><br><span class="line">        <span class="keyword">return</span> (vs != <span class="keyword">null</span>) ? vs : (values = <span class="keyword">new</span> Values());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取TreeMap的Entry的集合，实际上是返回EntrySet类的对象。</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet() &#123;</span><br><span class="line">        EntrySet es = entrySet;</span><br><span class="line">        <span class="keyword">return</span> (es != <span class="keyword">null</span>) ? es : (entrySet = <span class="keyword">new</span> EntrySet());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取TreeMap的降序Map</span></span><br><span class="line">    <span class="comment">// 实际上是返回DescendingSubMap类的对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> NavigableMap&lt;K, V&gt; <span class="title">descendingMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        NavigableMap&lt;K, V&gt; km = descendingMap;</span><br><span class="line">        <span class="keyword">return</span> (km != <span class="keyword">null</span>) ? km :</span><br><span class="line">            (descendingMap = <span class="keyword">new</span> DescendingSubMap(<span class="keyword">this</span>,</span><br><span class="line">                                                  <span class="keyword">true</span>, <span class="keyword">null</span>, <span class="keyword">true</span>,</span><br><span class="line">                                                  <span class="keyword">true</span>, <span class="keyword">null</span>, <span class="keyword">true</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取TreeMap的子Map</span></span><br><span class="line">    <span class="comment">// 范围是从fromKey 到 toKey；fromInclusive是是否包含fromKey的标记，toInclusive是是否包含toKey的标记</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> NavigableMap&lt;K,V&gt; <span class="title">subMap</span><span class="params">(K fromKey, <span class="keyword">boolean</span> fromInclusive,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    K toKey,   <span class="keyword">boolean</span> toInclusive)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AscendingSubMap(<span class="keyword">this</span>,</span><br><span class="line">                                   <span class="keyword">false</span>, fromKey, fromInclusive,</span><br><span class="line">                                   <span class="keyword">false</span>, toKey,   toInclusive);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取“Map的头部”</span></span><br><span class="line">    <span class="comment">// 范围从第一个节点 到 toKey, inclusive是是否包含toKey的标记</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> NavigableMap&lt;K,V&gt; <span class="title">headMap</span><span class="params">(K toKey, <span class="keyword">boolean</span> inclusive)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AscendingSubMap(<span class="keyword">this</span>,</span><br><span class="line">                                   <span class="keyword">true</span>,  <span class="keyword">null</span>,  <span class="keyword">true</span>,</span><br><span class="line">                                   <span class="keyword">false</span>, toKey, inclusive);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取“Map的尾部”。</span></span><br><span class="line">    <span class="comment">// 范围是从 fromKey 到 最后一个节点，inclusive是是否包含fromKey的标记</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> NavigableMap&lt;K,V&gt; <span class="title">tailMap</span><span class="params">(K fromKey, <span class="keyword">boolean</span> inclusive)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AscendingSubMap(<span class="keyword">this</span>,</span><br><span class="line">                                   <span class="keyword">false</span>, fromKey, inclusive,</span><br><span class="line">                                   <span class="keyword">true</span>,  <span class="keyword">null</span>,    <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取“子Map”。</span></span><br><span class="line">    <span class="comment">// 范围是从fromKey(包括) 到 toKey(不包括)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SortedMap&lt;K,V&gt; <span class="title">subMap</span><span class="params">(K fromKey, K toKey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> subMap(fromKey, <span class="keyword">true</span>, toKey, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取“Map的头部”。</span></span><br><span class="line">    <span class="comment">// 范围从第一个节点 到 toKey(不包括)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SortedMap&lt;K,V&gt; <span class="title">headMap</span><span class="params">(K toKey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> headMap(toKey, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取“Map的尾部”。</span></span><br><span class="line">    <span class="comment">// 范围是从 fromKey(包括) 到 最后一个节点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SortedMap&lt;K,V&gt; <span class="title">tailMap</span><span class="params">(K fromKey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tailMap(fromKey, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ”TreeMap的值的集合“对应的类，它集成于AbstractCollection</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Values</span> <span class="keyword">extends</span> <span class="title">AbstractCollection</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        <span class="comment">// 返回迭代器</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Iterator&lt;V&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ValueIterator(getFirstEntry());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回个数</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> TreeMap.<span class="keyword">this</span>.size();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// "TreeMap的值的集合"中是否包含"对象o"</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> TreeMap.<span class="keyword">this</span>.containsValue(o);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除"TreeMap的值的集合"中的"对象o"</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (Entry&lt;K,V&gt; e = getFirstEntry(); e != <span class="keyword">null</span>; e = successor(e)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (valEquals(e.getValue(), o)) &#123;</span><br><span class="line">                    deleteEntry(e);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 清空删除"TreeMap的值的集合"</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            TreeMap.<span class="keyword">this</span>.clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// EntrySet是“TreeMap的所有键值对组成的集合”，</span></span><br><span class="line">    <span class="comment">// EntrySet集合的单位是单个“键值对”。</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">EntrySet</span> <span class="keyword">extends</span> <span class="title">AbstractSet</span>&lt;<span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> Iterator&lt;Map.Entry&lt;K,V&gt;&gt; iterator() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> EntryIterator(getFirstEntry());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// EntrySet中是否包含“键值对Object”</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Map.Entry))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            Map.Entry&lt;K,V&gt; entry = (Map.Entry&lt;K,V&gt;) o;</span><br><span class="line">            V value = entry.getValue();</span><br><span class="line">            Entry&lt;K,V&gt; p = getEntry(entry.getKey());</span><br><span class="line">            <span class="keyword">return</span> p != <span class="keyword">null</span> &amp;&amp; valEquals(p.getValue(), value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除EntrySet中的“键值对Object”</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Map.Entry))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            Map.Entry&lt;K,V&gt; entry = (Map.Entry&lt;K,V&gt;) o;</span><br><span class="line">            V value = entry.getValue();</span><br><span class="line">            Entry&lt;K,V&gt; p = getEntry(entry.getKey());</span><br><span class="line">            <span class="keyword">if</span> (p != <span class="keyword">null</span> &amp;&amp; valEquals(p.getValue(), value)) &#123;</span><br><span class="line">                deleteEntry(p);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回EntrySet中元素个数</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> TreeMap.<span class="keyword">this</span>.size();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 清空EntrySet</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            TreeMap.<span class="keyword">this</span>.clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回“TreeMap的KEY组成的迭代器(顺序)”</span></span><br><span class="line">    <span class="function">Iterator&lt;K&gt; <span class="title">keyIterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> KeyIterator(getFirstEntry());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回“TreeMap的KEY组成的迭代器(逆序)”</span></span><br><span class="line">    <span class="function">Iterator&lt;K&gt; <span class="title">descendingKeyIterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DescendingKeyIterator(getLastEntry());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// KeySet是“TreeMap中所有的KEY组成的集合”</span></span><br><span class="line">    <span class="comment">// KeySet继承于AbstractSet，而且实现了NavigableSet接口。</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">KeySet</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractSet</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">NavigableSet</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">        <span class="comment">// NavigableMap成员，KeySet是通过NavigableMap实现的</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> NavigableMap&lt;E, Object&gt; m;</span><br><span class="line">        KeySet(NavigableMap&lt;E,Object&gt; map) &#123; m = map; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 升序迭代器</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 若是TreeMap对象，则调用TreeMap的迭代器keyIterator()</span></span><br><span class="line">            <span class="comment">// 否则，调用TreeMap子类NavigableSubMap的迭代器keyIterator()</span></span><br><span class="line">            <span class="keyword">if</span> (m <span class="keyword">instanceof</span> TreeMap)</span><br><span class="line">                <span class="keyword">return</span> ((TreeMap&lt;E,Object&gt;)m).keyIterator();</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> (Iterator&lt;E&gt;)(((TreeMap.NavigableSubMap)m).keyIterator());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 降序迭代器</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title">descendingIterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 若是TreeMap对象，则调用TreeMap的迭代器descendingKeyIterator()</span></span><br><span class="line">            <span class="comment">// 否则，调用TreeMap子类NavigableSubMap的迭代器descendingKeyIterator()</span></span><br><span class="line">            <span class="keyword">if</span> (m <span class="keyword">instanceof</span> TreeMap)</span><br><span class="line">                <span class="keyword">return</span> ((TreeMap&lt;E,Object&gt;)m).descendingKeyIterator();</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> (Iterator&lt;E&gt;)(((TreeMap.NavigableSubMap)m).descendingKeyIterator());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> m.size(); &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> m.isEmpty(); &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123; <span class="keyword">return</span> m.containsKey(o); &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123; m.clear(); &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> E <span class="title">lower</span><span class="params">(E e)</span> </span>&#123; <span class="keyword">return</span> m.lowerKey(e); &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> E <span class="title">floor</span><span class="params">(E e)</span> </span>&#123; <span class="keyword">return</span> m.floorKey(e); &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> E <span class="title">ceiling</span><span class="params">(E e)</span> </span>&#123; <span class="keyword">return</span> m.ceilingKey(e); &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> E <span class="title">higher</span><span class="params">(E e)</span> </span>&#123; <span class="keyword">return</span> m.higherKey(e); &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> E <span class="title">first</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> m.firstKey(); &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> E <span class="title">last</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> m.lastKey(); &#125;</span><br><span class="line">        <span class="keyword">public</span> Comparator&lt;? <span class="keyword">super</span> E&gt; comparator() &#123; <span class="keyword">return</span> m.comparator(); &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> E <span class="title">pollFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            Map.Entry&lt;E,Object&gt; e = m.pollFirstEntry();</span><br><span class="line">            <span class="keyword">return</span> e == <span class="keyword">null</span>? <span class="keyword">null</span> : e.getKey();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> E <span class="title">pollLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            Map.Entry&lt;E,Object&gt; e = m.pollLastEntry();</span><br><span class="line">            <span class="keyword">return</span> e == <span class="keyword">null</span>? <span class="keyword">null</span> : e.getKey();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> oldSize = size();</span><br><span class="line">            m.remove(o);</span><br><span class="line">            <span class="keyword">return</span> size() != oldSize;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> NavigableSet&lt;E&gt; <span class="title">subSet</span><span class="params">(E fromElement, <span class="keyword">boolean</span> fromInclusive,</span></span></span><br><span class="line"><span class="function"><span class="params">                                      E toElement,   <span class="keyword">boolean</span> toInclusive)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> TreeSet&lt;E&gt;(m.subMap(fromElement, fromInclusive,</span><br><span class="line">                                           toElement,   toInclusive));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> NavigableSet&lt;E&gt; <span class="title">headSet</span><span class="params">(E toElement, <span class="keyword">boolean</span> inclusive)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> TreeSet&lt;E&gt;(m.headMap(toElement, inclusive));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> NavigableSet&lt;E&gt; <span class="title">tailSet</span><span class="params">(E fromElement, <span class="keyword">boolean</span> inclusive)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> TreeSet&lt;E&gt;(m.tailMap(fromElement, inclusive));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> SortedSet&lt;E&gt; <span class="title">subSet</span><span class="params">(E fromElement, E toElement)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> subSet(fromElement, <span class="keyword">true</span>, toElement, <span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> SortedSet&lt;E&gt; <span class="title">headSet</span><span class="params">(E toElement)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> headSet(toElement, <span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> SortedSet&lt;E&gt; <span class="title">tailSet</span><span class="params">(E fromElement)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> tailSet(fromElement, <span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> NavigableSet&lt;E&gt; <span class="title">descendingSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> TreeSet(m.descendingMap());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 它是TreeMap中的一个抽象迭代器，实现了一些通用的接口。</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">PrivateEntryIterator</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">        <span class="comment">// 下一个元素</span></span><br><span class="line">        Entry&lt;K,V&gt; next;</span><br><span class="line">        <span class="comment">// 上一次返回元素</span></span><br><span class="line">        Entry&lt;K,V&gt; lastReturned;</span><br><span class="line">        <span class="comment">// 期望的修改次数，用于实现fast-fail机制</span></span><br><span class="line">        <span class="keyword">int</span> expectedModCount;</span><br><span class="line"></span><br><span class="line">        PrivateEntryIterator(Entry&lt;K,V&gt; first) &#123;</span><br><span class="line">            expectedModCount = modCount;</span><br><span class="line">            lastReturned = <span class="keyword">null</span>;</span><br><span class="line">            next = first;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> next != <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取下一个节点</span></span><br><span class="line">        <span class="function"><span class="keyword">final</span> Entry&lt;K,V&gt; <span class="title">nextEntry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            Entry&lt;K,V&gt; e = next;</span><br><span class="line">            <span class="keyword">if</span> (e == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">            <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">            next = successor(e);</span><br><span class="line">            lastReturned = e;</span><br><span class="line">            <span class="keyword">return</span> e;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取上一个节点</span></span><br><span class="line">        <span class="function"><span class="keyword">final</span> Entry&lt;K,V&gt; <span class="title">prevEntry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            Entry&lt;K,V&gt; e = next;</span><br><span class="line">            <span class="keyword">if</span> (e == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">            <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">            next = predecessor(e);</span><br><span class="line">            lastReturned = e;</span><br><span class="line">            <span class="keyword">return</span> e;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除当前节点</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (lastReturned == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">            <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">            <span class="comment">// 这里重点强调一下“为什么当lastReturned的左右孩子都不为空时，要将其赋值给next”。</span></span><br><span class="line">            <span class="comment">// 目的是为了“删除lastReturned节点之后，next节点指向的仍然是下一个节点”。</span></span><br><span class="line">            <span class="comment">//     根据“红黑树”的特性可知：</span></span><br><span class="line">            <span class="comment">//     当被删除节点有两个儿子时。那么，首先把“它的后继节点的内容”复制给“该节点的内容”；之后，删除“它的后继节点”。</span></span><br><span class="line">            <span class="comment">//     这意味着“当被删除节点有两个儿子时，删除当前节点之后，'新的当前节点'实际上是‘原有的后继节点(即下一个节点)’”。</span></span><br><span class="line">            <span class="comment">//     而此时next仍然指向"新的当前节点"。也就是说next是仍然是指向下一个节点；能继续遍历红黑树。</span></span><br><span class="line">            <span class="keyword">if</span> (lastReturned.left != <span class="keyword">null</span> &amp;&amp; lastReturned.right != <span class="keyword">null</span>)</span><br><span class="line">                next = lastReturned;</span><br><span class="line">            deleteEntry(lastReturned);</span><br><span class="line">            expectedModCount = modCount;</span><br><span class="line">            lastReturned = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// TreeMap的Entry对应的迭代器</span></span><br><span class="line">    <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">EntryIterator</span> <span class="keyword">extends</span> <span class="title">PrivateEntryIterator</span>&lt;<span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;&gt; </span>&#123;</span><br><span class="line">        EntryIterator(Entry&lt;K,V&gt; first) &#123;</span><br><span class="line">            <span class="keyword">super</span>(first);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> Map.<span class="function">Entry&lt;K,V&gt; <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> nextEntry();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// TreeMap的Value对应的迭代器</span></span><br><span class="line">    <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ValueIterator</span> <span class="keyword">extends</span> <span class="title">PrivateEntryIterator</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        ValueIterator(Entry&lt;K,V&gt; first) &#123;</span><br><span class="line">            <span class="keyword">super</span>(first);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> V <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> nextEntry().value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// reeMap的KEY组成的迭代器(顺序)</span></span><br><span class="line">    <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">KeyIterator</span> <span class="keyword">extends</span> <span class="title">PrivateEntryIterator</span>&lt;<span class="title">K</span>&gt; </span>&#123;</span><br><span class="line">        KeyIterator(Entry&lt;K,V&gt; first) &#123;</span><br><span class="line">            <span class="keyword">super</span>(first);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> K <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> nextEntry().key;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// TreeMap的KEY组成的迭代器(逆序)</span></span><br><span class="line">    <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DescendingKeyIterator</span> <span class="keyword">extends</span> <span class="title">PrivateEntryIterator</span>&lt;<span class="title">K</span>&gt; </span>&#123;</span><br><span class="line">        DescendingKeyIterator(Entry&lt;K,V&gt; first) &#123;</span><br><span class="line">            <span class="keyword">super</span>(first);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> K <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> prevEntry().key;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 比较两个对象的大小</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Object k1, Object k2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> comparator==<span class="keyword">null</span> ? ((Comparable&lt;? <span class="keyword">super</span> K&gt;)k1).compareTo((K)k2)</span><br><span class="line">            : comparator.compare((K)k1, (K)k2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断两个对象是否相等</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">valEquals</span><span class="params">(Object o1, Object o2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (o1==<span class="keyword">null</span> ? o2==<span class="keyword">null</span> : o1.equals(o2));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回“Key-Value键值对”的一个简单拷贝(AbstractMap.SimpleImmutableEntry&lt;K,V&gt;对象)</span></span><br><span class="line">    <span class="comment">// 可用来读取“键值对”的值</span></span><br><span class="line">    <span class="keyword">static</span> &lt;K,V&gt; Map.<span class="function">Entry&lt;K,V&gt; <span class="title">exportEntry</span><span class="params">(TreeMap.Entry&lt;K,V&gt; e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> e == <span class="keyword">null</span>? <span class="keyword">null</span> :</span><br><span class="line">            <span class="keyword">new</span> AbstractMap.SimpleImmutableEntry&lt;K,V&gt;(e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 若“键值对”不为null，则返回KEY；否则，返回null</span></span><br><span class="line">    <span class="keyword">static</span> &lt;K,V&gt; <span class="function">K <span class="title">keyOrNull</span><span class="params">(TreeMap.Entry&lt;K,V&gt; e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> e == <span class="keyword">null</span>? <span class="keyword">null</span> : e.key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 若“键值对”不为null，则返回KEY；否则，抛出异常</span></span><br><span class="line">    <span class="keyword">static</span> &lt;K&gt; <span class="function">K <span class="title">key</span><span class="params">(Entry&lt;K,?&gt; e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (e==<span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">        <span class="keyword">return</span> e.key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// TreeMap的SubMap，它一个抽象类，实现了公共操作。</span></span><br><span class="line">    <span class="comment">// 它包括了"(升序)AscendingSubMap"和"(降序)DescendingSubMap"两个子类。</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">NavigableSubMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">NavigableMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TreeMap的拷贝</span></span><br><span class="line">        <span class="keyword">final</span> TreeMap&lt;K,V&gt; m;</span><br><span class="line">        <span class="comment">// lo是“子Map范围的最小值”，hi是“子Map范围的最大值”；</span></span><br><span class="line">        <span class="comment">// loInclusive是“是否包含lo的标记”，hiInclusive是“是否包含hi的标记”</span></span><br><span class="line">        <span class="comment">// fromStart是“表示是否从第一个节点开始计算”，</span></span><br><span class="line">        <span class="comment">// toEnd是“表示是否计算到最后一个节点      ”</span></span><br><span class="line">        <span class="keyword">final</span> K lo, hi;      </span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> fromStart, toEnd;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> loInclusive, hiInclusive;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构造函数</span></span><br><span class="line">        NavigableSubMap(TreeMap&lt;K,V&gt; m,</span><br><span class="line">                        <span class="keyword">boolean</span> fromStart, K lo, <span class="keyword">boolean</span> loInclusive,</span><br><span class="line">                        <span class="keyword">boolean</span> toEnd,     K hi, <span class="keyword">boolean</span> hiInclusive) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!fromStart &amp;&amp; !toEnd) &#123;</span><br><span class="line">                <span class="keyword">if</span> (m.compare(lo, hi) &gt; <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"fromKey &gt; toKey"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!fromStart) <span class="comment">// type check</span></span><br><span class="line">                    m.compare(lo, lo);</span><br><span class="line">                <span class="keyword">if</span> (!toEnd)</span><br><span class="line">                    m.compare(hi, hi);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.m = m;</span><br><span class="line">            <span class="keyword">this</span>.fromStart = fromStart;</span><br><span class="line">            <span class="keyword">this</span>.lo = lo;</span><br><span class="line">            <span class="keyword">this</span>.loInclusive = loInclusive;</span><br><span class="line">            <span class="keyword">this</span>.toEnd = toEnd;</span><br><span class="line">            <span class="keyword">this</span>.hi = hi;</span><br><span class="line">            <span class="keyword">this</span>.hiInclusive = hiInclusive;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断key是否太小</span></span><br><span class="line">        <span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tooLow</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 若该SubMap不包括“起始节点”，</span></span><br><span class="line">            <span class="comment">// 并且，“key小于最小键(lo)”或者“key等于最小键(lo)，但最小键却没包括在该SubMap内”</span></span><br><span class="line">            <span class="comment">// 则判断key太小。其余情况都不是太小！</span></span><br><span class="line">            <span class="keyword">if</span> (!fromStart) &#123;</span><br><span class="line">                <span class="keyword">int</span> c = m.compare(key, lo);</span><br><span class="line">                <span class="keyword">if</span> (c &lt; <span class="number">0</span> || (c == <span class="number">0</span> &amp;&amp; !loInclusive))</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断key是否太大</span></span><br><span class="line">        <span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tooHigh</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 若该SubMap不包括“结束节点”，</span></span><br><span class="line">            <span class="comment">// 并且，“key大于最大键(hi)”或者“key等于最大键(hi)，但最大键却没包括在该SubMap内”</span></span><br><span class="line">            <span class="comment">// 则判断key太大。其余情况都不是太大！</span></span><br><span class="line">            <span class="keyword">if</span> (!toEnd) &#123;</span><br><span class="line">                <span class="keyword">int</span> c = m.compare(key, hi);</span><br><span class="line">                <span class="keyword">if</span> (c &gt; <span class="number">0</span> || (c == <span class="number">0</span> &amp;&amp; !hiInclusive))</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断key是否在“lo和hi”开区间范围内</span></span><br><span class="line">        <span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">inRange</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> !tooLow(key) &amp;&amp; !tooHigh(key);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断key是否在封闭区间内</span></span><br><span class="line">        <span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">inClosedRange</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (fromStart || m.compare(key, lo) &gt;= <span class="number">0</span>)</span><br><span class="line">                &amp;&amp; (toEnd || m.compare(hi, key) &gt;= <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断key是否在区间内, inclusive是区间开关标志</span></span><br><span class="line">        <span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">inRange</span><span class="params">(Object key, <span class="keyword">boolean</span> inclusive)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> inclusive ? inRange(key) : inClosedRange(key);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回最低的Entry</span></span><br><span class="line">        <span class="keyword">final</span> TreeMap.<span class="function">Entry&lt;K,V&gt; <span class="title">absLowest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 若“包含起始节点”，则调用getFirstEntry()返回第一个节点</span></span><br><span class="line">        <span class="comment">// 否则的话，若包括lo，则调用getCeilingEntry(lo)获取大于/等于lo的最小的Entry;</span></span><br><span class="line">        <span class="comment">//           否则，调用getHigherEntry(lo)获取大于lo的最小Entry</span></span><br><span class="line">        TreeMap.Entry&lt;K,V&gt; e =</span><br><span class="line">                (fromStart ?  m.getFirstEntry() :</span><br><span class="line">                 (loInclusive ? m.getCeilingEntry(lo) :</span><br><span class="line">                                m.getHigherEntry(lo)));</span><br><span class="line">            <span class="keyword">return</span> (e == <span class="keyword">null</span> || tooHigh(e.key)) ? <span class="keyword">null</span> : e;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回最高的Entry</span></span><br><span class="line">        <span class="keyword">final</span> TreeMap.<span class="function">Entry&lt;K,V&gt; <span class="title">absHighest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 若“包含结束节点”，则调用getLastEntry()返回最后一个节点</span></span><br><span class="line">        <span class="comment">// 否则的话，若包括hi，则调用getFloorEntry(hi)获取小于/等于hi的最大的Entry;</span></span><br><span class="line">        <span class="comment">//           否则，调用getLowerEntry(hi)获取大于hi的最大Entry</span></span><br><span class="line">        TreeMap.Entry&lt;K,V&gt; e =</span><br><span class="line">        TreeMap.Entry&lt;K,V&gt; e =</span><br><span class="line">                (toEnd ?  m.getLastEntry() :</span><br><span class="line">                 (hiInclusive ?  m.getFloorEntry(hi) :</span><br><span class="line">                                 m.getLowerEntry(hi)));</span><br><span class="line">            <span class="keyword">return</span> (e == <span class="keyword">null</span> || tooLow(e.key)) ? <span class="keyword">null</span> : e;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回"大于/等于key的最小的Entry"</span></span><br><span class="line">        <span class="keyword">final</span> TreeMap.<span class="function">Entry&lt;K,V&gt; <span class="title">absCeiling</span><span class="params">(K key)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 只有在“key太小”的情况下，absLowest()返回的Entry才是“大于/等于key的最小Entry”</span></span><br><span class="line">            <span class="comment">// 其它情况下不行。例如，当包含“起始节点”时，absLowest()返回的是最小Entry了！</span></span><br><span class="line">            <span class="keyword">if</span> (tooLow(key))</span><br><span class="line">                <span class="keyword">return</span> absLowest();</span><br><span class="line">            <span class="comment">// 获取“大于/等于key的最小Entry”</span></span><br><span class="line">        TreeMap.Entry&lt;K,V&gt; e = m.getCeilingEntry(key);</span><br><span class="line">            <span class="keyword">return</span> (e == <span class="keyword">null</span> || tooHigh(e.key)) ? <span class="keyword">null</span> : e;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回"大于key的最小的Entry"</span></span><br><span class="line">        <span class="keyword">final</span> TreeMap.<span class="function">Entry&lt;K,V&gt; <span class="title">absHigher</span><span class="params">(K key)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 只有在“key太小”的情况下，absLowest()返回的Entry才是“大于key的最小Entry”</span></span><br><span class="line">            <span class="comment">// 其它情况下不行。例如，当包含“起始节点”时，absLowest()返回的是最小Entry了,而不一定是“大于key的最小Entry”！</span></span><br><span class="line">            <span class="keyword">if</span> (tooLow(key))</span><br><span class="line">                <span class="keyword">return</span> absLowest();</span><br><span class="line">            <span class="comment">// 获取“大于key的最小Entry”</span></span><br><span class="line">        TreeMap.Entry&lt;K,V&gt; e = m.getHigherEntry(key);</span><br><span class="line">            <span class="keyword">return</span> (e == <span class="keyword">null</span> || tooHigh(e.key)) ? <span class="keyword">null</span> : e;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回"小于/等于key的最大的Entry"</span></span><br><span class="line">        <span class="keyword">final</span> TreeMap.<span class="function">Entry&lt;K,V&gt; <span class="title">absFloor</span><span class="params">(K key)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 只有在“key太大”的情况下，(absHighest)返回的Entry才是“小于/等于key的最大Entry”</span></span><br><span class="line">            <span class="comment">// 其它情况下不行。例如，当包含“结束节点”时，absHighest()返回的是最大Entry了！</span></span><br><span class="line">            <span class="keyword">if</span> (tooHigh(key))</span><br><span class="line">                <span class="keyword">return</span> absHighest();</span><br><span class="line">        <span class="comment">// 获取"小于/等于key的最大的Entry"</span></span><br><span class="line">        TreeMap.Entry&lt;K,V&gt; e = m.getFloorEntry(key);</span><br><span class="line">            <span class="keyword">return</span> (e == <span class="keyword">null</span> || tooLow(e.key)) ? <span class="keyword">null</span> : e;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回"小于key的最大的Entry"</span></span><br><span class="line">        <span class="keyword">final</span> TreeMap.<span class="function">Entry&lt;K,V&gt; <span class="title">absLower</span><span class="params">(K key)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 只有在“key太大”的情况下，(absHighest)返回的Entry才是“小于key的最大Entry”</span></span><br><span class="line">            <span class="comment">// 其它情况下不行。例如，当包含“结束节点”时，absHighest()返回的是最大Entry了,而不一定是“小于key的最大Entry”！</span></span><br><span class="line">            <span class="keyword">if</span> (tooHigh(key))</span><br><span class="line">                <span class="keyword">return</span> absHighest();</span><br><span class="line">        <span class="comment">// 获取"小于key的最大的Entry"</span></span><br><span class="line">        TreeMap.Entry&lt;K,V&gt; e = m.getLowerEntry(key);</span><br><span class="line">            <span class="keyword">return</span> (e == <span class="keyword">null</span> || tooLow(e.key)) ? <span class="keyword">null</span> : e;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回“大于最大节点中的最小节点”，不存在的话，返回null</span></span><br><span class="line">        <span class="keyword">final</span> TreeMap.<span class="function">Entry&lt;K,V&gt; <span class="title">absHighFence</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (toEnd ? <span class="keyword">null</span> : (hiInclusive ?</span><br><span class="line">                                    m.getHigherEntry(hi) :</span><br><span class="line">                                    m.getCeilingEntry(hi)));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回“小于最小节点中的最大节点”，不存在的话，返回null</span></span><br><span class="line">        <span class="keyword">final</span> TreeMap.<span class="function">Entry&lt;K,V&gt; <span class="title">absLowFence</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (fromStart ? <span class="keyword">null</span> : (loInclusive ?</span><br><span class="line">                                        m.getLowerEntry(lo) :</span><br><span class="line">                                        m.getFloorEntry(lo)));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 下面几个abstract方法是需要NavigableSubMap的实现类实现的方法</span></span><br><span class="line">        <span class="keyword">abstract</span> TreeMap.<span class="function">Entry&lt;K,V&gt; <span class="title">subLowest</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="keyword">abstract</span> TreeMap.<span class="function">Entry&lt;K,V&gt; <span class="title">subHighest</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="keyword">abstract</span> TreeMap.<span class="function">Entry&lt;K,V&gt; <span class="title">subCeiling</span><span class="params">(K key)</span></span>;</span><br><span class="line">        <span class="keyword">abstract</span> TreeMap.<span class="function">Entry&lt;K,V&gt; <span class="title">subHigher</span><span class="params">(K key)</span></span>;</span><br><span class="line">        <span class="keyword">abstract</span> TreeMap.<span class="function">Entry&lt;K,V&gt; <span class="title">subFloor</span><span class="params">(K key)</span></span>;</span><br><span class="line">        <span class="keyword">abstract</span> TreeMap.<span class="function">Entry&lt;K,V&gt; <span class="title">subLower</span><span class="params">(K key)</span></span>;</span><br><span class="line">        <span class="comment">// 返回“顺序”的键迭代器</span></span><br><span class="line">        <span class="function"><span class="keyword">abstract</span> Iterator&lt;K&gt; <span class="title">keyIterator</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="comment">// 返回“逆序”的键迭代器</span></span><br><span class="line">        <span class="function"><span class="keyword">abstract</span> Iterator&lt;K&gt; <span class="title">descendingKeyIterator</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回SubMap是否为空。空的话，返回true，否则返回false</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (fromStart &amp;&amp; toEnd) ? m.isEmpty() : entrySet().isEmpty();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回SubMap的大小</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (fromStart &amp;&amp; toEnd) ? m.size() : entrySet().size();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回SubMap是否包含键key</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">containsKey</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> inRange(key) &amp;&amp; m.containsKey(key);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将key-value 插入SubMap中</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!inRange(key))</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"key out of range"</span>);</span><br><span class="line">            <span class="keyword">return</span> m.put(key, value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取key对应值</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> !inRange(key)? <span class="keyword">null</span> :  m.get(key);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除key对应的键值对</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">remove</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> !inRange(key)? <span class="keyword">null</span>  : m.remove(key);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取“大于/等于key的最小键值对”</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> Map.<span class="function">Entry&lt;K,V&gt; <span class="title">ceilingEntry</span><span class="params">(K key)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> exportEntry(subCeiling(key));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取“大于/等于key的最小键”</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> K <span class="title">ceilingKey</span><span class="params">(K key)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> keyOrNull(subCeiling(key));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取“大于key的最小键值对”</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> Map.<span class="function">Entry&lt;K,V&gt; <span class="title">higherEntry</span><span class="params">(K key)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> exportEntry(subHigher(key));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取“大于key的最小键”</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> K <span class="title">higherKey</span><span class="params">(K key)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> keyOrNull(subHigher(key));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取“小于/等于key的最大键值对”</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> Map.<span class="function">Entry&lt;K,V&gt; <span class="title">floorEntry</span><span class="params">(K key)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> exportEntry(subFloor(key));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取“小于/等于key的最大键”</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> K <span class="title">floorKey</span><span class="params">(K key)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> keyOrNull(subFloor(key));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取“小于key的最大键值对”</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> Map.<span class="function">Entry&lt;K,V&gt; <span class="title">lowerEntry</span><span class="params">(K key)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> exportEntry(subLower(key));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取“小于key的最大键”</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> K <span class="title">lowerKey</span><span class="params">(K key)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> keyOrNull(subLower(key));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取"SubMap的第一个键"</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> K <span class="title">firstKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> key(subLowest());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取"SubMap的最后一个键"</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> K <span class="title">lastKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> key(subHighest());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取"SubMap的第一个键值对"</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> Map.<span class="function">Entry&lt;K,V&gt; <span class="title">firstEntry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> exportEntry(subLowest());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取"SubMap的最后一个键值对"</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> Map.<span class="function">Entry&lt;K,V&gt; <span class="title">lastEntry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> exportEntry(subHighest());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回"SubMap的第一个键值对"，并从SubMap中删除改键值对</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> Map.<span class="function">Entry&lt;K,V&gt; <span class="title">pollFirstEntry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        TreeMap.Entry&lt;K,V&gt; e = subLowest();</span><br><span class="line">            Map.Entry&lt;K,V&gt; result = exportEntry(e);</span><br><span class="line">            <span class="keyword">if</span> (e != <span class="keyword">null</span>)</span><br><span class="line">                m.deleteEntry(e);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回"SubMap的最后一个键值对"，并从SubMap中删除改键值对</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> Map.<span class="function">Entry&lt;K,V&gt; <span class="title">pollLastEntry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        TreeMap.Entry&lt;K,V&gt; e = subHighest();</span><br><span class="line">            Map.Entry&lt;K,V&gt; result = exportEntry(e);</span><br><span class="line">            <span class="keyword">if</span> (e != <span class="keyword">null</span>)</span><br><span class="line">                m.deleteEntry(e);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Views</span></span><br><span class="line">        <span class="keyword">transient</span> NavigableMap&lt;K,V&gt; descendingMapView = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">transient</span> EntrySetView entrySetView = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">transient</span> KeySet&lt;K&gt; navigableKeySetView = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回NavigableSet对象，实际上返回的是当前对象的"Key集合"。 </span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> NavigableSet&lt;K&gt; <span class="title">navigableKeySet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            KeySet&lt;K&gt; nksv = navigableKeySetView;</span><br><span class="line">            <span class="keyword">return</span> (nksv != <span class="keyword">null</span>) ? nksv :</span><br><span class="line">                (navigableKeySetView = <span class="keyword">new</span> TreeMap.KeySet(<span class="keyword">this</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回"Key集合"对象</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Set&lt;K&gt; <span class="title">keySet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> navigableKeySet();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回“逆序”的Key集合</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> NavigableSet&lt;K&gt; <span class="title">descendingKeySet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> descendingMap().navigableKeySet();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 排列fromKey(包含) 到 toKey(不包含) 的子map</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> SortedMap&lt;K,V&gt; <span class="title">subMap</span><span class="params">(K fromKey, K toKey)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> subMap(fromKey, <span class="keyword">true</span>, toKey, <span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回当前Map的头部(从第一个节点 到 toKey, 不包括toKey)</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> SortedMap&lt;K,V&gt; <span class="title">headMap</span><span class="params">(K toKey)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> headMap(toKey, <span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回当前Map的尾部[从 fromKey(包括fromKeyKey) 到 最后一个节点]</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> SortedMap&lt;K,V&gt; <span class="title">tailMap</span><span class="params">(K fromKey)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> tailMap(fromKey, <span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Map的Entry的集合</span></span><br><span class="line">        <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">EntrySetView</span> <span class="keyword">extends</span> <span class="title">AbstractSet</span>&lt;<span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;&gt; </span>&#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">int</span> size = -<span class="number">1</span>, sizeModCount;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取EntrySet的大小</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 若SubMap是从“开始节点”到“结尾节点”，则SubMap大小就是原TreeMap的大小</span></span><br><span class="line">                <span class="keyword">if</span> (fromStart &amp;&amp; toEnd)</span><br><span class="line">                    <span class="keyword">return</span> m.size();</span><br><span class="line">                <span class="comment">// 若SubMap不是从“开始节点”到“结尾节点”，则调用iterator()遍历EntrySetView中的元素</span></span><br><span class="line">                <span class="keyword">if</span> (size == -<span class="number">1</span> || sizeModCount != m.modCount) &#123;</span><br><span class="line">                    sizeModCount = m.modCount;</span><br><span class="line">                    size = <span class="number">0</span>;</span><br><span class="line">                    Iterator i = iterator();</span><br><span class="line">                    <span class="keyword">while</span> (i.hasNext()) &#123;</span><br><span class="line">                        size++;</span><br><span class="line">                        i.next();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> size;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 判断EntrySetView是否为空</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                TreeMap.Entry&lt;K,V&gt; n = absLowest();</span><br><span class="line">                <span class="keyword">return</span> n == <span class="keyword">null</span> || tooHigh(n.key);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 判断EntrySetView是否包含Object</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Map.Entry))</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                Map.Entry&lt;K,V&gt; entry = (Map.Entry&lt;K,V&gt;) o;</span><br><span class="line">                K key = entry.getKey();</span><br><span class="line">                <span class="keyword">if</span> (!inRange(key))</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                TreeMap.Entry node = m.getEntry(key);</span><br><span class="line">                <span class="keyword">return</span> node != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                    valEquals(node.getValue(), entry.getValue());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 从EntrySetView中删除Object</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Map.Entry))</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                Map.Entry&lt;K,V&gt; entry = (Map.Entry&lt;K,V&gt;) o;</span><br><span class="line">                K key = entry.getKey();</span><br><span class="line">                <span class="keyword">if</span> (!inRange(key))</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                TreeMap.Entry&lt;K,V&gt; node = m.getEntry(key);</span><br><span class="line">                <span class="keyword">if</span> (node!=<span class="keyword">null</span> &amp;&amp; valEquals(node.getValue(),entry.getValue()))&#123;</span><br><span class="line">                    m.deleteEntry(node);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// SubMap的迭代器</span></span><br><span class="line">        <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">SubMapIterator</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">            <span class="comment">// 上一次被返回的Entry</span></span><br><span class="line">            TreeMap.Entry&lt;K,V&gt; lastReturned;</span><br><span class="line">            <span class="comment">// 指向下一个Entry</span></span><br><span class="line">            TreeMap.Entry&lt;K,V&gt; next;</span><br><span class="line">            <span class="comment">// “栅栏key”。根据SubMap是“升序”还是“降序”具有不同的意义</span></span><br><span class="line">            <span class="keyword">final</span> K fenceKey;</span><br><span class="line">            <span class="keyword">int</span> expectedModCount;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 构造函数</span></span><br><span class="line">            SubMapIterator(TreeMap.Entry&lt;K,V&gt; first,</span><br><span class="line">                           TreeMap.Entry&lt;K,V&gt; fence) &#123;</span><br><span class="line">                <span class="comment">// 每创建一个SubMapIterator时，保存修改次数</span></span><br><span class="line">                <span class="comment">// 若后面发现expectedModCount和modCount不相等，则抛出ConcurrentModificationException异常。</span></span><br><span class="line">                <span class="comment">// 这就是所说的fast-fail机制的原理！</span></span><br><span class="line">                expectedModCount = m.modCount;</span><br><span class="line">                lastReturned = <span class="keyword">null</span>;</span><br><span class="line">                next = first;</span><br><span class="line">                fenceKey = fence == <span class="keyword">null</span> ? <span class="keyword">null</span> : fence.key;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 是否存在下一个Entry</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> next != <span class="keyword">null</span> &amp;&amp; next.key != fenceKey;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 返回下一个Entry</span></span><br><span class="line">            <span class="keyword">final</span> TreeMap.<span class="function">Entry&lt;K,V&gt; <span class="title">nextEntry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                TreeMap.Entry&lt;K,V&gt; e = next;</span><br><span class="line">                <span class="keyword">if</span> (e == <span class="keyword">null</span> || e.key == fenceKey)</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">                <span class="keyword">if</span> (m.modCount != expectedModCount)</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">                <span class="comment">// next指向e的后继节点</span></span><br><span class="line">                next = successor(e);</span><br><span class="line">        lastReturned = e;</span><br><span class="line">                <span class="keyword">return</span> e;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 返回上一个Entry</span></span><br><span class="line">            <span class="keyword">final</span> TreeMap.<span class="function">Entry&lt;K,V&gt; <span class="title">prevEntry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                TreeMap.Entry&lt;K,V&gt; e = next;</span><br><span class="line">                <span class="keyword">if</span> (e == <span class="keyword">null</span> || e.key == fenceKey)</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">                <span class="keyword">if</span> (m.modCount != expectedModCount)</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">                <span class="comment">// next指向e的前继节点</span></span><br><span class="line">                next = predecessor(e);</span><br><span class="line">        lastReturned = e;</span><br><span class="line">                <span class="keyword">return</span> e;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 删除当前节点(用于“升序的SubMap”)。</span></span><br><span class="line">            <span class="comment">// 删除之后，可以继续升序遍历；红黑树特性没变。</span></span><br><span class="line">            <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">removeAscending</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (lastReturned == <span class="keyword">null</span>)</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">                <span class="keyword">if</span> (m.modCount != expectedModCount)</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">                <span class="comment">// 这里重点强调一下“为什么当lastReturned的左右孩子都不为空时，要将其赋值给next”。</span></span><br><span class="line">                <span class="comment">// 目的是为了“删除lastReturned节点之后，next节点指向的仍然是下一个节点”。</span></span><br><span class="line">                <span class="comment">//     根据“红黑树”的特性可知：</span></span><br><span class="line">                <span class="comment">//     当被删除节点有两个儿子时。那么，首先把“它的后继节点的内容”复制给“该节点的内容”；之后，删除“它的后继节点”。</span></span><br><span class="line">                <span class="comment">//     这意味着“当被删除节点有两个儿子时，删除当前节点之后，'新的当前节点'实际上是‘原有的后继节点(即下一个节点)’”。</span></span><br><span class="line">                <span class="comment">//     而此时next仍然指向"新的当前节点"。也就是说next是仍然是指向下一个节点；能继续遍历红黑树。</span></span><br><span class="line">                <span class="keyword">if</span> (lastReturned.left != <span class="keyword">null</span> &amp;&amp; lastReturned.right != <span class="keyword">null</span>)</span><br><span class="line">                    next = lastReturned;</span><br><span class="line">                m.deleteEntry(lastReturned);</span><br><span class="line">                lastReturned = <span class="keyword">null</span>;</span><br><span class="line">                expectedModCount = m.modCount;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 删除当前节点(用于“降序的SubMap”)。</span></span><br><span class="line">            <span class="comment">// 删除之后，可以继续降序遍历；红黑树特性没变。</span></span><br><span class="line">            <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">removeDescending</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (lastReturned == <span class="keyword">null</span>)</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">                <span class="keyword">if</span> (m.modCount != expectedModCount)</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">                m.deleteEntry(lastReturned);</span><br><span class="line">                lastReturned = <span class="keyword">null</span>;</span><br><span class="line">                expectedModCount = m.modCount;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// SubMap的Entry迭代器，它只支持升序操作，继承于SubMapIterator</span></span><br><span class="line">        <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">SubMapEntryIterator</span> <span class="keyword">extends</span> <span class="title">SubMapIterator</span>&lt;<span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;&gt; </span>&#123;</span><br><span class="line">            SubMapEntryIterator(TreeMap.Entry&lt;K,V&gt; first,</span><br><span class="line">                                TreeMap.Entry&lt;K,V&gt; fence) &#123;</span><br><span class="line">                <span class="keyword">super</span>(first, fence);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 获取下一个节点(升序)</span></span><br><span class="line">            <span class="keyword">public</span> Map.<span class="function">Entry&lt;K,V&gt; <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> nextEntry();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 删除当前节点(升序)</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                removeAscending();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// SubMap的Key迭代器，它只支持升序操作，继承于SubMapIterator</span></span><br><span class="line">        <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">SubMapKeyIterator</span> <span class="keyword">extends</span> <span class="title">SubMapIterator</span>&lt;<span class="title">K</span>&gt; </span>&#123;</span><br><span class="line">            SubMapKeyIterator(TreeMap.Entry&lt;K,V&gt; first,</span><br><span class="line">                              TreeMap.Entry&lt;K,V&gt; fence) &#123;</span><br><span class="line">                <span class="keyword">super</span>(first, fence);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 获取下一个节点(升序)</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> K <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> nextEntry().key;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 删除当前节点(升序)</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                removeAscending();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 降序SubMap的Entry迭代器，它只支持降序操作，继承于SubMapIterator</span></span><br><span class="line">        <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DescendingSubMapEntryIterator</span> <span class="keyword">extends</span> <span class="title">SubMapIterator</span>&lt;<span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;&gt; </span>&#123;</span><br><span class="line">            DescendingSubMapEntryIterator(TreeMap.Entry&lt;K,V&gt; last,</span><br><span class="line">                                          TreeMap.Entry&lt;K,V&gt; fence) &#123;</span><br><span class="line">                <span class="keyword">super</span>(last, fence);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取下一个节点(降序)</span></span><br><span class="line">            <span class="keyword">public</span> Map.<span class="function">Entry&lt;K,V&gt; <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> prevEntry();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 删除当前节点(降序)</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                removeDescending();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 降序SubMap的Key迭代器，它只支持降序操作，继承于SubMapIterator</span></span><br><span class="line">        <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DescendingSubMapKeyIterator</span> <span class="keyword">extends</span> <span class="title">SubMapIterator</span>&lt;<span class="title">K</span>&gt; </span>&#123;</span><br><span class="line">            DescendingSubMapKeyIterator(TreeMap.Entry&lt;K,V&gt; last,</span><br><span class="line">                                        TreeMap.Entry&lt;K,V&gt; fence) &#123;</span><br><span class="line">                <span class="keyword">super</span>(last, fence);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 获取下一个节点(降序)</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> K <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> prevEntry().key;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 删除当前节点(降序)</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                removeDescending();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 升序的SubMap，继承于NavigableSubMap</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">AscendingSubMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">NavigableSubMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">912986545866124060L</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构造函数</span></span><br><span class="line">        AscendingSubMap(TreeMap&lt;K,V&gt; m,</span><br><span class="line">                        <span class="keyword">boolean</span> fromStart, K lo, <span class="keyword">boolean</span> loInclusive,</span><br><span class="line">                        <span class="keyword">boolean</span> toEnd,     K hi, <span class="keyword">boolean</span> hiInclusive) &#123;</span><br><span class="line">            <span class="keyword">super</span>(m, fromStart, lo, loInclusive, toEnd, hi, hiInclusive);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 比较器</span></span><br><span class="line">        <span class="keyword">public</span> Comparator&lt;? <span class="keyword">super</span> K&gt; comparator() &#123;</span><br><span class="line">            <span class="keyword">return</span> m.comparator();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取“子Map”。</span></span><br><span class="line">        <span class="comment">// 范围是从fromKey 到 toKey；fromInclusive是是否包含fromKey的标记，toInclusive是是否包含toKey的标记</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> NavigableMap&lt;K,V&gt; <span class="title">subMap</span><span class="params">(K fromKey, <span class="keyword">boolean</span> fromInclusive,</span></span></span><br><span class="line"><span class="function"><span class="params">                                        K toKey,   <span class="keyword">boolean</span> toInclusive)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!inRange(fromKey, fromInclusive))</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"fromKey out of range"</span>);</span><br><span class="line">            <span class="keyword">if</span> (!inRange(toKey, toInclusive))</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"toKey out of range"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> AscendingSubMap(m,</span><br><span class="line">                                       <span class="keyword">false</span>, fromKey, fromInclusive,</span><br><span class="line">                                       <span class="keyword">false</span>, toKey,   toInclusive);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取“Map的头部”。</span></span><br><span class="line">        <span class="comment">// 范围从第一个节点 到 toKey, inclusive是是否包含toKey的标记</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> NavigableMap&lt;K,V&gt; <span class="title">headMap</span><span class="params">(K toKey, <span class="keyword">boolean</span> inclusive)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!inRange(toKey, inclusive))</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"toKey out of range"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> AscendingSubMap(m,</span><br><span class="line">                                       fromStart, lo,    loInclusive,</span><br><span class="line">                                       <span class="keyword">false</span>,     toKey, inclusive);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取“Map的尾部”。</span></span><br><span class="line">        <span class="comment">// 范围是从 fromKey 到 最后一个节点，inclusive是是否包含fromKey的标记</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> NavigableMap&lt;K,V&gt; <span class="title">tailMap</span><span class="params">(K fromKey, <span class="keyword">boolean</span> inclusive)</span></span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!inRange(fromKey, inclusive))</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"fromKey out of range"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> AscendingSubMap(m,</span><br><span class="line">                                       <span class="keyword">false</span>, fromKey, inclusive,</span><br><span class="line">                                       toEnd, hi,      hiInclusive);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取对应的降序Map</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> NavigableMap&lt;K,V&gt; <span class="title">descendingMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            NavigableMap&lt;K,V&gt; mv = descendingMapView;</span><br><span class="line">            <span class="keyword">return</span> (mv != <span class="keyword">null</span>) ? mv :</span><br><span class="line">                (descendingMapView =</span><br><span class="line">                 <span class="keyword">new</span> DescendingSubMap(m,</span><br><span class="line">                                      fromStart, lo, loInclusive,</span><br><span class="line">                                      toEnd,     hi, hiInclusive));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回“升序Key迭代器”</span></span><br><span class="line">        <span class="function">Iterator&lt;K&gt; <span class="title">keyIterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SubMapKeyIterator(absLowest(), absHighFence());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回“降序Key迭代器”</span></span><br><span class="line">        <span class="function">Iterator&lt;K&gt; <span class="title">descendingKeyIterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> DescendingSubMapKeyIterator(absHighest(), absLowFence());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// “升序EntrySet集合”类</span></span><br><span class="line">        <span class="comment">// 实现了iterator()</span></span><br><span class="line">        <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">AscendingEntrySetView</span> <span class="keyword">extends</span> <span class="title">EntrySetView</span> </span>&#123;</span><br><span class="line">            <span class="keyword">public</span> Iterator&lt;Map.Entry&lt;K,V&gt;&gt; iterator() &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> SubMapEntryIterator(absLowest(), absHighFence());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回“升序EntrySet集合”</span></span><br><span class="line">        <span class="keyword">public</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet() &#123;</span><br><span class="line">            EntrySetView es = entrySetView;</span><br><span class="line">            <span class="keyword">return</span> (es != <span class="keyword">null</span>) ? es : <span class="keyword">new</span> AscendingEntrySetView();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        TreeMap.<span class="function">Entry&lt;K,V&gt; <span class="title">subLowest</span><span class="params">()</span>       </span>&#123; <span class="keyword">return</span> absLowest(); &#125;</span><br><span class="line">        TreeMap.<span class="function">Entry&lt;K,V&gt; <span class="title">subHighest</span><span class="params">()</span>      </span>&#123; <span class="keyword">return</span> absHighest(); &#125;</span><br><span class="line">        TreeMap.<span class="function">Entry&lt;K,V&gt; <span class="title">subCeiling</span><span class="params">(K key)</span> </span>&#123; <span class="keyword">return</span> absCeiling(key); &#125;</span><br><span class="line">        TreeMap.<span class="function">Entry&lt;K,V&gt; <span class="title">subHigher</span><span class="params">(K key)</span>  </span>&#123; <span class="keyword">return</span> absHigher(key); &#125;</span><br><span class="line">        TreeMap.<span class="function">Entry&lt;K,V&gt; <span class="title">subFloor</span><span class="params">(K key)</span>   </span>&#123; <span class="keyword">return</span> absFloor(key); &#125;</span><br><span class="line">        TreeMap.<span class="function">Entry&lt;K,V&gt; <span class="title">subLower</span><span class="params">(K key)</span>   </span>&#123; <span class="keyword">return</span> absLower(key); &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 降序的SubMap，继承于NavigableSubMap</span></span><br><span class="line">    <span class="comment">// 相比于升序SubMap，它的实现机制是将“SubMap的比较器反转”！</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DescendingSubMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;  <span class="keyword">extends</span> <span class="title">NavigableSubMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">912986545866120460L</span>;</span><br><span class="line">        DescendingSubMap(TreeMap&lt;K,V&gt; m,</span><br><span class="line">                        <span class="keyword">boolean</span> fromStart, K lo, <span class="keyword">boolean</span> loInclusive,</span><br><span class="line">                        <span class="keyword">boolean</span> toEnd,     K hi, <span class="keyword">boolean</span> hiInclusive) &#123;</span><br><span class="line">            <span class="keyword">super</span>(m, fromStart, lo, loInclusive, toEnd, hi, hiInclusive);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 反转的比较器：是将原始比较器反转得到的。</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Comparator&lt;? <span class="keyword">super</span> K&gt; reverseComparator =</span><br><span class="line">            Collections.reverseOrder(m.comparator);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取反转比较器</span></span><br><span class="line">        <span class="keyword">public</span> Comparator&lt;? <span class="keyword">super</span> K&gt; comparator() &#123;</span><br><span class="line">            <span class="keyword">return</span> reverseComparator;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取“子Map”。</span></span><br><span class="line">        <span class="comment">// 范围是从fromKey 到 toKey；fromInclusive是是否包含fromKey的标记，toInclusive是是否包含toKey的标记</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> NavigableMap&lt;K,V&gt; <span class="title">subMap</span><span class="params">(K fromKey, <span class="keyword">boolean</span> fromInclusive,</span></span></span><br><span class="line"><span class="function"><span class="params">                                        K toKey,   <span class="keyword">boolean</span> toInclusive)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!inRange(fromKey, fromInclusive))</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"fromKey out of range"</span>);</span><br><span class="line">            <span class="keyword">if</span> (!inRange(toKey, toInclusive))</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"toKey out of range"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> DescendingSubMap(m,</span><br><span class="line">                                        <span class="keyword">false</span>, toKey,   toInclusive,</span><br><span class="line">                                        <span class="keyword">false</span>, fromKey, fromInclusive);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取“Map的头部”。</span></span><br><span class="line">        <span class="comment">// 范围从第一个节点 到 toKey, inclusive是是否包含toKey的标记</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> NavigableMap&lt;K,V&gt; <span class="title">headMap</span><span class="params">(K toKey, <span class="keyword">boolean</span> inclusive)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!inRange(toKey, inclusive))</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"toKey out of range"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> DescendingSubMap(m,</span><br><span class="line">                                        <span class="keyword">false</span>, toKey, inclusive,</span><br><span class="line">                                        toEnd, hi,    hiInclusive);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取“Map的尾部”。</span></span><br><span class="line">        <span class="comment">// 范围是从 fromKey 到 最后一个节点，inclusive是是否包含fromKey的标记</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> NavigableMap&lt;K,V&gt; <span class="title">tailMap</span><span class="params">(K fromKey, <span class="keyword">boolean</span> inclusive)</span></span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!inRange(fromKey, inclusive))</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"fromKey out of range"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> DescendingSubMap(m,</span><br><span class="line">                                        fromStart, lo, loInclusive,</span><br><span class="line">                                        <span class="keyword">false</span>, fromKey, inclusive);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取对应的降序Map</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> NavigableMap&lt;K,V&gt; <span class="title">descendingMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            NavigableMap&lt;K,V&gt; mv = descendingMapView;</span><br><span class="line">            <span class="keyword">return</span> (mv != <span class="keyword">null</span>) ? mv :</span><br><span class="line">                (descendingMapView =</span><br><span class="line">                 <span class="keyword">new</span> AscendingSubMap(m,</span><br><span class="line">                                     fromStart, lo, loInclusive,</span><br><span class="line">                                     toEnd,     hi, hiInclusive));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回“升序Key迭代器”</span></span><br><span class="line">        <span class="function">Iterator&lt;K&gt; <span class="title">keyIterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> DescendingSubMapKeyIterator(absHighest(), absLowFence());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回“降序Key迭代器”</span></span><br><span class="line">        <span class="function">Iterator&lt;K&gt; <span class="title">descendingKeyIterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SubMapKeyIterator(absLowest(), absHighFence());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// “降序EntrySet集合”类</span></span><br><span class="line">        <span class="comment">// 实现了iterator()</span></span><br><span class="line">        <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DescendingEntrySetView</span> <span class="keyword">extends</span> <span class="title">EntrySetView</span> </span>&#123;</span><br><span class="line">            <span class="keyword">public</span> Iterator&lt;Map.Entry&lt;K,V&gt;&gt; iterator() &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> DescendingSubMapEntryIterator(absHighest(), absLowFence());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回“降序EntrySet集合”</span></span><br><span class="line">        <span class="keyword">public</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet() &#123;</span><br><span class="line">            EntrySetView es = entrySetView;</span><br><span class="line">            <span class="keyword">return</span> (es != <span class="keyword">null</span>) ? es : <span class="keyword">new</span> DescendingEntrySetView();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        TreeMap.<span class="function">Entry&lt;K,V&gt; <span class="title">subLowest</span><span class="params">()</span>       </span>&#123; <span class="keyword">return</span> absHighest(); &#125;</span><br><span class="line">        TreeMap.<span class="function">Entry&lt;K,V&gt; <span class="title">subHighest</span><span class="params">()</span>      </span>&#123; <span class="keyword">return</span> absLowest(); &#125;</span><br><span class="line">        TreeMap.<span class="function">Entry&lt;K,V&gt; <span class="title">subCeiling</span><span class="params">(K key)</span> </span>&#123; <span class="keyword">return</span> absFloor(key); &#125;</span><br><span class="line">        TreeMap.<span class="function">Entry&lt;K,V&gt; <span class="title">subHigher</span><span class="params">(K key)</span>  </span>&#123; <span class="keyword">return</span> absLower(key); &#125;</span><br><span class="line">        TreeMap.<span class="function">Entry&lt;K,V&gt; <span class="title">subFloor</span><span class="params">(K key)</span>   </span>&#123; <span class="keyword">return</span> absCeiling(key); &#125;</span><br><span class="line">        TreeMap.<span class="function">Entry&lt;K,V&gt; <span class="title">subLower</span><span class="params">(K key)</span>   </span>&#123; <span class="keyword">return</span> absHigher(key); &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// SubMap是旧版本的类，新的Java中没有用到。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">SubMap</span> <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">SortedMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">6520786458950516097L</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">boolean</span> fromStart = <span class="keyword">false</span>, toEnd = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">private</span> K fromKey, toKey;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> Object <span class="title">readResolve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> AscendingSubMap(TreeMap.<span class="keyword">this</span>,</span><br><span class="line">                                       fromStart, fromKey, <span class="keyword">true</span>,</span><br><span class="line">                                       toEnd, toKey, <span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet() &#123; <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(); &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> K <span class="title">lastKey</span><span class="params">()</span> </span>&#123; <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(); &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> K <span class="title">firstKey</span><span class="params">()</span> </span>&#123; <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(); &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> SortedMap&lt;K,V&gt; <span class="title">subMap</span><span class="params">(K fromKey, K toKey)</span> </span>&#123; <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(); &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> SortedMap&lt;K,V&gt; <span class="title">headMap</span><span class="params">(K toKey)</span> </span>&#123; <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(); &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> SortedMap&lt;K,V&gt; <span class="title">tailMap</span><span class="params">(K fromKey)</span> </span>&#123; <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(); &#125;</span><br><span class="line">        <span class="keyword">public</span> Comparator&lt;? <span class="keyword">super</span> K&gt; comparator() &#123; <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(); &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 红黑树的节点颜色--红色</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> RED   = <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">// 红黑树的节点颜色--黑色</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> BLACK = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// “红黑树的节点”对应的类。</span></span><br><span class="line">    <span class="comment">// 包含了 key(键)、value(值)、left(左孩子)、right(右孩子)、parent(父节点)、color(颜色)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        <span class="comment">// 键</span></span><br><span class="line">        K key;</span><br><span class="line">        <span class="comment">// 值</span></span><br><span class="line">        V value;</span><br><span class="line">        <span class="comment">// 左孩子</span></span><br><span class="line">        Entry&lt;K,V&gt; left = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 右孩子</span></span><br><span class="line">        Entry&lt;K,V&gt; right = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 父节点</span></span><br><span class="line">        Entry&lt;K,V&gt; parent;</span><br><span class="line">        <span class="comment">// 当前节点颜色</span></span><br><span class="line">        <span class="keyword">boolean</span> color = BLACK;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构造函数</span></span><br><span class="line">        Entry(K key, V value, Entry&lt;K,V&gt; parent) &#123;</span><br><span class="line">            <span class="keyword">this</span>.key = key;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">            <span class="keyword">this</span>.parent = parent;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回“键”</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> K <span class="title">getKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> key;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回“值”</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> V <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 更新“值”，返回旧的值</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> V <span class="title">setValue</span><span class="params">(V value)</span> </span>&#123;</span><br><span class="line">            V oldValue = <span class="keyword">this</span>.value;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断两个节点是否相等的函数，覆盖equals()函数。</span></span><br><span class="line">        <span class="comment">// 若两个节点的“key相等”并且“value相等”，则两个节点相等</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Map.Entry))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;)o;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> valEquals(key,e.getKey()) &amp;&amp; valEquals(value,e.getValue());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 覆盖hashCode函数。</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> keyHash = (key==<span class="keyword">null</span> ? <span class="number">0</span> : key.hashCode());</span><br><span class="line">            <span class="keyword">int</span> valueHash = (value==<span class="keyword">null</span> ? <span class="number">0</span> : value.hashCode());</span><br><span class="line">            <span class="keyword">return</span> keyHash ^ valueHash;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 覆盖toString()函数。</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> key + <span class="string">"="</span> + value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回“红黑树的第一个节点”</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> Entry&lt;K,V&gt; <span class="title">getFirstEntry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Entry&lt;K,V&gt; p = root;</span><br><span class="line">        <span class="keyword">if</span> (p != <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">while</span> (p.left != <span class="keyword">null</span>)</span><br><span class="line">                p = p.left;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回“红黑树的最后一个节点”</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> Entry&lt;K,V&gt; <span class="title">getLastEntry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Entry&lt;K,V&gt; p = root;</span><br><span class="line">        <span class="keyword">if</span> (p != <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">while</span> (p.right != <span class="keyword">null</span>)</span><br><span class="line">                p = p.right;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回“节点t的后继节点”</span></span><br><span class="line">    <span class="keyword">static</span> &lt;K,V&gt; TreeMap.<span class="function">Entry&lt;K,V&gt; <span class="title">successor</span><span class="params">(Entry&lt;K,V&gt; t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (t == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (t.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Entry&lt;K,V&gt; p = t.right;</span><br><span class="line">            <span class="keyword">while</span> (p.left != <span class="keyword">null</span>)</span><br><span class="line">                p = p.left;</span><br><span class="line">            <span class="keyword">return</span> p;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Entry&lt;K,V&gt; p = t.parent;</span><br><span class="line">            Entry&lt;K,V&gt; ch = t;</span><br><span class="line">            <span class="keyword">while</span> (p != <span class="keyword">null</span> &amp;&amp; ch == p.right) &#123;</span><br><span class="line">                ch = p;</span><br><span class="line">                p = p.parent;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回“节点t的前继节点”</span></span><br><span class="line">    <span class="keyword">static</span> &lt;K,V&gt; <span class="function">Entry&lt;K,V&gt; <span class="title">predecessor</span><span class="params">(Entry&lt;K,V&gt; t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (t == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (t.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Entry&lt;K,V&gt; p = t.left;</span><br><span class="line">            <span class="keyword">while</span> (p.right != <span class="keyword">null</span>)</span><br><span class="line">                p = p.right;</span><br><span class="line">            <span class="keyword">return</span> p;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Entry&lt;K,V&gt; p = t.parent;</span><br><span class="line">            Entry&lt;K,V&gt; ch = t;</span><br><span class="line">            <span class="keyword">while</span> (p != <span class="keyword">null</span> &amp;&amp; ch == p.left) &#123;</span><br><span class="line">                ch = p;</span><br><span class="line">                p = p.parent;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回“节点p的颜色”</span></span><br><span class="line">    <span class="comment">// 根据“红黑树的特性”可知：空节点颜色是黑色。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> &lt;K,V&gt; <span class="function"><span class="keyword">boolean</span> <span class="title">colorOf</span><span class="params">(Entry&lt;K,V&gt; p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (p == <span class="keyword">null</span> ? BLACK : p.color);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回“节点p的父节点”</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> &lt;K,V&gt; <span class="function">Entry&lt;K,V&gt; <span class="title">parentOf</span><span class="params">(Entry&lt;K,V&gt; p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (p == <span class="keyword">null</span> ? <span class="keyword">null</span>: p.parent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置“节点p的颜色为c”</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> &lt;K,V&gt; <span class="function"><span class="keyword">void</span> <span class="title">setColor</span><span class="params">(Entry&lt;K,V&gt; p, <span class="keyword">boolean</span> c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (p != <span class="keyword">null</span>)</span><br><span class="line">        p.color = c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置“节点p的左孩子”</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> &lt;K,V&gt; <span class="function">Entry&lt;K,V&gt; <span class="title">leftOf</span><span class="params">(Entry&lt;K,V&gt; p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (p == <span class="keyword">null</span>) ? <span class="keyword">null</span>: p.left;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置“节点p的右孩子”</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> &lt;K,V&gt; <span class="function">Entry&lt;K,V&gt; <span class="title">rightOf</span><span class="params">(Entry&lt;K,V&gt; p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (p == <span class="keyword">null</span>) ? <span class="keyword">null</span>: p.right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对节点p执行“左旋”操作</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rotateLeft</span><span class="params">(Entry&lt;K,V&gt; p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Entry&lt;K,V&gt; r = p.right;</span><br><span class="line">            p.right = r.left;</span><br><span class="line">            <span class="keyword">if</span> (r.left != <span class="keyword">null</span>)</span><br><span class="line">                r.left.parent = p;</span><br><span class="line">            r.parent = p.parent;</span><br><span class="line">            <span class="keyword">if</span> (p.parent == <span class="keyword">null</span>)</span><br><span class="line">                root = r;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (p.parent.left == p)</span><br><span class="line">                p.parent.left = r;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                p.parent.right = r;</span><br><span class="line">            r.left = p;</span><br><span class="line">            p.parent = r;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对节点p执行“右旋”操作</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rotateRight</span><span class="params">(Entry&lt;K,V&gt; p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Entry&lt;K,V&gt; l = p.left;</span><br><span class="line">            p.left = l.right;</span><br><span class="line">            <span class="keyword">if</span> (l.right != <span class="keyword">null</span>) l.right.parent = p;</span><br><span class="line">            l.parent = p.parent;</span><br><span class="line">            <span class="keyword">if</span> (p.parent == <span class="keyword">null</span>)</span><br><span class="line">                root = l;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (p.parent.right == p)</span><br><span class="line">                p.parent.right = l;</span><br><span class="line">            <span class="keyword">else</span> p.parent.left = l;</span><br><span class="line">            l.right = p;</span><br><span class="line">            p.parent = l;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 插入之后的修正操作。</span></span><br><span class="line">    <span class="comment">// 目的是保证：红黑树插入节点之后，仍然是一颗红黑树</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">fixAfterInsertion</span><span class="params">(Entry&lt;K,V&gt; x)</span> </span>&#123;</span><br><span class="line">        x.color = RED;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (x != <span class="keyword">null</span> &amp;&amp; x != root &amp;&amp; x.parent.color == RED) &#123;</span><br><span class="line">            <span class="keyword">if</span> (parentOf(x) == leftOf(parentOf(parentOf(x)))) &#123;</span><br><span class="line">                Entry&lt;K,V&gt; y = rightOf(parentOf(parentOf(x)));</span><br><span class="line">                <span class="keyword">if</span> (colorOf(y) == RED) &#123;</span><br><span class="line">                    setColor(parentOf(x), BLACK);</span><br><span class="line">                    setColor(y, BLACK);</span><br><span class="line">                    setColor(parentOf(parentOf(x)), RED);</span><br><span class="line">                    x = parentOf(parentOf(x));</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (x == rightOf(parentOf(x))) &#123;</span><br><span class="line">                        x = parentOf(x);</span><br><span class="line">                        rotateLeft(x);</span><br><span class="line">                    &#125;</span><br><span class="line">                    setColor(parentOf(x), BLACK);</span><br><span class="line">                    setColor(parentOf(parentOf(x)), RED);</span><br><span class="line">                    rotateRight(parentOf(parentOf(x)));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Entry&lt;K,V&gt; y = leftOf(parentOf(parentOf(x)));</span><br><span class="line">                <span class="keyword">if</span> (colorOf(y) == RED) &#123;</span><br><span class="line">                    setColor(parentOf(x), BLACK);</span><br><span class="line">                    setColor(y, BLACK);</span><br><span class="line">                    setColor(parentOf(parentOf(x)), RED);</span><br><span class="line">                    x = parentOf(parentOf(x));</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (x == leftOf(parentOf(x))) &#123;</span><br><span class="line">                        x = parentOf(x);</span><br><span class="line">                        rotateRight(x);</span><br><span class="line">                    &#125;</span><br><span class="line">                    setColor(parentOf(x), BLACK);</span><br><span class="line">                    setColor(parentOf(parentOf(x)), RED);</span><br><span class="line">                    rotateLeft(parentOf(parentOf(x)));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        root.color = BLACK;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除“红黑树的节点p”</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">deleteEntry</span><span class="params">(Entry&lt;K,V&gt; p)</span> </span>&#123;</span><br><span class="line">        modCount++;</span><br><span class="line">        size--;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If strictly internal, copy successor's element to p and then make p</span></span><br><span class="line">        <span class="comment">// point to successor.</span></span><br><span class="line">        <span class="keyword">if</span> (p.left != <span class="keyword">null</span> &amp;&amp; p.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Entry&lt;K,V&gt; s = successor (p);</span><br><span class="line">            p.key = s.key;</span><br><span class="line">            p.value = s.value;</span><br><span class="line">            p = s;</span><br><span class="line">        &#125; <span class="comment">// p has 2 children</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Start fixup at replacement node, if it exists.</span></span><br><span class="line">        Entry&lt;K,V&gt; replacement = (p.left != <span class="keyword">null</span> ? p.left : p.right);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (replacement != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// Link replacement to parent</span></span><br><span class="line">            replacement.parent = p.parent;</span><br><span class="line">            <span class="keyword">if</span> (p.parent == <span class="keyword">null</span>)</span><br><span class="line">                root = replacement;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (p == p.parent.left)</span><br><span class="line">                p.parent.left  = replacement;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                p.parent.right = replacement;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Null out links so they are OK to use by fixAfterDeletion.</span></span><br><span class="line">            p.left = p.right = p.parent = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Fix replacement</span></span><br><span class="line">            <span class="keyword">if</span> (p.color == BLACK)</span><br><span class="line">                fixAfterDeletion(replacement);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p.parent == <span class="keyword">null</span>) &#123; <span class="comment">// return if we are the only node.</span></span><br><span class="line">            root = <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">//  No children. Use self as phantom replacement and unlink.</span></span><br><span class="line">            <span class="keyword">if</span> (p.color == BLACK)</span><br><span class="line">                fixAfterDeletion(p);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (p.parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (p == p.parent.left)</span><br><span class="line">                    p.parent.left = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (p == p.parent.right)</span><br><span class="line">                    p.parent.right = <span class="keyword">null</span>;</span><br><span class="line">                p.parent = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除之后的修正操作。</span></span><br><span class="line">    <span class="comment">// 目的是保证：红黑树删除节点之后，仍然是一颗红黑树</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">fixAfterDeletion</span><span class="params">(Entry&lt;K,V&gt; x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (x != root &amp;&amp; colorOf(x) == BLACK) &#123;</span><br><span class="line">            <span class="keyword">if</span> (x == leftOf(parentOf(x))) &#123;</span><br><span class="line">                Entry&lt;K,V&gt; sib = rightOf(parentOf(x));</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (colorOf(sib) == RED) &#123;</span><br><span class="line">                    setColor(sib, BLACK);</span><br><span class="line">                    setColor(parentOf(x), RED);</span><br><span class="line">                    rotateLeft(parentOf(x));</span><br><span class="line">                    sib = rightOf(parentOf(x));</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (colorOf(leftOf(sib))  == BLACK &amp;&amp;</span><br><span class="line">                    colorOf(rightOf(sib)) == BLACK) &#123;</span><br><span class="line">                    setColor(sib, RED);</span><br><span class="line">                    x = parentOf(x);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (colorOf(rightOf(sib)) == BLACK) &#123;</span><br><span class="line">                        setColor(leftOf(sib), BLACK);</span><br><span class="line">                        setColor(sib, RED);</span><br><span class="line">                        rotateRight(sib);</span><br><span class="line">                        sib = rightOf(parentOf(x));</span><br><span class="line">                    &#125;</span><br><span class="line">                    setColor(sib, colorOf(parentOf(x)));</span><br><span class="line">                    setColor(parentOf(x), BLACK);</span><br><span class="line">                    setColor(rightOf(sib), BLACK);</span><br><span class="line">                    rotateLeft(parentOf(x));</span><br><span class="line">                    x = root;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// symmetric</span></span><br><span class="line">                Entry&lt;K,V&gt; sib = leftOf(parentOf(x));</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (colorOf(sib) == RED) &#123;</span><br><span class="line">                    setColor(sib, BLACK);</span><br><span class="line">                    setColor(parentOf(x), RED);</span><br><span class="line">                    rotateRight(parentOf(x));</span><br><span class="line">                    sib = leftOf(parentOf(x));</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (colorOf(rightOf(sib)) == BLACK &amp;&amp;</span><br><span class="line">                    colorOf(leftOf(sib)) == BLACK) &#123;</span><br><span class="line">                    setColor(sib, RED);</span><br><span class="line">                    x = parentOf(x);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (colorOf(leftOf(sib)) == BLACK) &#123;</span><br><span class="line">                        setColor(rightOf(sib), BLACK);</span><br><span class="line">                        setColor(sib, RED);</span><br><span class="line">                        rotateLeft(sib);</span><br><span class="line">                        sib = leftOf(parentOf(x));</span><br><span class="line">                    &#125;</span><br><span class="line">                    setColor(sib, colorOf(parentOf(x)));</span><br><span class="line">                    setColor(parentOf(x), BLACK);</span><br><span class="line">                    setColor(leftOf(sib), BLACK);</span><br><span class="line">                    rotateRight(parentOf(x));</span><br><span class="line">                    x = root;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        setColor(x, BLACK);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">919286545866124006L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// java.io.Serializable的写入函数</span></span><br><span class="line">    <span class="comment">// 将TreeMap的“容量，所有的Entry”都写入到输出流中</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeObject</span><span class="params">(java.io.ObjectOutputStream s)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> java.io.IOException </span>&#123;</span><br><span class="line">        <span class="comment">// Write out the Comparator and any hidden stuff</span></span><br><span class="line">        s.defaultWriteObject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Write out size (number of Mappings)</span></span><br><span class="line">        s.writeInt(size);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Write out keys and values (alternating)</span></span><br><span class="line">        <span class="keyword">for</span> (Iterator&lt;Map.Entry&lt;K,V&gt;&gt; i = entrySet().iterator(); i.hasNext(); ) &#123;</span><br><span class="line">            Map.Entry&lt;K,V&gt; e = i.next();</span><br><span class="line">            s.writeObject(e.getKey());</span><br><span class="line">            s.writeObject(e.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// java.io.Serializable的读取函数：根据写入方式读出</span></span><br><span class="line">    <span class="comment">// 先将TreeMap的“容量、所有的Entry”依次读出</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(<span class="keyword">final</span> java.io.ObjectInputStream s)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">// Read in the Comparator and any hidden stuff</span></span><br><span class="line">        s.defaultReadObject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Read in size</span></span><br><span class="line">        <span class="keyword">int</span> size = s.readInt();</span><br><span class="line"></span><br><span class="line">        buildFromSorted(size, <span class="keyword">null</span>, s, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据已经一个排好序的map创建一个TreeMap</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">buildFromSorted</span><span class="params">(<span class="keyword">int</span> size, Iterator it,</span></span></span><br><span class="line"><span class="function"><span class="params">                 java.io.ObjectInputStream str,</span></span></span><br><span class="line"><span class="function"><span class="params">                 V defaultVal)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span>  java.io.IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.size = size;</span><br><span class="line">        root = buildFromSorted(<span class="number">0</span>, <span class="number">0</span>, size-<span class="number">1</span>, computeRedLevel(size),</span><br><span class="line">                   it, str, defaultVal);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据已经一个排好序的map创建一个TreeMap</span></span><br><span class="line">    <span class="comment">// 将map中的元素逐个添加到TreeMap中，并返回map的中间元素作为根节点。</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">final</span> Entry&lt;K,V&gt; <span class="title">buildFromSorted</span><span class="params">(<span class="keyword">int</span> level, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi,</span></span></span><br><span class="line"><span class="function"><span class="params">                         <span class="keyword">int</span> redLevel,</span></span></span><br><span class="line"><span class="function"><span class="params">                         Iterator it,</span></span></span><br><span class="line"><span class="function"><span class="params">                         java.io.ObjectInputStream str,</span></span></span><br><span class="line"><span class="function"><span class="params">                         V defaultVal)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span>  java.io.IOException, ClassNotFoundException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (hi &lt; lo) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">      </span><br><span class="line">        <span class="comment">// 获取中间元素</span></span><br><span class="line">        <span class="keyword">int</span> mid = (lo + hi) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        Entry&lt;K,V&gt; left  = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 若lo小于mid，则递归调用获取(middel的)左孩子。</span></span><br><span class="line">        <span class="keyword">if</span> (lo &lt; mid)</span><br><span class="line">            left = buildFromSorted(level+<span class="number">1</span>, lo, mid - <span class="number">1</span>, redLevel,</span><br><span class="line">                   it, str, defaultVal);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取middle节点对应的key和value</span></span><br><span class="line">        K key;</span><br><span class="line">        V value;</span><br><span class="line">        <span class="keyword">if</span> (it != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (defaultVal==<span class="keyword">null</span>) &#123;</span><br><span class="line">                Map.Entry&lt;K,V&gt; entry = (Map.Entry&lt;K,V&gt;)it.next();</span><br><span class="line">                key = entry.getKey();</span><br><span class="line">                value = entry.getValue();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                key = (K)it.next();</span><br><span class="line">                value = defaultVal;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// use stream</span></span><br><span class="line">            key = (K) str.readObject();</span><br><span class="line">            value = (defaultVal != <span class="keyword">null</span> ? defaultVal : (V) str.readObject());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建middle节点</span></span><br><span class="line">        Entry&lt;K,V&gt; middle =  <span class="keyword">new</span> Entry&lt;K,V&gt;(key, value, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 若当前节点的深度=红色节点的深度，则将节点着色为红色。</span></span><br><span class="line">        <span class="keyword">if</span> (level == redLevel)</span><br><span class="line">            middle.color = RED;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置middle为left的父亲，left为middle的左孩子</span></span><br><span class="line">        <span class="keyword">if</span> (left != <span class="keyword">null</span>) &#123;</span><br><span class="line">            middle.left = left;</span><br><span class="line">            left.parent = middle;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mid &lt; hi) &#123;</span><br><span class="line">            <span class="comment">// 递归调用获取(middel的)右孩子。</span></span><br><span class="line">            Entry&lt;K,V&gt; right = buildFromSorted(level+<span class="number">1</span>, mid+<span class="number">1</span>, hi, redLevel,</span><br><span class="line">                           it, str, defaultVal);</span><br><span class="line">            <span class="comment">// 设置middle为left的父亲，left为middle的左孩子</span></span><br><span class="line">            middle.right = right;</span><br><span class="line">            right.parent = middle;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> middle;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算节点树为sz的最大深度，也是红色节点的深度值。</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">computeRedLevel</span><span class="params">(<span class="keyword">int</span> sz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> level = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> m = sz - <span class="number">1</span>; m &gt;= <span class="number">0</span>; m = m / <span class="number">2</span> - <span class="number">1</span>)</span><br><span class="line">            level++;</span><br><span class="line">        <span class="keyword">return</span> level;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="TreeMap的红黑树相关内容"><a href="#TreeMap的红黑树相关内容" class="headerlink" title="TreeMap的红黑树相关内容"></a>TreeMap的红黑树相关内容</h2><p>TreeMap中于红黑树相关的主要函数有:</p><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><h4 id="红黑树的节点颜色–红色"><a href="#红黑树的节点颜色–红色" class="headerlink" title="红黑树的节点颜色–红色"></a>红黑树的节点颜色–红色</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> RED = <span class="keyword">false</span>;</span><br></pre></td></tr></table></figure><h4 id="红黑树的节点颜色–黑色"><a href="#红黑树的节点颜色–黑色" class="headerlink" title="红黑树的节点颜色–黑色"></a>红黑树的节点颜色–黑色</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> BLACK = <span class="keyword">true</span>;</span><br></pre></td></tr></table></figure><h4 id="“红黑树的节点”对应的类。"><a href="#“红黑树的节点”对应的类。" class="headerlink" title="“红黑树的节点”对应的类。"></a>“红黑树的节点”对应的类。</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123; ... &#125;</span><br><span class="line">Entry包含了<span class="number">6</span>个部分内容：key(键)、value(值)、left(左孩子)、right(右孩子)、parent(父节点)、color(颜色)</span><br><span class="line">Entry节点根据key进行排序，Entry节点包含的内容为value。</span><br></pre></td></tr></table></figure><h3 id="相关操作"><a href="#相关操作" class="headerlink" title="相关操作"></a>相关操作</h3><h4 id="左旋"><a href="#左旋" class="headerlink" title="左旋"></a>左旋</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rotateLeft</span><span class="params">(Entry&lt;K,V&gt; p)</span> </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure><h4 id="右旋"><a href="#右旋" class="headerlink" title="右旋"></a>右旋</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rotateRight</span><span class="params">(Entry&lt;K,V&gt; p)</span> </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure><h4 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure><h4 id="插入修正操作"><a href="#插入修正操作" class="headerlink" title="插入修正操作"></a>插入修正操作</h4><p>红黑树执行插入操作之后，要执行“插入修正操作”。<br>目的是：保红黑树在进行插入节点之后，仍然是一颗红黑树<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">fixAfterInsertion</span><span class="params">(Entry&lt;K,V&gt; x)</span> </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure></p><h4 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">deleteEntry</span><span class="params">(Entry&lt;K,V&gt; p)</span> </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure><h4 id="删除修正操作"><a href="#删除修正操作" class="headerlink" title="删除修正操作"></a>删除修正操作</h4><p>红黑树执行删除之后，要执行“删除修正操作”。<br>目的是保证：红黑树删除节点之后，仍然是一颗红黑树</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">fixAfterDeletion</span><span class="params">(Entry&lt;K,V&gt; x)</span> </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure><p>关于红黑树部分，这里主要是指出了TreeMap中那些是红黑树的主要相关内容。具体的红黑树相关操作API，这里没有详细说明，因为它们仅仅只是将算法翻译成代码。读者可以参考“红黑树(一) 原理和算法详细介绍”进行了解。</p><h2 id="TreeMap的构造函数-1"><a href="#TreeMap的构造函数-1" class="headerlink" title="TreeMap的构造函数"></a>TreeMap的构造函数</h2><h3 id="默认构造函数"><a href="#默认构造函数" class="headerlink" title="默认构造函数"></a>默认构造函数</h3><p>使用默认构造函数构造TreeMap时，使用java的默认的比较器比较Key的大小，从而对TreeMap进行排序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TreeMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    comparator = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="带比较器的构造函数"><a href="#带比较器的构造函数" class="headerlink" title="带比较器的构造函数"></a>带比较器的构造函数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TreeMap</span><span class="params">(Comparator&lt;? <span class="keyword">super</span> K&gt; comparator)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.comparator = comparator;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="带Map的构造函数，Map会成为TreeMap的子集"><a href="#带Map的构造函数，Map会成为TreeMap的子集" class="headerlink" title="带Map的构造函数，Map会成为TreeMap的子集"></a>带Map的构造函数，Map会成为TreeMap的子集</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TreeMap</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;</span><br><span class="line">    comparator = <span class="keyword">null</span>;</span><br><span class="line">    putAll(m);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该构造函数会调用putAll()将m中的所有元素添加到TreeMap中。putAll()源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">putAll</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;? extends K, ? extends V&gt; e : m.entrySet())</span><br><span class="line">        put(e.getKey(), e.getValue());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从中，我们可以看出putAll()就是将m中的key-value逐个的添加到TreeMap中。</p><h3 id="带SortedMap的构造函数，SortedMap会成为TreeMap的子集"><a href="#带SortedMap的构造函数，SortedMap会成为TreeMap的子集" class="headerlink" title="带SortedMap的构造函数，SortedMap会成为TreeMap的子集"></a>带SortedMap的构造函数，SortedMap会成为TreeMap的子集</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TreeMap</span><span class="params">(SortedMap&lt;K, ? extends V&gt; m)</span> </span>&#123;</span><br><span class="line">    comparator = m.comparator();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        buildFromSorted(m.size(), m.entrySet().iterator(), <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (java.io.IOException cannotHappen) &#123;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException cannotHappen) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该构造函数不同于上一个构造函数，在上一个构造函数中传入的参数是Map，Map不是有序的，所以要逐个添加。<br>而该构造函数的参数是SortedMap是一个有序的Map，我们通过buildFromSorted()来创建对应的Map。<br>buildFromSorted涉及到的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据已经一个排好序的map创建一个TreeMap</span></span><br><span class="line">    <span class="comment">// 将map中的元素逐个添加到TreeMap中，并返回map的中间元素作为根节点。</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">final</span> Entry&lt;K,V&gt; <span class="title">buildFromSorted</span><span class="params">(<span class="keyword">int</span> level, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi,</span></span></span><br><span class="line"><span class="function"><span class="params">                         <span class="keyword">int</span> redLevel,</span></span></span><br><span class="line"><span class="function"><span class="params">                         Iterator it,</span></span></span><br><span class="line"><span class="function"><span class="params">                         java.io.ObjectInputStream str,</span></span></span><br><span class="line"><span class="function"><span class="params">                         V defaultVal)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span>  java.io.IOException, ClassNotFoundException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (hi &lt; lo) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">      </span><br><span class="line">        <span class="comment">// 获取中间元素</span></span><br><span class="line">        <span class="keyword">int</span> mid = (lo + hi) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        Entry&lt;K,V&gt; left  = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 若lo小于mid，则递归调用获取(middel的)左孩子。</span></span><br><span class="line">        <span class="keyword">if</span> (lo &lt; mid)</span><br><span class="line">            left = buildFromSorted(level+<span class="number">1</span>, lo, mid - <span class="number">1</span>, redLevel,</span><br><span class="line">                   it, str, defaultVal);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取middle节点对应的key和value</span></span><br><span class="line">        K key;</span><br><span class="line">        V value;</span><br><span class="line">        <span class="keyword">if</span> (it != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (defaultVal==<span class="keyword">null</span>) &#123;</span><br><span class="line">                Map.Entry&lt;K,V&gt; entry = (Map.Entry&lt;K,V&gt;)it.next();</span><br><span class="line">                key = entry.getKey();</span><br><span class="line">                value = entry.getValue();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                key = (K)it.next();</span><br><span class="line">                value = defaultVal;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// use stream</span></span><br><span class="line">            key = (K) str.readObject();</span><br><span class="line">            value = (defaultVal != <span class="keyword">null</span> ? defaultVal : (V) str.readObject());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建middle节点</span></span><br><span class="line">        Entry&lt;K,V&gt; middle =  <span class="keyword">new</span> Entry&lt;K,V&gt;(key, value, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 若当前节点的深度=红色节点的深度，则将节点着色为红色。</span></span><br><span class="line">        <span class="keyword">if</span> (level == redLevel)</span><br><span class="line">            middle.color = RED;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置middle为left的父亲，left为middle的左孩子</span></span><br><span class="line">        <span class="keyword">if</span> (left != <span class="keyword">null</span>) &#123;</span><br><span class="line">            middle.left = left;</span><br><span class="line">            left.parent = middle;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mid &lt; hi) &#123;</span><br><span class="line">            <span class="comment">// 递归调用获取(middel的)右孩子。</span></span><br><span class="line">            Entry&lt;K,V&gt; right = buildFromSorted(level+<span class="number">1</span>, mid+<span class="number">1</span>, hi, redLevel,</span><br><span class="line">                           it, str, defaultVal);</span><br><span class="line">            <span class="comment">// 设置middle为left的父亲，left为middle的左孩子</span></span><br><span class="line">            middle.right = right;</span><br><span class="line">            right.parent = middle;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> middle;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>要理解buildFromSorted，重点说明以下几点：</p><p>第一，buildFromSorted是通过递归将SortedMap中的元素逐个关联。<br>第二，buildFromSorted返回middle节点(中间节点)作为root。<br>第三，buildFromSorted添加到红黑树中时，只将level == redLevel的节点设为红色。第level级节点，实际上是buildFromSorted转换成红黑树后的最底端(假设根节点在最上方)的节点；只将红黑树最底端的阶段着色为红色，其余都是黑色。</p><h2 id="TreeMap的Entry相关函数"><a href="#TreeMap的Entry相关函数" class="headerlink" title="TreeMap的Entry相关函数"></a>TreeMap的Entry相关函数</h2><p>TreeMap的 firstEntry()、 lastEntry()、 lowerEntry()、 higherEntry()、 floorEntry()、 ceilingEntry()、 pollFirstEntry() 、 pollLastEntry() 原理都是类似的；下面以firstEntry()来进行详细说明</p><p>我们先看看firstEntry()和getFirstEntry()的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Map.<span class="function">Entry&lt;K,V&gt; <span class="title">firstEntry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> exportEntry(getFirstEntry());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">final</span> Entry&lt;K,V&gt; <span class="title">getFirstEntry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Entry&lt;K,V&gt; p = root;</span><br><span class="line">    <span class="keyword">if</span> (p != <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">while</span> (p.left != <span class="keyword">null</span>)</span><br><span class="line">            p = p.left;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从中，我们可以看出 firstEntry() 和 getFirstEntry() 都是用于获取第一个节点。<br>但是，firstEntry() 是对外接口； getFirstEntry() 是内部接口。而且，firstEntry() 是通过 getFirstEntry() 来实现的。那为什么外界不能直接调用 getFirstEntry()，而需要多此一举的调用 firstEntry() 呢?<br>先告诉大家原因，再进行详细说明。这么做的目的是：防止用户修改返回的Entry。getFirstEntry()返回的Entry是可以被修改的，但是经过firstEntry()返回的Entry不能被修改，只可以读取Entry的key值和value值。下面我们看看到底是如何实现的。</p><p>(01) getFirstEntry()返回的是Entry节点，而Entry是红黑树的节点，它的源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回“红黑树的第一个节点”</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> Entry&lt;K,V&gt; <span class="title">getFirstEntry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Entry&lt;K,V&gt; p = root;</span><br><span class="line">    <span class="keyword">if</span> (p != <span class="keyword">null</span>)</span><br><span class="line">    <span class="keyword">while</span> (p.left != <span class="keyword">null</span>)</span><br><span class="line">            p = p.left;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从中，我们可以调用Entry的getKey()、getValue()来获取key和value值，以及调用setValue()来修改value的值。</p><p>(02) firstEntry()返回的是exportEntry(getFirstEntry())。下面我们看看exportEntry()干了些什么？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &lt;K,V&gt; Map.<span class="function">Entry&lt;K,V&gt; <span class="title">exportEntry</span><span class="params">(TreeMap.Entry&lt;K,V&gt; e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> e == <span class="keyword">null</span>? <span class="keyword">null</span> :</span><br><span class="line">        <span class="keyword">new</span> AbstractMap.SimpleImmutableEntry&lt;K,V&gt;(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上，exportEntry() 是新建一个AbstractMap.SimpleImmutableEntry类型的对象，并返回。</p><p>SimpleImmutableEntry的实现在AbstractMap.java中，下面我们看看AbstractMap.SimpleImmutableEntry是如何实现的，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleImmutableEntry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">implements</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">7138329143949025153L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> K key;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> V value;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SimpleImmutableEntry</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.key   = key;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SimpleImmutableEntry</span><span class="params">(Entry&lt;? extends K, ? extends V&gt; entry)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.key   = entry.getKey();</span><br><span class="line">            <span class="keyword">this</span>.value = entry.getValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> K <span class="title">getKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">setValue</span><span class="params">(V value)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Map.Entry))</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Map.Entry e = (Map.Entry)o;</span><br><span class="line">        <span class="keyword">return</span> eq(key, e.getKey()) &amp;&amp; eq(value, e.getValue());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (key   == <span class="keyword">null</span> ? <span class="number">0</span> :   key.hashCode()) ^</span><br><span class="line">           (value == <span class="keyword">null</span> ? <span class="number">0</span> : value.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> key + <span class="string">"="</span> + value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从中，我们可以看出SimpleImmutableEntry实际上是简化的key-value节点。<br>它只提供了getKey()、getValue()方法类获取节点的值；但不能修改value的值，因为调用 setValue() 会抛出异常UnsupportedOperationException();</p><p>再回到我们之前的问题：那为什么外界不能直接调用 getFirstEntry()，而需要多此一举的调用 firstEntry() 呢?<br>现在我们清晰的了解到：<br>(01) firstEntry()是对外接口，而getFirstEntry()是内部接口。<br>(02) 对firstEntry()返回的Entry对象只能进行getKey()、getValue()等读取操作；而对getFirstEntry()返回的对象除了可以进行读取操作之后，还可以通过setValue()修改值。</p><h2 id="TreeMap的key相关函数"><a href="#TreeMap的key相关函数" class="headerlink" title="TreeMap的key相关函数"></a>TreeMap的key相关函数</h2><p>TreeMap的<code>firstKey()、lastKey()、lowerKey()、higherKey()、floorKey()、ceilingKey()</code>原理都是类似的；下面以ceilingKey()来进行详细说明</p><p>ceilingKey(K key)的作用是“返回大于/等于key的最小的键值对所对应的KEY，没有的话返回null”，它的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> K <span class="title">ceilingKey</span><span class="params">(K key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> keyOrNull(getCeilingEntry(key));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ceilingKey()是通过getCeilingEntry()实现的。keyOrNull()的代码很简单，它是获取节点的key，没有的话，返回null。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &lt;K,V&gt; <span class="function">K <span class="title">keyOrNull</span><span class="params">(TreeMap.Entry&lt;K,V&gt; e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> e == <span class="keyword">null</span>? <span class="keyword">null</span> : e.key;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>getCeilingEntry(K key)的作用是“获取TreeMap中大于/等于key的最小的节点，若不存在(即TreeMap中所有节点的键都比key大)，就返回null”。它的实现代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> Entry&lt;K,V&gt; <span class="title">getCeilingEntry</span><span class="params">(K key)</span> </span>&#123;</span><br><span class="line">    Entry&lt;K,V&gt; p = root;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> cmp = compare(key, p.key);</span><br><span class="line">        <span class="comment">// 情况一：若“p的key” &gt; key。</span></span><br><span class="line">        <span class="comment">// 若 p 存在左孩子，则设 p=“p的左孩子”；</span></span><br><span class="line">        <span class="comment">// 否则，返回p</span></span><br><span class="line">        <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p.left != <span class="keyword">null</span>)</span><br><span class="line">                p = p.left;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> p;</span><br><span class="line">        <span class="comment">// 情况二：若“p的key” &lt; key。</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 若 p 存在右孩子，则设 p=“p的右孩子”</span></span><br><span class="line">            <span class="keyword">if</span> (p.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">                p = p.right;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 若 p 不存在右孩子，则找出 p 的后继节点，并返回</span></span><br><span class="line">                <span class="comment">// 注意：这里返回的 “p的后继节点”有2种可能性：第一，null；第二，TreeMap中大于key的最小的节点。</span></span><br><span class="line">                <span class="comment">//   理解这一点的核心是，getCeilingEntry是从root开始遍历的。</span></span><br><span class="line">                <span class="comment">//   若getCeilingEntry能走到这一步，那么，它之前“已经遍历过的节点的key”都 &gt; key。</span></span><br><span class="line">                <span class="comment">//   能理解上面所说的，那么就很容易明白，为什么“p的后继节点”有2种可能性了。</span></span><br><span class="line">                Entry&lt;K,V&gt; parent = p.parent;</span><br><span class="line">                Entry&lt;K,V&gt; ch = p;</span><br><span class="line">                <span class="keyword">while</span> (parent != <span class="keyword">null</span> &amp;&amp; ch == parent.right) &#123;</span><br><span class="line">                    ch = parent;</span><br><span class="line">                    parent = parent.parent;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> parent;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="comment">// 情况三：若“p的key” = key。</span></span><br><span class="line">        &#125; <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="TreeMap的values-函数"><a href="#TreeMap的values-函数" class="headerlink" title="TreeMap的values()函数"></a>TreeMap的values()函数</h2><p>values() 返回“TreeMap中值的集合”</p><p>values()的实现代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Collection&lt;V&gt; <span class="title">values</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Collection&lt;V&gt; vs = values;</span><br><span class="line">    <span class="keyword">return</span> (vs != <span class="keyword">null</span>) ? vs : (values = <span class="keyword">new</span> Values());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：从中，我们可以发现values()是通过 new Values() 来实现 “返回TreeMap中值的集合”。</p><p>那么Values()是如何实现的呢？ 没错！由于返回的是值的集合，那么Values()肯定返回一个集合；而Values()正好是集合类Value的构造函数。Values继承于AbstractCollection，它的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ”TreeMap的值的集合“对应的类，它集成于AbstractCollection</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Values</span> <span class="keyword">extends</span> <span class="title">AbstractCollection</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 返回迭代器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;V&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ValueIterator(getFirstEntry());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回个数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> TreeMap.<span class="keyword">this</span>.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// "TreeMap的值的集合"中是否包含"对象o"</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> TreeMap.<span class="keyword">this</span>.containsValue(o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除"TreeMap的值的集合"中的"对象o"</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;K,V&gt; e = getFirstEntry(); e != <span class="keyword">null</span>; e = successor(e)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (valEquals(e.getValue(), o)) &#123;</span><br><span class="line">                deleteEntry(e);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清空删除"TreeMap的值的集合"</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        TreeMap.<span class="keyword">this</span>.clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：从中，我们可以知道Values类就是一个集合。而 AbstractCollection 实现了除 size() 和 iterator() 之外的其它函数，因此只需要在Values类中实现这两个函数即可。<br>size() 的实现非常简单，Values集合中元素的个数=该TreeMap的元素个数。(TreeMap每一个元素都有一个值嘛！)<br>iterator() 则返回一个迭代器，用于遍历Values。下面，我们一起可以看看iterator()的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Iterator&lt;V&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ValueIterator(getFirstEntry());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明： iterator() 是通过ValueIterator() 返回迭代器的，ValueIterator是一个类。代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">final class ValueIterator extends PrivateEntryIterator&lt;V&gt; &#123;</span><br><span class="line">    ValueIterator(Entry&lt;K,V&gt; first) &#123;</span><br><span class="line">        super(first);</span><br><span class="line">    &#125;</span><br><span class="line">    public V next() &#123;</span><br><span class="line">        return nextEntry().value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：ValueIterator的代码很简单，它的主要实现应该在它的父类PrivateEntryIterator中。下面我们一起看看PrivateEntryIterator的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">PrivateEntryIterator</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 下一节点</span></span><br><span class="line">    Entry&lt;K,V&gt; next;</span><br><span class="line">    <span class="comment">// 上一次返回的节点</span></span><br><span class="line">    Entry&lt;K,V&gt; lastReturned;</span><br><span class="line">    <span class="comment">// 修改次数统计数</span></span><br><span class="line">    <span class="keyword">int</span> expectedModCount;</span><br><span class="line"></span><br><span class="line">    PrivateEntryIterator(Entry&lt;K,V&gt; first) &#123;</span><br><span class="line">        expectedModCount = modCount;</span><br><span class="line">        lastReturned = <span class="keyword">null</span>;</span><br><span class="line">        next = first;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否存在下一个节点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> next != <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回下一个节点</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> Entry&lt;K,V&gt; <span class="title">nextEntry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Entry&lt;K,V&gt; e = next;</span><br><span class="line">        <span class="keyword">if</span> (e == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">        <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        next = successor(e);</span><br><span class="line">        lastReturned = e;</span><br><span class="line">        <span class="keyword">return</span> e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回上一节点</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> Entry&lt;K,V&gt; <span class="title">prevEntry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Entry&lt;K,V&gt; e = next;</span><br><span class="line">        <span class="keyword">if</span> (e == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">        <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        next = predecessor(e);</span><br><span class="line">        lastReturned = e;</span><br><span class="line">        <span class="keyword">return</span> e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除当前节点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (lastReturned == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">        <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        <span class="comment">// deleted entries are replaced by their successors</span></span><br><span class="line">        <span class="keyword">if</span> (lastReturned.left != <span class="keyword">null</span> &amp;&amp; lastReturned.right != <span class="keyword">null</span>)</span><br><span class="line">            next = lastReturned;</span><br><span class="line">        deleteEntry(lastReturned);</span><br><span class="line">        expectedModCount = modCount;</span><br><span class="line">        lastReturned = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：PrivateEntryIterator是一个抽象类，它的实现很简单，只只实现了Iterator的remove()和hasNext()接口，没有实现next()接口。<br>而我们在ValueIterator中已经实现的next()接口。<br>至此，我们就了解了iterator()的完整实现了。</p><h2 id="TreeMap的entrySet-函数"><a href="#TreeMap的entrySet-函数" class="headerlink" title="TreeMap的entrySet()函数"></a>TreeMap的entrySet()函数</h2><p>entrySet() 返回“键值对集合”。顾名思义，它返回的是一个集合，集合的元素是“键值对”。</p><p>下面，我们看看它是如何实现的？entrySet() 的实现代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet() &#123;</span><br><span class="line">    EntrySet es = entrySet;</span><br><span class="line">    <span class="keyword">return</span> (es != <span class="keyword">null</span>) ? es : (entrySet = <span class="keyword">new</span> EntrySet());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：entrySet()返回的是一个EntrySet对象。</p><p>下面我们看看EntrySet的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">// EntrySet是“TreeMap的所有键值对组成的集合”，</span><br><span class="line">// EntrySet集合的单位是单个“键值对”。</span><br><span class="line">class EntrySet extends AbstractSet&lt;Map.Entry&lt;K,V&gt;&gt; &#123;</span><br><span class="line">    public Iterator&lt;Map.Entry&lt;K,V&gt;&gt; iterator() &#123;</span><br><span class="line">        return new EntryIterator(getFirstEntry());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // EntrySet中是否包含“键值对Object”</span><br><span class="line">    public boolean contains(Object o) &#123;</span><br><span class="line">        if (!(o instanceof Map.Entry))</span><br><span class="line">            return false;</span><br><span class="line">        Map.Entry&lt;K,V&gt; entry = (Map.Entry&lt;K,V&gt;) o;</span><br><span class="line">        V value = entry.getValue();</span><br><span class="line">        Entry&lt;K,V&gt; p = getEntry(entry.getKey());</span><br><span class="line">        return p != null &amp;&amp; valEquals(p.getValue(), value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 删除EntrySet中的“键值对Object”</span><br><span class="line">    public boolean remove(Object o) &#123;</span><br><span class="line">        if (!(o instanceof Map.Entry))</span><br><span class="line">            return false;</span><br><span class="line">        Map.Entry&lt;K,V&gt; entry = (Map.Entry&lt;K,V&gt;) o;</span><br><span class="line">        V value = entry.getValue();</span><br><span class="line">        Entry&lt;K,V&gt; p = getEntry(entry.getKey());</span><br><span class="line">        if (p != null &amp;&amp; valEquals(p.getValue(), value)) &#123;</span><br><span class="line">            deleteEntry(p);</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 返回EntrySet中元素个数</span><br><span class="line">    public int size() &#123;</span><br><span class="line">        return TreeMap.this.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 清空EntrySet</span><br><span class="line">    public void clear() &#123;</span><br><span class="line">        TreeMap.this.clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：<br>EntrySet是“TreeMap的所有键值对组成的集合”，而且它单位是单个“键值对”。<br>EntrySet是一个集合，它继承于AbstractSet。而AbstractSet实现了除size() 和 iterator() 之外的其它函数，因此，我们重点了解一下EntrySet的size() 和 iterator() 函数</p><p>size() 的实现非常简单，AbstractSet集合中元素的个数=该TreeMap的元素个数。<br>iterator() 则返回一个迭代器，用于遍历AbstractSet。从上面的源码中，我们可以发现iterator() 是通过EntryIterator实现的；下面我们看看EntryIterator的源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">EntryIterator</span> <span class="keyword">extends</span> <span class="title">PrivateEntryIterator</span>&lt;<span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;&gt; </span>&#123;</span><br><span class="line">    EntryIterator(Entry&lt;K,V&gt; first) &#123;</span><br><span class="line">        <span class="keyword">super</span>(first);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Map.<span class="function">Entry&lt;K,V&gt; <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nextEntry();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：和Values类一样，EntryIterator也继承于PrivateEntryIterator类。</p><h2 id="TreeMap实现的Cloneable接口"><a href="#TreeMap实现的Cloneable接口" class="headerlink" title="TreeMap实现的Cloneable接口"></a>TreeMap实现的Cloneable接口</h2><p>TreeMap实现了Cloneable接口，即实现了clone()方法。<br>clone()方法的作用很简单，就是克隆一个TreeMap对象并返回。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 克隆一个TreeMap，并返回Object对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    TreeMap&lt;K,V&gt; clone = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        clone = (TreeMap&lt;K,V&gt;) <span class="keyword">super</span>.clone();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InternalError();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Put clone into "virgin" state (except for comparator)</span></span><br><span class="line">    clone.root = <span class="keyword">null</span>;</span><br><span class="line">    clone.size = <span class="number">0</span>;</span><br><span class="line">    clone.modCount = <span class="number">0</span>;</span><br><span class="line">    clone.entrySet = <span class="keyword">null</span>;</span><br><span class="line">    clone.navigableKeySet = <span class="keyword">null</span>;</span><br><span class="line">    clone.descendingMap = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Initialize clone with our mappings</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        clone.buildFromSorted(size, entrySet().iterator(), <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (java.io.IOException cannotHappen) &#123;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException cannotHappen) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> clone;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="TreeMap实现的Serializable接口"><a href="#TreeMap实现的Serializable接口" class="headerlink" title="TreeMap实现的Serializable接口"></a>TreeMap实现的Serializable接口</h2><p>TreeMap实现java.io.Serializable，分别实现了串行读取、写入功能。<br>串行写入函数是writeObject()，它的作用是将TreeMap的“容量，所有的Entry”都写入到输出流中。<br>而串行读取函数是readObject()，它的作用是将TreeMap的“容量、所有的Entry”依次读出。<br>readObject() 和 writeObject() 正好是一对，通过它们，我能实现TreeMap的串行传输。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// java.io.Serializable的写入函数</span></span><br><span class="line"><span class="comment">// 将TreeMap的“容量，所有的Entry”都写入到输出流中</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeObject</span><span class="params">(java.io.ObjectOutputStream s)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> java.io.IOException </span>&#123;</span><br><span class="line">    <span class="comment">// Write out the Comparator and any hidden stuff</span></span><br><span class="line">    s.defaultWriteObject();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Write out size (number of Mappings)</span></span><br><span class="line">    s.writeInt(size);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Write out keys and values (alternating)</span></span><br><span class="line">    <span class="keyword">for</span> (Iterator&lt;Map.Entry&lt;K,V&gt;&gt; i = entrySet().iterator(); i.hasNext(); ) &#123;</span><br><span class="line">        Map.Entry&lt;K,V&gt; e = i.next();</span><br><span class="line">        s.writeObject(e.getKey());</span><br><span class="line">        s.writeObject(e.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// java.io.Serializable的读取函数：根据写入方式读出</span></span><br><span class="line"><span class="comment">// 先将TreeMap的“容量、所有的Entry”依次读出</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(<span class="keyword">final</span> java.io.ObjectInputStream s)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">    <span class="comment">// Read in the Comparator and any hidden stuff</span></span><br><span class="line">    s.defaultReadObject();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read in size</span></span><br><span class="line">    <span class="keyword">int</span> size = s.readInt();</span><br><span class="line"></span><br><span class="line">    buildFromSorted(size, <span class="keyword">null</span>, s, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说到这里，就顺便说一下“关键字transient”的作用</p><p>transient是Java语言的关键字，它被用来表示一个域不是该对象串行化的一部分。<br>Java的serialization提供了一种持久化对象实例的机制。当持久化对象时，可能有一个特殊的对象数据成员，我们不想用serialization机制来保存它。为了在一个特定对象的一个域上关闭serialization，可以在这个域前加上关键字transient。<br>当一个对象被串行化的时候，transient型变量的值不包括在串行化的表示中，然而非transient型的变量是被包括进去的。</p><h2 id="TreeMap实现的NavigableMap接口"><a href="#TreeMap实现的NavigableMap接口" class="headerlink" title="TreeMap实现的NavigableMap接口"></a>TreeMap实现的NavigableMap接口</h2><p>firstKey()、lastKey()、lowerKey()、higherKey()、ceilingKey()、floorKey();<br>firstEntry()、 lastEntry()、 lowerEntry()、 higherEntry()、 floorEntry()、 ceilingEntry()、 pollFirstEntry() 、 pollLastEntry();<br>上面已经讲解过这些API了，下面对其它的API进行说明。</p><p>1 反向TreeMap<br>descendingMap() 的作用是返回当前TreeMap的反向的TreeMap。所谓反向，就是排序顺序和原始的顺序相反。</p><p>我们已经知道TreeMap是一颗红黑树，而红黑树是有序的。<br>TreeMap的排序方式是通过比较器，在创建TreeMap的时候，若指定了比较器，则使用该比较器；否则，就使用Java的默认比较器。<br>而获取TreeMap的反向TreeMap的原理就是将比较器反向即可！</p><p>理解了descendingMap()的反向原理之后，再讲解一下descendingMap()的代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取TreeMap的降序Map</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> NavigableMap&lt;K, V&gt; <span class="title">descendingMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    NavigableMap&lt;K, V&gt; km = descendingMap;</span><br><span class="line">    <span class="keyword">return</span> (km != <span class="keyword">null</span>) ? km :</span><br><span class="line">        (descendingMap = <span class="keyword">new</span> DescendingSubMap(<span class="keyword">this</span>,</span><br><span class="line">                                              <span class="keyword">true</span>, <span class="keyword">null</span>, <span class="keyword">true</span>,</span><br><span class="line">                                              <span class="keyword">true</span>, <span class="keyword">null</span>, <span class="keyword">true</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从中，我们看出descendingMap()实际上是返回DescendingSubMap类的对象。下面，看看DescendingSubMap的源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DescendingSubMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;  <span class="keyword">extends</span> <span class="title">NavigableSubMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">912986545866120460L</span>;</span><br><span class="line">    DescendingSubMap(TreeMap&lt;K,V&gt; m,</span><br><span class="line">                    <span class="keyword">boolean</span> fromStart, K lo, <span class="keyword">boolean</span> loInclusive,</span><br><span class="line">                    <span class="keyword">boolean</span> toEnd,     K hi, <span class="keyword">boolean</span> hiInclusive) &#123;</span><br><span class="line">        <span class="keyword">super</span>(m, fromStart, lo, loInclusive, toEnd, hi, hiInclusive);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 反转的比较器：是将原始比较器反转得到的。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Comparator&lt;? <span class="keyword">super</span> K&gt; reverseComparator =</span><br><span class="line">        Collections.reverseOrder(m.comparator);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取反转比较器</span></span><br><span class="line">    <span class="keyword">public</span> Comparator&lt;? <span class="keyword">super</span> K&gt; comparator() &#123;</span><br><span class="line">        <span class="keyword">return</span> reverseComparator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取“子Map”。</span></span><br><span class="line">    <span class="comment">// 范围是从fromKey 到 toKey；fromInclusive是是否包含fromKey的标记，toInclusive是是否包含toKey的标记</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> NavigableMap&lt;K,V&gt; <span class="title">subMap</span><span class="params">(K fromKey, <span class="keyword">boolean</span> fromInclusive,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    K toKey,   <span class="keyword">boolean</span> toInclusive)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!inRange(fromKey, fromInclusive))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"fromKey out of range"</span>);</span><br><span class="line">        <span class="keyword">if</span> (!inRange(toKey, toInclusive))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"toKey out of range"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DescendingSubMap(m,</span><br><span class="line">                                    <span class="keyword">false</span>, toKey,   toInclusive,</span><br><span class="line">                                    <span class="keyword">false</span>, fromKey, fromInclusive);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取“Map的头部”。</span></span><br><span class="line">    <span class="comment">// 范围从第一个节点 到 toKey, inclusive是是否包含toKey的标记</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> NavigableMap&lt;K,V&gt; <span class="title">headMap</span><span class="params">(K toKey, <span class="keyword">boolean</span> inclusive)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!inRange(toKey, inclusive))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"toKey out of range"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DescendingSubMap(m,</span><br><span class="line">                                    <span class="keyword">false</span>, toKey, inclusive,</span><br><span class="line">                                    toEnd, hi,    hiInclusive);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取“Map的尾部”。</span></span><br><span class="line">    <span class="comment">// 范围是从 fromKey 到 最后一个节点，inclusive是是否包含fromKey的标记</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> NavigableMap&lt;K,V&gt; <span class="title">tailMap</span><span class="params">(K fromKey, <span class="keyword">boolean</span> inclusive)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!inRange(fromKey, inclusive))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"fromKey out of range"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DescendingSubMap(m,</span><br><span class="line">                                    fromStart, lo, loInclusive,</span><br><span class="line">                                    <span class="keyword">false</span>, fromKey, inclusive);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取对应的降序Map</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> NavigableMap&lt;K,V&gt; <span class="title">descendingMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        NavigableMap&lt;K,V&gt; mv = descendingMapView;</span><br><span class="line">        <span class="keyword">return</span> (mv != <span class="keyword">null</span>) ? mv :</span><br><span class="line">            (descendingMapView =</span><br><span class="line">             <span class="keyword">new</span> AscendingSubMap(m,</span><br><span class="line">                                 fromStart, lo, loInclusive,</span><br><span class="line">                                 toEnd,     hi, hiInclusive));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回“升序Key迭代器”</span></span><br><span class="line">    <span class="function">Iterator&lt;K&gt; <span class="title">keyIterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DescendingSubMapKeyIterator(absHighest(), absLowFence());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回“降序Key迭代器”</span></span><br><span class="line">    <span class="function">Iterator&lt;K&gt; <span class="title">descendingKeyIterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SubMapKeyIterator(absLowest(), absHighFence());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// “降序EntrySet集合”类</span></span><br><span class="line">    <span class="comment">// 实现了iterator()</span></span><br><span class="line">    <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DescendingEntrySetView</span> <span class="keyword">extends</span> <span class="title">EntrySetView</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> Iterator&lt;Map.Entry&lt;K,V&gt;&gt; iterator() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> DescendingSubMapEntryIterator(absHighest(), absLowFence());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回“降序EntrySet集合”</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet() &#123;</span><br><span class="line">        EntrySetView es = entrySetView;</span><br><span class="line">        <span class="keyword">return</span> (es != <span class="keyword">null</span>) ? es : <span class="keyword">new</span> DescendingEntrySetView();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    TreeMap.<span class="function">Entry&lt;K,V&gt; <span class="title">subLowest</span><span class="params">()</span>       </span>&#123; <span class="keyword">return</span> absHighest(); &#125;</span><br><span class="line">    TreeMap.<span class="function">Entry&lt;K,V&gt; <span class="title">subHighest</span><span class="params">()</span>      </span>&#123; <span class="keyword">return</span> absLowest(); &#125;</span><br><span class="line">    TreeMap.<span class="function">Entry&lt;K,V&gt; <span class="title">subCeiling</span><span class="params">(K key)</span> </span>&#123; <span class="keyword">return</span> absFloor(key); &#125;</span><br><span class="line">    TreeMap.<span class="function">Entry&lt;K,V&gt; <span class="title">subHigher</span><span class="params">(K key)</span>  </span>&#123; <span class="keyword">return</span> absLower(key); &#125;</span><br><span class="line">    TreeMap.<span class="function">Entry&lt;K,V&gt; <span class="title">subFloor</span><span class="params">(K key)</span>   </span>&#123; <span class="keyword">return</span> absCeiling(key); &#125;</span><br><span class="line">    TreeMap.<span class="function">Entry&lt;K,V&gt; <span class="title">subLower</span><span class="params">(K key)</span>   </span>&#123; <span class="keyword">return</span> absHigher(key); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从中，我们看出DescendingSubMap是降序的SubMap，它的实现机制是将“SubMap的比较器反转”。</p><p>它继承于NavigableSubMap。而NavigableSubMap是一个继承于AbstractMap的抽象类；它包括2个子类——“(升序)AscendingSubMap”和”(降序)DescendingSubMap”。NavigableSubMap为它的两个子类实现了许多公共API。<br>下面看看NavigableSubMap的源码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">NavigableSubMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">NavigableMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="comment">// TreeMap的拷贝</span></span><br><span class="line">    <span class="keyword">final</span> TreeMap&lt;K,V&gt; m;</span><br><span class="line">    <span class="comment">// lo是“子Map范围的最小值”，hi是“子Map范围的最大值”；</span></span><br><span class="line">    <span class="comment">// loInclusive是“是否包含lo的标记”，hiInclusive是“是否包含hi的标记”</span></span><br><span class="line">    <span class="comment">// fromStart是“表示是否从第一个节点开始计算”，</span></span><br><span class="line">    <span class="comment">// toEnd是“表示是否计算到最后一个节点      ”</span></span><br><span class="line">    <span class="keyword">final</span> K lo, hi;      </span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> fromStart, toEnd;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> loInclusive, hiInclusive;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    NavigableSubMap(TreeMap&lt;K,V&gt; m,</span><br><span class="line">                    <span class="keyword">boolean</span> fromStart, K lo, <span class="keyword">boolean</span> loInclusive,</span><br><span class="line">                    <span class="keyword">boolean</span> toEnd,     K hi, <span class="keyword">boolean</span> hiInclusive) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!fromStart &amp;&amp; !toEnd) &#123;</span><br><span class="line">            <span class="keyword">if</span> (m.compare(lo, hi) &gt; <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"fromKey &gt; toKey"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!fromStart) <span class="comment">// type check</span></span><br><span class="line">                m.compare(lo, lo);</span><br><span class="line">            <span class="keyword">if</span> (!toEnd)</span><br><span class="line">                m.compare(hi, hi);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.m = m;</span><br><span class="line">        <span class="keyword">this</span>.fromStart = fromStart;</span><br><span class="line">        <span class="keyword">this</span>.lo = lo;</span><br><span class="line">        <span class="keyword">this</span>.loInclusive = loInclusive;</span><br><span class="line">        <span class="keyword">this</span>.toEnd = toEnd;</span><br><span class="line">        <span class="keyword">this</span>.hi = hi;</span><br><span class="line">        <span class="keyword">this</span>.hiInclusive = hiInclusive;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断key是否太小</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tooLow</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 若该SubMap不包括“起始节点”，</span></span><br><span class="line">        <span class="comment">// 并且，“key小于最小键(lo)”或者“key等于最小键(lo)，但最小键却没包括在该SubMap内”</span></span><br><span class="line">        <span class="comment">// 则判断key太小。其余情况都不是太小！</span></span><br><span class="line">        <span class="keyword">if</span> (!fromStart) &#123;</span><br><span class="line">            <span class="keyword">int</span> c = m.compare(key, lo);</span><br><span class="line">            <span class="keyword">if</span> (c &lt; <span class="number">0</span> || (c == <span class="number">0</span> &amp;&amp; !loInclusive))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断key是否太大</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tooHigh</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 若该SubMap不包括“结束节点”，</span></span><br><span class="line">        <span class="comment">// 并且，“key大于最大键(hi)”或者“key等于最大键(hi)，但最大键却没包括在该SubMap内”</span></span><br><span class="line">        <span class="comment">// 则判断key太大。其余情况都不是太大！</span></span><br><span class="line">        <span class="keyword">if</span> (!toEnd) &#123;</span><br><span class="line">            <span class="keyword">int</span> c = m.compare(key, hi);</span><br><span class="line">            <span class="keyword">if</span> (c &gt; <span class="number">0</span> || (c == <span class="number">0</span> &amp;&amp; !hiInclusive))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断key是否在“lo和hi”开区间范围内</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">inRange</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> !tooLow(key) &amp;&amp; !tooHigh(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断key是否在封闭区间内</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">inClosedRange</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (fromStart || m.compare(key, lo) &gt;= <span class="number">0</span>)</span><br><span class="line">            &amp;&amp; (toEnd || m.compare(hi, key) &gt;= <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断key是否在区间内, inclusive是区间开关标志</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">inRange</span><span class="params">(Object key, <span class="keyword">boolean</span> inclusive)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> inclusive ? inRange(key) : inClosedRange(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回最低的Entry</span></span><br><span class="line">    <span class="keyword">final</span> TreeMap.<span class="function">Entry&lt;K,V&gt; <span class="title">absLowest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 若“包含起始节点”，则调用getFirstEntry()返回第一个节点</span></span><br><span class="line">    <span class="comment">// 否则的话，若包括lo，则调用getCeilingEntry(lo)获取大于/等于lo的最小的Entry;</span></span><br><span class="line">    <span class="comment">//           否则，调用getHigherEntry(lo)获取大于lo的最小Entry</span></span><br><span class="line">    TreeMap.Entry&lt;K,V&gt; e =</span><br><span class="line">            (fromStart ?  m.getFirstEntry() :</span><br><span class="line">             (loInclusive ? m.getCeilingEntry(lo) :</span><br><span class="line">                            m.getHigherEntry(lo)));</span><br><span class="line">        <span class="keyword">return</span> (e == <span class="keyword">null</span> || tooHigh(e.key)) ? <span class="keyword">null</span> : e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回最高的Entry</span></span><br><span class="line">    <span class="keyword">final</span> TreeMap.<span class="function">Entry&lt;K,V&gt; <span class="title">absHighest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 若“包含结束节点”，则调用getLastEntry()返回最后一个节点</span></span><br><span class="line">    <span class="comment">// 否则的话，若包括hi，则调用getFloorEntry(hi)获取小于/等于hi的最大的Entry;</span></span><br><span class="line">    <span class="comment">//           否则，调用getLowerEntry(hi)获取大于hi的最大Entry</span></span><br><span class="line">    TreeMap.Entry&lt;K,V&gt; e =</span><br><span class="line">    TreeMap.Entry&lt;K,V&gt; e =</span><br><span class="line">            (toEnd ?  m.getLastEntry() :</span><br><span class="line">             (hiInclusive ?  m.getFloorEntry(hi) :</span><br><span class="line">                             m.getLowerEntry(hi)));</span><br><span class="line">        <span class="keyword">return</span> (e == <span class="keyword">null</span> || tooLow(e.key)) ? <span class="keyword">null</span> : e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回"大于/等于key的最小的Entry"</span></span><br><span class="line">    <span class="keyword">final</span> TreeMap.<span class="function">Entry&lt;K,V&gt; <span class="title">absCeiling</span><span class="params">(K key)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 只有在“key太小”的情况下，absLowest()返回的Entry才是“大于/等于key的最小Entry”</span></span><br><span class="line">        <span class="comment">// 其它情况下不行。例如，当包含“起始节点”时，absLowest()返回的是最小Entry了！</span></span><br><span class="line">        <span class="keyword">if</span> (tooLow(key))</span><br><span class="line">            <span class="keyword">return</span> absLowest();</span><br><span class="line">        <span class="comment">// 获取“大于/等于key的最小Entry”</span></span><br><span class="line">    TreeMap.Entry&lt;K,V&gt; e = m.getCeilingEntry(key);</span><br><span class="line">        <span class="keyword">return</span> (e == <span class="keyword">null</span> || tooHigh(e.key)) ? <span class="keyword">null</span> : e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回"大于key的最小的Entry"</span></span><br><span class="line">    <span class="keyword">final</span> TreeMap.<span class="function">Entry&lt;K,V&gt; <span class="title">absHigher</span><span class="params">(K key)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 只有在“key太小”的情况下，absLowest()返回的Entry才是“大于key的最小Entry”</span></span><br><span class="line">        <span class="comment">// 其它情况下不行。例如，当包含“起始节点”时，absLowest()返回的是最小Entry了,而不一定是“大于key的最小Entry”！</span></span><br><span class="line">        <span class="keyword">if</span> (tooLow(key))</span><br><span class="line">            <span class="keyword">return</span> absLowest();</span><br><span class="line">        <span class="comment">// 获取“大于key的最小Entry”</span></span><br><span class="line">    TreeMap.Entry&lt;K,V&gt; e = m.getHigherEntry(key);</span><br><span class="line">        <span class="keyword">return</span> (e == <span class="keyword">null</span> || tooHigh(e.key)) ? <span class="keyword">null</span> : e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回"小于/等于key的最大的Entry"</span></span><br><span class="line">    <span class="keyword">final</span> TreeMap.<span class="function">Entry&lt;K,V&gt; <span class="title">absFloor</span><span class="params">(K key)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 只有在“key太大”的情况下，(absHighest)返回的Entry才是“小于/等于key的最大Entry”</span></span><br><span class="line">        <span class="comment">// 其它情况下不行。例如，当包含“结束节点”时，absHighest()返回的是最大Entry了！</span></span><br><span class="line">        <span class="keyword">if</span> (tooHigh(key))</span><br><span class="line">            <span class="keyword">return</span> absHighest();</span><br><span class="line">    <span class="comment">// 获取"小于/等于key的最大的Entry"</span></span><br><span class="line">    TreeMap.Entry&lt;K,V&gt; e = m.getFloorEntry(key);</span><br><span class="line">        <span class="keyword">return</span> (e == <span class="keyword">null</span> || tooLow(e.key)) ? <span class="keyword">null</span> : e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回"小于key的最大的Entry"</span></span><br><span class="line">    <span class="keyword">final</span> TreeMap.<span class="function">Entry&lt;K,V&gt; <span class="title">absLower</span><span class="params">(K key)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 只有在“key太大”的情况下，(absHighest)返回的Entry才是“小于key的最大Entry”</span></span><br><span class="line">        <span class="comment">// 其它情况下不行。例如，当包含“结束节点”时，absHighest()返回的是最大Entry了,而不一定是“小于key的最大Entry”！</span></span><br><span class="line">        <span class="keyword">if</span> (tooHigh(key))</span><br><span class="line">            <span class="keyword">return</span> absHighest();</span><br><span class="line">    <span class="comment">// 获取"小于key的最大的Entry"</span></span><br><span class="line">    TreeMap.Entry&lt;K,V&gt; e = m.getLowerEntry(key);</span><br><span class="line">        <span class="keyword">return</span> (e == <span class="keyword">null</span> || tooLow(e.key)) ? <span class="keyword">null</span> : e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回“大于最大节点中的最小节点”，不存在的话，返回null</span></span><br><span class="line">    <span class="keyword">final</span> TreeMap.<span class="function">Entry&lt;K,V&gt; <span class="title">absHighFence</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (toEnd ? <span class="keyword">null</span> : (hiInclusive ?</span><br><span class="line">                                m.getHigherEntry(hi) :</span><br><span class="line">                                m.getCeilingEntry(hi)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回“小于最小节点中的最大节点”，不存在的话，返回null</span></span><br><span class="line">    <span class="keyword">final</span> TreeMap.<span class="function">Entry&lt;K,V&gt; <span class="title">absLowFence</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (fromStart ? <span class="keyword">null</span> : (loInclusive ?</span><br><span class="line">                                    m.getLowerEntry(lo) :</span><br><span class="line">                                    m.getFloorEntry(lo)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 下面几个abstract方法是需要NavigableSubMap的实现类实现的方法</span></span><br><span class="line">    <span class="keyword">abstract</span> TreeMap.<span class="function">Entry&lt;K,V&gt; <span class="title">subLowest</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="keyword">abstract</span> TreeMap.<span class="function">Entry&lt;K,V&gt; <span class="title">subHighest</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="keyword">abstract</span> TreeMap.<span class="function">Entry&lt;K,V&gt; <span class="title">subCeiling</span><span class="params">(K key)</span></span>;</span><br><span class="line">    <span class="keyword">abstract</span> TreeMap.<span class="function">Entry&lt;K,V&gt; <span class="title">subHigher</span><span class="params">(K key)</span></span>;</span><br><span class="line">    <span class="keyword">abstract</span> TreeMap.<span class="function">Entry&lt;K,V&gt; <span class="title">subFloor</span><span class="params">(K key)</span></span>;</span><br><span class="line">    <span class="keyword">abstract</span> TreeMap.<span class="function">Entry&lt;K,V&gt; <span class="title">subLower</span><span class="params">(K key)</span></span>;</span><br><span class="line">    <span class="comment">// 返回“顺序”的键迭代器</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> Iterator&lt;K&gt; <span class="title">keyIterator</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">// 返回“逆序”的键迭代器</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> Iterator&lt;K&gt; <span class="title">descendingKeyIterator</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回SubMap是否为空。空的话，返回true，否则返回false</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (fromStart &amp;&amp; toEnd) ? m.isEmpty() : entrySet().isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回SubMap的大小</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (fromStart &amp;&amp; toEnd) ? m.size() : entrySet().size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回SubMap是否包含键key</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">containsKey</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> inRange(key) &amp;&amp; m.containsKey(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将key-value 插入SubMap中</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!inRange(key))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"key out of range"</span>);</span><br><span class="line">        <span class="keyword">return</span> m.put(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取key对应值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> !inRange(key)? <span class="keyword">null</span> :  m.get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除key对应的键值对</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">remove</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> !inRange(key)? <span class="keyword">null</span>  : m.remove(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取“大于/等于key的最小键值对”</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> Map.<span class="function">Entry&lt;K,V&gt; <span class="title">ceilingEntry</span><span class="params">(K key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> exportEntry(subCeiling(key));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取“大于/等于key的最小键”</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> K <span class="title">ceilingKey</span><span class="params">(K key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> keyOrNull(subCeiling(key));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取“大于key的最小键值对”</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> Map.<span class="function">Entry&lt;K,V&gt; <span class="title">higherEntry</span><span class="params">(K key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> exportEntry(subHigher(key));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取“大于key的最小键”</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> K <span class="title">higherKey</span><span class="params">(K key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> keyOrNull(subHigher(key));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取“小于/等于key的最大键值对”</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> Map.<span class="function">Entry&lt;K,V&gt; <span class="title">floorEntry</span><span class="params">(K key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> exportEntry(subFloor(key));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取“小于/等于key的最大键”</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> K <span class="title">floorKey</span><span class="params">(K key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> keyOrNull(subFloor(key));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取“小于key的最大键值对”</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> Map.<span class="function">Entry&lt;K,V&gt; <span class="title">lowerEntry</span><span class="params">(K key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> exportEntry(subLower(key));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取“小于key的最大键”</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> K <span class="title">lowerKey</span><span class="params">(K key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> keyOrNull(subLower(key));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取"SubMap的第一个键"</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> K <span class="title">firstKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> key(subLowest());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取"SubMap的最后一个键"</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> K <span class="title">lastKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> key(subHighest());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取"SubMap的第一个键值对"</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> Map.<span class="function">Entry&lt;K,V&gt; <span class="title">firstEntry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> exportEntry(subLowest());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取"SubMap的最后一个键值对"</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> Map.<span class="function">Entry&lt;K,V&gt; <span class="title">lastEntry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> exportEntry(subHighest());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回"SubMap的第一个键值对"，并从SubMap中删除改键值对</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> Map.<span class="function">Entry&lt;K,V&gt; <span class="title">pollFirstEntry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    TreeMap.Entry&lt;K,V&gt; e = subLowest();</span><br><span class="line">        Map.Entry&lt;K,V&gt; result = exportEntry(e);</span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>)</span><br><span class="line">            m.deleteEntry(e);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回"SubMap的最后一个键值对"，并从SubMap中删除改键值对</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> Map.<span class="function">Entry&lt;K,V&gt; <span class="title">pollLastEntry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    TreeMap.Entry&lt;K,V&gt; e = subHighest();</span><br><span class="line">        Map.Entry&lt;K,V&gt; result = exportEntry(e);</span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>)</span><br><span class="line">            m.deleteEntry(e);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Views</span></span><br><span class="line">    <span class="keyword">transient</span> NavigableMap&lt;K,V&gt; descendingMapView = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">transient</span> EntrySetView entrySetView = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">transient</span> KeySet&lt;K&gt; navigableKeySetView = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回NavigableSet对象，实际上返回的是当前对象的"Key集合"。 </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> NavigableSet&lt;K&gt; <span class="title">navigableKeySet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        KeySet&lt;K&gt; nksv = navigableKeySetView;</span><br><span class="line">        <span class="keyword">return</span> (nksv != <span class="keyword">null</span>) ? nksv :</span><br><span class="line">            (navigableKeySetView = <span class="keyword">new</span> TreeMap.KeySet(<span class="keyword">this</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回"Key集合"对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Set&lt;K&gt; <span class="title">keySet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> navigableKeySet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回“逆序”的Key集合</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> NavigableSet&lt;K&gt; <span class="title">descendingKeySet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> descendingMap().navigableKeySet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 排列fromKey(包含) 到 toKey(不包含) 的子map</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> SortedMap&lt;K,V&gt; <span class="title">subMap</span><span class="params">(K fromKey, K toKey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> subMap(fromKey, <span class="keyword">true</span>, toKey, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回当前Map的头部(从第一个节点 到 toKey, 不包括toKey)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> SortedMap&lt;K,V&gt; <span class="title">headMap</span><span class="params">(K toKey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> headMap(toKey, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回当前Map的尾部[从 fromKey(包括fromKeyKey) 到 最后一个节点]</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> SortedMap&lt;K,V&gt; <span class="title">tailMap</span><span class="params">(K fromKey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tailMap(fromKey, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Map的Entry的集合</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">EntrySetView</span> <span class="keyword">extends</span> <span class="title">AbstractSet</span>&lt;<span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">int</span> size = -<span class="number">1</span>, sizeModCount;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取EntrySet的大小</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 若SubMap是从“开始节点”到“结尾节点”，则SubMap大小就是原TreeMap的大小</span></span><br><span class="line">            <span class="keyword">if</span> (fromStart &amp;&amp; toEnd)</span><br><span class="line">                <span class="keyword">return</span> m.size();</span><br><span class="line">            <span class="comment">// 若SubMap不是从“开始节点”到“结尾节点”，则调用iterator()遍历EntrySetView中的元素</span></span><br><span class="line">            <span class="keyword">if</span> (size == -<span class="number">1</span> || sizeModCount != m.modCount) &#123;</span><br><span class="line">                sizeModCount = m.modCount;</span><br><span class="line">                size = <span class="number">0</span>;</span><br><span class="line">                Iterator i = iterator();</span><br><span class="line">                <span class="keyword">while</span> (i.hasNext()) &#123;</span><br><span class="line">                    size++;</span><br><span class="line">                    i.next();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> size;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断EntrySetView是否为空</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            TreeMap.Entry&lt;K,V&gt; n = absLowest();</span><br><span class="line">            <span class="keyword">return</span> n == <span class="keyword">null</span> || tooHigh(n.key);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断EntrySetView是否包含Object</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Map.Entry))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            Map.Entry&lt;K,V&gt; entry = (Map.Entry&lt;K,V&gt;) o;</span><br><span class="line">            K key = entry.getKey();</span><br><span class="line">            <span class="keyword">if</span> (!inRange(key))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            TreeMap.Entry node = m.getEntry(key);</span><br><span class="line">            <span class="keyword">return</span> node != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                valEquals(node.getValue(), entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从EntrySetView中删除Object</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Map.Entry))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            Map.Entry&lt;K,V&gt; entry = (Map.Entry&lt;K,V&gt;) o;</span><br><span class="line">            K key = entry.getKey();</span><br><span class="line">            <span class="keyword">if</span> (!inRange(key))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            TreeMap.Entry&lt;K,V&gt; node = m.getEntry(key);</span><br><span class="line">            <span class="keyword">if</span> (node!=<span class="keyword">null</span> &amp;&amp; valEquals(node.getValue(),entry.getValue()))&#123;</span><br><span class="line">                m.deleteEntry(node);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// SubMap的迭代器</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">SubMapIterator</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">        <span class="comment">// 上一次被返回的Entry</span></span><br><span class="line">        TreeMap.Entry&lt;K,V&gt; lastReturned;</span><br><span class="line">        <span class="comment">// 指向下一个Entry</span></span><br><span class="line">        TreeMap.Entry&lt;K,V&gt; next;</span><br><span class="line">        <span class="comment">// “栅栏key”。根据SubMap是“升序”还是“降序”具有不同的意义</span></span><br><span class="line">        <span class="keyword">final</span> K fenceKey;</span><br><span class="line">        <span class="keyword">int</span> expectedModCount;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构造函数</span></span><br><span class="line">        SubMapIterator(TreeMap.Entry&lt;K,V&gt; first,</span><br><span class="line">                       TreeMap.Entry&lt;K,V&gt; fence) &#123;</span><br><span class="line">            <span class="comment">// 每创建一个SubMapIterator时，保存修改次数</span></span><br><span class="line">            <span class="comment">// 若后面发现expectedModCount和modCount不相等，则抛出ConcurrentModificationException异常。</span></span><br><span class="line">            <span class="comment">// 这就是所说的fast-fail机制的原理！</span></span><br><span class="line">            expectedModCount = m.modCount;</span><br><span class="line">            lastReturned = <span class="keyword">null</span>;</span><br><span class="line">            next = first;</span><br><span class="line">            fenceKey = fence == <span class="keyword">null</span> ? <span class="keyword">null</span> : fence.key;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 是否存在下一个Entry</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> next != <span class="keyword">null</span> &amp;&amp; next.key != fenceKey;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回下一个Entry</span></span><br><span class="line">        <span class="keyword">final</span> TreeMap.<span class="function">Entry&lt;K,V&gt; <span class="title">nextEntry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            TreeMap.Entry&lt;K,V&gt; e = next;</span><br><span class="line">            <span class="keyword">if</span> (e == <span class="keyword">null</span> || e.key == fenceKey)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">            <span class="keyword">if</span> (m.modCount != expectedModCount)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">            <span class="comment">// next指向e的后继节点</span></span><br><span class="line">            next = successor(e);</span><br><span class="line">    lastReturned = e;</span><br><span class="line">            <span class="keyword">return</span> e;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回上一个Entry</span></span><br><span class="line">        <span class="keyword">final</span> TreeMap.<span class="function">Entry&lt;K,V&gt; <span class="title">prevEntry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            TreeMap.Entry&lt;K,V&gt; e = next;</span><br><span class="line">            <span class="keyword">if</span> (e == <span class="keyword">null</span> || e.key == fenceKey)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">            <span class="keyword">if</span> (m.modCount != expectedModCount)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">            <span class="comment">// next指向e的前继节点</span></span><br><span class="line">            next = predecessor(e);</span><br><span class="line">    lastReturned = e;</span><br><span class="line">            <span class="keyword">return</span> e;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除当前节点(用于“升序的SubMap”)。</span></span><br><span class="line">        <span class="comment">// 删除之后，可以继续升序遍历；红黑树特性没变。</span></span><br><span class="line">        <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">removeAscending</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (lastReturned == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">            <span class="keyword">if</span> (m.modCount != expectedModCount)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">            <span class="comment">// 这里重点强调一下“为什么当lastReturned的左右孩子都不为空时，要将其赋值给next”。</span></span><br><span class="line">            <span class="comment">// 目的是为了“删除lastReturned节点之后，next节点指向的仍然是下一个节点”。</span></span><br><span class="line">            <span class="comment">//     根据“红黑树”的特性可知：</span></span><br><span class="line">            <span class="comment">//     当被删除节点有两个儿子时。那么，首先把“它的后继节点的内容”复制给“该节点的内容”；之后，删除“它的后继节点”。</span></span><br><span class="line">            <span class="comment">//     这意味着“当被删除节点有两个儿子时，删除当前节点之后，'新的当前节点'实际上是‘原有的后继节点(即下一个节点)’”。</span></span><br><span class="line">            <span class="comment">//     而此时next仍然指向"新的当前节点"。也就是说next是仍然是指向下一个节点；能继续遍历红黑树。</span></span><br><span class="line">            <span class="keyword">if</span> (lastReturned.left != <span class="keyword">null</span> &amp;&amp; lastReturned.right != <span class="keyword">null</span>)</span><br><span class="line">                next = lastReturned;</span><br><span class="line">            m.deleteEntry(lastReturned);</span><br><span class="line">            lastReturned = <span class="keyword">null</span>;</span><br><span class="line">            expectedModCount = m.modCount;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除当前节点(用于“降序的SubMap”)。</span></span><br><span class="line">        <span class="comment">// 删除之后，可以继续降序遍历；红黑树特性没变。</span></span><br><span class="line">        <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">removeDescending</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (lastReturned == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">            <span class="keyword">if</span> (m.modCount != expectedModCount)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">            m.deleteEntry(lastReturned);</span><br><span class="line">            lastReturned = <span class="keyword">null</span>;</span><br><span class="line">            expectedModCount = m.modCount;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// SubMap的Entry迭代器，它只支持升序操作，继承于SubMapIterator</span></span><br><span class="line">    <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">SubMapEntryIterator</span> <span class="keyword">extends</span> <span class="title">SubMapIterator</span>&lt;<span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;&gt; </span>&#123;</span><br><span class="line">        SubMapEntryIterator(TreeMap.Entry&lt;K,V&gt; first,</span><br><span class="line">                            TreeMap.Entry&lt;K,V&gt; fence) &#123;</span><br><span class="line">            <span class="keyword">super</span>(first, fence);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取下一个节点(升序)</span></span><br><span class="line">        <span class="keyword">public</span> Map.<span class="function">Entry&lt;K,V&gt; <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> nextEntry();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 删除当前节点(升序)</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            removeAscending();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// SubMap的Key迭代器，它只支持升序操作，继承于SubMapIterator</span></span><br><span class="line">    <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">SubMapKeyIterator</span> <span class="keyword">extends</span> <span class="title">SubMapIterator</span>&lt;<span class="title">K</span>&gt; </span>&#123;</span><br><span class="line">        SubMapKeyIterator(TreeMap.Entry&lt;K,V&gt; first,</span><br><span class="line">                          TreeMap.Entry&lt;K,V&gt; fence) &#123;</span><br><span class="line">            <span class="keyword">super</span>(first, fence);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取下一个节点(升序)</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> K <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> nextEntry().key;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 删除当前节点(升序)</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            removeAscending();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 降序SubMap的Entry迭代器，它只支持降序操作，继承于SubMapIterator</span></span><br><span class="line">    <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DescendingSubMapEntryIterator</span> <span class="keyword">extends</span> <span class="title">SubMapIterator</span>&lt;<span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;&gt; </span>&#123;</span><br><span class="line">        DescendingSubMapEntryIterator(TreeMap.Entry&lt;K,V&gt; last,</span><br><span class="line">                                      TreeMap.Entry&lt;K,V&gt; fence) &#123;</span><br><span class="line">            <span class="keyword">super</span>(last, fence);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取下一个节点(降序)</span></span><br><span class="line">        <span class="keyword">public</span> Map.<span class="function">Entry&lt;K,V&gt; <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> prevEntry();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 删除当前节点(降序)</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            removeDescending();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 降序SubMap的Key迭代器，它只支持降序操作，继承于SubMapIterator</span></span><br><span class="line">    <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DescendingSubMapKeyIterator</span> <span class="keyword">extends</span> <span class="title">SubMapIterator</span>&lt;<span class="title">K</span>&gt; </span>&#123;</span><br><span class="line">        DescendingSubMapKeyIterator(TreeMap.Entry&lt;K,V&gt; last,</span><br><span class="line">                                    TreeMap.Entry&lt;K,V&gt; fence) &#123;</span><br><span class="line">            <span class="keyword">super</span>(last, fence);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取下一个节点(降序)</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> K <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> prevEntry().key;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 删除当前节点(降序)</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            removeDescending();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>NavigableSubMap源码很多，但不难理解；读者可以通过源码和注释进行理解。</p><p>其实，读完NavigableSubMap的源码后，我们可以得出它的核心思想是：它是一个抽象集合类，为2个子类——“(升序)AscendingSubMap”和”(降序)DescendingSubMap”而服务；因为NavigableSubMap实现了许多公共API。它的最终目的是实现下面的一系列函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">headMap(K toKey, <span class="keyword">boolean</span> inclusive) </span><br><span class="line">headMap(K toKey)</span><br><span class="line">subMap(K fromKey, K toKey)</span><br><span class="line">subMap(K fromKey, <span class="keyword">boolean</span> fromInclusive, K toKey, <span class="keyword">boolean</span> toInclusive)</span><br><span class="line">tailMap(K fromKey)</span><br><span class="line">tailMap(K fromKey, <span class="keyword">boolean</span> inclusive)</span><br><span class="line">navigableKeySet() </span><br><span class="line">descendingKeySet()</span><br></pre></td></tr></table></figure><h2 id="TreeMap其它函数"><a href="#TreeMap其它函数" class="headerlink" title="TreeMap其它函数"></a>TreeMap其它函数</h2><h3 id="1-顺序遍历和逆序遍历"><a href="#1-顺序遍历和逆序遍历" class="headerlink" title="1 顺序遍历和逆序遍历"></a>1 顺序遍历和逆序遍历</h3><p>TreeMap的顺序遍历和逆序遍历原理非常简单。<br>由于TreeMap中的元素是从小到大的顺序排列的。因此，顺序遍历，就是从第一个元素开始，逐个向后遍历；而倒序遍历则恰恰相反，它是从最后一个元素开始，逐个往前遍历。</p><p>我们可以通过 keyIterator() 和 descendingKeyIterator()来说明！<br>keyIterator()的作用是返回顺序的KEY的集合，<br>descendingKeyIterator()的作用是返回逆序的KEY的集合。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">keyIterator() 的代码如下：</span><br><span class="line"></span><br><span class="line"><span class="function">Iterator&lt;K&gt; <span class="title">keyIterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> KeyIterator(getFirstEntry());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：从中我们可以看出keyIterator() 是返回以“第一个节点(getFirstEntry)” 为其实元素的迭代器。<br>KeyIterator的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">KeyIterator</span> <span class="keyword">extends</span> <span class="title">PrivateEntryIterator</span>&lt;<span class="title">K</span>&gt; </span>&#123;</span><br><span class="line">    KeyIterator(Entry&lt;K,V&gt; first) &#123;</span><br><span class="line">        <span class="keyword">super</span>(first);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> K <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nextEntry().key;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：KeyIterator继承于PrivateEntryIterator。当我们通过next()不断获取下一个元素的时候，就是执行的顺序遍历了。</p><p>descendingKeyIterator()的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Iterator&lt;K&gt; <span class="title">descendingKeyIterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DescendingKeyIterator(getLastEntry());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：从中我们可以看出descendingKeyIterator() 是返回以“最后一个节点(getLastEntry)” 为其实元素的迭代器。<br>再看看DescendingKeyIterator的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DescendingKeyIterator</span> <span class="keyword">extends</span> <span class="title">PrivateEntryIterator</span>&lt;<span class="title">K</span>&gt; </span>&#123;</span><br><span class="line">    DescendingKeyIterator(Entry&lt;K,V&gt; first) &#123;</span><br><span class="line">        <span class="keyword">super</span>(first);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> K <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> prevEntry().key;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：DescendingKeyIterator继承于PrivateEntryIterator。当我们通过next()不断获取下一个元素的时候，实际上调用的是prevEntry()获取的上一个节点，这样它实际上执行的是逆序遍历了。</p><p>至此，TreeMap的相关内容就全部介绍完毕了。若有错误或纰漏的地方，欢迎指正！</p><h1 id="TreeMap遍历方式"><a href="#TreeMap遍历方式" class="headerlink" title="TreeMap遍历方式"></a>TreeMap遍历方式</h1><h2 id="遍历TreeMap的键值对"><a href="#遍历TreeMap的键值对" class="headerlink" title="遍历TreeMap的键值对"></a>遍历TreeMap的键值对</h2><p>第一步：根据entrySet()获取TreeMap的“键值对”的Set集合。<br>第二步：通过Iterator迭代器遍历“第一步”得到的集合。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设map是TreeMap对象</span></span><br><span class="line"><span class="comment">// map中的key是String类型，value是Integer类型</span></span><br><span class="line">Integer integ = <span class="keyword">null</span>;</span><br><span class="line">Iterator iter = map.entrySet().iterator();</span><br><span class="line"><span class="keyword">while</span>(iter.hasNext()) &#123;</span><br><span class="line">    Map.Entry entry = (Map.Entry)iter.next();</span><br><span class="line">    <span class="comment">// 获取key</span></span><br><span class="line">    key = (String)entry.getKey();</span><br><span class="line">        <span class="comment">// 获取value</span></span><br><span class="line">    integ = (Integer)entry.getValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-2-遍历TreeMap的键"><a href="#4-2-遍历TreeMap的键" class="headerlink" title="4.2 遍历TreeMap的键"></a>4.2 遍历TreeMap的键</h2><p>第一步：根据keySet()获取TreeMap的“键”的Set集合。<br>第二步：通过Iterator迭代器遍历“第一步”得到的集合。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设map是TreeMap对象</span></span><br><span class="line"><span class="comment">// map中的key是String类型，value是Integer类型</span></span><br><span class="line">String key = <span class="keyword">null</span>;</span><br><span class="line">Integer integ = <span class="keyword">null</span>;</span><br><span class="line">Iterator iter = map.keySet().iterator();</span><br><span class="line"><span class="keyword">while</span> (iter.hasNext()) &#123;</span><br><span class="line">        <span class="comment">// 获取key</span></span><br><span class="line">    key = (String)iter.next();</span><br><span class="line">        <span class="comment">// 根据key，获取value</span></span><br><span class="line">    integ = (Integer)map.get(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-3-遍历TreeMap的值"><a href="#4-3-遍历TreeMap的值" class="headerlink" title="4.3 遍历TreeMap的值"></a>4.3 遍历TreeMap的值</h2><p>第一步：根据value()获取TreeMap的“值”的集合。<br>第二步：通过Iterator迭代器遍历“第一步”得到的集合。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设map是TreeMap对象</span></span><br><span class="line"><span class="comment">// map中的key是String类型，value是Integer类型</span></span><br><span class="line">Integer value = <span class="keyword">null</span>;</span><br><span class="line">Collection c = map.values();</span><br><span class="line">Iterator iter= c.iterator();</span><br><span class="line"><span class="keyword">while</span> (iter.hasNext()) &#123;</span><br><span class="line">    value = (Integer)iter.next();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TreeMap遍历测试程序如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Map;</span><br><span class="line">import java.util.Random;</span><br><span class="line">import java.util.Iterator;</span><br><span class="line">import java.util.TreeMap;</span><br><span class="line">import java.util.HashSet;</span><br><span class="line">import java.util.Map.Entry;</span><br><span class="line">import java.util.Collection;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * @desc 遍历TreeMap的测试程序。</span><br><span class="line"> *   (01) 通过entrySet()去遍历key、value，参考实现函数：</span><br><span class="line"> *        iteratorTreeMapByEntryset()</span><br><span class="line"> *   (02) 通过keySet()去遍历key、value，参考实现函数：</span><br><span class="line"> *        iteratorTreeMapByKeyset()</span><br><span class="line"> *   (03) 通过values()去遍历value，参考实现函数：</span><br><span class="line"> *        iteratorTreeMapJustValues()</span><br><span class="line"> *</span><br><span class="line"> * @author skywang</span><br><span class="line"> */</span><br><span class="line">public class TreeMapIteratorTest &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int val = 0;</span><br><span class="line">        String key = null;</span><br><span class="line">        Integer value = null;</span><br><span class="line">        Random r = new Random();</span><br><span class="line">        TreeMap map = new TreeMap();</span><br><span class="line"></span><br><span class="line">        for (int i=0; i&lt;12; i++) &#123;</span><br><span class="line">            // 随机获取一个[0,100)之间的数字</span><br><span class="line">            val = r.nextInt(100);</span><br><span class="line">            </span><br><span class="line">            key = String.valueOf(val);</span><br><span class="line">            value = r.nextInt(5);</span><br><span class="line">            // 添加到TreeMap中</span><br><span class="line">            map.put(key, value);</span><br><span class="line">            System.out.println(&quot; key:&quot;+key+&quot; value:&quot;+value);</span><br><span class="line">        &#125;</span><br><span class="line">        // 通过entrySet()遍历TreeMap的key-value</span><br><span class="line">        iteratorTreeMapByEntryset(map) ;</span><br><span class="line">        </span><br><span class="line">        // 通过keySet()遍历TreeMap的key-value</span><br><span class="line">        iteratorTreeMapByKeyset(map) ;</span><br><span class="line">        </span><br><span class="line">        // 单单遍历TreeMap的value</span><br><span class="line">        iteratorTreeMapJustValues(map);        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    /*</span><br><span class="line">     * 通过entry set遍历TreeMap</span><br><span class="line">     * 效率高!</span><br><span class="line">     */</span><br><span class="line">    private static void iteratorTreeMapByEntryset(TreeMap map) &#123;</span><br><span class="line">        if (map == null)</span><br><span class="line">            return ;</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;\niterator TreeMap By entryset&quot;);</span><br><span class="line">        String key = null;</span><br><span class="line">        Integer integ = null;</span><br><span class="line">        Iterator iter = map.entrySet().iterator();</span><br><span class="line">        while(iter.hasNext()) &#123;</span><br><span class="line">            Map.Entry entry = (Map.Entry)iter.next();</span><br><span class="line">            </span><br><span class="line">            key = (String)entry.getKey();</span><br><span class="line">            integ = (Integer)entry.getValue();</span><br><span class="line">            System.out.println(key+&quot; -- &quot;+integ.intValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">     * 通过keyset来遍历TreeMap</span><br><span class="line">     * 效率低!</span><br><span class="line">     */</span><br><span class="line">    private static void iteratorTreeMapByKeyset(TreeMap map) &#123;</span><br><span class="line">        if (map == null)</span><br><span class="line">            return ;</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;\niterator TreeMap By keyset&quot;);</span><br><span class="line">        String key = null;</span><br><span class="line">        Integer integ = null;</span><br><span class="line">        Iterator iter = map.keySet().iterator();</span><br><span class="line">        while (iter.hasNext()) &#123;</span><br><span class="line">            key = (String)iter.next();</span><br><span class="line">            integ = (Integer)map.get(key);</span><br><span class="line">            System.out.println(key+&quot; -- &quot;+integ.intValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">     * 遍历TreeMap的values</span><br><span class="line">     */</span><br><span class="line">    private static void iteratorTreeMapJustValues(TreeMap map) &#123;</span><br><span class="line">        if (map == null)</span><br><span class="line">            return ;</span><br><span class="line">        </span><br><span class="line">        Collection c = map.values();</span><br><span class="line">        Iterator iter= c.iterator();</span><br><span class="line">        while (iter.hasNext()) &#123;</span><br><span class="line">            System.out.println(iter.next());</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="TreeMap示例"><a href="#TreeMap示例" class="headerlink" title="TreeMap示例"></a>TreeMap示例</h1><p>下面通过实例来学习如何使用TreeMap</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desc</span> TreeMap测试程序 </span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> skywang</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeMapTest</span>  </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 测试常用的API</span></span><br><span class="line">        testTreeMapOridinaryAPIs();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 测试TreeMap的导航函数</span></span><br><span class="line">        <span class="comment">//testNavigableMapAPIs();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 测试TreeMap的子Map函数</span></span><br><span class="line">        <span class="comment">//testSubMapAPIs();</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试常用的API</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testTreeMapOridinaryAPIs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 初始化随机种子</span></span><br><span class="line">        Random r = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="comment">// 新建TreeMap</span></span><br><span class="line">        TreeMap tmap = <span class="keyword">new</span> TreeMap();</span><br><span class="line">        <span class="comment">// 添加操作</span></span><br><span class="line">        tmap.put(<span class="string">"one"</span>, r.nextInt(<span class="number">10</span>));</span><br><span class="line">        tmap.put(<span class="string">"two"</span>, r.nextInt(<span class="number">10</span>));</span><br><span class="line">        tmap.put(<span class="string">"three"</span>, r.nextInt(<span class="number">10</span>));</span><br><span class="line"></span><br><span class="line">        System.out.printf(<span class="string">"\n ---- testTreeMapOridinaryAPIs ----\n"</span>);</span><br><span class="line">        <span class="comment">// 打印出TreeMap</span></span><br><span class="line">        System.out.printf(<span class="string">"%s\n"</span>,tmap );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过Iterator遍历key-value</span></span><br><span class="line">        Iterator iter = tmap.entrySet().iterator();</span><br><span class="line">        <span class="keyword">while</span>(iter.hasNext()) &#123;</span><br><span class="line">            Map.Entry entry = (Map.Entry)iter.next();</span><br><span class="line">            System.out.printf(<span class="string">"next : %s - %s\n"</span>, entry.getKey(), entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// TreeMap的键值对个数        </span></span><br><span class="line">        System.out.printf(<span class="string">"size: %s\n"</span>, tmap.size());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// containsKey(Object key) :是否包含键key</span></span><br><span class="line">        System.out.printf(<span class="string">"contains key two : %s\n"</span>,tmap.containsKey(<span class="string">"two"</span>));</span><br><span class="line">        System.out.printf(<span class="string">"contains key five : %s\n"</span>,tmap.containsKey(<span class="string">"five"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// containsValue(Object value) :是否包含值value</span></span><br><span class="line">        System.out.printf(<span class="string">"contains value 0 : %s\n"</span>,tmap.containsValue(<span class="keyword">new</span> Integer(<span class="number">0</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// remove(Object key) ： 删除键key对应的键值对</span></span><br><span class="line">        tmap.remove(<span class="string">"three"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.printf(<span class="string">"tmap:%s\n"</span>,tmap );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// clear() ： 清空TreeMap</span></span><br><span class="line">        tmap.clear();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// isEmpty() : TreeMap是否为空</span></span><br><span class="line">        System.out.printf(<span class="string">"%s\n"</span>, (tmap.isEmpty()?<span class="string">"tmap is empty"</span>:<span class="string">"tmap is not empty"</span>) );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试TreeMap的子Map函数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testSubMapAPIs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 新建TreeMap</span></span><br><span class="line">        TreeMap tmap = <span class="keyword">new</span> TreeMap();</span><br><span class="line">        <span class="comment">// 添加“键值对”</span></span><br><span class="line">        tmap.put(<span class="string">"a"</span>, <span class="number">101</span>);</span><br><span class="line">        tmap.put(<span class="string">"b"</span>, <span class="number">102</span>);</span><br><span class="line">        tmap.put(<span class="string">"c"</span>, <span class="number">103</span>);</span><br><span class="line">        tmap.put(<span class="string">"d"</span>, <span class="number">104</span>);</span><br><span class="line">        tmap.put(<span class="string">"e"</span>, <span class="number">105</span>);</span><br><span class="line"></span><br><span class="line">        System.out.printf(<span class="string">"\n ---- testSubMapAPIs ----\n"</span>);</span><br><span class="line">        <span class="comment">// 打印出TreeMap</span></span><br><span class="line">        System.out.printf(<span class="string">"tmap:\n\t%s\n"</span>, tmap);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 测试 headMap(K toKey)</span></span><br><span class="line">        System.out.printf(<span class="string">"tmap.headMap(\"c\"):\n\t%s\n"</span>, tmap.headMap(<span class="string">"c"</span>));</span><br><span class="line">        <span class="comment">// 测试 headMap(K toKey, boolean inclusive) </span></span><br><span class="line">        System.out.printf(<span class="string">"tmap.headMap(\"c\", true):\n\t%s\n"</span>, tmap.headMap(<span class="string">"c"</span>, <span class="keyword">true</span>));</span><br><span class="line">        System.out.printf(<span class="string">"tmap.headMap(\"c\", false):\n\t%s\n"</span>, tmap.headMap(<span class="string">"c"</span>, <span class="keyword">false</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 测试 tailMap(K fromKey)</span></span><br><span class="line">        System.out.printf(<span class="string">"tmap.tailMap(\"c\"):\n\t%s\n"</span>, tmap.tailMap(<span class="string">"c"</span>));</span><br><span class="line">        <span class="comment">// 测试 tailMap(K fromKey, boolean inclusive)</span></span><br><span class="line">        System.out.printf(<span class="string">"tmap.tailMap(\"c\", true):\n\t%s\n"</span>, tmap.tailMap(<span class="string">"c"</span>, <span class="keyword">true</span>));</span><br><span class="line">        System.out.printf(<span class="string">"tmap.tailMap(\"c\", false):\n\t%s\n"</span>, tmap.tailMap(<span class="string">"c"</span>, <span class="keyword">false</span>));</span><br><span class="line">   </span><br><span class="line">        <span class="comment">// 测试 subMap(K fromKey, K toKey)</span></span><br><span class="line">        System.out.printf(<span class="string">"tmap.subMap(\"a\", \"c\"):\n\t%s\n"</span>, tmap.subMap(<span class="string">"a"</span>, <span class="string">"c"</span>));</span><br><span class="line">        <span class="comment">// 测试 </span></span><br><span class="line">        System.out.printf(<span class="string">"tmap.subMap(\"a\", true, \"c\", true):\n\t%s\n"</span>, </span><br><span class="line">                tmap.subMap(<span class="string">"a"</span>, <span class="keyword">true</span>, <span class="string">"c"</span>, <span class="keyword">true</span>));</span><br><span class="line">        System.out.printf(<span class="string">"tmap.subMap(\"a\", true, \"c\", false):\n\t%s\n"</span>, </span><br><span class="line">                tmap.subMap(<span class="string">"a"</span>, <span class="keyword">true</span>, <span class="string">"c"</span>, <span class="keyword">false</span>));</span><br><span class="line">        System.out.printf(<span class="string">"tmap.subMap(\"a\", false, \"c\", true):\n\t%s\n"</span>, </span><br><span class="line">                tmap.subMap(<span class="string">"a"</span>, <span class="keyword">false</span>, <span class="string">"c"</span>, <span class="keyword">true</span>));</span><br><span class="line">        System.out.printf(<span class="string">"tmap.subMap(\"a\", false, \"c\", false):\n\t%s\n"</span>, </span><br><span class="line">                tmap.subMap(<span class="string">"a"</span>, <span class="keyword">false</span>, <span class="string">"c"</span>, <span class="keyword">false</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 测试 navigableKeySet()</span></span><br><span class="line">        System.out.printf(<span class="string">"tmap.navigableKeySet():\n\t%s\n"</span>, tmap.navigableKeySet());</span><br><span class="line">        <span class="comment">// 测试 descendingKeySet()</span></span><br><span class="line">        System.out.printf(<span class="string">"tmap.descendingKeySet():\n\t%s\n"</span>, tmap.descendingKeySet());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试TreeMap的导航函数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testNavigableMapAPIs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 新建TreeMap</span></span><br><span class="line">        NavigableMap nav = <span class="keyword">new</span> TreeMap();</span><br><span class="line">        <span class="comment">// 添加“键值对”</span></span><br><span class="line">        nav.put(<span class="string">"aaa"</span>, <span class="number">111</span>);</span><br><span class="line">        nav.put(<span class="string">"bbb"</span>, <span class="number">222</span>);</span><br><span class="line">        nav.put(<span class="string">"eee"</span>, <span class="number">333</span>);</span><br><span class="line">        nav.put(<span class="string">"ccc"</span>, <span class="number">555</span>);</span><br><span class="line">        nav.put(<span class="string">"ddd"</span>, <span class="number">444</span>);</span><br><span class="line"></span><br><span class="line">        System.out.printf(<span class="string">"\n ---- testNavigableMapAPIs ----\n"</span>);</span><br><span class="line">        <span class="comment">// 打印出TreeMap</span></span><br><span class="line">        System.out.printf(<span class="string">"Whole list:%s%n"</span>, nav);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取第一个key、第一个Entry</span></span><br><span class="line">        System.out.printf(<span class="string">"First key: %s\tFirst entry: %s%n"</span>,nav.firstKey(), nav.firstEntry());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取最后一个key、最后一个Entry</span></span><br><span class="line">        System.out.printf(<span class="string">"Last key: %s\tLast entry: %s%n"</span>,nav.lastKey(), nav.lastEntry());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取“小于/等于bbb”的最大键值对</span></span><br><span class="line">        System.out.printf(<span class="string">"Key floor before bbb: %s%n"</span>,nav.floorKey(<span class="string">"bbb"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取“小于bbb”的最大键值对</span></span><br><span class="line">        System.out.printf(<span class="string">"Key lower before bbb: %s%n"</span>, nav.lowerKey(<span class="string">"bbb"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取“大于/等于bbb”的最小键值对</span></span><br><span class="line">        System.out.printf(<span class="string">"Key ceiling after ccc: %s%n"</span>,nav.ceilingKey(<span class="string">"ccc"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取“大于bbb”的最小键值对</span></span><br><span class="line">        System.out.printf(<span class="string">"Key higher after ccc: %s%n\n"</span>,nav.higherKey(<span class="string">"ccc"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;one=<span class="number">8</span>, three=<span class="number">4</span>, two=<span class="number">2</span>&#125;</span><br><span class="line">next : one - <span class="number">8</span></span><br><span class="line">next : three - <span class="number">4</span></span><br><span class="line">next : two - <span class="number">2</span></span><br><span class="line">size: <span class="number">3</span></span><br><span class="line">contains key two : <span class="keyword">true</span></span><br><span class="line">contains key five : <span class="keyword">false</span></span><br><span class="line">contains value <span class="number">0</span> : <span class="keyword">false</span></span><br><span class="line">tmap:&#123;one=<span class="number">8</span>, two=<span class="number">2</span>&#125;</span><br><span class="line">tmap is empty</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;TreeMap-简介&quot;&gt;&lt;a href=&quot;#TreeMap-简介&quot; class=&quot;headerlink&quot; title=&quot;TreeMap 简介&quot;&gt;&lt;/a&gt;TreeMap 简介&lt;/h1&gt;&lt;p&gt;TreeMap 是一个有序的key-value集合，它是通过红黑树实现的。&lt;br&gt;TreeMap 继承于AbstractMap，所以它是一个Map，即一个key-value集合。&lt;br&gt;TreeMap 实现了NavigableMap接口，意味着它支持一系列的导航方法。比如返回有序的key集合。&lt;br&gt;TreeMap 实现了Cloneable接口，意味着它能被克隆。&lt;br&gt;TreeMap 实现了java.io.Serializable接口，意味着它支持序列化。&lt;/p&gt;
&lt;p&gt;TreeMap基于红黑树（Red-Black tree）实现。该映射根据其键的自然顺序进行排序，或者根据创建映射时提供的 Comparator 进行排序，具体取决于使用的构造方法。&lt;br&gt;TreeMap的基本操作 containsKey、get、put 和 remove 的时间复杂度是 log(n) 。&lt;br&gt;另外，TreeMap是非同步的。 它的iterator 方法返回的迭代器是fail-fastl的。&lt;br&gt;
    
    </summary>
    
      <category term="Java 集合" scheme="http://cuijing.me/categories/Java-%E9%9B%86%E5%90%88/"/>
    
    
      <category term="Java" scheme="http://cuijing.me/tags/Java/"/>
    
      <category term="Map" scheme="http://cuijing.me/tags/Map/"/>
    
      <category term="TreeMap" scheme="http://cuijing.me/tags/TreeMap/"/>
    
  </entry>
  
  <entry>
    <title>集合框架之 HashTable</title>
    <link href="http://cuijing.me/2015/07/28/Java/8-Collection-Map/11-Hashtable/"/>
    <id>http://cuijing.me/2015/07/28/Java/8-Collection-Map/11-Hashtable/</id>
    <published>2015-07-28T00:30:00.000Z</published>
    <updated>2016-05-01T12:29:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hashtable-简介"><a href="#Hashtable-简介" class="headerlink" title="Hashtable 简介"></a>Hashtable 简介</h1><p>和HashMap一样，Hashtable 也是一个散列表，它存储的内容是键值对(key-value)映射。</p><p>Hashtable 继承于Dictionary，实现了Map、Cloneable、java.io.Serializable接口。</p><p>Hashtable 的函数都是同步的，这意味着它是线程安全的。它的key、value都不可以为null。此外，Hashtable中的映射不是有序的。<br><a id="more"></a><br>Hashtable 的实例有两个参数影响其性能：<strong>初始容量 和 加载因子</strong>。</p><ol><li><p><strong>初始容量</strong>  容量是哈希表中桶的数量，初始容量就是哈希表创建时的容量。<br>注意，哈希表的状态为 open：在发生“哈希冲突”的情况下，单个桶会存储多个条目，这些条目必须按顺序搜索。</p></li><li><p><strong>加载因子</strong> 是对哈希表在其容量自动增加之前可以达到多满的一个尺度。初始容量和加载因子这两个参数只是对该实现的提示。关于何时以及是否调用 rehash 方法的具体细节则依赖于该实现。</p></li></ol><p>通常，默认加载因子是 0.75, 这是在时间和空间成本上寻求一种折衷。加载因子过高虽然减少了空间开销，但同时也增加了查找某个条目的时间（在大多数 Hashtable 操作中，包括 get 和 put 操作，都反映了这一点）。</p><h1 id="Hashtable的构造函数"><a href="#Hashtable的构造函数" class="headerlink" title="Hashtable的构造函数"></a>Hashtable的构造函数</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认构造函数。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Hashtable</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 指定“容量大小”的构造函数</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Hashtable</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 指定“容量大小”和“加载因子”的构造函数</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Hashtable</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 包含“子Map”的构造函数</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Hashtable</span><span class="params">(Map&lt;? extends K, ? extends V&gt; t)</span></span></span><br><span class="line"><span class="function">``` </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"># Hashtable的API</span></span><br><span class="line"><span class="function">```java</span></span><br><span class="line"><span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span>                <span class="title">clear</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">synchronized</span> Object              <span class="title">clone</span><span class="params">()</span></span></span><br><span class="line"><span class="function">             <span class="keyword">boolean</span>             <span class="title">contains</span><span class="params">(Object value)</span></span></span><br><span class="line"><span class="function"><span class="keyword">synchronized</span> <span class="keyword">boolean</span>             <span class="title">containsKey</span><span class="params">(Object key)</span></span></span><br><span class="line"><span class="function"><span class="keyword">synchronized</span> <span class="keyword">boolean</span>             <span class="title">containsValue</span><span class="params">(Object value)</span></span></span><br><span class="line"><span class="function"><span class="keyword">synchronized</span> Enumeration&lt;V&gt;      <span class="title">elements</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">synchronized</span> Set&lt;Entry&lt;K, V&gt;&gt;    <span class="title">entrySet</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">synchronized</span> <span class="keyword">boolean</span>             <span class="title">equals</span><span class="params">(Object object)</span></span></span><br><span class="line"><span class="function"><span class="keyword">synchronized</span> V                   <span class="title">get</span><span class="params">(Object key)</span></span></span><br><span class="line"><span class="function"><span class="keyword">synchronized</span> <span class="keyword">int</span>                 <span class="title">hashCode</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">synchronized</span> <span class="keyword">boolean</span>             <span class="title">isEmpty</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">synchronized</span> Set&lt;K&gt;              <span class="title">keySet</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">synchronized</span> Enumeration&lt;K&gt;      <span class="title">keys</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">synchronized</span> V                   <span class="title">put</span><span class="params">(K key, V value)</span></span></span><br><span class="line"><span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span>                <span class="title">putAll</span><span class="params">(Map&lt;? extends K, ? extends V&gt; map)</span></span></span><br><span class="line"><span class="function"><span class="keyword">synchronized</span> V                   <span class="title">remove</span><span class="params">(Object key)</span></span></span><br><span class="line"><span class="function"><span class="keyword">synchronized</span> <span class="keyword">int</span>                 <span class="title">size</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">synchronized</span> String              <span class="title">toString</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">synchronized</span> Collection&lt;V&gt;       <span class="title">values</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><h1 id="Hashtable数据结构"><a href="#Hashtable数据结构" class="headerlink" title="Hashtable数据结构"></a>Hashtable数据结构</h1><p>Hashtable的继承关系</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">java.lang.Object</span><br><span class="line">   ↳     java.util.Dictionary&lt;K, V&gt;</span><br><span class="line">         ↳     java.util.Hashtable&lt;K, V&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hashtable</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">Dictionary</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure><p>Hashtable与Map关系如下图：</p><p><img src="http://oov0wb0gl.bkt.clouddn.com/2017-06-08-14967324038221.jpg" alt=""></p><p>从图中可以看出： </p><ol><li>Hashtable继承于Dictionary类，实现了Map接口。Map是”key-value键值对”接口，Dictionary是声明了操作”键值对”函数接口的抽象类。 </li><li>Hashtable是通过”拉链法”实现的哈希表。它包括几个重要的成员变量：table, count, threshold, loadFactor, modCount。<ol><li>table  是一个Entry[]数组类型，而Entry实际上就是一个单向链表。哈希表的”key-value键值对”都是存储在Entry数组中的。 </li><li>count  是Hashtable的大小，它是Hashtable保存的键值对的数量。</li><li>threshold  是Hashtable的阈值，用于判断是否需要调整Hashtable的容量。threshold的值=”容量*加载因子”。</li><li>loadFactor  就是加载因子。 </li><li>modCount  是用来实现fail-fast机制的。</li></ol></li></ol><h1 id="Hashtable源码解析-基于JDK1-6-0-45"><a href="#Hashtable源码解析-基于JDK1-6-0-45" class="headerlink" title="Hashtable源码解析(基于JDK1.6.0_45)"></a>Hashtable源码解析(基于JDK1.6.0_45)</h1><p>为了更了解Hashtable的原理，下面对Hashtable源码代码作出分析。</p><p>在阅读源码时，建议参考后面的说明来建立对Hashtable的整体认识，这样更容易理解Hashtable。</p><p>说明: 在详细介绍Hashtable的代码之前，我们需要了解：和Hashmap一样，Hashtable也是一个散列表，它也是通过“拉链法”解决哈希冲突的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.util;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hashtable</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">Dictionary</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Hashtable保存key-value的数组。</span></span><br><span class="line">    <span class="comment">// Hashtable是采用拉链法实现的，每一个Entry本质上是一个单向链表</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> Entry[] table;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Hashtable中元素的实际数量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 阈值，用于判断是否需要调整Hashtable的容量（threshold = 容量*加载因子）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> threshold;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加载因子</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> loadFactor;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Hashtable被改变的次数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">int</span> modCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 序列版本号</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1421746759512286392L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定“容量大小”和“加载因子”的构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hashtable</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal Capacity: "</span>+</span><br><span class="line">                                               initialCapacity);</span><br><span class="line">        <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal Load: "</span>+loadFactor);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (initialCapacity==<span class="number">0</span>)</span><br><span class="line">            initialCapacity = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">this</span>.loadFactor = loadFactor;</span><br><span class="line">        table = <span class="keyword">new</span> Entry[initialCapacity];</span><br><span class="line">        threshold = (<span class="keyword">int</span>)(initialCapacity * loadFactor);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定“容量大小”的构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hashtable</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(initialCapacity, <span class="number">0.75f</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 默认构造函数。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hashtable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 默认构造函数，指定的容量大小是11；加载因子是0.75</span></span><br><span class="line">        <span class="keyword">this</span>(<span class="number">11</span>, <span class="number">0.75f</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 包含“子Map”的构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hashtable</span><span class="params">(Map&lt;? extends K, ? extends V&gt; t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(Math.max(<span class="number">2</span>*t.size(), <span class="number">11</span>), <span class="number">0.75f</span>);</span><br><span class="line">        <span class="comment">// 将“子Map”的全部元素都添加到Hashtable中</span></span><br><span class="line">        putAll(t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回“所有key”的枚举对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Enumeration&lt;K&gt; <span class="title">keys</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.&lt;K&gt;getEnumeration(KEYS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回“所有value”的枚举对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Enumeration&lt;V&gt; <span class="title">elements</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.&lt;V&gt;getEnumeration(VALUES);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断Hashtable是否包含“值(value)”</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object value)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Hashtable中“键值对”的value不能是null，</span></span><br><span class="line">        <span class="comment">// 若是null的话，抛出异常!</span></span><br><span class="line">        <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从后向前遍历table数组中的元素(Entry)</span></span><br><span class="line">        <span class="comment">// 对于每个Entry(单向链表)，逐个遍历，判断节点的值是否等于value</span></span><br><span class="line">        Entry tab[] = table;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = tab.length ; i-- &gt; <span class="number">0</span> ;) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Entry&lt;K,V&gt; e = tab[i] ; e != <span class="keyword">null</span> ; e = e.next) &#123;</span><br><span class="line">                <span class="keyword">if</span> (e.value.equals(value)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsValue</span><span class="params">(Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> contains(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断Hashtable是否包含key</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">containsKey</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        Entry tab[] = table;</span><br><span class="line">        <span class="keyword">int</span> hash = key.hashCode();</span><br><span class="line">        <span class="comment">// 计算索引值，</span></span><br><span class="line">        <span class="comment">// % tab.length 的目的是防止数据越界</span></span><br><span class="line">        <span class="keyword">int</span> index = (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;</span><br><span class="line">        <span class="comment">// 找到“key对应的Entry(链表)”，然后在链表中找出“哈希值”和“键值”与key都相等的元素</span></span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;K,V&gt; e = tab[index] ; e != <span class="keyword">null</span> ; e = e.next) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((e.hash == hash) &amp;&amp; e.key.equals(key)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回key对应的value，没有的话返回null</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        Entry tab[] = table;</span><br><span class="line">        <span class="keyword">int</span> hash = key.hashCode();</span><br><span class="line">        <span class="comment">// 计算索引值，</span></span><br><span class="line">        <span class="keyword">int</span> index = (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;</span><br><span class="line">        <span class="comment">// 找到“key对应的Entry(链表)”，然后在链表中找出“哈希值”和“键值”与key都相等的元素</span></span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;K,V&gt; e = tab[index] ; e != <span class="keyword">null</span> ; e = e.next) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((e.hash == hash) &amp;&amp; e.key.equals(key)) &#123;</span><br><span class="line">                <span class="keyword">return</span> e.value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调整Hashtable的长度，将长度变成原来的(2倍+1)</span></span><br><span class="line">    <span class="comment">// (01) 将“旧的Entry数组”赋值给一个临时变量。</span></span><br><span class="line">    <span class="comment">// (02) 创建一个“新的Entry数组”，并赋值给“旧的Entry数组”</span></span><br><span class="line">    <span class="comment">// (03) 将“Hashtable”中的全部元素依次添加到“新的Entry数组”中</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">rehash</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> oldCapacity = table.length;</span><br><span class="line">        Entry[] oldMap = table;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> newCapacity = oldCapacity * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">        Entry[] newMap = <span class="keyword">new</span> Entry[newCapacity];</span><br><span class="line"></span><br><span class="line">        modCount++;</span><br><span class="line">        threshold = (<span class="keyword">int</span>)(newCapacity * loadFactor);</span><br><span class="line">        table = newMap;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = oldCapacity ; i-- &gt; <span class="number">0</span> ;) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Entry&lt;K,V&gt; old = oldMap[i] ; old != <span class="keyword">null</span> ; ) &#123;</span><br><span class="line">                Entry&lt;K,V&gt; e = old;</span><br><span class="line">                old = old.next;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">int</span> index = (e.hash &amp; <span class="number">0x7FFFFFFF</span>) % newCapacity;</span><br><span class="line">                e.next = newMap[index];</span><br><span class="line">                newMap[index] = e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将“key-value”添加到Hashtable中</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Hashtable中不能插入value为null的元素！！！</span></span><br><span class="line">        <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 若“Hashtable中已存在键为key的键值对”，</span></span><br><span class="line">        <span class="comment">// 则用“新的value”替换“旧的value”</span></span><br><span class="line">        Entry tab[] = table;</span><br><span class="line">        <span class="keyword">int</span> hash = key.hashCode();</span><br><span class="line">        <span class="keyword">int</span> index = (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;</span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;K,V&gt; e = tab[index] ; e != <span class="keyword">null</span> ; e = e.next) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((e.hash == hash) &amp;&amp; e.key.equals(key)) &#123;</span><br><span class="line">                V old = e.value;</span><br><span class="line">                e.value = value;</span><br><span class="line">                <span class="keyword">return</span> old;</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 若“Hashtable中不存在键为key的键值对”，</span></span><br><span class="line">        <span class="comment">// (01) 将“修改统计数”+1</span></span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="comment">// (02) 若“Hashtable实际容量” &gt; “阈值”(阈值=总的容量 * 加载因子)</span></span><br><span class="line">        <span class="comment">//  则调整Hashtable的大小</span></span><br><span class="line">        <span class="keyword">if</span> (count &gt;= threshold) &#123;</span><br><span class="line">            <span class="comment">// Rehash the table if the threshold is exceeded</span></span><br><span class="line">            rehash();</span><br><span class="line"></span><br><span class="line">            tab = table;</span><br><span class="line">            index = (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// (03) 将“Hashtable中index”位置的Entry(链表)保存到e中</span></span><br><span class="line">        Entry&lt;K,V&gt; e = tab[index];</span><br><span class="line">        <span class="comment">// (04) 创建“新的Entry节点”，并将“新的Entry”插入“Hashtable的index位置”，并设置e为“新的Entry”的下一个元素(即“新Entry”为链表表头)。        </span></span><br><span class="line">        tab[index] = <span class="keyword">new</span> Entry&lt;K,V&gt;(hash, key, value, e);</span><br><span class="line">        <span class="comment">// (05) 将“Hashtable的实际容量”+1</span></span><br><span class="line">        count++;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除Hashtable中键为key的元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> V <span class="title">remove</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        Entry tab[] = table;</span><br><span class="line">        <span class="keyword">int</span> hash = key.hashCode();</span><br><span class="line">        <span class="keyword">int</span> index = (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;</span><br><span class="line">        <span class="comment">// 找到“key对应的Entry(链表)”</span></span><br><span class="line">        <span class="comment">// 然后在链表中找出要删除的节点，并删除该节点。</span></span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;K,V&gt; e = tab[index], prev = <span class="keyword">null</span> ; e != <span class="keyword">null</span> ; prev = e, e = e.next) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((e.hash == hash) &amp;&amp; e.key.equals(key)) &#123;</span><br><span class="line">                modCount++;</span><br><span class="line">                <span class="keyword">if</span> (prev != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    prev.next = e.next;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    tab[index] = e.next;</span><br><span class="line">                &#125;</span><br><span class="line">                count--;</span><br><span class="line">                V oldValue = e.value;</span><br><span class="line">                e.value = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">return</span> oldValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将“Map(t)”的中全部元素逐一添加到Hashtable中</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">putAll</span><span class="params">(Map&lt;? extends K, ? extends V&gt; t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;? extends K, ? extends V&gt; e : t.entrySet())</span><br><span class="line">            put(e.getKey(), e.getValue());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清空Hashtable</span></span><br><span class="line">    <span class="comment">// 将Hashtable的table数组的值全部设为null</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Entry tab[] = table;</span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> index = tab.length; --index &gt;= <span class="number">0</span>; )</span><br><span class="line">            tab[index] = <span class="keyword">null</span>;</span><br><span class="line">        count = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 克隆一个Hashtable，并以Object的形式返回。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Object <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Hashtable&lt;K,V&gt; t = (Hashtable&lt;K,V&gt;) <span class="keyword">super</span>.clone();</span><br><span class="line">            t.table = <span class="keyword">new</span> Entry[table.length];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = table.length ; i-- &gt; <span class="number">0</span> ; ) &#123;</span><br><span class="line">                t.table[i] = (table[i] != <span class="keyword">null</span>)</span><br><span class="line">                ? (Entry&lt;K,V&gt;) table[i].clone() : <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            t.keySet = <span class="keyword">null</span>;</span><br><span class="line">            t.entrySet = <span class="keyword">null</span>;</span><br><span class="line">            t.values = <span class="keyword">null</span>;</span><br><span class="line">            t.modCount = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">            <span class="comment">// this shouldn't happen, since we are Cloneable</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InternalError();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> max = size() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (max == -<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"&#123;&#125;"</span>;</span><br><span class="line"></span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        Iterator&lt;Map.Entry&lt;K,V&gt;&gt; it = entrySet().iterator();</span><br><span class="line"></span><br><span class="line">        sb.append(<span class="string">'&#123;'</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; ; i++) &#123;</span><br><span class="line">            Map.Entry&lt;K,V&gt; e = it.next();</span><br><span class="line">            K key = e.getKey();</span><br><span class="line">            V value = e.getValue();</span><br><span class="line">            sb.append(key   == <span class="keyword">this</span> ? <span class="string">"(this Map)"</span> : key.toString());</span><br><span class="line">            sb.append(<span class="string">'='</span>);</span><br><span class="line">            sb.append(value == <span class="keyword">this</span> ? <span class="string">"(this Map)"</span> : value.toString());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (i == max)</span><br><span class="line">                <span class="keyword">return</span> sb.append(<span class="string">'&#125;'</span>).toString();</span><br><span class="line">            sb.append(<span class="string">", "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取Hashtable的枚举类对象</span></span><br><span class="line">    <span class="comment">// 若Hashtable的实际大小为0,则返回“空枚举类”对象；</span></span><br><span class="line">    <span class="comment">// 否则，返回正常的Enumerator的对象。(Enumerator实现了迭代器和枚举两个接口)</span></span><br><span class="line">    <span class="keyword">private</span> &lt;T&gt; <span class="function">Enumeration&lt;T&gt; <span class="title">getEnumeration</span><span class="params">(<span class="keyword">int</span> type)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (Enumeration&lt;T&gt;)emptyEnumerator;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Enumerator&lt;T&gt;(type, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取Hashtable的迭代器</span></span><br><span class="line">    <span class="comment">// 若Hashtable的实际大小为0,则返回“空迭代器”对象；</span></span><br><span class="line">    <span class="comment">// 否则，返回正常的Enumerator的对象。(Enumerator实现了迭代器和枚举两个接口)</span></span><br><span class="line">    <span class="keyword">private</span> &lt;T&gt; <span class="function">Iterator&lt;T&gt; <span class="title">getIterator</span><span class="params">(<span class="keyword">int</span> type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> (Iterator&lt;T&gt;) emptyIterator;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Enumerator&lt;T&gt;(type, <span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Hashtable的“key的集合”。它是一个Set，意味着没有重复元素</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> Set&lt;K&gt; keySet = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">// Hashtable的“key-value的集合”。它是一个Set，意味着没有重复元素</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">// Hashtable的“key-value的集合”。它是一个Collection，意味着可以有重复元素</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> Collection&lt;V&gt; values = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回一个被synchronizedSet封装后的KeySet对象</span></span><br><span class="line">    <span class="comment">// synchronizedSet封装的目的是对KeySet的所有方法都添加synchronized，实现多线程同步</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;K&gt; <span class="title">keySet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (keySet == <span class="keyword">null</span>)</span><br><span class="line">            keySet = Collections.synchronizedSet(<span class="keyword">new</span> KeySet(), <span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">return</span> keySet;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Hashtable的Key的Set集合。</span></span><br><span class="line">    <span class="comment">// KeySet继承于AbstractSet，所以，KeySet中的元素没有重复的。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">KeySet</span> <span class="keyword">extends</span> <span class="title">AbstractSet</span>&lt;<span class="title">K</span>&gt; </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Iterator&lt;K&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> getIterator(KEYS);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> containsKey(o);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Hashtable.<span class="keyword">this</span>.remove(o) != <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            Hashtable.<span class="keyword">this</span>.clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回一个被synchronizedSet封装后的EntrySet对象</span></span><br><span class="line">    <span class="comment">// synchronizedSet封装的目的是对EntrySet的所有方法都添加synchronized，实现多线程同步</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet() &#123;</span><br><span class="line">        <span class="keyword">if</span> (entrySet==<span class="keyword">null</span>)</span><br><span class="line">            entrySet = Collections.synchronizedSet(<span class="keyword">new</span> EntrySet(), <span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">return</span> entrySet;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Hashtable的Entry的Set集合。</span></span><br><span class="line">    <span class="comment">// EntrySet继承于AbstractSet，所以，EntrySet中的元素没有重复的。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">EntrySet</span> <span class="keyword">extends</span> <span class="title">AbstractSet</span>&lt;<span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> Iterator&lt;Map.Entry&lt;K,V&gt;&gt; iterator() &#123;</span><br><span class="line">            <span class="keyword">return</span> getIterator(ENTRIES);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(Map.Entry&lt;K,V&gt; o)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.add(o);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查找EntrySet中是否包含Object(0)</span></span><br><span class="line">        <span class="comment">// 首先，在table中找到o对应的Entry(Entry是一个单向链表)</span></span><br><span class="line">        <span class="comment">// 然后，查找Entry链表中是否存在Object</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Map.Entry))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            Map.Entry entry = (Map.Entry)o;</span><br><span class="line">            Object key = entry.getKey();</span><br><span class="line">            Entry[] tab = table;</span><br><span class="line">            <span class="keyword">int</span> hash = key.hashCode();</span><br><span class="line">            <span class="keyword">int</span> index = (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (Entry e = tab[index]; e != <span class="keyword">null</span>; e = e.next)</span><br><span class="line">                <span class="keyword">if</span> (e.hash==hash &amp;&amp; e.equals(entry))</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除元素Object(0)</span></span><br><span class="line">        <span class="comment">// 首先，在table中找到o对应的Entry(Entry是一个单向链表)</span></span><br><span class="line">        <span class="comment">// 然后，删除链表中的元素Object</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Map.Entry))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            Map.Entry&lt;K,V&gt; entry = (Map.Entry&lt;K,V&gt;) o;</span><br><span class="line">            K key = entry.getKey();</span><br><span class="line">            Entry[] tab = table;</span><br><span class="line">            <span class="keyword">int</span> hash = key.hashCode();</span><br><span class="line">            <span class="keyword">int</span> index = (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (Entry&lt;K,V&gt; e = tab[index], prev = <span class="keyword">null</span>; e != <span class="keyword">null</span>;</span><br><span class="line">                 prev = e, e = e.next) &#123;</span><br><span class="line">                <span class="keyword">if</span> (e.hash==hash &amp;&amp; e.equals(entry)) &#123;</span><br><span class="line">                    modCount++;</span><br><span class="line">                    <span class="keyword">if</span> (prev != <span class="keyword">null</span>)</span><br><span class="line">                        prev.next = e.next;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        tab[index] = e.next;</span><br><span class="line"></span><br><span class="line">                    count--;</span><br><span class="line">                    e.value = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            Hashtable.<span class="keyword">this</span>.clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回一个被synchronizedCollection封装后的ValueCollection对象</span></span><br><span class="line">    <span class="comment">// synchronizedCollection封装的目的是对ValueCollection的所有方法都添加synchronized，实现多线程同步</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;V&gt; <span class="title">values</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (values==<span class="keyword">null</span>)</span><br><span class="line">        values = Collections.synchronizedCollection(<span class="keyword">new</span> ValueCollection(),</span><br><span class="line">                                                        <span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">return</span> values;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Hashtable的value的Collection集合。</span></span><br><span class="line">    <span class="comment">// ValueCollection继承于AbstractCollection，所以，ValueCollection中的元素可以重复的。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ValueCollection</span> <span class="keyword">extends</span> <span class="title">AbstractCollection</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Iterator&lt;V&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getIterator(VALUES);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> containsValue(o);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            Hashtable.<span class="keyword">this</span>.clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重新equals()函数</span></span><br><span class="line">    <span class="comment">// 若两个Hashtable的所有key-value键值对都相等，则判断它们两个相等</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">this</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Map))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Map&lt;K,V&gt; t = (Map&lt;K,V&gt;) o;</span><br><span class="line">        <span class="keyword">if</span> (t.size() != size())</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 通过迭代器依次取出当前Hashtable的key-value键值对</span></span><br><span class="line">            <span class="comment">// 并判断该键值对，存在于Hashtable(o)中。</span></span><br><span class="line">            <span class="comment">// 若不存在，则立即返回false；否则，遍历完“当前Hashtable”并返回true。</span></span><br><span class="line">            Iterator&lt;Map.Entry&lt;K,V&gt;&gt; i = entrySet().iterator();</span><br><span class="line">            <span class="keyword">while</span> (i.hasNext()) &#123;</span><br><span class="line">                Map.Entry&lt;K,V&gt; e = i.next();</span><br><span class="line">                K key = e.getKey();</span><br><span class="line">                V value = e.getValue();</span><br><span class="line">                <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!(t.get(key)==<span class="keyword">null</span> &amp;&amp; t.containsKey(key)))</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!value.equals(t.get(key)))</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassCastException unused)   &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NullPointerException unused) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算Hashtable的哈希值</span></span><br><span class="line">    <span class="comment">// 若 Hashtable的实际大小为0 或者 加载因子&lt;0，则返回0。</span></span><br><span class="line">    <span class="comment">// 否则，返回“Hashtable中的每个Entry的key和value的异或值 的总和”。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> h = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (count == <span class="number">0</span> || loadFactor &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> h;  <span class="comment">// Returns zero</span></span><br><span class="line"></span><br><span class="line">        loadFactor = -loadFactor;  <span class="comment">// Mark hashCode computation in progress</span></span><br><span class="line">        Entry[] tab = table;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tab.length; i++)</span><br><span class="line">            <span class="keyword">for</span> (Entry e = tab[i]; e != <span class="keyword">null</span>; e = e.next)</span><br><span class="line">                h += e.key.hashCode() ^ e.value.hashCode();</span><br><span class="line">        loadFactor = -loadFactor;  <span class="comment">// Mark hashCode computation complete</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> h;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// java.io.Serializable的写入函数</span></span><br><span class="line">    <span class="comment">// 将Hashtable的“总的容量，实际容量，所有的Entry”都写入到输出流中</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">writeObject</span><span class="params">(java.io.ObjectOutputStream s)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// Write out the length, threshold, loadfactor</span></span><br><span class="line">        s.defaultWriteObject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Write out length, count of elements and then the key/value objects</span></span><br><span class="line">        s.writeInt(table.length);</span><br><span class="line">        s.writeInt(count);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> index = table.length-<span class="number">1</span>; index &gt;= <span class="number">0</span>; index--) &#123;</span><br><span class="line">            Entry entry = table[index];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (entry != <span class="keyword">null</span>) &#123;</span><br><span class="line">            s.writeObject(entry.key);</span><br><span class="line">            s.writeObject(entry.value);</span><br><span class="line">            entry = entry.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// java.io.Serializable的读取函数：根据写入方式读出</span></span><br><span class="line">    <span class="comment">// 将Hashtable的“总的容量，实际容量，所有的Entry”依次读出</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span></span><br><span class="line"><span class="function">         <span class="keyword">throws</span> IOException, ClassNotFoundException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// Read in the length, threshold, and loadfactor</span></span><br><span class="line">        s.defaultReadObject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Read the original length of the array and number of elements</span></span><br><span class="line">        <span class="keyword">int</span> origlength = s.readInt();</span><br><span class="line">        <span class="keyword">int</span> elements = s.readInt();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Compute new size with a bit of room 5% to grow but</span></span><br><span class="line">        <span class="comment">// no larger than the original size.  Make the length</span></span><br><span class="line">        <span class="comment">// odd if it's large enough, this helps distribute the entries.</span></span><br><span class="line">        <span class="comment">// Guard against the length ending up zero, that's not valid.</span></span><br><span class="line">        <span class="keyword">int</span> length = (<span class="keyword">int</span>)(elements * loadFactor) + (elements / <span class="number">20</span>) + <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">if</span> (length &gt; elements &amp;&amp; (length &amp; <span class="number">1</span>) == <span class="number">0</span>)</span><br><span class="line">            length--;</span><br><span class="line">        <span class="keyword">if</span> (origlength &gt; <span class="number">0</span> &amp;&amp; length &gt; origlength)</span><br><span class="line">            length = origlength;</span><br><span class="line"></span><br><span class="line">        Entry[] table = <span class="keyword">new</span> Entry[length];</span><br><span class="line">        count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Read the number of elements and then all the key/value objects</span></span><br><span class="line">        <span class="keyword">for</span> (; elements &gt; <span class="number">0</span>; elements--) &#123;</span><br><span class="line">            K key = (K)s.readObject();</span><br><span class="line">            V value = (V)s.readObject();</span><br><span class="line">                <span class="comment">// synch could be eliminated for performance</span></span><br><span class="line">                reconstitutionPut(table, key, value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.table = table;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">reconstitutionPut</span><span class="params">(Entry[] tab, K key, V value)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> StreamCorruptedException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> java.io.StreamCorruptedException();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Makes sure the key is not already in the hashtable.</span></span><br><span class="line">        <span class="comment">// This should not happen in deserialized version.</span></span><br><span class="line">        <span class="keyword">int</span> hash = key.hashCode();</span><br><span class="line">        <span class="keyword">int</span> index = (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;</span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;K,V&gt; e = tab[index] ; e != <span class="keyword">null</span> ; e = e.next) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((e.hash == hash) &amp;&amp; e.key.equals(key)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> java.io.StreamCorruptedException();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Creates the new entry.</span></span><br><span class="line">        Entry&lt;K,V&gt; e = tab[index];</span><br><span class="line">        tab[index] = <span class="keyword">new</span> Entry&lt;K,V&gt;(hash, key, value, e);</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Hashtable的Entry节点，它本质上是一个单向链表。</span></span><br><span class="line">    <span class="comment">// 也因此，我们才能推断出Hashtable是由拉链法实现的散列表</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        <span class="comment">// 哈希值</span></span><br><span class="line">        <span class="keyword">int</span> hash;</span><br><span class="line">        K key;</span><br><span class="line">        V value;</span><br><span class="line">        <span class="comment">// 指向的下一个Entry，即链表的下一个节点</span></span><br><span class="line">        Entry&lt;K,V&gt; next;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构造函数</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="title">Entry</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, Entry&lt;K,V&gt; next)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.hash = hash;</span><br><span class="line">            <span class="keyword">this</span>.key = key;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Entry&lt;K,V&gt;(hash, key, value,</span><br><span class="line">                  (next==<span class="keyword">null</span> ? <span class="keyword">null</span> : (Entry&lt;K,V&gt;) next.clone()));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> K <span class="title">getKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> key;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> V <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置value。若value是null，则抛出异常。</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> V <span class="title">setValue</span><span class="params">(V value)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (value == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line"></span><br><span class="line">            V oldValue = <span class="keyword">this</span>.value;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 覆盖equals()方法，判断两个Entry是否相等。</span></span><br><span class="line">        <span class="comment">// 若两个Entry的key和value都相等，则认为它们相等。</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Map.Entry))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            Map.Entry e = (Map.Entry)o;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> (key==<span class="keyword">null</span> ? e.getKey()==<span class="keyword">null</span> : key.equals(e.getKey())) &amp;&amp;</span><br><span class="line">               (value==<span class="keyword">null</span> ? e.getValue()==<span class="keyword">null</span> : value.equals(e.getValue()));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> hash ^ (value==<span class="keyword">null</span> ? <span class="number">0</span> : value.hashCode());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> key.toString()+<span class="string">"="</span>+value.toString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> KEYS = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> VALUES = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ENTRIES = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Enumerator的作用是提供了“通过elements()遍历Hashtable的接口” 和 “通过entrySet()遍历Hashtable的接口”。因为，它同时实现了 “Enumerator接口”和“Iterator接口”。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Enumerator</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Enumeration</span>&lt;<span class="title">T</span>&gt;, <span class="title">Iterator</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">        <span class="comment">// 指向Hashtable的table</span></span><br><span class="line">        Entry[] table = Hashtable.<span class="keyword">this</span>.table;</span><br><span class="line">        <span class="comment">// Hashtable的总的大小</span></span><br><span class="line">        <span class="keyword">int</span> index = table.length;</span><br><span class="line">        Entry&lt;K,V&gt; entry = <span class="keyword">null</span>;</span><br><span class="line">        Entry&lt;K,V&gt; lastReturned = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> type;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Enumerator是 “迭代器(Iterator)” 还是 “枚举类(Enumeration)”的标志</span></span><br><span class="line">        <span class="comment">// iterator为true，表示它是迭代器；否则，是枚举类。</span></span><br><span class="line">        <span class="keyword">boolean</span> iterator;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在将Enumerator当作迭代器使用时会用到，用来实现fail-fast机制。</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line"></span><br><span class="line">        Enumerator(<span class="keyword">int</span> type, <span class="keyword">boolean</span> iterator) &#123;</span><br><span class="line">            <span class="keyword">this</span>.type = type;</span><br><span class="line">            <span class="keyword">this</span>.iterator = iterator;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从遍历table的数组的末尾向前查找，直到找到不为null的Entry。</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasMoreElements</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            Entry&lt;K,V&gt; e = entry;</span><br><span class="line">            <span class="keyword">int</span> i = index;</span><br><span class="line">            Entry[] t = table;</span><br><span class="line">            <span class="comment">/* Use locals for faster loop iteration */</span></span><br><span class="line">            <span class="keyword">while</span> (e == <span class="keyword">null</span> &amp;&amp; i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                e = t[--i];</span><br><span class="line">            &#125;</span><br><span class="line">            entry = e;</span><br><span class="line">            index = i;</span><br><span class="line">            <span class="keyword">return</span> e != <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取下一个元素</span></span><br><span class="line">        <span class="comment">// 注意：从hasMoreElements() 和nextElement() 可以看出“Hashtable的elements()遍历方式”</span></span><br><span class="line">        <span class="comment">// 首先，从后向前的遍历table数组。table数组的每个节点都是一个单向链表(Entry)。</span></span><br><span class="line">        <span class="comment">// 然后，依次向后遍历单向链表Entry。</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> T <span class="title">nextElement</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            Entry&lt;K,V&gt; et = entry;</span><br><span class="line">            <span class="keyword">int</span> i = index;</span><br><span class="line">            Entry[] t = table;</span><br><span class="line">            <span class="comment">/* Use locals for faster loop iteration */</span></span><br><span class="line">            <span class="keyword">while</span> (et == <span class="keyword">null</span> &amp;&amp; i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                et = t[--i];</span><br><span class="line">            &#125;</span><br><span class="line">            entry = et;</span><br><span class="line">            index = i;</span><br><span class="line">            <span class="keyword">if</span> (et != <span class="keyword">null</span>) &#123;</span><br><span class="line">                Entry&lt;K,V&gt; e = lastReturned = entry;</span><br><span class="line">                entry = e.next;</span><br><span class="line">                <span class="keyword">return</span> type == KEYS ? (T)e.key : (type == VALUES ? (T)e.value : (T)e);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">"Hashtable Enumerator"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 迭代器Iterator的判断是否存在下一个元素</span></span><br><span class="line">        <span class="comment">// 实际上，它是调用的hasMoreElements()</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> hasMoreElements();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 迭代器获取下一个元素</span></span><br><span class="line">        <span class="comment">// 实际上，它是调用的nextElement()</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> T <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">            <span class="keyword">return</span> nextElement();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 迭代器的remove()接口。</span></span><br><span class="line">        <span class="comment">// 首先，它在table数组中找出要删除元素所在的Entry，</span></span><br><span class="line">        <span class="comment">// 然后，删除单向链表Entry中的元素。</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!iterator)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">            <span class="keyword">if</span> (lastReturned == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Hashtable Enumerator"</span>);</span><br><span class="line">            <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">synchronized</span>(Hashtable.<span class="keyword">this</span>) &#123;</span><br><span class="line">                Entry[] tab = Hashtable.<span class="keyword">this</span>.table;</span><br><span class="line">                <span class="keyword">int</span> index = (lastReturned.hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (Entry&lt;K,V&gt; e = tab[index], prev = <span class="keyword">null</span>; e != <span class="keyword">null</span>;</span><br><span class="line">                     prev = e, e = e.next) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (e == lastReturned) &#123;</span><br><span class="line">                        modCount++;</span><br><span class="line">                        expectedModCount++;</span><br><span class="line">                        <span class="keyword">if</span> (prev == <span class="keyword">null</span>)</span><br><span class="line">                            tab[index] = e.next;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                            prev.next = e.next;</span><br><span class="line">                        count--;</span><br><span class="line">                        lastReturned = <span class="keyword">null</span>;</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Enumeration emptyEnumerator = <span class="keyword">new</span> EmptyEnumerator();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Iterator emptyIterator = <span class="keyword">new</span> EmptyIterator();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 空枚举类</span></span><br><span class="line">    <span class="comment">// 当Hashtable的实际大小为0；此时，又要通过Enumeration遍历Hashtable时，返回的是“空枚举类”的对象。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">EmptyEnumerator</span> <span class="keyword">implements</span> <span class="title">Enumeration</span>&lt;<span class="title">Object</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        EmptyEnumerator() &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 空枚举类的hasMoreElements() 始终返回false</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasMoreElements</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 空枚举类的nextElement() 抛出异常</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">nextElement</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">"Hashtable Enumerator"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 空迭代器</span></span><br><span class="line">    <span class="comment">// 当Hashtable的实际大小为0；此时，又要通过迭代器遍历Hashtable时，返回的是“空迭代器”的对象。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">EmptyIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">Object</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        EmptyIterator() &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">"Hashtable Iterator"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Hashtable Iterator"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Hashtable的“拉链法”相关内容"><a href="#Hashtable的“拉链法”相关内容" class="headerlink" title="Hashtable的“拉链法”相关内容"></a>Hashtable的“拉链法”相关内容</h2><h3 id="Hashtable数据存储数组"><a href="#Hashtable数据存储数组" class="headerlink" title="Hashtable数据存储数组"></a>Hashtable数据存储数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> Entry[] table;</span><br></pre></td></tr></table></figure><p>Hashtable中的key-value都是存储在table数组中的。</p><h3 id="数据节点Entry的数据结构"><a href="#数据节点Entry的数据结构" class="headerlink" title="数据节点Entry的数据结构"></a>数据节点Entry的数据结构</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 哈希值</span></span><br><span class="line">    <span class="keyword">int</span> hash;</span><br><span class="line">    K key;</span><br><span class="line">    V value;</span><br><span class="line">    <span class="comment">// 指向的下一个Entry，即链表的下一个节点</span></span><br><span class="line">    Entry&lt;K,V&gt; next;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">Entry</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, Entry&lt;K,V&gt; next)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.hash = hash;</span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Entry&lt;K,V&gt;(hash, key, value,</span><br><span class="line">              (next==<span class="keyword">null</span> ? <span class="keyword">null</span> : (Entry&lt;K,V&gt;) next.clone()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> K <span class="title">getKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置value。若value是null，则抛出异常。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">setValue</span><span class="params">(V value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (value == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line"></span><br><span class="line">        V oldValue = <span class="keyword">this</span>.value;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">        <span class="keyword">return</span> oldValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 覆盖equals()方法，判断两个Entry是否相等。</span></span><br><span class="line">    <span class="comment">// 若两个Entry的key和value都相等，则认为它们相等。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Map.Entry))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Map.Entry e = (Map.Entry)o;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (key==<span class="keyword">null</span> ? e.getKey()==<span class="keyword">null</span> : key.equals(e.getKey())) &amp;&amp;</span><br><span class="line">           (value==<span class="keyword">null</span> ? e.getValue()==<span class="keyword">null</span> : value.equals(e.getValue()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hash ^ (value==<span class="keyword">null</span> ? <span class="number">0</span> : value.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> key.toString()+<span class="string">"="</span>+value.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从中，我们可以看出 Entry 实际上就是一个单向链表。这也是为什么我们说Hashtable是通过拉链法解决哈希冲突的。</p><p>Entry 实现了Map.Entry 接口，即实现getKey(), getValue(), setValue(V value), equals(Object o), hashCode()这些函数。这些都是基本的读取/修改key、value值的函数。</p><h2 id="Hashtable的构造函数-1"><a href="#Hashtable的构造函数-1" class="headerlink" title="Hashtable的构造函数"></a>Hashtable的构造函数</h2><p>Hashtable共包括4个构造函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认构造函数。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Hashtable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 默认构造函数，指定的容量大小是11；加载因子是0.75</span></span><br><span class="line">    <span class="keyword">this</span>(<span class="number">11</span>, <span class="number">0.75f</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定“容量大小”的构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Hashtable</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(initialCapacity, <span class="number">0.75f</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定“容量大小”和“加载因子”的构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Hashtable</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal Capacity: "</span>+</span><br><span class="line">                                           initialCapacity);</span><br><span class="line">    <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal Load: "</span>+loadFactor);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (initialCapacity==<span class="number">0</span>)</span><br><span class="line">        initialCapacity = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">this</span>.loadFactor = loadFactor;</span><br><span class="line">    table = <span class="keyword">new</span> Entry[initialCapacity];</span><br><span class="line">    threshold = (<span class="keyword">int</span>)(initialCapacity * loadFactor);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 包含“子Map”的构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Hashtable</span><span class="params">(Map&lt;? extends K, ? extends V&gt; t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(Math.max(<span class="number">2</span>*t.size(), <span class="number">11</span>), <span class="number">0.75f</span>);</span><br><span class="line">    <span class="comment">// 将“子Map”的全部元素都添加到Hashtable中</span></span><br><span class="line">    putAll(t);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Hashtable的主要对外接口"><a href="#Hashtable的主要对外接口" class="headerlink" title="Hashtable的主要对外接口"></a>Hashtable的主要对外接口</h2><h3 id="clear"><a href="#clear" class="headerlink" title="clear()"></a>clear()</h3><p>clear() 的作用是清空Hashtable。它是将Hashtable的table数组的值全部设为null</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Entry tab[] = table;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> index = tab.length; --index &gt;= <span class="number">0</span>; )</span><br><span class="line">        tab[index] = <span class="keyword">null</span>;</span><br><span class="line">    count = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="contains-和-containsValue"><a href="#contains-和-containsValue" class="headerlink" title="contains() 和 containsValue()"></a>contains() 和 containsValue()</h3><p>contains() 和 containsValue() 的作用都是判断Hashtable是否包含“值(value)”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsValue</span><span class="params">(Object value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> contains(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object value)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Hashtable中“键值对”的value不能是null，</span></span><br><span class="line">    <span class="comment">// 若是null的话，抛出异常!</span></span><br><span class="line">    <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从后向前遍历table数组中的元素(Entry)</span></span><br><span class="line">    <span class="comment">// 对于每个Entry(单向链表)，逐个遍历，判断节点的值是否等于value</span></span><br><span class="line">    Entry tab[] = table;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = tab.length ; i-- &gt; <span class="number">0</span> ;) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;K,V&gt; e = tab[i] ; e != <span class="keyword">null</span> ; e = e.next) &#123;</span><br><span class="line">            <span class="keyword">if</span> (e.value.equals(value)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="containsKey"><a href="#containsKey" class="headerlink" title="containsKey()"></a>containsKey()</h3><p>containsKey() 的作用是判断Hashtable是否包含key</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">containsKey</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    Entry tab[] = table;</span><br><span class="line">    <span class="keyword">int</span> hash = key.hashCode();</span><br><span class="line">    <span class="comment">// 计算索引值，</span></span><br><span class="line">    <span class="comment">// % tab.length 的目的是防止数据越界</span></span><br><span class="line">    <span class="keyword">int</span> index = (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;</span><br><span class="line">    <span class="comment">// 找到“key对应的Entry(链表)”，然后在链表中找出“哈希值”和“键值”与key都相等的元素</span></span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e = tab[index] ; e != <span class="keyword">null</span> ; e = e.next) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((e.hash == hash) &amp;&amp; e.key.equals(key)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="elements"><a href="#elements" class="headerlink" title="elements()"></a>elements()</h3><p>elements() 的作用是返回“所有value”的枚举对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Enumeration&lt;V&gt; <span class="title">elements</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.&lt;V&gt;getEnumeration(VALUES);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取Hashtable的枚举类对象</span></span><br><span class="line"><span class="keyword">private</span> &lt;T&gt; <span class="function">Enumeration&lt;T&gt; <span class="title">getEnumeration</span><span class="params">(<span class="keyword">int</span> type)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (Enumeration&lt;T&gt;)emptyEnumerator;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Enumerator&lt;T&gt;(type, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从中，我们可以看出：</p><ol><li>若Hashtable的实际大小为0,则返回“空枚举类”对象emptyEnumerator；</li><li>否则，返回正常的Enumerator的对象。(Enumerator实现了迭代器和枚举两个接口)</li></ol><p>我们先看看emptyEnumerator对象是如何实现的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Enumeration emptyEnumerator = <span class="keyword">new</span> EmptyEnumerator();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 空枚举类</span></span><br><span class="line"><span class="comment">// 当Hashtable的实际大小为0；此时，又要通过Enumeration遍历Hashtable时，返回的是“空枚举类”的对象。</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">EmptyEnumerator</span> <span class="keyword">implements</span> <span class="title">Enumeration</span>&lt;<span class="title">Object</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    EmptyEnumerator() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 空枚举类的hasMoreElements() 始终返回false</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasMoreElements</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 空枚举类的nextElement() 抛出异常</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">nextElement</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">"Hashtable Enumerator"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在来看看Enumeration类</p><p>Enumerator的作用是提供了“通过elements()遍历Hashtable的接口” 和 “通过entrySet()遍历Hashtable的接口”。因为，它同时实现了 “Enumerator接口”和“Iterator接口”。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Enumerator</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Enumeration</span>&lt;<span class="title">T</span>&gt;, <span class="title">Iterator</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 指向Hashtable的table</span></span><br><span class="line">    Entry[] table = Hashtable.<span class="keyword">this</span>.table;</span><br><span class="line">    <span class="comment">// Hashtable的总的大小</span></span><br><span class="line">    <span class="keyword">int</span> index = table.length;</span><br><span class="line">    Entry&lt;K,V&gt; entry = <span class="keyword">null</span>;</span><br><span class="line">    Entry&lt;K,V&gt; lastReturned = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">int</span> type;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Enumerator是 “迭代器(Iterator)” 还是 “枚举类(Enumeration)”的标志</span></span><br><span class="line">    <span class="comment">// iterator为true，表示它是迭代器；否则，是枚举类。</span></span><br><span class="line">    <span class="keyword">boolean</span> iterator;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在将Enumerator当作迭代器使用时会用到，用来实现fail-fast机制。</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line"></span><br><span class="line">    Enumerator(<span class="keyword">int</span> type, <span class="keyword">boolean</span> iterator) &#123;</span><br><span class="line">        <span class="keyword">this</span>.type = type;</span><br><span class="line">        <span class="keyword">this</span>.iterator = iterator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从遍历table的数组的末尾向前查找，直到找到不为null的Entry。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasMoreElements</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Entry&lt;K,V&gt; e = entry;</span><br><span class="line">        <span class="keyword">int</span> i = index;</span><br><span class="line">        Entry[] t = table;</span><br><span class="line">        <span class="comment">/* Use locals for faster loop iteration */</span></span><br><span class="line">        <span class="keyword">while</span> (e == <span class="keyword">null</span> &amp;&amp; i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            e = t[--i];</span><br><span class="line">        &#125;</span><br><span class="line">        entry = e;</span><br><span class="line">        index = i;</span><br><span class="line">        <span class="keyword">return</span> e != <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取下一个元素</span></span><br><span class="line">    <span class="comment">// 注意：从hasMoreElements() 和nextElement() 可以看出“Hashtable的elements()遍历方式”</span></span><br><span class="line">    <span class="comment">// 首先，从后向前的遍历table数组。table数组的每个节点都是一个单向链表(Entry)。</span></span><br><span class="line">    <span class="comment">// 然后，依次向后遍历单向链表Entry。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">nextElement</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Entry&lt;K,V&gt; et = entry;</span><br><span class="line">        <span class="keyword">int</span> i = index;</span><br><span class="line">        Entry[] t = table;</span><br><span class="line">        <span class="comment">/* Use locals for faster loop iteration */</span></span><br><span class="line">        <span class="keyword">while</span> (et == <span class="keyword">null</span> &amp;&amp; i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            et = t[--i];</span><br><span class="line">        &#125;</span><br><span class="line">        entry = et;</span><br><span class="line">        index = i;</span><br><span class="line">        <span class="keyword">if</span> (et != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Entry&lt;K,V&gt; e = lastReturned = entry;</span><br><span class="line">            entry = e.next;</span><br><span class="line">            <span class="keyword">return</span> type == KEYS ? (T)e.key : (type == VALUES ? (T)e.value : (T)e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">"Hashtable Enumerator"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 迭代器Iterator的判断是否存在下一个元素</span></span><br><span class="line">    <span class="comment">// 实际上，它是调用的hasMoreElements()</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hasMoreElements();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 迭代器获取下一个元素</span></span><br><span class="line">    <span class="comment">// 实际上，它是调用的nextElement()</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        <span class="keyword">return</span> nextElement();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 迭代器的remove()接口。</span></span><br><span class="line">    <span class="comment">// 首先，它在table数组中找出要删除元素所在的Entry，</span></span><br><span class="line">    <span class="comment">// 然后，删除单向链表Entry中的元素。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!iterator)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">        <span class="keyword">if</span> (lastReturned == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Hashtable Enumerator"</span>);</span><br><span class="line">        <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span>(Hashtable.<span class="keyword">this</span>) &#123;</span><br><span class="line">            Entry[] tab = Hashtable.<span class="keyword">this</span>.table;</span><br><span class="line">            <span class="keyword">int</span> index = (lastReturned.hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (Entry&lt;K,V&gt; e = tab[index], prev = <span class="keyword">null</span>; e != <span class="keyword">null</span>;</span><br><span class="line">                 prev = e, e = e.next) &#123;</span><br><span class="line">                <span class="keyword">if</span> (e == lastReturned) &#123;</span><br><span class="line">                    modCount++;</span><br><span class="line">                    expectedModCount++;</span><br><span class="line">                    <span class="keyword">if</span> (prev == <span class="keyword">null</span>)</span><br><span class="line">                        tab[index] = e.next;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        prev.next = e.next;</span><br><span class="line">                    count--;</span><br><span class="line">                    lastReturned = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>entrySet(), keySet(), keys(), values()的实现方法和elements()差不多，而且源码中已经明确的给出了注释。这里就不再做过多说明了。</p><h3 id="get"><a href="#get" class="headerlink" title="get()"></a>get()</h3><p>get() 的作用就是获取key对应的value，没有的话返回null</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    Entry tab[] = table;</span><br><span class="line">    <span class="keyword">int</span> hash = key.hashCode();</span><br><span class="line">    <span class="comment">// 计算索引值，</span></span><br><span class="line">    <span class="keyword">int</span> index = (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;</span><br><span class="line">    <span class="comment">// 找到“key对应的Entry(链表)”，然后在链表中找出“哈希值”和“键值”与key都相等的元素</span></span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e = tab[index] ; e != <span class="keyword">null</span> ; e = e.next) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((e.hash == hash) &amp;&amp; e.key.equals(key)) &#123;</span><br><span class="line">            <span class="keyword">return</span> e.value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="put"><a href="#put" class="headerlink" title="put()"></a>put()</h3><p>put() 的作用是对外提供接口，让Hashtable对象可以通过put()将“key-value”添加到Hashtable中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Hashtable中不能插入value为null的元素！！！</span></span><br><span class="line">    <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 若“Hashtable中已存在键为key的键值对”，</span></span><br><span class="line">    <span class="comment">// 则用“新的value”替换“旧的value”</span></span><br><span class="line">    Entry tab[] = table;</span><br><span class="line">    <span class="keyword">int</span> hash = key.hashCode();</span><br><span class="line">    <span class="keyword">int</span> index = (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;</span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e = tab[index] ; e != <span class="keyword">null</span> ; e = e.next) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((e.hash == hash) &amp;&amp; e.key.equals(key)) &#123;</span><br><span class="line">            V old = e.value;</span><br><span class="line">            e.value = value;</span><br><span class="line">            <span class="keyword">return</span> old;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 若“Hashtable中不存在键为key的键值对”，</span></span><br><span class="line">    <span class="comment">// (01) 将“修改统计数”+1</span></span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="comment">// (02) 若“Hashtable实际容量” &gt; “阈值”(阈值=总的容量 * 加载因子)</span></span><br><span class="line">    <span class="comment">//  则调整Hashtable的大小</span></span><br><span class="line">    <span class="keyword">if</span> (count &gt;= threshold) &#123;</span><br><span class="line">        <span class="comment">// Rehash the table if the threshold is exceeded</span></span><br><span class="line">        rehash();</span><br><span class="line"></span><br><span class="line">        tab = table;</span><br><span class="line">        index = (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// (03) 将“Hashtable中index”位置的Entry(链表)保存到e中</span></span><br><span class="line">    Entry&lt;K,V&gt; e = tab[index];</span><br><span class="line">    <span class="comment">// (04) 创建“新的Entry节点”，并将“新的Entry”插入“Hashtable的index位置”，并设置e为“新的Entry”的下一个元素(即“新Entry”为链表表头)。        </span></span><br><span class="line">    tab[index] = <span class="keyword">new</span> Entry&lt;K,V&gt;(hash, key, value, e);</span><br><span class="line">    <span class="comment">// (05) 将“Hashtable的实际容量”+1</span></span><br><span class="line">    count++;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="putAll"><a href="#putAll" class="headerlink" title="putAll()"></a>putAll()</h3><p>putAll() 的作用是将“Map(t)”的中全部元素逐一添加到Hashtable中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">putAll</span><span class="params">(Map&lt;? extends K, ? extends V&gt; t)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">for</span> (Map.Entry&lt;? extends K, ? extends V&gt; e : t.entrySet())</span><br><span class="line">          put(e.getKey(), e.getValue());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="remove"><a href="#remove" class="headerlink" title="remove()"></a>remove()</h3><p>remove() 的作用就是删除Hashtable中键为key的元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> V <span class="title">remove</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    Entry tab[] = table;</span><br><span class="line">    <span class="keyword">int</span> hash = key.hashCode();</span><br><span class="line">    <span class="keyword">int</span> index = (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;</span><br><span class="line">    <span class="comment">// 找到“key对应的Entry(链表)”</span></span><br><span class="line">    <span class="comment">// 然后在链表中找出要删除的节点，并删除该节点。</span></span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e = tab[index], prev = <span class="keyword">null</span> ; e != <span class="keyword">null</span> ; prev = e, e = e.next) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((e.hash == hash) &amp;&amp; e.key.equals(key)) &#123;</span><br><span class="line">            modCount++;</span><br><span class="line">            <span class="keyword">if</span> (prev != <span class="keyword">null</span>) &#123;</span><br><span class="line">                prev.next = e.next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                tab[index] = e.next;</span><br><span class="line">            &#125;</span><br><span class="line">            count--;</span><br><span class="line">            V oldValue = e.value;</span><br><span class="line">            e.value = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Hashtable实现的Cloneable接口"><a href="#Hashtable实现的Cloneable接口" class="headerlink" title="Hashtable实现的Cloneable接口"></a>Hashtable实现的Cloneable接口</h2><p>Hashtable实现了Cloneable接口，即实现了clone()方法。<br>clone()方法的作用很简单，就是克隆一个Hashtable对象并返回。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 克隆一个Hashtable，并以Object的形式返回。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Object <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Hashtable&lt;K,V&gt; t = (Hashtable&lt;K,V&gt;) <span class="keyword">super</span>.clone();</span><br><span class="line">        t.table = <span class="keyword">new</span> Entry[table.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = table.length ; i-- &gt; <span class="number">0</span> ; ) &#123;</span><br><span class="line">            t.table[i] = (table[i] != <span class="keyword">null</span>)</span><br><span class="line">            ? (Entry&lt;K,V&gt;) table[i].clone() : <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        t.keySet = <span class="keyword">null</span>;</span><br><span class="line">        t.entrySet = <span class="keyword">null</span>;</span><br><span class="line">        t.values = <span class="keyword">null</span>;</span><br><span class="line">        t.modCount = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">        <span class="comment">// this shouldn't happen, since we are Cloneable</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InternalError();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Hashtable实现的Serializable接口"><a href="#Hashtable实现的Serializable接口" class="headerlink" title="Hashtable实现的Serializable接口"></a>Hashtable实现的Serializable接口</h2><p>Hashtable实现java.io.Serializable，分别实现了串行读取、写入功能。</p><p>串行写入函数就是将Hashtable的“总的容量，实际容量，所有的Entry”都写入到输出流中<br>串行读取函数：根据写入方式读出将Hashtable的“总的容量，实际容量，所有的Entry”依次读出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">writeObject</span><span class="params">(java.io.ObjectOutputStream s)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// Write out the length, threshold, loadfactor</span></span><br><span class="line">    s.defaultWriteObject();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Write out length, count of elements and then the key/value objects</span></span><br><span class="line">    s.writeInt(table.length);</span><br><span class="line">    s.writeInt(count);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> index = table.length-<span class="number">1</span>; index &gt;= <span class="number">0</span>; index--) &#123;</span><br><span class="line">        Entry entry = table[index];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (entry != <span class="keyword">null</span>) &#123;</span><br><span class="line">        s.writeObject(entry.key);</span><br><span class="line">        s.writeObject(entry.value);</span><br><span class="line">        entry = entry.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span></span><br><span class="line"><span class="function">     <span class="keyword">throws</span> IOException, ClassNotFoundException</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// Read in the length, threshold, and loadfactor</span></span><br><span class="line">    s.defaultReadObject();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read the original length of the array and number of elements</span></span><br><span class="line">    <span class="keyword">int</span> origlength = s.readInt();</span><br><span class="line">    <span class="keyword">int</span> elements = s.readInt();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Compute new size with a bit of room 5% to grow but</span></span><br><span class="line">    <span class="comment">// no larger than the original size.  Make the length</span></span><br><span class="line">    <span class="comment">// odd if it's large enough, this helps distribute the entries.</span></span><br><span class="line">    <span class="comment">// Guard against the length ending up zero, that's not valid.</span></span><br><span class="line">    <span class="keyword">int</span> length = (<span class="keyword">int</span>)(elements * loadFactor) + (elements / <span class="number">20</span>) + <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">if</span> (length &gt; elements &amp;&amp; (length &amp; <span class="number">1</span>) == <span class="number">0</span>)</span><br><span class="line">        length--;</span><br><span class="line">    <span class="keyword">if</span> (origlength &gt; <span class="number">0</span> &amp;&amp; length &gt; origlength)</span><br><span class="line">        length = origlength;</span><br><span class="line"></span><br><span class="line">    Entry[] table = <span class="keyword">new</span> Entry[length];</span><br><span class="line">    count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read the number of elements and then all the key/value objects</span></span><br><span class="line">    <span class="keyword">for</span> (; elements &gt; <span class="number">0</span>; elements--) &#123;</span><br><span class="line">        K key = (K)s.readObject();</span><br><span class="line">        V value = (V)s.readObject();</span><br><span class="line">            <span class="comment">// synch could be eliminated for performance</span></span><br><span class="line">            reconstitutionPut(table, key, value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.table = table;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Hashtable遍历方式"><a href="#Hashtable遍历方式" class="headerlink" title="Hashtable遍历方式"></a>Hashtable遍历方式</h1><h2 id="遍历Hashtable的键值对"><a href="#遍历Hashtable的键值对" class="headerlink" title="遍历Hashtable的键值对"></a>遍历Hashtable的键值对</h2><p>第一步：根据entrySet()获取Hashtable的“键值对”的Set集合。<br>第二步：通过Iterator迭代器遍历“第一步”得到的集合。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设table是Hashtable对象</span></span><br><span class="line"><span class="comment">// table中的key是String类型，value是Integer类型</span></span><br><span class="line">Integer integ = <span class="keyword">null</span>;</span><br><span class="line">Iterator iter = table.entrySet().iterator();</span><br><span class="line"><span class="keyword">while</span>(iter.hasNext()) &#123;</span><br><span class="line">    Map.Entry entry = (Map.Entry)iter.next();</span><br><span class="line">    <span class="comment">// 获取key</span></span><br><span class="line">    key = (String)entry.getKey();</span><br><span class="line">        <span class="comment">// 获取value</span></span><br><span class="line">    integ = (Integer)entry.getValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="通过Iterator遍历Hashtable的键"><a href="#通过Iterator遍历Hashtable的键" class="headerlink" title="通过Iterator遍历Hashtable的键"></a>通过Iterator遍历Hashtable的键</h2><p>第一步：根据keySet()获取Hashtable的“键”的Set集合。<br>第二步：通过Iterator迭代器遍历“第一步”得到的集合。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设table是Hashtable对象</span></span><br><span class="line"><span class="comment">// table中的key是String类型，value是Integer类型</span></span><br><span class="line">String key = <span class="keyword">null</span>;</span><br><span class="line">Integer integ = <span class="keyword">null</span>;</span><br><span class="line">Iterator iter = table.keySet().iterator();</span><br><span class="line"><span class="keyword">while</span> (iter.hasNext()) &#123;</span><br><span class="line">        <span class="comment">// 获取key</span></span><br><span class="line">    key = (String)iter.next();</span><br><span class="line">        <span class="comment">// 根据key，获取value</span></span><br><span class="line">    integ = (Integer)table.get(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="通过Iterator遍历Hashtable的值"><a href="#通过Iterator遍历Hashtable的值" class="headerlink" title="通过Iterator遍历Hashtable的值"></a>通过Iterator遍历Hashtable的值</h2><p>第一步：根据value()获取Hashtable的“值”的集合。<br>第二步：通过Iterator迭代器遍历“第一步”得到的集合。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设table是Hashtable对象</span></span><br><span class="line"><span class="comment">// table中的key是String类型，value是Integer类型</span></span><br><span class="line">Integer value = <span class="keyword">null</span>;</span><br><span class="line">Collection c = table.values();</span><br><span class="line">Iterator iter= c.iterator();</span><br><span class="line"><span class="keyword">while</span> (iter.hasNext()) &#123;</span><br><span class="line">    value = (Integer)iter.next();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="通过Enumeration遍历Hashtable的键"><a href="#通过Enumeration遍历Hashtable的键" class="headerlink" title="通过Enumeration遍历Hashtable的键"></a>通过Enumeration遍历Hashtable的键</h2><p>第一步：根据keys()获取Hashtable的集合。<br>第二步：通过Enumeration遍历“第一步”得到的集合。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Enumeration enu = table.keys();</span><br><span class="line"><span class="keyword">while</span>(enu.hasMoreElements()) &#123;</span><br><span class="line">    System.out.println(enu.nextElement());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="通过Enumeration遍历Hashtable的值"><a href="#通过Enumeration遍历Hashtable的值" class="headerlink" title="通过Enumeration遍历Hashtable的值"></a>通过Enumeration遍历Hashtable的值</h2><p>第一步：根据elements()获取Hashtable的集合。<br>第二步：通过Enumeration遍历“第一步”得到的集合。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Enumeration enu = table.elements();</span><br><span class="line"><span class="keyword">while</span>(enu.hasMoreElements()) &#123;</span><br><span class="line">    System.out.println(enu.nextElement());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="遍历测试程序如下："><a href="#遍历测试程序如下：" class="headerlink" title="遍历测试程序如下："></a>遍历测试程序如下：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @desc Hashtable的测试程序。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashtableTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        testHashtableAPIs();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testHashtableAPIs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 初始化随机种子</span></span><br><span class="line">        Random r = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="comment">// 新建Hashtable</span></span><br><span class="line">        Hashtable table = <span class="keyword">new</span> Hashtable();</span><br><span class="line">        <span class="comment">// 添加操作</span></span><br><span class="line">        table.put(<span class="string">"one"</span>, r.nextInt(<span class="number">10</span>));</span><br><span class="line">        table.put(<span class="string">"two"</span>, r.nextInt(<span class="number">10</span>));</span><br><span class="line">        table.put(<span class="string">"three"</span>, r.nextInt(<span class="number">10</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印出table</span></span><br><span class="line">        System.out.println(<span class="string">"table:"</span>+table );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过Iterator遍历key-value</span></span><br><span class="line">        Iterator iter = table.entrySet().iterator();</span><br><span class="line">        <span class="keyword">while</span>(iter.hasNext()) &#123;</span><br><span class="line">            Map.Entry entry = (Map.Entry)iter.next();</span><br><span class="line">            System.out.println(<span class="string">"next : "</span>+ entry.getKey() +<span class="string">" - "</span>+entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Hashtable的键值对个数        </span></span><br><span class="line">        System.out.println(<span class="string">"size:"</span>+table.size());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// containsKey(Object key) :是否包含键key</span></span><br><span class="line">        System.out.println(<span class="string">"contains key two : "</span>+table.containsKey(<span class="string">"two"</span>));</span><br><span class="line">        System.out.println(<span class="string">"contains key five : "</span>+table.containsKey(<span class="string">"five"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// containsValue(Object value) :是否包含值value</span></span><br><span class="line">        System.out.println(<span class="string">"contains value 0 : "</span>+table.containsValue(<span class="keyword">new</span> Integer(<span class="number">0</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// remove(Object key) ： 删除键key对应的键值对</span></span><br><span class="line">        table.remove(<span class="string">"three"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"table:"</span>+table );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// clear() ： 清空Hashtable</span></span><br><span class="line">        table.clear();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// isEmpty() : Hashtable是否为空</span></span><br><span class="line">        System.out.println((table.isEmpty()?<span class="string">"table is empty"</span>:<span class="string">"table is not empty"</span>) );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Hashtable示例"><a href="#Hashtable示例" class="headerlink" title="Hashtable示例"></a>Hashtable示例</h1><p>下面通过一个实例来学习如何使用Hashtable。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @desc Hashtable的测试程序。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashtableTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        testHashtableAPIs();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testHashtableAPIs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 初始化随机种子</span></span><br><span class="line">        Random r = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="comment">// 新建Hashtable</span></span><br><span class="line">        Hashtable table = <span class="keyword">new</span> Hashtable();</span><br><span class="line">        <span class="comment">// 添加操作</span></span><br><span class="line">        table.put(<span class="string">"one"</span>, r.nextInt(<span class="number">10</span>));</span><br><span class="line">        table.put(<span class="string">"two"</span>, r.nextInt(<span class="number">10</span>));</span><br><span class="line">        table.put(<span class="string">"three"</span>, r.nextInt(<span class="number">10</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印出table</span></span><br><span class="line">        System.out.println(<span class="string">"table:"</span>+table );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过Iterator遍历key-value</span></span><br><span class="line">        Iterator iter = table.entrySet().iterator();</span><br><span class="line">        <span class="keyword">while</span>(iter.hasNext()) &#123;</span><br><span class="line">            Map.Entry entry = (Map.Entry)iter.next();</span><br><span class="line">            System.out.println(<span class="string">"next : "</span>+ entry.getKey() +<span class="string">" - "</span>+entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Hashtable的键值对个数        </span></span><br><span class="line">        System.out.println(<span class="string">"size:"</span>+table.size());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// containsKey(Object key) :是否包含键key</span></span><br><span class="line">        System.out.println(<span class="string">"contains key two : "</span>+table.containsKey(<span class="string">"two"</span>));</span><br><span class="line">        System.out.println(<span class="string">"contains key five : "</span>+table.containsKey(<span class="string">"five"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// containsValue(Object value) :是否包含值value</span></span><br><span class="line">        System.out.println(<span class="string">"contains value 0 : "</span>+table.containsValue(<span class="keyword">new</span> Integer(<span class="number">0</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// remove(Object key) ： 删除键key对应的键值对</span></span><br><span class="line">        table.remove(<span class="string">"three"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"table:"</span>+table );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// clear() ： 清空Hashtable</span></span><br><span class="line">        table.clear();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// isEmpty() : Hashtable是否为空</span></span><br><span class="line">        System.out.println((table.isEmpty()?<span class="string">"table is empty"</span>:<span class="string">"table is not empty"</span>) );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(某一次)运行结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">table:&#123;two=<span class="number">5</span>, one=<span class="number">0</span>, three=<span class="number">6</span>&#125;</span><br><span class="line">next : two - <span class="number">5</span></span><br><span class="line">next : one - <span class="number">0</span></span><br><span class="line">next : three - <span class="number">6</span></span><br><span class="line">size:<span class="number">3</span></span><br><span class="line">contains key two : <span class="keyword">true</span></span><br><span class="line">contains key five : <span class="keyword">false</span></span><br><span class="line">contains value <span class="number">0</span> : <span class="keyword">true</span></span><br><span class="line">table:&#123;two=<span class="number">5</span>, one=<span class="number">0</span>&#125;</span><br><span class="line">table is empty</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Hashtable-简介&quot;&gt;&lt;a href=&quot;#Hashtable-简介&quot; class=&quot;headerlink&quot; title=&quot;Hashtable 简介&quot;&gt;&lt;/a&gt;Hashtable 简介&lt;/h1&gt;&lt;p&gt;和HashMap一样，Hashtable 也是一个散列表，它存储的内容是键值对(key-value)映射。&lt;/p&gt;
&lt;p&gt;Hashtable 继承于Dictionary，实现了Map、Cloneable、java.io.Serializable接口。&lt;/p&gt;
&lt;p&gt;Hashtable 的函数都是同步的，这意味着它是线程安全的。它的key、value都不可以为null。此外，Hashtable中的映射不是有序的。&lt;br&gt;
    
    </summary>
    
      <category term="Java 集合" scheme="http://cuijing.me/categories/Java-%E9%9B%86%E5%90%88/"/>
    
    
      <category term="Java" scheme="http://cuijing.me/tags/Java/"/>
    
      <category term="Map" scheme="http://cuijing.me/tags/Map/"/>
    
      <category term="HashTable" scheme="http://cuijing.me/tags/HashTable/"/>
    
  </entry>
  
  <entry>
    <title>集合框架之 HashMap</title>
    <link href="http://cuijing.me/2015/07/10/Java/8-Collection-Map/10-HashMap/"/>
    <id>http://cuijing.me/2015/07/10/Java/8-Collection-Map/10-HashMap/</id>
    <published>2015-07-10T00:30:00.000Z</published>
    <updated>2016-05-01T12:32:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HashMap简介"><a href="#HashMap简介" class="headerlink" title="HashMap简介"></a>HashMap简介</h1><p>HashMap 是一个散列表，它存储的内容是键值对(key-value)映射。<br>HashMap 继承于AbstractMap，实现了<code>Map、Cloneable、java.io.Serializable</code>接口。</p><p><strong>HashMap 的实现不是同步的，这意味着它不是线程安全的。它的key、value都可以为null。此外，HashMap中的映射不是有序的。</strong><br><a id="more"></a><br>HashMap 的实例有两个参数影响其性能：“初始容量” 和 “加载因子”。容量 是哈希表中桶的数量，初始容量 只是哈希表在创建时的容量。加载因子 是哈希表在其容量自动增加之前可以达到多满的一种尺度。当哈希表中的条目数超出了加载因子与当前容量的乘积时，则要对该哈希表进行 rehash 操作（即重建内部数据结构），从而哈希表将具有大约两倍的桶数。</p><p>通常，默认加载因子是 0.75, 这是在时间和空间成本上寻求一种折衷。加载因子过高虽然减少了空间开销，但同时也增加了查询成本（在大多数 HashMap 类的操作中，包括 get 和 put 操作，都反映了这一点）。在设置初始容量时应该考虑到映射中所需的条目数及其加载因子，以便最大限度地减少 rehash 操作次数。如果初始容量大于最大条目数除以加载因子，则不会发生 rehash 操作。</p><h1 id="HashMap的构造函数"><a href="#HashMap的构造函数" class="headerlink" title="HashMap的构造函数"></a>HashMap的构造函数</h1><p>HashMap共有4个构造函数,如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认构造函数。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 设置“加载因子”</span></span><br><span class="line">    <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR;</span><br><span class="line">    <span class="comment">// 设置“HashMap阈值”，当HashMap中存储数据的数量达到threshold时，就需要将HashMap的容量加倍。</span></span><br><span class="line">    threshold = (<span class="keyword">int</span>)(DEFAULT_INITIAL_CAPACITY * DEFAULT_LOAD_FACTOR);</span><br><span class="line">    <span class="comment">// 创建Entry数组，用来保存数据</span></span><br><span class="line">    table = <span class="keyword">new</span> Entry[DEFAULT_INITIAL_CAPACITY];</span><br><span class="line">    init();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定“容量大小”和“加载因子”的构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal initial capacity: "</span> +</span><br><span class="line">                                           initialCapacity);</span><br><span class="line">    <span class="comment">// HashMap的最大容量只能是MAXIMUM_CAPACITY</span></span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">        initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">    <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal load factor: "</span> +</span><br><span class="line">                                           loadFactor);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Find a power of 2 &gt;= initialCapacity</span></span><br><span class="line">    <span class="keyword">int</span> capacity = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (capacity &lt; initialCapacity)</span><br><span class="line">        capacity &lt;&lt;= <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置“加载因子”</span></span><br><span class="line">    <span class="keyword">this</span>.loadFactor = loadFactor;</span><br><span class="line">    <span class="comment">// 设置“HashMap阈值”，当HashMap中存储数据的数量达到threshold时，就需要将HashMap的容量加倍。</span></span><br><span class="line">    threshold = (<span class="keyword">int</span>)(capacity * loadFactor);</span><br><span class="line">    <span class="comment">// 创建Entry数组，用来保存数据</span></span><br><span class="line">    table = <span class="keyword">new</span> Entry[capacity];</span><br><span class="line">    init();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定“容量大小”的构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 包含“子Map”的构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(Math.max((<span class="keyword">int</span>) (m.size() / DEFAULT_LOAD_FACTOR) + <span class="number">1</span>,</span><br><span class="line">                  DEFAULT_INITIAL_CAPACITY), DEFAULT_LOAD_FACTOR);</span><br><span class="line">    <span class="comment">// 将m中的全部元素逐个添加到HashMap中</span></span><br><span class="line">    putAllForCreate(m);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="HashMap的API"><a href="#HashMap的API" class="headerlink" title="HashMap的API"></a>HashMap的API</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span>                 <span class="title">clear</span><span class="params">()</span></span></span><br><span class="line"><span class="function">Object               <span class="title">clone</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span>              <span class="title">containsKey</span><span class="params">(Object key)</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span>              <span class="title">containsValue</span><span class="params">(Object value)</span></span></span><br><span class="line"><span class="function">Set&lt;Entry&lt;K, V&gt;&gt;     <span class="title">entrySet</span><span class="params">()</span></span></span><br><span class="line"><span class="function">V                    <span class="title">get</span><span class="params">(Object key)</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span>              <span class="title">isEmpty</span><span class="params">()</span></span></span><br><span class="line"><span class="function">Set&lt;K&gt;               <span class="title">keySet</span><span class="params">()</span></span></span><br><span class="line"><span class="function">V                    <span class="title">put</span><span class="params">(K key, V value)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span>                 <span class="title">putAll</span><span class="params">(Map&lt;? extends K, ? extends V&gt; map)</span></span></span><br><span class="line"><span class="function">V                    <span class="title">remove</span><span class="params">(Object key)</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span>                  <span class="title">size</span><span class="params">()</span></span></span><br><span class="line"><span class="function">Collection&lt;V&gt;        <span class="title">values</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><h1 id="HashMap数据结构"><a href="#HashMap数据结构" class="headerlink" title="HashMap数据结构"></a>HashMap数据结构</h1><p>HashMap的继承关系</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">java.lang.Object</span><br><span class="line">   ↳     java.util.AbstractMap&lt;K, V&gt;</span><br><span class="line">         ↳     java.util.HashMap&lt;K, V&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">Cloneable</span>, <span class="title">Serializable</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure><p>HashMap与Map关系如下图：</p><p><img src="http://oov0wb0gl.bkt.clouddn.com/2017-06-06-14956005736815.jpg" alt=""> </p><p>从图中可以看出： </p><ol><li>HashMap继承于AbstractMap类，实现了Map接口。Map是”key-value键值对”接口，AbstractMap实现了”键值对”的通用函数接口。 </li><li>HashMap是通过”拉链法”实现的哈希表。它包括几个重要的成员变量：table, size, threshold, loadFactor, modCount。<ol><li><strong>table</strong>是一个Entry[]数组类型，而Entry实际上就是一个单向链表。哈希表的”key-value键值对”都是存储在Entry数组中的。 </li><li><strong>size</strong>是HashMap的大小，它是HashMap保存的键值对的数量</li><li><strong>threshold</strong>是HashMap的阈值，用于判断是否需要调整HashMap的容量。threshold的值=”容量*加载因子”，当HashMap中存储数据的数量达到threshold时，就需要将HashMap的容量加倍。</li><li><strong>loadFactor</strong>就是加载因子。</li><li><strong>modCount</strong>是用来实现fail-fast机制的。</li></ol></li></ol><h1 id="HashMap源码解析"><a href="#HashMap源码解析" class="headerlink" title="HashMap源码解析"></a>HashMap源码解析</h1><p>为了更了解HashMap的原理，下面对HashMap源码代码作出分析。<br>在阅读源码时，建议参考后面的说明来建立对HashMap的整体认识，这样更容易理解HashMap。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.util;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">Cloneable</span>, <span class="title">Serializable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 默认的初始容量是16，必须是2的幂。</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最大容量（必须是2的幂且小于2的30次方，传入容量过大将被这个值替换）</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 默认加载因子</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 存储数据的Entry数组，长度是2的幂。</span></span><br><span class="line">    <span class="comment">// HashMap是采用拉链法实现的，每一个Entry本质上是一个单向链表</span></span><br><span class="line">    <span class="keyword">transient</span> Entry[] table;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// HashMap的大小，它是HashMap保存的键值对的数量</span></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// HashMap的阈值，用于判断是否需要调整HashMap的容量（threshold = 容量*加载因子）</span></span><br><span class="line">    <span class="keyword">int</span> threshold;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加载因子实际大小</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">float</span> loadFactor;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// HashMap被改变的次数</span></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">volatile</span> <span class="keyword">int</span> modCount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定“容量大小”和“加载因子”的构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal initial capacity: "</span> +</span><br><span class="line">                                               initialCapacity);</span><br><span class="line">        <span class="comment">// HashMap的最大容量只能是MAXIMUM_CAPACITY</span></span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">            initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">        <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal load factor: "</span> +</span><br><span class="line">                                               loadFactor);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 找出“大于initialCapacity”的最小的2的幂</span></span><br><span class="line">        <span class="keyword">int</span> capacity = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (capacity &lt; initialCapacity)</span><br><span class="line">            capacity &lt;&lt;= <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置“加载因子”</span></span><br><span class="line">        <span class="keyword">this</span>.loadFactor = loadFactor;</span><br><span class="line">        <span class="comment">// 设置“HashMap阈值”，当HashMap中存储数据的数量达到threshold时，就需要将HashMap的容量加倍。</span></span><br><span class="line">        threshold = (<span class="keyword">int</span>)(capacity * loadFactor);</span><br><span class="line">        <span class="comment">// 创建Entry数组，用来保存数据</span></span><br><span class="line">        table = <span class="keyword">new</span> Entry[capacity];</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定“容量大小”的构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 默认构造函数。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 设置“加载因子”</span></span><br><span class="line">        <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR;</span><br><span class="line">        <span class="comment">// 设置“HashMap阈值”，当HashMap中存储数据的数量达到threshold时，就需要将HashMap的容量加倍。</span></span><br><span class="line">        threshold = (<span class="keyword">int</span>)(DEFAULT_INITIAL_CAPACITY * DEFAULT_LOAD_FACTOR);</span><br><span class="line">        <span class="comment">// 创建Entry数组，用来保存数据</span></span><br><span class="line">        table = <span class="keyword">new</span> Entry[DEFAULT_INITIAL_CAPACITY];</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 包含“子Map”的构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(Math.max((<span class="keyword">int</span>) (m.size() / DEFAULT_LOAD_FACTOR) + <span class="number">1</span>,</span><br><span class="line">                      DEFAULT_INITIAL_CAPACITY), DEFAULT_LOAD_FACTOR);</span><br><span class="line">        <span class="comment">// 将m中的全部元素逐个添加到HashMap中</span></span><br><span class="line">        putAllForCreate(m);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(<span class="keyword">int</span> h)</span> </span>&#123;</span><br><span class="line">        h ^= (h &gt;&gt;&gt; <span class="number">20</span>) ^ (h &gt;&gt;&gt; <span class="number">12</span>);</span><br><span class="line">        <span class="keyword">return</span> h ^ (h &gt;&gt;&gt; <span class="number">7</span>) ^ (h &gt;&gt;&gt; <span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回索引值</span></span><br><span class="line">    <span class="comment">// h &amp; (length-1)保证返回值的小于length</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">indexFor</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> h &amp; (length-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取key对应的value</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> getForNullKey();</span><br><span class="line">        <span class="comment">// 获取key的hash值</span></span><br><span class="line">        <span class="keyword">int</span> hash = hash(key.hashCode());</span><br><span class="line">        <span class="comment">// 在“该hash值对应的链表”上查找“键值等于key”的元素</span></span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[indexFor(hash, table.length)];</span><br><span class="line">             e != <span class="keyword">null</span>;</span><br><span class="line">             e = e.next) &#123;</span><br><span class="line">            Object k;</span><br><span class="line">            <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k)))</span><br><span class="line">                <span class="keyword">return</span> e.value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取“key为null”的元素的值</span></span><br><span class="line">    <span class="comment">// HashMap将“key为null”的元素存储在table[0]位置！</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> V <span class="title">getForNullKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[<span class="number">0</span>]; e != <span class="keyword">null</span>; e = e.next) &#123;</span><br><span class="line">            <span class="keyword">if</span> (e.key == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">return</span> e.value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// HashMap是否包含key</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsKey</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getEntry(key) != <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回“键为key”的键值对</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> Entry&lt;K,V&gt; <span class="title">getEntry</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取哈希值</span></span><br><span class="line">        <span class="comment">// HashMap将“key为null”的元素存储在table[0]位置，“key不为null”的则调用hash()计算哈希值</span></span><br><span class="line">        <span class="keyword">int</span> hash = (key == <span class="keyword">null</span>) ? <span class="number">0</span> : hash(key.hashCode());</span><br><span class="line">        <span class="comment">// 在“该hash值对应的链表”上查找“键值等于key”的元素</span></span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[indexFor(hash, table.length)];</span><br><span class="line">             e != <span class="keyword">null</span>;</span><br><span class="line">             e = e.next) &#123;</span><br><span class="line">            Object k;</span><br><span class="line">            <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                <span class="keyword">return</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将“key-value”添加到HashMap中</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 若“key为null”，则将该键值对添加到table[0]中。</span></span><br><span class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> putForNullKey(value);</span><br><span class="line">        <span class="comment">// 若“key不为null”，则计算该key的哈希值，然后将其添加到该哈希值对应的链表中。</span></span><br><span class="line">        <span class="keyword">int</span> hash = hash(key.hashCode());</span><br><span class="line">        <span class="keyword">int</span> i = indexFor(hash, table.length);</span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[i]; e != <span class="keyword">null</span>; e = e.next) &#123;</span><br><span class="line">            Object k;</span><br><span class="line">            <span class="comment">// 若“该key”对应的键值对已经存在，则用新的value取代旧的value。然后退出！</span></span><br><span class="line">            <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;</span><br><span class="line">                V oldValue = e.value;</span><br><span class="line">                e.value = value;</span><br><span class="line">                e.recordAccess(<span class="keyword">this</span>);</span><br><span class="line">                <span class="keyword">return</span> oldValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 若“该key”对应的键值对不存在，则将“key-value”添加到table中</span></span><br><span class="line">        modCount++;</span><br><span class="line">        addEntry(hash, key, value, i);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// putForNullKey()的作用是将“key为null”键值对添加到table[0]位置</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> V <span class="title">putForNullKey</span><span class="params">(V value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[<span class="number">0</span>]; e != <span class="keyword">null</span>; e = e.next) &#123;</span><br><span class="line">            <span class="keyword">if</span> (e.key == <span class="keyword">null</span>) &#123;</span><br><span class="line">                V oldValue = e.value;</span><br><span class="line">                e.value = value;</span><br><span class="line">                e.recordAccess(<span class="keyword">this</span>);</span><br><span class="line">                <span class="keyword">return</span> oldValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 这里的完全不会被执行到!</span></span><br><span class="line">        modCount++;</span><br><span class="line">        addEntry(<span class="number">0</span>, <span class="keyword">null</span>, value, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建HashMap对应的“添加方法”，</span></span><br><span class="line">    <span class="comment">// 它和put()不同。putForCreate()是内部方法，它被构造函数等调用，用来创建HashMap</span></span><br><span class="line">    <span class="comment">// 而put()是对外提供的往HashMap中添加元素的方法。</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">putForCreate</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> hash = (key == <span class="keyword">null</span>) ? <span class="number">0</span> : hash(key.hashCode());</span><br><span class="line">        <span class="keyword">int</span> i = indexFor(hash, table.length);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 若该HashMap表中存在“键值等于key”的元素，则替换该元素的value值</span></span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[i]; e != <span class="keyword">null</span>; e = e.next) &#123;</span><br><span class="line">            Object k;</span><br><span class="line">            <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k)))) &#123;</span><br><span class="line">                e.value = value;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 若该HashMap表中不存在“键值等于key”的元素，则将该key-value添加到HashMap中</span></span><br><span class="line">        createEntry(hash, key, value, i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将“m”中的全部元素都添加到HashMap中。</span></span><br><span class="line">    <span class="comment">// 该方法被内部的构造HashMap的方法所调用。</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">putAllForCreate</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 利用迭代器将元素逐个添加到HashMap中</span></span><br><span class="line">        <span class="keyword">for</span> (Iterator&lt;? extends Map.Entry&lt;? extends K, ? extends V&gt;&gt; i = m.entrySet().iterator(); i.hasNext(); ) &#123;</span><br><span class="line">            Map.Entry&lt;? extends K, ? extends V&gt; e = i.next();</span><br><span class="line">            putForCreate(e.getKey(), e.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重新调整HashMap的大小，newCapacity是调整后的单位</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> newCapacity)</span> </span>&#123;</span><br><span class="line">        Entry[] oldTable = table;</span><br><span class="line">        <span class="keyword">int</span> oldCapacity = oldTable.length;</span><br><span class="line">        <span class="keyword">if</span> (oldCapacity == MAXIMUM_CAPACITY) &#123;</span><br><span class="line">            threshold = Integer.MAX_VALUE;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 新建一个HashMap，将“旧HashMap”的全部元素添加到“新HashMap”中，</span></span><br><span class="line">        <span class="comment">// 然后，将“新HashMap”赋值给“旧HashMap”。</span></span><br><span class="line">        Entry[] newTable = <span class="keyword">new</span> Entry[newCapacity];</span><br><span class="line">        transfer(newTable);</span><br><span class="line">        table = newTable;</span><br><span class="line">        threshold = (<span class="keyword">int</span>)(newCapacity * loadFactor);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将HashMap中的全部元素都添加到newTable中</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">transfer</span><span class="params">(Entry[] newTable)</span> </span>&#123;</span><br><span class="line">        Entry[] src = table;</span><br><span class="line">        <span class="keyword">int</span> newCapacity = newTable.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; src.length; j++) &#123;</span><br><span class="line">            Entry&lt;K,V&gt; e = src[j];</span><br><span class="line">            <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">                src[j] = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                    Entry&lt;K,V&gt; next = e.next;</span><br><span class="line">                    <span class="keyword">int</span> i = indexFor(e.hash, newCapacity);</span><br><span class="line">                    e.next = newTable[i];</span><br><span class="line">                    newTable[i] = e;</span><br><span class="line">                    e = next;</span><br><span class="line">                &#125; <span class="keyword">while</span> (e != <span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将"m"的全部元素都添加到HashMap中</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">putAll</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 有效性判断</span></span><br><span class="line">        <span class="keyword">int</span> numKeysToBeAdded = m.size();</span><br><span class="line">        <span class="keyword">if</span> (numKeysToBeAdded == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 计算容量是否足够，</span></span><br><span class="line">        <span class="comment">// 若“当前实际容量 &lt; 需要的容量”，则将容量x2。</span></span><br><span class="line">        <span class="keyword">if</span> (numKeysToBeAdded &gt; threshold) &#123;</span><br><span class="line">            <span class="keyword">int</span> targetCapacity = (<span class="keyword">int</span>)(numKeysToBeAdded / loadFactor + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (targetCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">                targetCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">            <span class="keyword">int</span> newCapacity = table.length;</span><br><span class="line">            <span class="keyword">while</span> (newCapacity &lt; targetCapacity)</span><br><span class="line">                newCapacity &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (newCapacity &gt; table.length)</span><br><span class="line">                resize(newCapacity);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过迭代器，将“m”中的元素逐个添加到HashMap中。</span></span><br><span class="line">        <span class="keyword">for</span> (Iterator&lt;? extends Map.Entry&lt;? extends K, ? extends V&gt;&gt; i = m.entrySet().iterator(); i.hasNext(); ) &#123;</span><br><span class="line">            Map.Entry&lt;? extends K, ? extends V&gt; e = i.next();</span><br><span class="line">            put(e.getKey(), e.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除“键为key”元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">remove</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        Entry&lt;K,V&gt; e = removeEntryForKey(key);</span><br><span class="line">        <span class="keyword">return</span> (e == <span class="keyword">null</span> ? <span class="keyword">null</span> : e.value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除“键为key”的元素</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> Entry&lt;K,V&gt; <span class="title">removeEntryForKey</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取哈希值。若key为null，则哈希值为0；否则调用hash()进行计算</span></span><br><span class="line">        <span class="keyword">int</span> hash = (key == <span class="keyword">null</span>) ? <span class="number">0</span> : hash(key.hashCode());</span><br><span class="line">        <span class="keyword">int</span> i = indexFor(hash, table.length);</span><br><span class="line">        Entry&lt;K,V&gt; prev = table[i];</span><br><span class="line">        Entry&lt;K,V&gt; e = prev;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除链表中“键为key”的元素</span></span><br><span class="line">        <span class="comment">// 本质是“删除单向链表中的节点”</span></span><br><span class="line">        <span class="keyword">while</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Entry&lt;K,V&gt; next = e.next;</span><br><span class="line">            Object k;</span><br><span class="line">            <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k)))) &#123;</span><br><span class="line">                modCount++;</span><br><span class="line">                size--;</span><br><span class="line">                <span class="keyword">if</span> (prev == e)</span><br><span class="line">                    table[i] = next;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    prev.next = next;</span><br><span class="line">                e.recordRemoval(<span class="keyword">this</span>);</span><br><span class="line">                <span class="keyword">return</span> e;</span><br><span class="line">            &#125;</span><br><span class="line">            prev = e;</span><br><span class="line">            e = next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除“键值对”</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> Entry&lt;K,V&gt; <span class="title">removeMapping</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Map.Entry))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        Map.Entry&lt;K,V&gt; entry = (Map.Entry&lt;K,V&gt;) o;</span><br><span class="line">        Object key = entry.getKey();</span><br><span class="line">        <span class="keyword">int</span> hash = (key == <span class="keyword">null</span>) ? <span class="number">0</span> : hash(key.hashCode());</span><br><span class="line">        <span class="keyword">int</span> i = indexFor(hash, table.length);</span><br><span class="line">        Entry&lt;K,V&gt; prev = table[i];</span><br><span class="line">        Entry&lt;K,V&gt; e = prev;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除链表中的“键值对e”</span></span><br><span class="line">        <span class="comment">// 本质是“删除单向链表中的节点”</span></span><br><span class="line">        <span class="keyword">while</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Entry&lt;K,V&gt; next = e.next;</span><br><span class="line">            <span class="keyword">if</span> (e.hash == hash &amp;&amp; e.equals(entry)) &#123;</span><br><span class="line">                modCount++;</span><br><span class="line">                size--;</span><br><span class="line">                <span class="keyword">if</span> (prev == e)</span><br><span class="line">                    table[i] = next;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    prev.next = next;</span><br><span class="line">                e.recordRemoval(<span class="keyword">this</span>);</span><br><span class="line">                <span class="keyword">return</span> e;</span><br><span class="line">            &#125;</span><br><span class="line">            prev = e;</span><br><span class="line">            e = next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清空HashMap，将所有的元素设为null</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        modCount++;</span><br><span class="line">        Entry[] tab = table;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tab.length; i++)</span><br><span class="line">            tab[i] = <span class="keyword">null</span>;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否包含“值为value”的元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsValue</span><span class="params">(Object value)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 若“value为null”，则调用containsNullValue()查找</span></span><br><span class="line">    <span class="keyword">if</span> (value == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> containsNullValue();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 若“value不为null”，则查找HashMap中是否有值为value的节点。</span></span><br><span class="line">    Entry[] tab = table;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tab.length ; i++)</span><br><span class="line">            <span class="keyword">for</span> (Entry e = tab[i] ; e != <span class="keyword">null</span> ; e = e.next)</span><br><span class="line">                <span class="keyword">if</span> (value.equals(e.value))</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否包含null值</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">containsNullValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Entry[] tab = table;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tab.length ; i++)</span><br><span class="line">            <span class="keyword">for</span> (Entry e = tab[i] ; e != <span class="keyword">null</span> ; e = e.next)</span><br><span class="line">                <span class="keyword">if</span> (e.value == <span class="keyword">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 克隆一个HashMap，并返回Object对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        HashMap&lt;K,V&gt; result = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = (HashMap&lt;K,V&gt;)<span class="keyword">super</span>.clone();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">            <span class="comment">// assert false;</span></span><br><span class="line">        &#125;</span><br><span class="line">        result.table = <span class="keyword">new</span> Entry[table.length];</span><br><span class="line">        result.entrySet = <span class="keyword">null</span>;</span><br><span class="line">        result.modCount = <span class="number">0</span>;</span><br><span class="line">        result.size = <span class="number">0</span>;</span><br><span class="line">        result.init();</span><br><span class="line">        <span class="comment">// 调用putAllForCreate()将全部元素添加到HashMap中</span></span><br><span class="line">        result.putAllForCreate(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Entry是单向链表。</span></span><br><span class="line">    <span class="comment">// 它是 “HashMap链式存储法”对应的链表。</span></span><br><span class="line">    <span class="comment">// 它实现了Map.Entry 接口，即实现getKey(), getValue(), setValue(V value), equals(Object o), hashCode()这些函数</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> K key;</span><br><span class="line">        V value;</span><br><span class="line">        <span class="comment">// 指向下一个节点</span></span><br><span class="line">        Entry&lt;K,V&gt; next;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> hash;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构造函数。</span></span><br><span class="line">        <span class="comment">// 输入参数包括"哈希值(h)", "键(k)", "值(v)", "下一节点(n)"</span></span><br><span class="line">        Entry(<span class="keyword">int</span> h, K k, V v, Entry&lt;K,V&gt; n) &#123;</span><br><span class="line">            value = v;</span><br><span class="line">            next = n;</span><br><span class="line">            key = k;</span><br><span class="line">            hash = h;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> K <span class="title">getKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> key;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">setValue</span><span class="params">(V newValue)</span> </span>&#123;</span><br><span class="line">            V oldValue = value;</span><br><span class="line">            value = newValue;</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断两个Entry是否相等</span></span><br><span class="line">        <span class="comment">// 若两个Entry的“key”和“value”都相等，则返回true。</span></span><br><span class="line">        <span class="comment">// 否则，返回false</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Map.Entry))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            Map.Entry e = (Map.Entry)o;</span><br><span class="line">            Object k1 = getKey();</span><br><span class="line">            Object k2 = e.getKey();</span><br><span class="line">            <span class="keyword">if</span> (k1 == k2 || (k1 != <span class="keyword">null</span> &amp;&amp; k1.equals(k2))) &#123;</span><br><span class="line">                Object v1 = getValue();</span><br><span class="line">                Object v2 = e.getValue();</span><br><span class="line">                <span class="keyword">if</span> (v1 == v2 || (v1 != <span class="keyword">null</span> &amp;&amp; v1.equals(v2)))</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 实现hashCode()</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (key==<span class="keyword">null</span>   ? <span class="number">0</span> : key.hashCode()) ^</span><br><span class="line">                   (value==<span class="keyword">null</span> ? <span class="number">0</span> : value.hashCode());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> getKey() + <span class="string">"="</span> + getValue();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 当向HashMap中添加元素时，绘调用recordAccess()。</span></span><br><span class="line">        <span class="comment">// 这里不做任何处理</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">recordAccess</span><span class="params">(HashMap&lt;K,V&gt; m)</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 当从HashMap中删除元素时，绘调用recordRemoval()。</span></span><br><span class="line">        <span class="comment">// 这里不做任何处理</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">recordRemoval</span><span class="params">(HashMap&lt;K,V&gt; m)</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 新增Entry。将“key-value”插入指定位置，bucketIndex是位置索引。</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addEntry</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">int</span> bucketIndex)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 保存“bucketIndex”位置的值到“e”中</span></span><br><span class="line">        Entry&lt;K,V&gt; e = table[bucketIndex];</span><br><span class="line">        <span class="comment">// 设置“bucketIndex”位置的元素为“新Entry”，</span></span><br><span class="line">        <span class="comment">// 设置“e”为“新Entry的下一个节点”</span></span><br><span class="line">        table[bucketIndex] = <span class="keyword">new</span> Entry&lt;K,V&gt;(hash, key, value, e);</span><br><span class="line">        <span class="comment">// 若HashMap的实际大小 不小于 “阈值”，则调整HashMap的大小</span></span><br><span class="line">        <span class="keyword">if</span> (size++ &gt;= threshold)</span><br><span class="line">            resize(<span class="number">2</span> * table.length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建Entry。将“key-value”插入指定位置，bucketIndex是位置索引。</span></span><br><span class="line">    <span class="comment">// 它和addEntry的区别是：</span></span><br><span class="line">    <span class="comment">// (01) addEntry()一般用在 新增Entry可能导致“HashMap的实际容量”超过“阈值”的情况下。</span></span><br><span class="line">    <span class="comment">//   例如，我们新建一个HashMap，然后不断通过put()向HashMap中添加元素；</span></span><br><span class="line">    <span class="comment">// put()是通过addEntry()新增Entry的。</span></span><br><span class="line">    <span class="comment">//   在这种情况下，我们不知道何时“HashMap的实际容量”会超过“阈值”；</span></span><br><span class="line">    <span class="comment">//   因此，需要调用addEntry()</span></span><br><span class="line">    <span class="comment">// (02) createEntry() 一般用在 新增Entry不会导致“HashMap的实际容量”超过“阈值”的情况下。</span></span><br><span class="line">    <span class="comment">//   例如，我们调用HashMap“带有Map”的构造函数，它绘将Map的全部元素添加到HashMap中；</span></span><br><span class="line">    <span class="comment">// 但在添加之前，我们已经计算好“HashMap的容量和阈值”。也就是，可以确定“即使将Map中</span></span><br><span class="line">    <span class="comment">// 的全部元素添加到HashMap中，都不会超过HashMap的阈值”。</span></span><br><span class="line">    <span class="comment">//   此时，调用createEntry()即可。</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">createEntry</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">int</span> bucketIndex)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 保存“bucketIndex”位置的值到“e”中</span></span><br><span class="line">        Entry&lt;K,V&gt; e = table[bucketIndex];</span><br><span class="line">        <span class="comment">// 设置“bucketIndex”位置的元素为“新Entry”，</span></span><br><span class="line">        <span class="comment">// 设置“e”为“新Entry的下一个节点”</span></span><br><span class="line">        table[bucketIndex] = <span class="keyword">new</span> Entry&lt;K,V&gt;(hash, key, value, e);</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// HashIterator是HashMap迭代器的抽象出来的父类，实现了公共了函数。</span></span><br><span class="line">    <span class="comment">// 它包含“key迭代器(KeyIterator)”、“Value迭代器(ValueIterator)”和“Entry迭代器(EntryIterator)”3个子类。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">HashIterator</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">        <span class="comment">// 下一个元素</span></span><br><span class="line">        Entry&lt;K,V&gt; next;</span><br><span class="line">        <span class="comment">// expectedModCount用于实现fast-fail机制。</span></span><br><span class="line">        <span class="keyword">int</span> expectedModCount;</span><br><span class="line">        <span class="comment">// 当前索引</span></span><br><span class="line">        <span class="keyword">int</span> index;</span><br><span class="line">        <span class="comment">// 当前元素</span></span><br><span class="line">        Entry&lt;K,V&gt; current;</span><br><span class="line"></span><br><span class="line">        HashIterator() &#123;</span><br><span class="line">            expectedModCount = modCount;</span><br><span class="line">            <span class="keyword">if</span> (size &gt; <span class="number">0</span>) &#123; <span class="comment">// advance to first entry</span></span><br><span class="line">                Entry[] t = table;</span><br><span class="line">                <span class="comment">// 将next指向table中第一个不为null的元素。</span></span><br><span class="line">                <span class="comment">// 这里利用了index的初始值为0，从0开始依次向后遍历，直到找到不为null的元素就退出循环。</span></span><br><span class="line">                <span class="keyword">while</span> (index &lt; t.length &amp;&amp; (next = t[index++]) == <span class="keyword">null</span>)</span><br><span class="line">                    ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> next != <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取下一个元素</span></span><br><span class="line">        <span class="function"><span class="keyword">final</span> Entry&lt;K,V&gt; <span class="title">nextEntry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">            Entry&lt;K,V&gt; e = next;</span><br><span class="line">            <span class="keyword">if</span> (e == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 注意！！！</span></span><br><span class="line">            <span class="comment">// 一个Entry就是一个单向链表</span></span><br><span class="line">            <span class="comment">// 若该Entry的下一个节点不为空，就将next指向下一个节点;</span></span><br><span class="line">            <span class="comment">// 否则，将next指向下一个链表(也是下一个Entry)的不为null的节点。</span></span><br><span class="line">            <span class="keyword">if</span> ((next = e.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                Entry[] t = table;</span><br><span class="line">                <span class="keyword">while</span> (index &lt; t.length &amp;&amp; (next = t[index++]) == <span class="keyword">null</span>)</span><br><span class="line">                    ;</span><br><span class="line">            &#125;</span><br><span class="line">            current = e;</span><br><span class="line">            <span class="keyword">return</span> e;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除当前元素</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (current == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">            <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">            Object k = current.key;</span><br><span class="line">            current = <span class="keyword">null</span>;</span><br><span class="line">            HashMap.<span class="keyword">this</span>.removeEntryForKey(k);</span><br><span class="line">            expectedModCount = modCount;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// value的迭代器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ValueIterator</span> <span class="keyword">extends</span> <span class="title">HashIterator</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> V <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> nextEntry().value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// key的迭代器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">KeyIterator</span> <span class="keyword">extends</span> <span class="title">HashIterator</span>&lt;<span class="title">K</span>&gt; </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> K <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> nextEntry().getKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Entry的迭代器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">EntryIterator</span> <span class="keyword">extends</span> <span class="title">HashIterator</span>&lt;<span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> Map.<span class="function">Entry&lt;K,V&gt; <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> nextEntry();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回一个“key迭代器”</span></span><br><span class="line">    <span class="function">Iterator&lt;K&gt; <span class="title">newKeyIterator</span><span class="params">()</span>   </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> KeyIterator();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 返回一个“value迭代器”</span></span><br><span class="line">    <span class="function">Iterator&lt;V&gt; <span class="title">newValueIterator</span><span class="params">()</span>   </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ValueIterator();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 返回一个“entry迭代器”</span></span><br><span class="line">    Iterator&lt;Map.Entry&lt;K,V&gt;&gt; newEntryIterator()   &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> EntryIterator();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// HashMap的Entry对应的集合</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回“key的集合”，实际上返回一个“KeySet对象”</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;K&gt; <span class="title">keySet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Set&lt;K&gt; ks = keySet;</span><br><span class="line">        <span class="keyword">return</span> (ks != <span class="keyword">null</span> ? ks : (keySet = <span class="keyword">new</span> KeySet()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Key对应的集合</span></span><br><span class="line">    <span class="comment">// KeySet继承于AbstractSet，说明该集合中没有重复的Key。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">KeySet</span> <span class="keyword">extends</span> <span class="title">AbstractSet</span>&lt;<span class="title">K</span>&gt; </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Iterator&lt;K&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> newKeyIterator();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> size;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> containsKey(o);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> HashMap.<span class="keyword">this</span>.removeEntryForKey(o) != <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            HashMap.<span class="keyword">this</span>.clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回“value集合”，实际上返回的是一个Values对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;V&gt; <span class="title">values</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Collection&lt;V&gt; vs = values;</span><br><span class="line">        <span class="keyword">return</span> (vs != <span class="keyword">null</span> ? vs : (values = <span class="keyword">new</span> Values()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// “value集合”</span></span><br><span class="line">    <span class="comment">// Values继承于AbstractCollection，不同于“KeySet继承于AbstractSet”，</span></span><br><span class="line">    <span class="comment">// Values中的元素能够重复。因为不同的key可以指向相同的value。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Values</span> <span class="keyword">extends</span> <span class="title">AbstractCollection</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Iterator&lt;V&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> newValueIterator();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> size;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> containsValue(o);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            HashMap.<span class="keyword">this</span>.clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回“HashMap的Entry集合”</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet() &#123;</span><br><span class="line">        <span class="keyword">return</span> entrySet0();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回“HashMap的Entry集合”，它实际是返回一个EntrySet对象</span></span><br><span class="line">    <span class="keyword">private</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet0() &#123;</span><br><span class="line">        Set&lt;Map.Entry&lt;K,V&gt;&gt; es = entrySet;</span><br><span class="line">        <span class="keyword">return</span> es != <span class="keyword">null</span> ? es : (entrySet = <span class="keyword">new</span> EntrySet());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// EntrySet对应的集合</span></span><br><span class="line">    <span class="comment">// EntrySet继承于AbstractSet，说明该集合中没有重复的EntrySet。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">EntrySet</span> <span class="keyword">extends</span> <span class="title">AbstractSet</span>&lt;<span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> Iterator&lt;Map.Entry&lt;K,V&gt;&gt; iterator() &#123;</span><br><span class="line">            <span class="keyword">return</span> newEntryIterator();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Map.Entry))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            Map.Entry&lt;K,V&gt; e = (Map.Entry&lt;K,V&gt;) o;</span><br><span class="line">            Entry&lt;K,V&gt; candidate = getEntry(e.getKey());</span><br><span class="line">            <span class="keyword">return</span> candidate != <span class="keyword">null</span> &amp;&amp; candidate.equals(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> removeMapping(o) != <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> size;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            HashMap.<span class="keyword">this</span>.clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// java.io.Serializable的写入函数</span></span><br><span class="line">    <span class="comment">// 将HashMap的“总的容量，实际容量，所有的Entry”都写入到输出流中</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeObject</span><span class="params">(java.io.ObjectOutputStream s)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Iterator&lt;Map.Entry&lt;K,V&gt;&gt; i =</span><br><span class="line">            (size &gt; <span class="number">0</span>) ? entrySet0().iterator() : <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Write out the threshold, loadfactor, and any hidden stuff</span></span><br><span class="line">        s.defaultWriteObject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Write out number of buckets</span></span><br><span class="line">        s.writeInt(table.length);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Write out size (number of Mappings)</span></span><br><span class="line">        s.writeInt(size);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Write out keys and values (alternating)</span></span><br><span class="line">        <span class="keyword">if</span> (i != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (i.hasNext()) &#123;</span><br><span class="line">            Map.Entry&lt;K,V&gt; e = i.next();</span><br><span class="line">            s.writeObject(e.getKey());</span><br><span class="line">            s.writeObject(e.getValue());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">362498820763181265L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// java.io.Serializable的读取函数：根据写入方式读出</span></span><br><span class="line">    <span class="comment">// 将HashMap的“总的容量，实际容量，所有的Entry”依次读出</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span></span><br><span class="line"><span class="function">         <span class="keyword">throws</span> IOException, ClassNotFoundException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// Read in the threshold, loadfactor, and any hidden stuff</span></span><br><span class="line">        s.defaultReadObject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Read in number of buckets and allocate the bucket array;</span></span><br><span class="line">        <span class="keyword">int</span> numBuckets = s.readInt();</span><br><span class="line">        table = <span class="keyword">new</span> Entry[numBuckets];</span><br><span class="line"></span><br><span class="line">        init();  <span class="comment">// Give subclass a chance to do its thing.</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Read in size (number of Mappings)</span></span><br><span class="line">        <span class="keyword">int</span> size = s.readInt();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Read the keys and values, and put the mappings in the HashMap</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;size; i++) &#123;</span><br><span class="line">            K key = (K) s.readObject();</span><br><span class="line">            V value = (V) s.readObject();</span><br><span class="line">            putForCreate(key, value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回“HashMap总的容量”</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span>   <span class="title">capacity</span><span class="params">()</span>     </span>&#123; <span class="keyword">return</span> table.length; &#125;</span><br><span class="line">    <span class="comment">// 返回“HashMap的加载因子”</span></span><br><span class="line">    <span class="function"><span class="keyword">float</span> <span class="title">loadFactor</span><span class="params">()</span>   </span>&#123; <span class="keyword">return</span> loadFactor;   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明:</p><p>在详细介绍HashMap的代码之前，我们需要了解：HashMap就是一个散列表，它是通过“拉链法”解决哈希冲突的。<br>还需要再补充说明的一点是影响HashMap性能的有两个参数：初始容量(<strong>initialCapacity</strong>) 和加载因子(<strong>loadFactor</strong>)。容量 是哈希表中桶的数量，初始容量只是哈希表在创建时的容量。加载因子 是哈希表在其容量自动增加之前可以达到多满的一种尺度。当哈希表中的条目数超出了加载因子与当前容量的乘积时，则要对该哈希表进行 rehash 操作（即重建内部数据结构），从而哈希表将具有大约两倍的桶数。</p><h2 id="HashMap的“拉链法”相关内容"><a href="#HashMap的“拉链法”相关内容" class="headerlink" title="HashMap的“拉链法”相关内容"></a>HashMap的“拉链法”相关内容</h2><h3 id="1、HashMap数据存储数组"><a href="#1、HashMap数据存储数组" class="headerlink" title="1、HashMap数据存储数组"></a>1、HashMap数据存储数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">transient</span> Entry[] table;</span><br></pre></td></tr></table></figure><p>HashMap中的key-value都是存储在Entry数组中的。</p><h3 id="2、数据节点Entry的数据结构"><a href="#2、数据节点Entry的数据结构" class="headerlink" title="2、数据节点Entry的数据结构"></a>2、数据节点Entry的数据结构</h3><h4 id="结构图表"><a href="#结构图表" class="headerlink" title="结构图表"></a>结构图表</h4><p><img src="http://oov0wb0gl.bkt.clouddn.com/2017-06-06-14967626283955.jpg" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> K key;</span><br><span class="line">    V value;</span><br><span class="line">    <span class="comment">// 指向下一个节点</span></span><br><span class="line">    Entry&lt;K,V&gt; next;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> hash;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造函数。</span></span><br><span class="line">    <span class="comment">// 输入参数包括"哈希值(h)", "键(k)", "值(v)", "下一节点(n)"</span></span><br><span class="line">    Entry(<span class="keyword">int</span> h, K k, V v, Entry&lt;K,V&gt; n) &#123;</span><br><span class="line">        value = v;</span><br><span class="line">        next = n;</span><br><span class="line">        key = k;</span><br><span class="line">        hash = h;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> K <span class="title">getKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">setValue</span><span class="params">(V newValue)</span> </span>&#123;</span><br><span class="line">        V oldValue = value;</span><br><span class="line">        value = newValue;</span><br><span class="line">        <span class="keyword">return</span> oldValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断两个Entry是否相等</span></span><br><span class="line">    <span class="comment">// 若两个Entry的“key”和“value”都相等，则返回true。</span></span><br><span class="line">    <span class="comment">// 否则，返回false</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Map.Entry))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Map.Entry e = (Map.Entry)o;</span><br><span class="line">        Object k1 = getKey();</span><br><span class="line">        Object k2 = e.getKey();</span><br><span class="line">        <span class="keyword">if</span> (k1 == k2 || (k1 != <span class="keyword">null</span> &amp;&amp; k1.equals(k2))) &#123;</span><br><span class="line">            Object v1 = getValue();</span><br><span class="line">            Object v2 = e.getValue();</span><br><span class="line">            <span class="keyword">if</span> (v1 == v2 || (v1 != <span class="keyword">null</span> &amp;&amp; v1.equals(v2)))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实现hashCode()</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (key==<span class="keyword">null</span>   ? <span class="number">0</span> : key.hashCode()) ^</span><br><span class="line">               (value==<span class="keyword">null</span> ? <span class="number">0</span> : value.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getKey() + <span class="string">"="</span> + getValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当向HashMap中添加元素时，绘调用recordAccess()。</span></span><br><span class="line">    <span class="comment">// 这里不做任何处理</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">recordAccess</span><span class="params">(HashMap&lt;K,V&gt; m)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当从HashMap中删除元素时，绘调用recordRemoval()。</span></span><br><span class="line">    <span class="comment">// 这里不做任何处理</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">recordRemoval</span><span class="params">(HashMap&lt;K,V&gt; m)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从中，我们可以看出 Entry 实际上就是一个单向链表。这也是为什么我们说HashMap是通过拉链法解决哈希冲突的。<br>Entry 实现了Map.Entry 接口，即实现getKey(), getValue(), setValue(V value), equals(Object o), hashCode()这些函数。这些都是基本的读取/修改key、value值的函数。</p><h2 id="HashMap的主要对外接口"><a href="#HashMap的主要对外接口" class="headerlink" title="HashMap的主要对外接口"></a>HashMap的主要对外接口</h2><h3 id="clear"><a href="#clear" class="headerlink" title="clear()"></a>clear()</h3><p>clear() 的作用是清空HashMap。它是通过将所有的元素设为null来实现的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    Entry[] tab = table;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tab.length; i++)</span><br><span class="line">        tab[i] = <span class="keyword">null</span>;</span><br><span class="line">    size = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="containsKey"><a href="#containsKey" class="headerlink" title="containsKey()"></a>containsKey()</h3><p>containsKey() 的作用是判断HashMap是否包含key。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsKey</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getEntry(key) != <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>containsKey() 首先通过getEntry(key)获取key对应的Entry，然后判断该Entry是否为null。<br>getEntry()的源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> Entry&lt;K,V&gt; <span class="title">getEntry</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取哈希值</span></span><br><span class="line">    <span class="comment">// HashMap将“key为null”的元素存储在table[0]位置，“key不为null”的则调用hash()计算哈希值</span></span><br><span class="line">    <span class="keyword">int</span> hash = (key == <span class="keyword">null</span>) ? <span class="number">0</span> : hash(key.hashCode());</span><br><span class="line">    <span class="comment">// 在“该hash值对应的链表”上查找“键值等于key”的元素</span></span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[indexFor(hash, table.length)];</span><br><span class="line">         e != <span class="keyword">null</span>;</span><br><span class="line">         e = e.next) &#123;</span><br><span class="line">        Object k;</span><br><span class="line">        <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">            ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            <span class="keyword">return</span> e;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>getEntry() 的作用就是返回“键为key”的键值对，它的实现源码中已经进行了说明。<br>这里需要强调的是：HashMap将“key为null”的元素都放在table的位置0处，即table[0]中；“key不为null”的放在table的其余位置！</p><h3 id="containsValue"><a href="#containsValue" class="headerlink" title="containsValue()"></a>containsValue()</h3><p>containsValue() 的作用是判断HashMap是否包含“值为value”的元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsValue</span><span class="params">(Object value)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 若“value为null”，则调用containsNullValue()查找</span></span><br><span class="line">    <span class="keyword">if</span> (value == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> containsNullValue();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 若“value不为null”，则查找HashMap中是否有值为value的节点。</span></span><br><span class="line">    Entry[] tab = table;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tab.length ; i++)</span><br><span class="line">        <span class="keyword">for</span> (Entry e = tab[i] ; e != <span class="keyword">null</span> ; e = e.next)</span><br><span class="line">            <span class="keyword">if</span> (value.equals(e.value))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从中，我们可以看出containsNullValue()分为两步进行处理：第一，若“value为null”，则调用containsNullValue()。第二，若“value不为null”，则查找HashMap中是否有值为value的节点。</p><p>containsNullValue() 的作用判断HashMap中是否包含“值为null”的元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">containsNullValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Entry[] tab = table;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tab.length ; i++)</span><br><span class="line">        <span class="keyword">for</span> (Entry e = tab[i] ; e != <span class="keyword">null</span> ; e = e.next)</span><br><span class="line">            <span class="keyword">if</span> (e.value == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="entrySet-、values-、keySet"><a href="#entrySet-、values-、keySet" class="headerlink" title="entrySet()、values()、keySet()"></a>entrySet()、values()、keySet()</h3><p>它们3个的原理类似，这里以entrySet()为例来说明。<br>entrySet()的作用是返回“HashMap中所有Entry的集合”，它是一个集合。实现代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回“HashMap的Entry集合”</span></span><br><span class="line"><span class="keyword">public</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet() &#123;</span><br><span class="line">    <span class="keyword">return</span> entrySet0();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回“HashMap的Entry集合”，它实际是返回一个EntrySet对象</span></span><br><span class="line"><span class="keyword">private</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet0() &#123;</span><br><span class="line">    Set&lt;Map.Entry&lt;K,V&gt;&gt; es = entrySet;</span><br><span class="line">    <span class="keyword">return</span> es != <span class="keyword">null</span> ? es : (entrySet = <span class="keyword">new</span> EntrySet());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// EntrySet对应的集合</span></span><br><span class="line"><span class="comment">// EntrySet继承于AbstractSet，说明该集合中没有重复的EntrySet。</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">EntrySet</span> <span class="keyword">extends</span> <span class="title">AbstractSet</span>&lt;<span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> Iterator&lt;Map.Entry&lt;K,V&gt;&gt; iterator() &#123;</span><br><span class="line">        <span class="keyword">return</span> newEntryIterator();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Map.Entry))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Map.Entry&lt;K,V&gt; e = (Map.Entry&lt;K,V&gt;) o;</span><br><span class="line">        Entry&lt;K,V&gt; candidate = getEntry(e.getKey());</span><br><span class="line">        <span class="keyword">return</span> candidate != <span class="keyword">null</span> &amp;&amp; candidate.equals(e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> removeMapping(o) != <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        HashMap.<span class="keyword">this</span>.clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HashMap是通过拉链法实现的散列表。表现在HashMap包括许多的Entry，而每一个Entry本质上又是一个单向链表。那么HashMap遍历key-value键值对的时候，是如何逐个去遍历的呢？</p><p>下面我们就看看HashMap是如何通过entrySet()遍历的。<br>entrySet()实际上是通过newEntryIterator()实现的。 下面我们看看它的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回一个“entry迭代器”</span></span><br><span class="line">Iterator&lt;Map.Entry&lt;K,V&gt;&gt; newEntryIterator()   &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> EntryIterator();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Entry的迭代器</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">EntryIterator</span> <span class="keyword">extends</span> <span class="title">HashIterator</span>&lt;<span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> Map.<span class="function">Entry&lt;K,V&gt; <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nextEntry();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// HashIterator是HashMap迭代器的抽象出来的父类，实现了公共了函数。</span></span><br><span class="line"><span class="comment">// 它包含“key迭代器(KeyIterator)”、“Value迭代器(ValueIterator)”和“Entry迭代器(EntryIterator)”3个子类。</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">HashIterator</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 下一个元素</span></span><br><span class="line">    Entry&lt;K,V&gt; next;</span><br><span class="line">    <span class="comment">// expectedModCount用于实现fast-fail机制。</span></span><br><span class="line">    <span class="keyword">int</span> expectedModCount;</span><br><span class="line">    <span class="comment">// 当前索引</span></span><br><span class="line">    <span class="keyword">int</span> index;</span><br><span class="line">    <span class="comment">// 当前元素</span></span><br><span class="line">    Entry&lt;K,V&gt; current;</span><br><span class="line"></span><br><span class="line">    HashIterator() &#123;</span><br><span class="line">        expectedModCount = modCount;</span><br><span class="line">        <span class="keyword">if</span> (size &gt; <span class="number">0</span>) &#123; <span class="comment">// advance to first entry</span></span><br><span class="line">            Entry[] t = table;</span><br><span class="line">            <span class="comment">// 将next指向table中第一个不为null的元素。</span></span><br><span class="line">            <span class="comment">// 这里利用了index的初始值为0，从0开始依次向后遍历，直到找到不为null的元素就退出循环。</span></span><br><span class="line">            <span class="keyword">while</span> (index &lt; t.length &amp;&amp; (next = t[index++]) == <span class="keyword">null</span>)</span><br><span class="line">                ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> next != <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取下一个元素</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> Entry&lt;K,V&gt; <span class="title">nextEntry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        Entry&lt;K,V&gt; e = next;</span><br><span class="line">        <span class="keyword">if</span> (e == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 注意！！！</span></span><br><span class="line">        <span class="comment">// 一个Entry就是一个单向链表</span></span><br><span class="line">        <span class="comment">// 若该Entry的下一个节点不为空，就将next指向下一个节点;</span></span><br><span class="line">        <span class="comment">// 否则，将next指向下一个链表(也是下一个Entry)的不为null的节点。</span></span><br><span class="line">        <span class="keyword">if</span> ((next = e.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">            Entry[] t = table;</span><br><span class="line">            <span class="keyword">while</span> (index &lt; t.length &amp;&amp; (next = t[index++]) == <span class="keyword">null</span>)</span><br><span class="line">                ;</span><br><span class="line">        &#125;</span><br><span class="line">        current = e;</span><br><span class="line">        <span class="keyword">return</span> e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除当前元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (current == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">        <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        Object k = current.key;</span><br><span class="line">        current = <span class="keyword">null</span>;</span><br><span class="line">        HashMap.<span class="keyword">this</span>.removeEntryForKey(k);</span><br><span class="line">        expectedModCount = modCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们通过entrySet()获取到的Iterator的next()方法去遍历HashMap时，实际上调用的是 nextEntry() 。而nextEntry()的实现方式，先遍历Entry(根据Entry在table中的序号，从小到大的遍历)；然后对每个Entry(即每个单向链表)，逐个遍历。</p><h3 id="get"><a href="#get" class="headerlink" title="get()"></a>get()</h3><p>get() 的作用是获取key对应的value，它的实现代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (key == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> getForNullKey();</span><br><span class="line">    <span class="comment">// 获取key的hash值</span></span><br><span class="line">    <span class="keyword">int</span> hash = hash(key.hashCode());</span><br><span class="line">    <span class="comment">// 在“该hash值对应的链表”上查找“键值等于key”的元素</span></span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[indexFor(hash, table.length)];</span><br><span class="line">         e != <span class="keyword">null</span>;</span><br><span class="line">         e = e.next) &#123;</span><br><span class="line">        Object k;</span><br><span class="line">        <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k)))</span><br><span class="line">            <span class="keyword">return</span> e.value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="put"><a href="#put" class="headerlink" title="put()"></a>put()</h3><p>put() 的作用是对外提供接口，让HashMap对象可以通过put()将“key-value”添加到HashMap中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 若“key为null”，则将该键值对添加到table[0]中。</span></span><br><span class="line">    <span class="keyword">if</span> (key == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> putForNullKey(value);</span><br><span class="line">    <span class="comment">// 若“key不为null”，则计算该key的哈希值，然后将其添加到该哈希值对应的链表中。</span></span><br><span class="line">    <span class="keyword">int</span> hash = hash(key.hashCode());</span><br><span class="line">    <span class="keyword">int</span> i = indexFor(hash, table.length);</span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[i]; e != <span class="keyword">null</span>; e = e.next) &#123;</span><br><span class="line">        Object k;</span><br><span class="line">        <span class="comment">// 若“该key”对应的键值对已经存在，则用新的value取代旧的value。然后退出！</span></span><br><span class="line">        <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;</span><br><span class="line">            V oldValue = e.value;</span><br><span class="line">            e.value = value;</span><br><span class="line">            e.recordAccess(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 若“该key”对应的键值对不存在，则将“key-value”添加到table中</span></span><br><span class="line">    modCount++;</span><br><span class="line">    addEntry(hash, key, value, i);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若要添加到HashMap中的键值对对应的key已经存在HashMap中，则找到该键值对；然后新的value取代旧的value，并退出！<br>若要添加到HashMap中的键值对对应的key不在HashMap中，则将其添加到该哈希值对应的链表中，并调用addEntry()。<br>下面看看addEntry()的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEntry</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">int</span> bucketIndex)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 保存“bucketIndex”位置的值到“e”中</span></span><br><span class="line">    Entry&lt;K,V&gt; e = table[bucketIndex];</span><br><span class="line">    <span class="comment">// 设置“bucketIndex”位置的元素为“新Entry”，</span></span><br><span class="line">    <span class="comment">// 设置“e”为“新Entry的下一个节点”</span></span><br><span class="line">    table[bucketIndex] = <span class="keyword">new</span> Entry&lt;K,V&gt;(hash, key, value, e);</span><br><span class="line">    <span class="comment">// 若HashMap的实际大小 不小于 “阈值”，则调整HashMap的大小</span></span><br><span class="line">    <span class="keyword">if</span> (size++ &gt;= threshold)</span><br><span class="line">        resize(<span class="number">2</span> * table.length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>addEntry() 的作用是新增Entry。将“key-value”插入指定位置，bucketIndex是位置索引。</p><p>说到addEntry()，就不得不说另一个函数createEntry()。createEntry()的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createEntry</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">int</span> bucketIndex)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 保存“bucketIndex”位置的值到“e”中</span></span><br><span class="line">    Entry&lt;K,V&gt; e = table[bucketIndex];</span><br><span class="line">    <span class="comment">// 设置“bucketIndex”位置的元素为“新Entry”，</span></span><br><span class="line">    <span class="comment">// 设置“e”为“新Entry的下一个节点”</span></span><br><span class="line">    table[bucketIndex] = <span class="keyword">new</span> Entry&lt;K,V&gt;(hash, key, value, e);</span><br><span class="line">    size++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它们的作用都是将key、value添加到HashMap中。而且，比较addEntry()和createEntry()的代码，我们发现addEntry()多了两句：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (size++ &gt;= threshold)</span><br><span class="line">    resize(<span class="number">2</span> * table.length);</span><br></pre></td></tr></table></figure><p>那它们的区别到底是什么呢？<br>阅读代码，我们可以发现，它们的使用情景不同。</p><ol><li><p>addEntry()一般用在 新增Entry可能导致“HashMap的实际容量”超过“阈值”的情况下。</p><pre><code>例如，我们新建一个HashMap，然后不断通过put()向HashMap中添加元素；put()是通过addEntry()新增Entry的。在这种情况下，我们不知道何时“HashMap的实际容量”会超过“阈值”；因此，需要调用addEntry()</code></pre></li><li><p>createEntry() 一般用在 新增Entry不会导致“HashMap的实际容量”超过“阈值”的情况下。</p><pre><code> 例如，我们调用HashMap“带有Map”的构造函数，它绘将Map的全部元素添加到HashMap中；但在添加之前，我们已经计算好“HashMap的容量和阈值”。也就是，可以确定“即使将Map中的全部元素添加到HashMap中，都不会超过HashMap的阈值”。此时，调用createEntry()即可。</code></pre></li></ol><h3 id="putAll"><a href="#putAll" class="headerlink" title="putAll()"></a>putAll()</h3><p>putAll() 的作用是将”m”的全部元素都添加到HashMap中，它的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">putAll</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 有效性判断</span></span><br><span class="line">    <span class="keyword">int</span> numKeysToBeAdded = m.size();</span><br><span class="line">    <span class="keyword">if</span> (numKeysToBeAdded == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算容量是否足够，</span></span><br><span class="line">    <span class="comment">// 若“当前实际容量 &lt; 需要的容量”，则将容量x2。</span></span><br><span class="line">    <span class="keyword">if</span> (numKeysToBeAdded &gt; threshold) &#123;</span><br><span class="line">        <span class="keyword">int</span> targetCapacity = (<span class="keyword">int</span>)(numKeysToBeAdded / loadFactor + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (targetCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">            targetCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">        <span class="keyword">int</span> newCapacity = table.length;</span><br><span class="line">        <span class="keyword">while</span> (newCapacity &lt; targetCapacity)</span><br><span class="line">            newCapacity &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (newCapacity &gt; table.length)</span><br><span class="line">            resize(newCapacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过迭代器，将“m”中的元素逐个添加到HashMap中。</span></span><br><span class="line">    <span class="keyword">for</span> (Iterator&lt;? extends Map.Entry&lt;? extends K, ? extends V&gt;&gt; i = m.entrySet().iterator(); i.hasNext(); ) &#123;</span><br><span class="line">        Map.Entry&lt;? extends K, ? extends V&gt; e = i.next();</span><br><span class="line">        put(e.getKey(), e.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="remove"><a href="#remove" class="headerlink" title="remove()"></a>remove()</h3><p>remove() 的作用是删除“键为key”元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">remove</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    Entry&lt;K,V&gt; e = removeEntryForKey(key);</span><br><span class="line">    <span class="keyword">return</span> (e == <span class="keyword">null</span> ? <span class="keyword">null</span> : e.value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除“键为key”的元素</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> Entry&lt;K,V&gt; <span class="title">removeEntryForKey</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取哈希值。若key为null，则哈希值为0；否则调用hash()进行计算</span></span><br><span class="line">    <span class="keyword">int</span> hash = (key == <span class="keyword">null</span>) ? <span class="number">0</span> : hash(key.hashCode());</span><br><span class="line">    <span class="keyword">int</span> i = indexFor(hash, table.length);</span><br><span class="line">    Entry&lt;K,V&gt; prev = table[i];</span><br><span class="line">    Entry&lt;K,V&gt; e = prev;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除链表中“键为key”的元素</span></span><br><span class="line">    <span class="comment">// 本质是“删除单向链表中的节点”</span></span><br><span class="line">    <span class="keyword">while</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">        Entry&lt;K,V&gt; next = e.next;</span><br><span class="line">        Object k;</span><br><span class="line">        <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">            ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k)))) &#123;</span><br><span class="line">            modCount++;</span><br><span class="line">            size--;</span><br><span class="line">            <span class="keyword">if</span> (prev == e)</span><br><span class="line">                table[i] = next;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                prev.next = next;</span><br><span class="line">            e.recordRemoval(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">return</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">        prev = e;</span><br><span class="line">        e = next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="HashMap实现的Cloneable接口"><a href="#HashMap实现的Cloneable接口" class="headerlink" title="HashMap实现的Cloneable接口"></a>HashMap实现的Cloneable接口</h2><p>HashMap实现了Cloneable接口，即实现了clone()方法。<br>clone()方法的作用很简单，就是克隆一个HashMap对象并返回。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 克隆一个HashMap，并返回Object对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    HashMap&lt;K,V&gt; result = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        result = (HashMap&lt;K,V&gt;)<span class="keyword">super</span>.clone();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">        <span class="comment">// assert false;</span></span><br><span class="line">    &#125;</span><br><span class="line">    result.table = <span class="keyword">new</span> Entry[table.length];</span><br><span class="line">    result.entrySet = <span class="keyword">null</span>;</span><br><span class="line">    result.modCount = <span class="number">0</span>;</span><br><span class="line">    result.size = <span class="number">0</span>;</span><br><span class="line">    result.init();</span><br><span class="line">    <span class="comment">// 调用putAllForCreate()将全部元素添加到HashMap中</span></span><br><span class="line">    result.putAllForCreate(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="HashMap实现的Serializable接口"><a href="#HashMap实现的Serializable接口" class="headerlink" title="HashMap实现的Serializable接口"></a>HashMap实现的Serializable接口</h2><p>HashMap实现java.io.Serializable，分别实现了串行读取、写入功能。<br>串行写入函数是writeObject()，它的作用是将HashMap的“总的容量，实际容量，所有的Entry”都写入到输出流中。<br>而串行读取函数是readObject()，它的作用是将HashMap的“总的容量，实际容量，所有的Entry”依次读出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// java.io.Serializable的写入函数</span></span><br><span class="line"><span class="comment">// 将HashMap的“总的容量，实际容量，所有的Entry”都写入到输出流中</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeObject</span><span class="params">(java.io.ObjectOutputStream s)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Iterator&lt;Map.Entry&lt;K,V&gt;&gt; i =</span><br><span class="line">        (size &gt; <span class="number">0</span>) ? entrySet0().iterator() : <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Write out the threshold, loadfactor, and any hidden stuff</span></span><br><span class="line">    s.defaultWriteObject();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Write out number of buckets</span></span><br><span class="line">    s.writeInt(table.length);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Write out size (number of Mappings)</span></span><br><span class="line">    s.writeInt(size);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Write out keys and values (alternating)</span></span><br><span class="line">    <span class="keyword">if</span> (i != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (i.hasNext()) &#123;</span><br><span class="line">        Map.Entry&lt;K,V&gt; e = i.next();</span><br><span class="line">        s.writeObject(e.getKey());</span><br><span class="line">        s.writeObject(e.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// java.io.Serializable的读取函数：根据写入方式读出</span></span><br><span class="line"><span class="comment">// 将HashMap的“总的容量，实际容量，所有的Entry”依次读出</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span></span><br><span class="line"><span class="function">     <span class="keyword">throws</span> IOException, ClassNotFoundException</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// Read in the threshold, loadfactor, and any hidden stuff</span></span><br><span class="line">    s.defaultReadObject();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read in number of buckets and allocate the bucket array;</span></span><br><span class="line">    <span class="keyword">int</span> numBuckets = s.readInt();</span><br><span class="line">    table = <span class="keyword">new</span> Entry[numBuckets];</span><br><span class="line"></span><br><span class="line">    init();  <span class="comment">// Give subclass a chance to do its thing.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read in size (number of Mappings)</span></span><br><span class="line">    <span class="keyword">int</span> size = s.readInt();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read the keys and values, and put the mappings in the HashMap</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;size; i++) &#123;</span><br><span class="line">        K key = (K) s.readObject();</span><br><span class="line">        V value = (V) s.readObject();</span><br><span class="line">        putForCreate(key, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="HashMap遍历方式"><a href="#HashMap遍历方式" class="headerlink" title="HashMap遍历方式"></a>HashMap遍历方式</h1><h2 id="遍历HashMap的键值对"><a href="#遍历HashMap的键值对" class="headerlink" title="遍历HashMap的键值对"></a>遍历HashMap的键值对</h2><p>第一步：根据entrySet()获取HashMap的“键值对”的Set集合。<br>第二步：通过Iterator迭代器遍历“第一步”得到的集合。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设map是HashMap对象</span></span><br><span class="line"><span class="comment">// map中的key是String类型，value是Integer类型</span></span><br><span class="line">Integer integ = <span class="keyword">null</span>;</span><br><span class="line">Iterator iter = map.entrySet().iterator();</span><br><span class="line"><span class="keyword">while</span>(iter.hasNext()) &#123;</span><br><span class="line">    Map.Entry entry = (Map.Entry)iter.next();</span><br><span class="line">    <span class="comment">// 获取key</span></span><br><span class="line">    key = (String)entry.getKey();</span><br><span class="line">        <span class="comment">// 获取value</span></span><br><span class="line">    integ = (Integer)entry.getValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="遍历HashMap的键"><a href="#遍历HashMap的键" class="headerlink" title="遍历HashMap的键"></a>遍历HashMap的键</h2><p>第一步：根据keySet()获取HashMap的“键”的Set集合。<br>第二步：通过Iterator迭代器遍历“第一步”得到的集合。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设map是HashMap对象</span></span><br><span class="line"><span class="comment">// map中的key是String类型，value是Integer类型</span></span><br><span class="line">String key = <span class="keyword">null</span>;</span><br><span class="line">Integer integ = <span class="keyword">null</span>;</span><br><span class="line">Iterator iter = map.keySet().iterator();</span><br><span class="line"><span class="keyword">while</span> (iter.hasNext()) &#123;</span><br><span class="line">        <span class="comment">// 获取key</span></span><br><span class="line">    key = (String)iter.next();</span><br><span class="line">        <span class="comment">// 根据key，获取value</span></span><br><span class="line">    integ = (Integer)map.get(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="遍历HashMap的值"><a href="#遍历HashMap的值" class="headerlink" title="遍历HashMap的值"></a>遍历HashMap的值</h2><p>第一步：根据value()获取HashMap的“值”的集合。<br>第二步：通过Iterator迭代器遍历“第一步”得到的集合。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设map是HashMap对象</span></span><br><span class="line"><span class="comment">// map中的key是String类型，value是Integer类型</span></span><br><span class="line">Integer value = <span class="keyword">null</span>;</span><br><span class="line">Collection c = map.values();</span><br><span class="line">Iterator iter= c.iterator();</span><br><span class="line"><span class="keyword">while</span> (iter.hasNext()) &#123;</span><br><span class="line">    value = (Integer)iter.next();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>遍历测试程序如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Map.Entry;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @desc 遍历HashMap的测试程序。</span></span><br><span class="line"><span class="comment"> *   (01) 通过entrySet()去遍历key、value，参考实现函数：</span></span><br><span class="line"><span class="comment"> *        iteratorHashMapByEntryset()</span></span><br><span class="line"><span class="comment"> *   (02) 通过keySet()去遍历key、value，参考实现函数：</span></span><br><span class="line"><span class="comment"> *        iteratorHashMapByKeyset()</span></span><br><span class="line"><span class="comment"> *   (03) 通过values()去遍历value，参考实现函数：</span></span><br><span class="line"><span class="comment"> *        iteratorHashMapJustValues()</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @author skywang</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMapIteratorTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> val = <span class="number">0</span>;</span><br><span class="line">        String key = <span class="keyword">null</span>;</span><br><span class="line">        Integer value = <span class="keyword">null</span>;</span><br><span class="line">        Random r = <span class="keyword">new</span> Random();</span><br><span class="line">        HashMap map = <span class="keyword">new</span> HashMap();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">12</span>; i++) &#123;</span><br><span class="line">            <span class="comment">// 随机获取一个[0,100)之间的数字</span></span><br><span class="line">            val = r.nextInt(<span class="number">100</span>);</span><br><span class="line">            </span><br><span class="line">            key = String.valueOf(val);</span><br><span class="line">            value = r.nextInt(<span class="number">5</span>);</span><br><span class="line">            <span class="comment">// 添加到HashMap中</span></span><br><span class="line">            map.put(key, value);</span><br><span class="line">            System.out.println(<span class="string">" key:"</span>+key+<span class="string">" value:"</span>+value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 通过entrySet()遍历HashMap的key-value</span></span><br><span class="line">        iteratorHashMapByEntryset(map) ;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 通过keySet()遍历HashMap的key-value</span></span><br><span class="line">        iteratorHashMapByKeyset(map) ;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 单单遍历HashMap的value</span></span><br><span class="line">        iteratorHashMapJustValues(map);        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 通过entry set遍历HashMap</span></span><br><span class="line"><span class="comment">     * 效率高!</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">iteratorHashMapByEntryset</span><span class="params">(HashMap map)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (map == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"\niterator HashMap By entryset"</span>);</span><br><span class="line">        String key = <span class="keyword">null</span>;</span><br><span class="line">        Integer integ = <span class="keyword">null</span>;</span><br><span class="line">        Iterator iter = map.entrySet().iterator();</span><br><span class="line">        <span class="keyword">while</span>(iter.hasNext()) &#123;</span><br><span class="line">            Map.Entry entry = (Map.Entry)iter.next();</span><br><span class="line">            </span><br><span class="line">            key = (String)entry.getKey();</span><br><span class="line">            integ = (Integer)entry.getValue();</span><br><span class="line">            System.out.println(key+<span class="string">" -- "</span>+integ.intValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 通过keyset来遍历HashMap</span></span><br><span class="line"><span class="comment">     * 效率低!</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">iteratorHashMapByKeyset</span><span class="params">(HashMap map)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (map == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"\niterator HashMap By keyset"</span>);</span><br><span class="line">        String key = <span class="keyword">null</span>;</span><br><span class="line">        Integer integ = <span class="keyword">null</span>;</span><br><span class="line">        Iterator iter = map.keySet().iterator();</span><br><span class="line">        <span class="keyword">while</span> (iter.hasNext()) &#123;</span><br><span class="line">            key = (String)iter.next();</span><br><span class="line">            integ = (Integer)map.get(key);</span><br><span class="line">            System.out.println(key+<span class="string">" -- "</span>+integ.intValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 遍历HashMap的values</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">iteratorHashMapJustValues</span><span class="params">(HashMap map)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (map == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        </span><br><span class="line">        Collection c = map.values();</span><br><span class="line">        Iterator iter= c.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iter.hasNext()) &#123;</span><br><span class="line">            System.out.println(iter.next());</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="HashMap示例"><a href="#HashMap示例" class="headerlink" title="HashMap示例"></a>HashMap示例</h1><p>下面通过一个实例学习如何使用HashMap</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Map.Entry;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @desc HashMap测试程序</span></span><br><span class="line"><span class="comment"> *        </span></span><br><span class="line"><span class="comment"> * @author skywang</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMapTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        testHashMapAPIs();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testHashMapAPIs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 初始化随机种子</span></span><br><span class="line">        Random r = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="comment">// 新建HashMap</span></span><br><span class="line">        HashMap map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        <span class="comment">// 添加操作</span></span><br><span class="line">        map.put(<span class="string">"one"</span>, r.nextInt(<span class="number">10</span>));</span><br><span class="line">        map.put(<span class="string">"two"</span>, r.nextInt(<span class="number">10</span>));</span><br><span class="line">        map.put(<span class="string">"three"</span>, r.nextInt(<span class="number">10</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印出map</span></span><br><span class="line">        System.out.println(<span class="string">"map:"</span>+map );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过Iterator遍历key-value</span></span><br><span class="line">        Iterator iter = map.entrySet().iterator();</span><br><span class="line">        <span class="keyword">while</span>(iter.hasNext()) &#123;</span><br><span class="line">            Map.Entry entry = (Map.Entry)iter.next();</span><br><span class="line">            System.out.println(<span class="string">"next : "</span>+ entry.getKey() +<span class="string">" - "</span>+entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// HashMap的键值对个数        </span></span><br><span class="line">        System.out.println(<span class="string">"size:"</span>+map.size());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// containsKey(Object key) :是否包含键key</span></span><br><span class="line">        System.out.println(<span class="string">"contains key two : "</span>+map.containsKey(<span class="string">"two"</span>));</span><br><span class="line">        System.out.println(<span class="string">"contains key five : "</span>+map.containsKey(<span class="string">"five"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// containsValue(Object value) :是否包含值value</span></span><br><span class="line">        System.out.println(<span class="string">"contains value 0 : "</span>+map.containsValue(<span class="keyword">new</span> Integer(<span class="number">0</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// remove(Object key) ： 删除键key对应的键值对</span></span><br><span class="line">        map.remove(<span class="string">"three"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"map:"</span>+map );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// clear() ： 清空HashMap</span></span><br><span class="line">        map.clear();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// isEmpty() : HashMap是否为空</span></span><br><span class="line">        System.out.println((map.isEmpty()?<span class="string">"map is empty"</span>:<span class="string">"map is not empty"</span>) );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> (某一次)运行结果： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">map:&#123;two=<span class="number">7</span>, one=<span class="number">9</span>, three=<span class="number">6</span>&#125;</span><br><span class="line">next : two - <span class="number">7</span></span><br><span class="line">next : one - <span class="number">9</span></span><br><span class="line">next : three - <span class="number">6</span></span><br><span class="line">size:<span class="number">3</span></span><br><span class="line">contains key two : <span class="keyword">true</span></span><br><span class="line">contains key five : <span class="keyword">false</span></span><br><span class="line">contains value <span class="number">0</span> : <span class="keyword">false</span></span><br><span class="line">map:&#123;two=<span class="number">7</span>, one=<span class="number">9</span>&#125;</span><br><span class="line">map is empty</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;HashMap简介&quot;&gt;&lt;a href=&quot;#HashMap简介&quot; class=&quot;headerlink&quot; title=&quot;HashMap简介&quot;&gt;&lt;/a&gt;HashMap简介&lt;/h1&gt;&lt;p&gt;HashMap 是一个散列表，它存储的内容是键值对(key-value)映射。&lt;br&gt;HashMap 继承于AbstractMap，实现了&lt;code&gt;Map、Cloneable、java.io.Serializable&lt;/code&gt;接口。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HashMap 的实现不是同步的，这意味着它不是线程安全的。它的key、value都可以为null。此外，HashMap中的映射不是有序的。&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Java 集合" scheme="http://cuijing.me/categories/Java-%E9%9B%86%E5%90%88/"/>
    
    
      <category term="Java" scheme="http://cuijing.me/tags/Java/"/>
    
      <category term="Map" scheme="http://cuijing.me/tags/Map/"/>
    
      <category term="HashMap" scheme="http://cuijing.me/tags/HashMap/"/>
    
  </entry>
  
  <entry>
    <title>集合框架之 Map</title>
    <link href="http://cuijing.me/2015/07/08/Java/8-Collection-Map/9-Map/"/>
    <id>http://cuijing.me/2015/07/08/Java/8-Collection-Map/9-Map/</id>
    <published>2015-07-08T00:30:00.000Z</published>
    <updated>2016-05-01T12:38:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h1><p>前面，我们已经系统的对List进行了学习。接下来，我们先学习Map，然后再学习Set；因为Set的实现类都是基于Map来实现的(如，HashSet是通过HashMap实现的，TreeSet是通过TreeMap实现的)。</p><p>首先，我们看看Map架构。<br><a id="more"></a><br><img src="http://oov0wb0gl.bkt.clouddn.com/2017-06-06-14955409400343.jpg" alt=""></p><p>如上图：</p><ol><li>Map 是映射接口，Map中存储的内容是键值对(key-value)。</li><li>AbstractMap 是继承于Map的抽象类，它实现了Map中的大部分API。其它Map的实现类可以通过继承AbstractMap来减少重复编码。</li><li>SortedMap 是继承于Map的接口。SortedMap中的内容是排序的键值对，排序的方法是通过比较器(Comparator)。</li><li>NavigableMap 是继承于SortedMap的接口。相比于SortedMap，NavigableMap有一系列的导航方法；如”获取大于/等于某对象的键值对”、“获取小于/等于某对象的键值对”等等。 </li><li>TreeMap 继承于AbstractMap，且实现了NavigableMap接口；因此，TreeMap中的内容是“有序的键值对”！</li><li>HashMap 继承于AbstractMap，但没实现NavigableMap接口；因此，HashMap的内容是“键值对，但不保证次序”！</li><li>Hashtable 虽然不是继承于AbstractMap，但它继承于Dictionary(Dictionary也是键值对的接口)，而且也实现Map接口；因此，Hashtable的内容也是“键值对，也不保证次序”。但和HashMap相比，Hashtable是线程安全的，而且它支持通过Enumeration去遍历。</li><li>WeakHashMap 继承于AbstractMap。它和HashMap的键类型不同，WeakHashMap的键是“弱键”。</li></ol><h2 id="1、Map"><a href="#1、Map" class="headerlink" title="1、Map"></a>1、Map</h2><p>Map的定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123; &#125;</span><br></pre></td></tr></table></figure><p>Map 是一个键值对(key-value)映射接口。Map映射中不能包含重复的键；每个键最多只能映射到一个值。</p><p>Map 接口提供三种 collection 视图，允许以键集、值集或键-值映射关系集的形式查看某个映射的内容。</p><p>Map 映射顺序。有些实现类，可以明确保证其顺序，如 TreeMap；另一些映射实现则不保证顺序，如 HashMap 类。</p><p>Map 的实现类应该提供2个“标准的”构造方法：第一个，void（无参数）构造方法，用于创建空映射；第二个，带有单个 Map 类型参数的构造方法，用于创建一个与其参数具有相同键-值映射关系的新映射。实际上，后一个构造方法允许用户复制任意映射，生成所需类的一个等价映射。尽管无法强制执行此建议（因为接口不能包含构造方法），但是 JDK 中所有通用的映射实现都遵从它。</p><h3 id="Map的API"><a href="#Map的API" class="headerlink" title="Map的API"></a>Map的API</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span>                 <span class="title">clear</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">boolean</span>              <span class="title">containsKey</span><span class="params">(Object key)</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">boolean</span>              <span class="title">containsValue</span><span class="params">(Object value)</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> Set&lt;Entry&lt;K, V&gt;&gt;     <span class="title">entrySet</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">boolean</span>              <span class="title">equals</span><span class="params">(Object object)</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> V                    <span class="title">get</span><span class="params">(Object key)</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">int</span>                  <span class="title">hashCode</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">boolean</span>              <span class="title">isEmpty</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> Set&lt;K&gt;               <span class="title">keySet</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> V                    <span class="title">put</span><span class="params">(K key, V value)</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span>                 <span class="title">putAll</span><span class="params">(Map&lt;? extends K, ? extends V&gt; map)</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> V                    <span class="title">remove</span><span class="params">(Object key)</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">int</span>                  <span class="title">size</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> Collection&lt;V&gt;        <span class="title">values</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><p>说明：</p><ol><li><p>Map提供接口分别用于返回 键集、值集或键-值映射关系集。 </p><pre><code>1. entrySet()用于返回键-值集的Set集合2. keySet()用于返回键集的Set集合3. values()用户返回值集的Collection集合4. 因为Map中不能包含重复的键；每个键最多只能映射到一个值。所以，键-值集、键集都是Set，值集时Collection。</code></pre></li><li><p>Map提供了“键-值对”、“根据键获取值”、“删除键”、“获取容量大小”等方法。</p></li></ol><h2 id="2、Map-Entry"><a href="#2、Map-Entry" class="headerlink" title="2、Map.Entry"></a>2、Map.Entry</h2><h3 id="Map-Entry的定义："><a href="#Map-Entry的定义：" class="headerlink" title="Map.Entry的定义："></a>Map.Entry的定义：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123; &#125;</span><br></pre></td></tr></table></figure><p>Map.Entry是Map中内部的一个接口，Map.Entry是键值对，Map通过 entrySet() 获取Map.Entry的键值对集合，从而通过该集合实现对键值对的操作。</p><h3 id="Map-Entry的API"><a href="#Map-Entry的API" class="headerlink" title="Map.Entry的API"></a>Map.Entry的API</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">boolean</span>       <span class="title">equals</span><span class="params">(Object object)</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> K             <span class="title">getKey</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> V             <span class="title">getValue</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">int</span>           <span class="title">hashCode</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> V             <span class="title">setValue</span><span class="params">(V object)</span></span></span><br></pre></td></tr></table></figure><h2 id="3、AbstractMap"><a href="#3、AbstractMap" class="headerlink" title="3、AbstractMap"></a>3、AbstractMap</h2><h3 id="AbstractMap的定义："><a href="#AbstractMap的定义：" class="headerlink" title="AbstractMap的定义："></a>AbstractMap的定义：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>AbstractMap类提供 Map 接口的骨干实现，以最大限度地减少实现此接口所需的工作。</p><p>要实现不可修改的映射，编程人员只需扩展此类并提供 entrySet 方法的实现即可，该方法将返回映射的映射关系 set 视图。通常，返回的 set 将依次在 AbstractSet 上实现。此 set 不支持 add() 或 remove() 方法，其迭代器也不支持 remove() 方法。</p><p>要实现可修改的映射，编程人员必须另外重写此类的 put 方法（否则将抛出 UnsupportedOperationException），entrySet().iterator() 返回的迭代器也必须另外实现其 remove 方法。</p><h3 id="AbstractMap的API"><a href="#AbstractMap的API" class="headerlink" title="AbstractMap的API"></a>AbstractMap的API</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> Set&lt;Entry&lt;K, V&gt;&gt;     entrySet()</span><br><span class="line">         <span class="function"><span class="keyword">void</span>                 <span class="title">clear</span><span class="params">()</span></span></span><br><span class="line"><span class="function">         <span class="keyword">boolean</span>              <span class="title">containsKey</span><span class="params">(Object key)</span></span></span><br><span class="line"><span class="function">         <span class="keyword">boolean</span>              <span class="title">containsValue</span><span class="params">(Object value)</span></span></span><br><span class="line"><span class="function">         <span class="keyword">boolean</span>              <span class="title">equals</span><span class="params">(Object object)</span></span></span><br><span class="line"><span class="function">         V                    <span class="title">get</span><span class="params">(Object key)</span></span></span><br><span class="line"><span class="function">         <span class="keyword">int</span>                  <span class="title">hashCode</span><span class="params">()</span></span></span><br><span class="line"><span class="function">         <span class="keyword">boolean</span>              <span class="title">isEmpty</span><span class="params">()</span></span></span><br><span class="line"><span class="function">         Set&lt;K&gt;               <span class="title">keySet</span><span class="params">()</span></span></span><br><span class="line"><span class="function">         V                    <span class="title">put</span><span class="params">(K key, V value)</span></span></span><br><span class="line"><span class="function">         <span class="keyword">void</span>                 <span class="title">putAll</span><span class="params">(Map&lt;? extends K, ? extends V&gt; map)</span></span></span><br><span class="line"><span class="function">         V                    <span class="title">remove</span><span class="params">(Object key)</span></span></span><br><span class="line"><span class="function">         <span class="keyword">int</span>                  <span class="title">size</span><span class="params">()</span></span></span><br><span class="line"><span class="function">         String               <span class="title">toString</span><span class="params">()</span></span></span><br><span class="line"><span class="function">         Collection&lt;V&gt;        <span class="title">values</span><span class="params">()</span></span></span><br><span class="line"><span class="function">         Object               <span class="title">clone</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><h2 id="4、SortedMap"><a href="#4、SortedMap" class="headerlink" title="4、SortedMap"></a>4、SortedMap</h2><h3 id="SortedMap的定义："><a href="#SortedMap的定义：" class="headerlink" title="SortedMap的定义："></a>SortedMap的定义：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SortedMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123; &#125;</span><br></pre></td></tr></table></figure><p>SortedMap是一个继承于Map接口的接口。它是一个有序的SortedMap键值映射。<br>SortedMap 的排序方式有两种：自然排序 或者 用户指定比较器。 插入有序 SortedMap 的所有元素都必须实现 Comparable 接口（或者被指定的比较器所接受）。</p><p>另外，所有SortedMap 实现类都应该提供 4 个“标准”构造方法：</p><ol><li>void（无参数）构造方法，它创建一个空的有序映射，按照键的自然顺序进行排序。</li><li>带有一个 Comparator 类型参数的构造方法，它创建一个空的有序映射，根据指定的比较器进行排序。</li><li>带有一个 Map 类型参数的构造方法，它创建一个新的有序映射，其键-值映射关系与参数相同，按照键的自然顺序进行排序。</li><li>带有一个 SortedMap 类型参数的构造方法，它创建一个新的有序映射，其键-值映射关系和排序方法与输入的有序映射相同。无法保证强制实施此建议，因为接口不能包含构造方法。</li></ol><h3 id="SortedMap的API"><a href="#SortedMap的API" class="headerlink" title="SortedMap的API"></a>SortedMap的API</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 继承于Map的API</span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span>                 <span class="title">clear</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">boolean</span>              <span class="title">containsKey</span><span class="params">(Object key)</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">boolean</span>              <span class="title">containsValue</span><span class="params">(Object value)</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> Set&lt;Entry&lt;K, V&gt;&gt;     <span class="title">entrySet</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">boolean</span>              <span class="title">equals</span><span class="params">(Object object)</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> V                    <span class="title">get</span><span class="params">(Object key)</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">int</span>                  <span class="title">hashCode</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">boolean</span>              <span class="title">isEmpty</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> Set&lt;K&gt;               <span class="title">keySet</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> V                    <span class="title">put</span><span class="params">(K key, V value)</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span>                 <span class="title">putAll</span><span class="params">(Map&lt;? extends K, ? extends V&gt; map)</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> V                    <span class="title">remove</span><span class="params">(Object key)</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">int</span>                  <span class="title">size</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> Collection&lt;V&gt;        <span class="title">values</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">// SortedMap新增的API </span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> Comparator&lt;? <span class="keyword">super</span> K&gt;     <span class="title">comparator</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> K                         <span class="title">firstKey</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> SortedMap&lt;K, V&gt;           <span class="title">headMap</span><span class="params">(K endKey)</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> K                         <span class="title">lastKey</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> SortedMap&lt;K, V&gt;           <span class="title">subMap</span><span class="params">(K startKey, K endKey)</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> SortedMap&lt;K, V&gt;           <span class="title">tailMap</span><span class="params">(K startKey)</span></span></span><br></pre></td></tr></table></figure><h2 id="5、NavigableMap"><a href="#5、NavigableMap" class="headerlink" title="5、NavigableMap"></a>5、NavigableMap</h2><h3 id="NavigableMap的定义："><a href="#NavigableMap的定义：" class="headerlink" title="NavigableMap的定义："></a>NavigableMap的定义：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">NavigableMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">SortedMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123; &#125;</span><br></pre></td></tr></table></figure><p>NavigableMap是继承于SortedMap的接口。它是一个可导航的键-值对集合，具有了为给定搜索目标报告最接近匹配项的导航方法。<br>NavigableMap分别提供了获取“键”、“键-值对”、“键集”、“键-值对集”的相关方法。</p><h3 id="NavigableMap的API"><a href="#NavigableMap的API" class="headerlink" title="NavigableMap的API"></a>NavigableMap的API</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">abstract</span> Entry&lt;K, V&gt;             <span class="title">ceilingEntry</span><span class="params">(K key)</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> Entry&lt;K, V&gt;             <span class="title">firstEntry</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> Entry&lt;K, V&gt;             <span class="title">floorEntry</span><span class="params">(K key)</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> Entry&lt;K, V&gt;             <span class="title">higherEntry</span><span class="params">(K key)</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> Entry&lt;K, V&gt;             <span class="title">lastEntry</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> Entry&lt;K, V&gt;             <span class="title">lowerEntry</span><span class="params">(K key)</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> Entry&lt;K, V&gt;             <span class="title">pollFirstEntry</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> Entry&lt;K, V&gt;             <span class="title">pollLastEntry</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> K                       <span class="title">ceilingKey</span><span class="params">(K key)</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> K                       <span class="title">floorKey</span><span class="params">(K key)</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> K                       <span class="title">higherKey</span><span class="params">(K key)</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> K                       <span class="title">lowerKey</span><span class="params">(K key)</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> NavigableSet&lt;K&gt;         <span class="title">descendingKeySet</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> NavigableSet&lt;K&gt;         <span class="title">navigableKeySet</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> NavigableMap&lt;K, V&gt;      <span class="title">descendingMap</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> NavigableMap&lt;K, V&gt;      <span class="title">headMap</span><span class="params">(K toKey, <span class="keyword">boolean</span> inclusive)</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> SortedMap&lt;K, V&gt;         <span class="title">headMap</span><span class="params">(K toKey)</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> SortedMap&lt;K, V&gt;         <span class="title">subMap</span><span class="params">(K fromKey, K toKey)</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> NavigableMap&lt;K, V&gt;      <span class="title">subMap</span><span class="params">(K fromKey, <span class="keyword">boolean</span> fromInclusive, K toKey, <span class="keyword">boolean</span> toInclusive)</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> SortedMap&lt;K, V&gt;         <span class="title">tailMap</span><span class="params">(K fromKey)</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> NavigableMap&lt;K, V&gt;      <span class="title">tailMap</span><span class="params">(K fromKey, <span class="keyword">boolean</span> inclusive)</span></span></span><br></pre></td></tr></table></figure><p>说明：</p><p>NavigableMap除了继承SortedMap的特性外，它的提供的功能可以分为4类：</p><ol><li><p>提供操作键-值对的方法。</p><ol><li>lowerEntry、floorEntry、ceilingEntry 和 higherEntry 方法，它们分别返回与小于、小于等于、大于等于、大于给定键的键关联的 Map.Entry 对象。</li><li>firstEntry、pollFirstEntry、lastEntry 和 pollLastEntry 方法，它们返回和/或移除最小和最大的映射关系（如果存在），否则返回 null。</li></ol></li><li><p>提供操作键的方法。这个和第1类比较类似<br>  lowerKey、floorKey、ceilingKey 和 higherKey 方法，它们分别返回与小于、小于等于、大于等于、大于给定键的键。</p></li><li><p>获取键集。<br> navigableKeySet、descendingKeySet分别获取正序/反序的键集。</p></li><li><p>获取键-值对的子集。</p></li></ol><h2 id="6、Dictionary"><a href="#6、Dictionary" class="headerlink" title="6、Dictionary"></a>6、Dictionary</h2><h3 id="Dictionary的定义如下："><a href="#Dictionary的定义如下：" class="headerlink" title="Dictionary的定义如下："></a>Dictionary的定义如下：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Dictionary</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>NavigableMap是JDK 1.0定义的键值对的接口，它也包括了操作键值对的基本函数。</p><h3 id="Dictionary的API"><a href="#Dictionary的API" class="headerlink" title="Dictionary的API"></a>Dictionary的API</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">abstract</span> Enumeration&lt;V&gt;     <span class="title">elements</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> V                  <span class="title">get</span><span class="params">(Object key)</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">boolean</span>            <span class="title">isEmpty</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> Enumeration&lt;K&gt;     <span class="title">keys</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> V                  <span class="title">put</span><span class="params">(K key, V value)</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> V                  <span class="title">remove</span><span class="params">(Object key)</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">int</span>                <span class="title">size</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Map&quot;&gt;&lt;a href=&quot;#Map&quot; class=&quot;headerlink&quot; title=&quot;Map&quot;&gt;&lt;/a&gt;Map&lt;/h1&gt;&lt;p&gt;前面，我们已经系统的对List进行了学习。接下来，我们先学习Map，然后再学习Set；因为Set的实现类都是基于Map来实现的(如，HashSet是通过HashMap实现的，TreeSet是通过TreeMap实现的)。&lt;/p&gt;
&lt;p&gt;首先，我们看看Map架构。&lt;br&gt;
    
    </summary>
    
      <category term="Java 集合" scheme="http://cuijing.me/categories/Java-%E9%9B%86%E5%90%88/"/>
    
    
      <category term="Java" scheme="http://cuijing.me/tags/Java/"/>
    
      <category term="Map" scheme="http://cuijing.me/tags/Map/"/>
    
  </entry>
  
  <entry>
    <title>集合框架之 List总结</title>
    <link href="http://cuijing.me/2015/07/02/Java/8-Collection-Map/8-List%E6%80%BB%E7%BB%93/"/>
    <id>http://cuijing.me/2015/07/02/Java/8-Collection-Map/8-List总结/</id>
    <published>2015-07-02T00:30:00.000Z</published>
    <updated>2016-05-01T12:46:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="List-总结"><a href="#List-总结" class="headerlink" title="List 总结"></a>List 总结</h1><p>先回顾一下List的框架图</p><p><img src="http://oov0wb0gl.bkt.clouddn.com/2017-06-06-14955300758588.jpg" alt=""></p><ol><li>List 是一个接口，它继承于Collection的接口。它代表着有序的队列。<a id="more"></a></li><li><p>AbstractList 是一个抽象类，它继承于AbstractCollection。AbstractList实现List接口中除size()、get(int location)之外的函数。</p></li><li><p>AbstractSequentialList 是一个抽象类，它继承于AbstractList。AbstractSequentialList 实现了“链表中，根据index索引值操作链表的全部函数”。</p></li><li><p>ArrayList, LinkedList, Vector, Stack是List的4个实现类。</p><pre><code>1. ArrayList 是一个数组队列，相当于动态数组。它由数组实现，随机访问效率高，随机插入、随机删除效率低。2. LinkedList 是一个双向链表。它也可以被当作堆栈、队列或双端队列进行操作。LinkedList随机访问效率低，但随机插入、随机删除效率高。3. Vector 是矢量队列，和ArrayList一样，它也是一个动态数组，由数组实现。但是ArrayList是非线程安全的，而Vector是线程安全的。4. Stack 是栈，它继承于Vector。它的特性是：先进后出(FILO, First In Last Out)。</code></pre></li></ol><h2 id="List使用场景"><a href="#List使用场景" class="headerlink" title="List使用场景"></a>List使用场景</h2><p>学东西的最终目的是为了能够理解、使用它。下面先概括的说明一下各个List的使用场景，后面再分析原因。</p><p>如果涉及到“栈”、“队列”、“链表”等操作，应该考虑用List，具体的选择哪个List，根据下面的标准来取舍。</p><ol><li>对于需要快速插入，删除元素，应该使用LinkedList。</li><li>对于需要快速随机访问元素，应该使用ArrayList。</li><li>对于“单线程环境” 或者 “多线程环境，但List仅仅只会被单个线程操作”，此时应该使用非同步的类(如ArrayList)。</li><li>对于“多线程环境，且List可能同时被多个线程操作”，此时，应该使用同步的类(如Vector)。</li></ol><p>通过下面的测试程序，我们来验证上面的(01)和(02)结论。参考代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.Class;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @desc 对比ArrayList和LinkedList的插入、随机读取效率、删除的效率</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListCompareTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> COUNT = <span class="number">100000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> LinkedList linkedList = <span class="keyword">new</span> LinkedList();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ArrayList arrayList = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Vector vector = <span class="keyword">new</span> Vector();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Stack stack = <span class="keyword">new</span> Stack();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 换行符</span></span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="comment">// 插入</span></span><br><span class="line">        insertByPosition(stack) ;</span><br><span class="line">        insertByPosition(vector) ;</span><br><span class="line">        insertByPosition(linkedList) ;</span><br><span class="line">        insertByPosition(arrayList) ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 换行符</span></span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="comment">// 随机读取</span></span><br><span class="line">        readByPosition(stack);</span><br><span class="line">        readByPosition(vector);</span><br><span class="line">        readByPosition(linkedList);</span><br><span class="line">        readByPosition(arrayList);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 换行符</span></span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="comment">// 删除 </span></span><br><span class="line">        deleteByPosition(stack);</span><br><span class="line">        deleteByPosition(vector);</span><br><span class="line">        deleteByPosition(linkedList);</span><br><span class="line">        deleteByPosition(arrayList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取list的名称</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getListName</span><span class="params">(List list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (list <span class="keyword">instanceof</span> LinkedList) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"LinkedList"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (list <span class="keyword">instanceof</span> ArrayList) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"ArrayList"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (list <span class="keyword">instanceof</span> Stack) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Stack"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (list <span class="keyword">instanceof</span> Vector) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Vector"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"List"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向list的指定位置插入COUNT个元素，并统计时间</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertByPosition</span><span class="params">(List list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 向list的位置0插入COUNT个数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;COUNT; i++)</span><br><span class="line">            list.add(<span class="number">0</span>, i);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">long</span> interval = endTime - startTime;</span><br><span class="line">        System.out.println(getListName(list) + <span class="string">" : insert "</span>+COUNT+<span class="string">" elements into the 1st position use time："</span> + interval+<span class="string">" ms"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从list的指定位置删除COUNT个元素，并统计时间</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">deleteByPosition</span><span class="params">(List list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除list第一个位置元素</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;COUNT; i++)</span><br><span class="line">            list.remove(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">long</span> interval = endTime - startTime;</span><br><span class="line">        System.out.println(getListName(list) + <span class="string">" : delete "</span>+COUNT+<span class="string">" elements from the 1st position use time："</span> + interval+<span class="string">" ms"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据position，不断从list中读取元素，并统计时间</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">readByPosition</span><span class="params">(List list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 读取list元素</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;COUNT; i++)</span><br><span class="line">            list.get(i);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">long</span> interval = endTime - startTime;</span><br><span class="line">        System.out.println(getListName(list) + <span class="string">" : read "</span>+COUNT+<span class="string">" elements by position use time："</span> + interval+<span class="string">" ms"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Stack : insert <span class="number">100000</span> elements into the <span class="number">1</span>st position use time：<span class="number">1640</span> ms</span><br><span class="line">Vector : insert <span class="number">100000</span> elements into the <span class="number">1</span>st position use time：<span class="number">1607</span> ms</span><br><span class="line">LinkedList : insert <span class="number">100000</span> elements into the <span class="number">1</span>st position use time：<span class="number">29</span> ms</span><br><span class="line">ArrayList : insert <span class="number">100000</span> elements into the <span class="number">1</span>st position use time：<span class="number">1617</span> ms</span><br><span class="line"></span><br><span class="line">Stack : read <span class="number">100000</span> elements by position use time：<span class="number">9</span> ms</span><br><span class="line">Vector : read <span class="number">100000</span> elements by position use time：<span class="number">6</span> ms</span><br><span class="line">LinkedList : read <span class="number">100000</span> elements by position use time：<span class="number">10809</span> ms</span><br><span class="line">ArrayList : read <span class="number">100000</span> elements by position use time：<span class="number">5</span> ms</span><br><span class="line"></span><br><span class="line">Stack : delete <span class="number">100000</span> elements from the <span class="number">1</span>st position use time：<span class="number">1916</span> ms</span><br><span class="line">Vector : delete <span class="number">100000</span> elements from the <span class="number">1</span>st position use time：<span class="number">1910</span> ms</span><br><span class="line">LinkedList : delete <span class="number">100000</span> elements from the <span class="number">1</span>st position use time：<span class="number">15</span> ms</span><br><span class="line">ArrayList : delete <span class="number">100000</span> elements from the <span class="number">1</span>st position use time：<span class="number">1909</span> ms</span><br></pre></td></tr></table></figure><p>从中，我们可以发现：<br>插入10万个元素，LinkedList所花时间最短：29ms。<br>删除10万个元素，LinkedList所花时间最短：15ms。<br>遍历10万个元素，LinkedList所花时间最长：10809 ms；而ArrayList、Stack和Vector则相差不多，都只用了几秒。</p><h1 id="LinkedList和ArrayList性能差异分析"><a href="#LinkedList和ArrayList性能差异分析" class="headerlink" title="LinkedList和ArrayList性能差异分析"></a>LinkedList和ArrayList性能差异分析</h1><h2 id="为什么LinkedList中插入元素很快，而ArrayList中插入元素很慢！"><a href="#为什么LinkedList中插入元素很快，而ArrayList中插入元素很慢！" class="headerlink" title="为什么LinkedList中插入元素很快，而ArrayList中插入元素很慢！"></a>为什么LinkedList中插入元素很快，而ArrayList中插入元素很慢！</h2><p><code>LinkedList.java</code>中向指定位置插入元素的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在index前添加节点，且节点的值为element</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">    addBefore(element, (index==size ? header : entry(index)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取双向链表中指定位置的节点</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Entry&lt;E&gt; <span class="title">entry</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= size)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"Index: "</span>+index+</span><br><span class="line">                                            <span class="string">", Size: "</span>+size);</span><br><span class="line">    Entry&lt;E&gt; e = header;</span><br><span class="line">    <span class="comment">// 获取index处的节点。</span></span><br><span class="line">    <span class="comment">// 若index &lt; 双向链表长度的1/2,则从前向后查找;</span></span><br><span class="line">    <span class="comment">// 否则，从后向前查找。</span></span><br><span class="line">    <span class="keyword">if</span> (index &lt; (size &gt;&gt; <span class="number">1</span>)) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= index; i++)</span><br><span class="line">            e = e.next;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = size; i &gt; index; i--)</span><br><span class="line">            e = e.previous;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> e;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将节点(节点数据是e)添加到entry节点之前。</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Entry&lt;E&gt; <span class="title">addBefore</span><span class="params">(E e, Entry&lt;E&gt; entry)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 新建节点newEntry，将newEntry插入到节点e之前；并且设置newEntry的数据是e</span></span><br><span class="line">    Entry&lt;E&gt; newEntry = <span class="keyword">new</span> Entry&lt;E&gt;(e, entry, entry.previous);</span><br><span class="line">    <span class="comment">// 插入newEntry到链表中</span></span><br><span class="line">    newEntry.previous.next = newEntry;</span><br><span class="line">    newEntry.next.previous = newEntry;</span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">return</span> newEntry;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从中，我们可以看出：通过<code>add(int index, E element)</code>向LinkedList插入元素时。先是在双向链表中找到要插入节点的位置index；找到之后，再插入一个新节点。</p><p>双向链表查找index位置的节点时，有一个加速动作：若index &lt; 双向链表长度的1/2，则从前向后查找; 否则，从后向前查找。</p><p>接着，我们看看ArrayList.java中向指定位置插入元素的代码。如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将e添加到ArrayList的指定位置</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt; size || index &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(</span><br><span class="line">        <span class="string">"Index: "</span>+index+<span class="string">", Size: "</span>+size);</span><br><span class="line"></span><br><span class="line">    ensureCapacity(size+<span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">    System.arraycopy(elementData, index, elementData, index + <span class="number">1</span>,</span><br><span class="line">         size - index);</span><br><span class="line">    elementData[index] = element;</span><br><span class="line">    size++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>耗时的操作是 :</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.arraycopy(elementData, index, elementData, index + <span class="number">1</span>, size - index);</span><br></pre></td></tr></table></figure><p>Sun JDK包的java/lang/System.java中的arraycopy()声明如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">arraycopy</span><span class="params">(Object src, <span class="keyword">int</span> srcPos, Object dest, <span class="keyword">int</span> destPos, <span class="keyword">int</span> length)</span></span>;</span><br></pre></td></tr></table></figure><p>arraycopy()是个JNI函数，它是在JVM中实现的。sunJDK中看不到源码，不过可以在OpenJDK包中看到的源码。网上有对arraycopy()的分析说明，请参考：System.arraycopy源码分析 。</p><p>实际上，我们只需要了解： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.arraycopy(elementData, index, elementData, index + <span class="number">1</span>, size - index);</span><br></pre></td></tr></table></figure><p>会移动index之后所有元素即可。这就意味着，<code>ArrayList的add(int index, E element)</code>函数，会引起index之后所有元素的改变！</p><p>通过上面的分析，我们就能理解为什么LinkedList中插入元素很快，而ArrayList中插入元素很慢。</p><p>“删除元素”与“插入元素”的原理类似，这里就不再过多说明。</p><h3 id="为什么LinkedList中随机访问很慢，而ArrayList中随机访问很快"><a href="#为什么LinkedList中随机访问很慢，而ArrayList中随机访问很快" class="headerlink" title="为什么LinkedList中随机访问很慢，而ArrayList中随机访问很快"></a>为什么LinkedList中随机访问很慢，而ArrayList中随机访问很快</h3><p>先看看LinkedList随机访问的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回LinkedList指定位置的元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> entry(index).element;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取双向链表中指定位置的节点</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Entry&lt;E&gt; <span class="title">entry</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= size)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"Index: "</span>+index+</span><br><span class="line">                                            <span class="string">", Size: "</span>+size);</span><br><span class="line">    Entry&lt;E&gt; e = header;</span><br><span class="line">    <span class="comment">// 获取index处的节点。</span></span><br><span class="line">    <span class="comment">// 若index &lt; 双向链表长度的1/2,则从前先后查找;</span></span><br><span class="line">    <span class="comment">// 否则，从后向前查找。</span></span><br><span class="line">    <span class="keyword">if</span> (index &lt; (size &gt;&gt; <span class="number">1</span>)) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= index; i++)</span><br><span class="line">            e = e.next;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = size; i &gt; index; i--)</span><br><span class="line">            e = e.previous;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从中，我们可以看出：通过get(int index)获取LinkedList第index个元素时。先是在双向链表中找到要index位置的元素；找到之后再返回。<br>双向链表查找index位置的节点时，有一个加速动作：若index &lt; 双向链表长度的1/2，则从前向后查找; 否则，从后向前查找。</p><p>下面看看ArrayList随机访问的代码 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取index位置的元素值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    RangeCheck(index);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (E) elementData[index];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">RangeCheck</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt;= size)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(</span><br><span class="line">        <span class="string">"Index: "</span>+index+<span class="string">", Size: "</span>+size);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从中，我们可以看出：通过get(int index)获取ArrayList第index个元素时。直接返回数组中index位置的元素，而不需要像LinkedList一样进行查找。</p><h1 id="Vector和ArrayList比较"><a href="#Vector和ArrayList比较" class="headerlink" title="Vector和ArrayList比较"></a>Vector和ArrayList比较</h1><h2 id="相同之处"><a href="#相同之处" class="headerlink" title="相同之处"></a>相同之处</h2><h3 id="它们都是List"><a href="#它们都是List" class="headerlink" title="它们都是List"></a>它们都是List</h3><p>它们都继承于AbstractList，并且实现List接口。<br>ArrayList和Vector的类定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ArrayList的定义</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">// <span class="title">Vector</span>的定义</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">Vector</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="它们都实现了RandomAccess和Cloneable接口"><a href="#它们都实现了RandomAccess和Cloneable接口" class="headerlink" title="它们都实现了RandomAccess和Cloneable接口"></a>它们都实现了RandomAccess和Cloneable接口</h3><p>   实现RandomAccess接口，意味着它们都支持快速随机访问；<br>   实现Cloneable接口，意味着它们能克隆自己。</p><h3 id="它们都是通过数组实现的，本质上都是动态数组"><a href="#它们都是通过数组实现的，本质上都是动态数组" class="headerlink" title="它们都是通过数组实现的，本质上都是动态数组"></a>它们都是通过数组实现的，本质上都是动态数组</h3><p>ArrayList.java中定义数组elementData用于保存元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 保存ArrayList中数据的数组</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> Object[] elementData;</span><br><span class="line">Vector.java中也定义了数组elementData用于保存元素</span><br><span class="line"></span><br><span class="line"><span class="comment">// 保存Vector中数据的数组</span></span><br><span class="line"><span class="keyword">protected</span> Object[] elementData;</span><br></pre></td></tr></table></figure><h3 id="它们的默认数组容量是10"><a href="#它们的默认数组容量是10" class="headerlink" title="它们的默认数组容量是10"></a>它们的默认数组容量是10</h3><p>若创建ArrayList或Vector时，没指定容量大小；则使用默认容量大小10。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ArrayList构造函数。默认容量是10。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Vector构造函数。默认容量是10。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Vector</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="它们都支持Iterator和listIterator遍历"><a href="#它们都支持Iterator和listIterator遍历" class="headerlink" title="它们都支持Iterator和listIterator遍历"></a>它们都支持Iterator和listIterator遍历</h3><p>它们都继承于AbstractList，而AbstractList中分别实现了 “iterator()接口返回Iterator迭代器” 和 “listIterator()返回ListIterator迭代器”。</p><h2 id="不同之处"><a href="#不同之处" class="headerlink" title="不同之处"></a>不同之处</h2><h3 id="线程安全性不一样"><a href="#线程安全性不一样" class="headerlink" title="线程安全性不一样"></a>线程安全性不一样</h3><p>ArrayList是非线程安全；<br>而Vector是线程安全的，它的函数都是synchronized的，即都是支持同步的。<br>ArrayList适用于单线程，Vector适用于多线程。</p><h3 id="对序列化支持不同"><a href="#对序列化支持不同" class="headerlink" title="对序列化支持不同"></a>对序列化支持不同</h3><p>ArrayList支持序列化，而Vector不支持；即ArrayList有实现java.io.Serializable接口，而Vector没有实现该接口。</p><h3 id="构造函数个数不同"><a href="#构造函数个数不同" class="headerlink" title="构造函数个数不同"></a>构造函数个数不同</h3><p>ArrayList有3个构造函数，而Vector有4个构造函数。Vector除了包括和ArrayList类似的3个构造函数之外，另外的一个构造函数可以指定容量增加系数。</p><p>ArrayList的构造函数如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认构造函数</span></span><br><span class="line">ArrayList()</span><br><span class="line"></span><br><span class="line"><span class="comment">// capacity是ArrayList的默认容量大小。当由于增加数据导致容量不足时，容量会添加上一次容量大小的一半。</span></span><br><span class="line">ArrayList(<span class="keyword">int</span> capacity)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个包含collection的ArrayList</span></span><br><span class="line">ArrayList(Collection&lt;? extends E&gt; collection)</span><br></pre></td></tr></table></figure><p>Vector的构造函数如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认构造函数</span></span><br><span class="line">Vector()</span><br><span class="line"></span><br><span class="line"><span class="comment">// capacity是Vector的默认容量大小。当由于增加数据导致容量增加时，每次容量会增加一倍。</span></span><br><span class="line">Vector(<span class="keyword">int</span> capacity)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个包含collection的Vector</span></span><br><span class="line">Vector(Collection&lt;? extends E&gt; collection)</span><br><span class="line"></span><br><span class="line"><span class="comment">// capacity是Vector的默认容量大小，capacityIncrement是每次Vector容量增加时的增量值。</span></span><br><span class="line">Vector(<span class="keyword">int</span> capacity, <span class="keyword">int</span> capacityIncrement)</span><br></pre></td></tr></table></figure><h3 id="4、容量增加方式不同"><a href="#4、容量增加方式不同" class="headerlink" title="4、容量增加方式不同"></a>4、容量增加方式不同</h3><p>逐个添加元素时，若ArrayList容量不足时，“新的容量”=“(原始容量x3)/2 + 1”。</p><p>而Vector的容量增长与“增长系数有关”，若指定了“增长系数”，且“增长系数有效(即，大于0)”；那么，每次容量不足时，“新的容量”=“原始容量+增长系数”。若增长系数无效(即，小于/等于0)，则“新的容量”=“原始容量 x 2”。</p><p>ArrayList中容量增长的主要函数如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ensureCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 将“修改统计数”+1</span></span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">    <span class="comment">// 若当前容量不足以容纳当前的元素个数，设置 新的容量=“(原始容量x3)/2 + 1”</span></span><br><span class="line">    <span class="keyword">if</span> (minCapacity &gt; oldCapacity) &#123;</span><br><span class="line">        Object oldData[] = elementData;</span><br><span class="line">        <span class="keyword">int</span> newCapacity = (oldCapacity * <span class="number">3</span>)/<span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (newCapacity &lt; minCapacity)</span><br><span class="line">            newCapacity = minCapacity;</span><br><span class="line">        elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Vector中容量增长的主要函数如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityHelper</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">    <span class="comment">// 当Vector的容量不足以容纳当前的全部元素，增加容量大小。</span></span><br><span class="line">    <span class="comment">// 若 容量增量系数&gt;0(即capacityIncrement&gt;0)，则将容量增大当capacityIncrement</span></span><br><span class="line">    <span class="comment">// 否则，将容量增大一倍。</span></span><br><span class="line">    <span class="keyword">if</span> (minCapacity &gt; oldCapacity) &#123;</span><br><span class="line">        Object[] oldData = elementData;</span><br><span class="line">        <span class="keyword">int</span> newCapacity = (capacityIncrement &gt; <span class="number">0</span>) ?</span><br><span class="line">            (oldCapacity + capacityIncrement) : (oldCapacity * <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">if</span> (newCapacity &lt; minCapacity) &#123;</span><br><span class="line">            newCapacity = minCapacity;</span><br><span class="line">        &#125;</span><br><span class="line">        elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、对Enumeration的支持不同。Vector支持通过Enumeration去遍历，而List不支持"><a href="#5、对Enumeration的支持不同。Vector支持通过Enumeration去遍历，而List不支持" class="headerlink" title="5、对Enumeration的支持不同。Vector支持通过Enumeration去遍历，而List不支持"></a>5、对Enumeration的支持不同。Vector支持通过Enumeration去遍历，而List不支持</h3><p>Vector中实现Enumeration的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Enumeration&lt;E&gt; <span class="title">elements</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 通过匿名类实现Enumeration</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Enumeration&lt;E&gt;() &#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 是否存在下一个元素</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasMoreElements</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> count &lt; elementCount;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取下一个元素</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> E <span class="title">nextElement</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Vector.<span class="keyword">this</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (count &lt; elementCount) &#123;</span><br><span class="line">                    <span class="keyword">return</span> (E)elementData[count++];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">"Vector Enumeration"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;List-总结&quot;&gt;&lt;a href=&quot;#List-总结&quot; class=&quot;headerlink&quot; title=&quot;List 总结&quot;&gt;&lt;/a&gt;List 总结&lt;/h1&gt;&lt;p&gt;先回顾一下List的框架图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://oov0wb0gl.bkt.clouddn.com/2017-06-06-14955300758588.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;List 是一个接口，它继承于Collection的接口。它代表着有序的队列。
    
    </summary>
    
      <category term="Java 集合" scheme="http://cuijing.me/categories/Java-%E9%9B%86%E5%90%88/"/>
    
    
      <category term="Java" scheme="http://cuijing.me/tags/Java/"/>
    
      <category term="集合框架" scheme="http://cuijing.me/tags/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/"/>
    
      <category term="List" scheme="http://cuijing.me/tags/List/"/>
    
  </entry>
  
  <entry>
    <title>集合框架之 Stack</title>
    <link href="http://cuijing.me/2015/05/21/Java/8-Collection-Map/7-Stack/"/>
    <id>http://cuijing.me/2015/05/21/Java/8-Collection-Map/7-Stack/</id>
    <published>2015-05-21T00:30:00.000Z</published>
    <updated>2016-05-01T12:50:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Stack简介"><a href="#Stack简介" class="headerlink" title="Stack简介"></a>Stack简介</h1><p>Stack是栈。它的特性是：先进后出(FILO, First In Last Out)。</p><p>Java工具包中的Stack是继承于Vector(矢量队列)的，由于Vector是通过数组实现的，这就意味着，Stack也是通过数组实现的，而非链表。当然，我们也可以将LinkedList当作栈来使用！在 Vector 中，已经详细介绍过Vector的数据结构，这里就不再对Stack的数据结构进行说明了。<br><a id="more"></a></p><h1 id="Stack的继承关系"><a href="#Stack的继承关系" class="headerlink" title="Stack的继承关系"></a>Stack的继承关系</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">java.lang.Object</span><br><span class="line">↳     java.util.AbstractCollection&lt;E&gt;</span><br><span class="line">   ↳     java.util.AbstractList&lt;E&gt;</span><br><span class="line">       ↳     java.util.Vector&lt;E&gt;</span><br><span class="line">           ↳     java.util.Stack&lt;E&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stack</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">Vector</span>&lt;<span class="title">E</span>&gt; </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h1 id="Stack和Collection的关系如下图："><a href="#Stack和Collection的关系如下图：" class="headerlink" title="Stack和Collection的关系如下图："></a>Stack和Collection的关系如下图：</h1><p><img src="http://oov0wb0gl.bkt.clouddn.com/2017-06-06-14955293124748.jpg" alt=""></p><h1 id="Stack的构造函数"><a href="#Stack的构造函数" class="headerlink" title="Stack的构造函数"></a>Stack的构造函数</h1><p>Stack只有一个默认构造函数，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stack()</span><br></pre></td></tr></table></figure><h1 id="Stack的API"><a href="#Stack的API" class="headerlink" title="Stack的API"></a>Stack的API</h1><p>Stack是栈，它常用的API如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">             <span class="function"><span class="keyword">boolean</span>       <span class="title">empty</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">synchronized</span> E             <span class="title">peek</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">synchronized</span> E             <span class="title">pop</span><span class="params">()</span></span></span><br><span class="line"><span class="function">             E             <span class="title">push</span><span class="params">(E object)</span></span></span><br><span class="line"><span class="function"><span class="keyword">synchronized</span> <span class="keyword">int</span>           <span class="title">search</span><span class="params">(Object o)</span></span></span><br></pre></td></tr></table></figure><p>由于Stack和继承于Vector，因此它也包含Vector中的全部API。</p><h1 id="Stack源码解析-基于JDK1-6-0-45"><a href="#Stack源码解析-基于JDK1-6-0-45" class="headerlink" title="Stack源码解析(基于JDK1.6.0_45)"></a>Stack源码解析(基于JDK1.6.0_45)</h1><p>Stack的源码非常简单，下面我们对它进行学习。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stack</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">Vector</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 版本ID。这个用于版本升级控制，这里不须理会！</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1224463164541339165L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Stack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// push函数：将元素存入栈顶</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">push</span><span class="params">(E item)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 将元素存入栈顶。</span></span><br><span class="line">        <span class="comment">// addElement()的实现在Vector.java中</span></span><br><span class="line">        addElement(item);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// pop函数：返回栈顶元素，并将其从栈中删除</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> E <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        E    obj;</span><br><span class="line">        <span class="keyword">int</span>    len = size();</span><br><span class="line"></span><br><span class="line">        obj = peek();</span><br><span class="line">        <span class="comment">// 删除栈顶元素，removeElementAt()的实现在Vector.java中</span></span><br><span class="line">        removeElementAt(len - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// peek函数：返回栈顶元素，不执行删除操作</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> E <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>    len = size();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (len == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> EmptyStackException();</span><br><span class="line">        <span class="comment">// 返回栈顶元素，elementAt()具体实现在Vector.java中</span></span><br><span class="line">        <span class="keyword">return</span> elementAt(len - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 栈是否为空</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size() == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查找“元素o”在栈中的位置：由栈底向栈顶方向数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取元素索引，elementAt()具体实现在Vector.java中</span></span><br><span class="line">        <span class="keyword">int</span> i = lastIndexOf(o);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> size() - i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><ol><li>Stack实际上也是通过数组去实现的。<pre><code>1. 执行push时(即，将元素推入栈中)，是通过将元素追加的数组的末尾中。2. 执行peek时(即，取出栈顶元素，不执行删除)，是返回数组末尾的元素。3. 执行pop时(即，取出栈顶元素，并将该元素从栈中删除)，是取出数组末尾的元素，然后将该元素从数组中删除。</code></pre></li><li>Stack继承于Vector，意味着Vector拥有的属性和功能，Stack都拥有。</li></ol><h1 id="Stack示例"><a href="#Stack示例" class="headerlink" title="Stack示例"></a>Stack示例</h1><p>下面我们通过实例学习如何使用Stack</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desc</span> Stack的测试程序。测试常用API的用法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StackTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Stack stack = <span class="keyword">new</span> Stack();</span><br><span class="line">        <span class="comment">// 将1,2,3,4,5添加到栈中</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;<span class="number">6</span>; i++) &#123;</span><br><span class="line">            stack.push(String.valueOf(i));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历并打印出该栈</span></span><br><span class="line">        iteratorThroughRandomAccess(stack) ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查找“2”在栈中的位置，并输出</span></span><br><span class="line">        <span class="keyword">int</span> pos = stack.search(<span class="string">"2"</span>);</span><br><span class="line">        System.out.println(<span class="string">"the postion of 2 is:"</span>+pos);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// pop栈顶元素之后，遍历栈</span></span><br><span class="line">        stack.pop();</span><br><span class="line">        iteratorThroughRandomAccess(stack) ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// peek栈顶元素之后，遍历栈</span></span><br><span class="line">        String val = (String)stack.peek();</span><br><span class="line">        System.out.println(<span class="string">"peek:"</span>+val);</span><br><span class="line">        iteratorThroughRandomAccess(stack) ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过Iterator去遍历Stack</span></span><br><span class="line">        iteratorThroughIterator(stack) ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过快速访问遍历Stack</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">iteratorThroughRandomAccess</span><span class="params">(List list)</span> </span>&#123;</span><br><span class="line">        String val = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;list.size(); i++) &#123;</span><br><span class="line">            val = (String)list.get(i);</span><br><span class="line">            System.out.print(val+<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过迭代器遍历Stack</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">iteratorThroughIterator</span><span class="params">(List list)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String val = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span>(Iterator iter = list.iterator(); iter.hasNext(); ) &#123;</span><br><span class="line">            val = (String)iter.next();</span><br><span class="line">            System.out.print(val+<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> </span><br><span class="line">the postion of <span class="number">2</span> is:<span class="number">4</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> </span><br><span class="line">peek:<span class="number">4</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> </span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Stack简介&quot;&gt;&lt;a href=&quot;#Stack简介&quot; class=&quot;headerlink&quot; title=&quot;Stack简介&quot;&gt;&lt;/a&gt;Stack简介&lt;/h1&gt;&lt;p&gt;Stack是栈。它的特性是：先进后出(FILO, First In Last Out)。&lt;/p&gt;
&lt;p&gt;Java工具包中的Stack是继承于Vector(矢量队列)的，由于Vector是通过数组实现的，这就意味着，Stack也是通过数组实现的，而非链表。当然，我们也可以将LinkedList当作栈来使用！在 Vector 中，已经详细介绍过Vector的数据结构，这里就不再对Stack的数据结构进行说明了。&lt;br&gt;
    
    </summary>
    
      <category term="Java 集合" scheme="http://cuijing.me/categories/Java-%E9%9B%86%E5%90%88/"/>
    
    
      <category term="Java" scheme="http://cuijing.me/tags/Java/"/>
    
      <category term="集合框架" scheme="http://cuijing.me/tags/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Stack" scheme="http://cuijing.me/tags/Stack/"/>
    
  </entry>
  
  <entry>
    <title>集合框架之 Ventor</title>
    <link href="http://cuijing.me/2015/05/20/Java/8-Collection-Map/6-Vector/"/>
    <id>http://cuijing.me/2015/05/20/Java/8-Collection-Map/6-Vector/</id>
    <published>2015-05-20T00:30:00.000Z</published>
    <updated>2016-05-01T13:06:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vector简介"><a href="#Vector简介" class="headerlink" title="Vector简介"></a>Vector简介</h1><p>Vector 是矢量队列，它是JDK1.0版本添加的类。继承于AbstractList，实现了List, RandomAccess, Cloneable这些接口。</p><p>Vector 继承了AbstractList，实现了List；所以，它是一个队列，支持相关的添加、删除、修改、遍历等功能。<br><a id="more"></a><br>Vector 实现了RandmoAccess接口，即提供了随机访问功能。RandmoAccess是Java中用来被List实现，为List提供快速访问功能的。在Vector中，我们即可以通过元素的序号快速获取元素对象；这就是快速随机访问。</p><p>Vector 实现了Cloneable 接口，即实现clone()函数。它能被克隆。</p><p>和ArrayList不同，Vector中的操作是线程安全的。</p><h1 id="Vector的构造函数"><a href="#Vector的构造函数" class="headerlink" title="Vector的构造函数"></a>Vector的构造函数</h1><p>Vector共有4个构造函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认构造函数</span></span><br><span class="line">Vector()</span><br><span class="line"></span><br><span class="line"><span class="comment">// capacity是Vector的默认容量大小。当由于增加数据导致容量增加时，每次容量会增加一倍。</span></span><br><span class="line">Vector(<span class="keyword">int</span> capacity)</span><br><span class="line"></span><br><span class="line"><span class="comment">// capacity是Vector的默认容量大小，capacityIncrement是每次Vector容量增加时的增量值。</span></span><br><span class="line">Vector(<span class="keyword">int</span> capacity, <span class="keyword">int</span> capacityIncrement)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个包含collection的Vector</span></span><br><span class="line">Vector(Collection&lt;? extends E&gt; collection)</span><br></pre></td></tr></table></figure><h1 id="Vector的API"><a href="#Vector的API" class="headerlink" title="Vector的API"></a>Vector的API</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">synchronized</span> <span class="keyword">boolean</span>        <span class="title">add</span><span class="params">(E object)</span></span></span><br><span class="line"><span class="function">             <span class="keyword">void</span>           <span class="title">add</span><span class="params">(<span class="keyword">int</span> location, E object)</span></span></span><br><span class="line"><span class="function"><span class="keyword">synchronized</span> <span class="keyword">boolean</span>        <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; collection)</span></span></span><br><span class="line"><span class="function"><span class="keyword">synchronized</span> <span class="keyword">boolean</span>        <span class="title">addAll</span><span class="params">(<span class="keyword">int</span> location, Collection&lt;? extends E&gt; collection)</span></span></span><br><span class="line"><span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span>           <span class="title">addElement</span><span class="params">(E object)</span></span></span><br><span class="line"><span class="function"><span class="keyword">synchronized</span> <span class="keyword">int</span>            <span class="title">capacity</span><span class="params">()</span></span></span><br><span class="line"><span class="function">             <span class="keyword">void</span>           <span class="title">clear</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">synchronized</span> Object         <span class="title">clone</span><span class="params">()</span></span></span><br><span class="line"><span class="function">             <span class="keyword">boolean</span>        <span class="title">contains</span><span class="params">(Object object)</span></span></span><br><span class="line"><span class="function"><span class="keyword">synchronized</span> <span class="keyword">boolean</span>        <span class="title">containsAll</span><span class="params">(Collection&lt;?&gt; collection)</span></span></span><br><span class="line"><span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span>           <span class="title">copyInto</span><span class="params">(Object[] elements)</span></span></span><br><span class="line"><span class="function"><span class="keyword">synchronized</span> E              <span class="title">elementAt</span><span class="params">(<span class="keyword">int</span> location)</span></span></span><br><span class="line"><span class="function">             Enumeration&lt;E&gt; <span class="title">elements</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span>           <span class="title">ensureCapacity</span><span class="params">(<span class="keyword">int</span> minimumCapacity)</span></span></span><br><span class="line"><span class="function"><span class="keyword">synchronized</span> <span class="keyword">boolean</span>        <span class="title">equals</span><span class="params">(Object object)</span></span></span><br><span class="line"><span class="function"><span class="keyword">synchronized</span> E              <span class="title">firstElement</span><span class="params">()</span></span></span><br><span class="line"><span class="function">             E              <span class="title">get</span><span class="params">(<span class="keyword">int</span> location)</span></span></span><br><span class="line"><span class="function"><span class="keyword">synchronized</span> <span class="keyword">int</span>            <span class="title">hashCode</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">synchronized</span> <span class="keyword">int</span>            <span class="title">indexOf</span><span class="params">(Object object, <span class="keyword">int</span> location)</span></span></span><br><span class="line"><span class="function">             <span class="keyword">int</span>            <span class="title">indexOf</span><span class="params">(Object object)</span></span></span><br><span class="line"><span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span>           <span class="title">insertElementAt</span><span class="params">(E object, <span class="keyword">int</span> location)</span></span></span><br><span class="line"><span class="function"><span class="keyword">synchronized</span> <span class="keyword">boolean</span>        <span class="title">isEmpty</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">synchronized</span> E              <span class="title">lastElement</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">synchronized</span> <span class="keyword">int</span>            <span class="title">lastIndexOf</span><span class="params">(Object object, <span class="keyword">int</span> location)</span></span></span><br><span class="line"><span class="function"><span class="keyword">synchronized</span> <span class="keyword">int</span>            <span class="title">lastIndexOf</span><span class="params">(Object object)</span></span></span><br><span class="line"><span class="function"><span class="keyword">synchronized</span> E              <span class="title">remove</span><span class="params">(<span class="keyword">int</span> location)</span></span></span><br><span class="line"><span class="function">             <span class="keyword">boolean</span>        <span class="title">remove</span><span class="params">(Object object)</span></span></span><br><span class="line"><span class="function"><span class="keyword">synchronized</span> <span class="keyword">boolean</span>        <span class="title">removeAll</span><span class="params">(Collection&lt;?&gt; collection)</span></span></span><br><span class="line"><span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span>           <span class="title">removeAllElements</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">synchronized</span> <span class="keyword">boolean</span>        <span class="title">removeElement</span><span class="params">(Object object)</span></span></span><br><span class="line"><span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span>           <span class="title">removeElementAt</span><span class="params">(<span class="keyword">int</span> location)</span></span></span><br><span class="line"><span class="function"><span class="keyword">synchronized</span> <span class="keyword">boolean</span>        <span class="title">retainAll</span><span class="params">(Collection&lt;?&gt; collection)</span></span></span><br><span class="line"><span class="function"><span class="keyword">synchronized</span> E              <span class="title">set</span><span class="params">(<span class="keyword">int</span> location, E object)</span></span></span><br><span class="line"><span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span>           <span class="title">setElementAt</span><span class="params">(E object, <span class="keyword">int</span> location)</span></span></span><br><span class="line"><span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span>           <span class="title">setSize</span><span class="params">(<span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function"><span class="keyword">synchronized</span> <span class="keyword">int</span>            <span class="title">size</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">synchronized</span> List&lt;E&gt;        <span class="title">subList</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span></span></span><br><span class="line"><span class="function"><span class="keyword">synchronized</span> &lt;T&gt; T[]        <span class="title">toArray</span><span class="params">(T[] contents)</span></span></span><br><span class="line"><span class="function"><span class="keyword">synchronized</span> Object[]       <span class="title">toArray</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">synchronized</span> String         <span class="title">toString</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span>           <span class="title">trimToSize</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><h1 id="Vector数据结构"><a href="#Vector数据结构" class="headerlink" title="Vector数据结构"></a>Vector数据结构</h1><h2 id="Vector的继承关系"><a href="#Vector的继承关系" class="headerlink" title="Vector的继承关系"></a>Vector的继承关系</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">java.lang.Object</span><br><span class="line">   ↳     java.util.AbstractCollection&lt;E&gt;</span><br><span class="line">         ↳     java.util.AbstractList&lt;E&gt;</span><br><span class="line">               ↳     java.util.Vector&lt;E&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Vector</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span></span><br><span class="line"><span class="class"></span>&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="Vector与Collection关系图："><a href="#Vector与Collection关系图：" class="headerlink" title="Vector与Collection关系图："></a>Vector与Collection关系图：</h2><p><img src="http://oov0wb0gl.bkt.clouddn.com/2017-06-06-14955233195949.jpg" alt=""></p><p>Vector的数据结构和ArrayList差不多，它包含了3个成员变量：elementData , elementCount， capacityIncrement。</p><ol><li><p>elementData 是”Object[]类型的数组”，它保存了添加到Vector中的元素。elementData是个动态数组，如果初始化Vector时，没指定动态数组的&gt;大小，则使用默认大小10。随着Vector中元素的增加，Vector的容量也会动态增长，capacityIncrement是与容量增长相关的增长系数，具体的增长方式，请参考源码分析中的ensureCapacity()函数。</p></li><li><p>elementCount 是动态数组的实际大小。</p></li><li><p>capacityIncrement 是动态数组的增长系数。如果在创建Vector时，指定了capacityIncrement的大小；则，每次当Vector中动态数组容量增加时，增加的大小都是capacityIncrement。</p></li></ol><h1 id="Vector源码解析-基于JDK1-6-0-45"><a href="#Vector源码解析-基于JDK1-6-0-45" class="headerlink" title="Vector源码解析(基于JDK1.6.0_45)"></a>Vector源码解析(基于JDK1.6.0_45)</h1><p>为了更了解Vector的原理，下面对Vector源码代码作出分析。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Vector</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 保存Vector中数据的数组</span></span><br><span class="line">    <span class="keyword">protected</span> Object[] elementData;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实际数据的数量</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> elementCount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 容量增长系数</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> capacityIncrement;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Vector的序列版本号</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">2767605614048989439L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Vector构造函数。默认容量是10。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Vector</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定Vector容量大小的构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Vector</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(initialCapacity, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定Vector"容量大小"和"增长系数"的构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Vector</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">int</span> capacityIncrement)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal Capacity: "</span>+</span><br><span class="line">                                               initialCapacity);</span><br><span class="line">        <span class="comment">// 新建一个数组，数组容量是initialCapacity</span></span><br><span class="line">        <span class="keyword">this</span>.elementData = <span class="keyword">new</span> Object[initialCapacity];</span><br><span class="line">        <span class="comment">// 设置容量增长系数</span></span><br><span class="line">        <span class="keyword">this</span>.capacityIncrement = capacityIncrement;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定集合的Vector构造函数。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Vector</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取“集合(c)”的数组，并将其赋值给elementData</span></span><br><span class="line">        elementData = c.toArray();</span><br><span class="line">        <span class="comment">// 设置数组长度</span></span><br><span class="line">        elementCount = elementData.length;</span><br><span class="line">        <span class="comment">// c.toArray might (incorrectly) not return Object[] (see 6260652)</span></span><br><span class="line">        <span class="keyword">if</span> (elementData.getClass() != Object[].class)</span><br><span class="line">            elementData = Arrays.copyOf(elementData, elementCount, Object[].class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将数组Vector的全部元素都拷贝到数组anArray中</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">copyInto</span><span class="params">(Object[] anArray)</span> </span>&#123;</span><br><span class="line">        System.arraycopy(elementData, <span class="number">0</span>, anArray, <span class="number">0</span>, elementCount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将当前容量值设为 =实际元素个数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">trimToSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">        <span class="keyword">if</span> (elementCount &lt; oldCapacity) &#123;</span><br><span class="line">            elementData = Arrays.copyOf(elementData, elementCount);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 确认“Vector容量”的帮助函数</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityHelper</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">        <span class="comment">// 当Vector的容量不足以容纳当前的全部元素，增加容量大小。</span></span><br><span class="line">        <span class="comment">// 若 容量增量系数&gt;0(即capacityIncrement&gt;0)，则将容量增大当capacityIncrement</span></span><br><span class="line">        <span class="comment">// 否则，将容量增大一倍。</span></span><br><span class="line">        <span class="keyword">if</span> (minCapacity &gt; oldCapacity) &#123;</span><br><span class="line">            Object[] oldData = elementData;</span><br><span class="line">            <span class="keyword">int</span> newCapacity = (capacityIncrement &gt; <span class="number">0</span>) ?</span><br><span class="line">                (oldCapacity + capacityIncrement) : (oldCapacity * <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">if</span> (newCapacity &lt; minCapacity) &#123;</span><br><span class="line">                newCapacity = minCapacity;</span><br><span class="line">            &#125;</span><br><span class="line">            elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 确定Vector的容量。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">ensureCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 将Vector的改变统计数+1</span></span><br><span class="line">        modCount++;</span><br><span class="line">        ensureCapacityHelper(minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置容量值为 newSize</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">setSize</span><span class="params">(<span class="keyword">int</span> newSize)</span> </span>&#123;</span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="keyword">if</span> (newSize &gt; elementCount) &#123;</span><br><span class="line">            <span class="comment">// 若 "newSize 大于 Vector容量"，则调整Vector的大小。</span></span><br><span class="line">            ensureCapacityHelper(newSize);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 若 "newSize 小于/等于 Vector容量"，则将newSize位置开始的元素都设置为null</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = newSize ; i &lt; elementCount ; i++) &#123;</span><br><span class="line">                elementData[i] = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        elementCount = newSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回“Vector的总的容量”</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">capacity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> elementData.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回“Vector的实际大小”，即Vector中元素个数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> elementCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断Vector是否为空</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> elementCount == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回“Vector中全部元素对应的Enumeration”</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Enumeration&lt;E&gt; <span class="title">elements</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 通过匿名类实现Enumeration</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Enumeration&lt;E&gt;() &#123;</span><br><span class="line">            <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 是否存在下一个元素</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasMoreElements</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> count &lt; elementCount;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取下一个元素</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> E <span class="title">nextElement</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (Vector.<span class="keyword">this</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (count &lt; elementCount) &#123;</span><br><span class="line">                        <span class="keyword">return</span> (E)elementData[count++];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">"Vector Enumeration"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回Vector中是否包含对象(o)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> indexOf(o, <span class="number">0</span>) &gt;= <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从index位置开始向后查找元素(o)。</span></span><br><span class="line">    <span class="comment">// 若找到，则返回元素的索引值；否则，返回-1</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object o, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 若查找元素为null，则正向找出null元素，并返回它对应的序号</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = index ; i &lt; elementCount ; i++)</span><br><span class="line">            <span class="keyword">if</span> (elementData[i]==<span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 若查找元素不为null，则正向找出该元素，并返回它对应的序号</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = index ; i &lt; elementCount ; i++)</span><br><span class="line">            <span class="keyword">if</span> (o.equals(elementData[i]))</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查找并返回元素(o)在Vector中的索引值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> indexOf(o, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从后向前查找元素(o)。并返回元素的索引</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">lastIndexOf</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lastIndexOf(o, elementCount-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从后向前查找元素(o)。开始位置是从前向后的第index个数；</span></span><br><span class="line">    <span class="comment">// 若找到，则返回元素的“索引值”；否则，返回-1。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">lastIndexOf</span><span class="params">(Object o, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= elementCount)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(index + <span class="string">" &gt;= "</span>+ elementCount);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 若查找元素为null，则反向找出null元素，并返回它对应的序号</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = index; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">            <span class="keyword">if</span> (elementData[i]==<span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 若查找元素不为null，则反向找出该元素，并返回它对应的序号</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = index; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">            <span class="keyword">if</span> (o.equals(elementData[i]))</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回Vector中index位置的元素。</span></span><br><span class="line">    <span class="comment">// 若index月结，则抛出异常</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> E <span class="title">elementAt</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= elementCount) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(index + <span class="string">" &gt;= "</span> + elementCount);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (E)elementData[index];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取Vector中的第一个元素。</span></span><br><span class="line">    <span class="comment">// 若失败，则抛出异常！</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> E <span class="title">firstElement</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (elementCount == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (E)elementData[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取Vector中的最后一个元素。</span></span><br><span class="line">    <span class="comment">// 若失败，则抛出异常！</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> E <span class="title">lastElement</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (elementCount == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (E)elementData[elementCount - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置index位置的元素值为obj</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">setElementAt</span><span class="params">(E obj, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= elementCount) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(index + <span class="string">" &gt;= "</span> +</span><br><span class="line">                                 elementCount);</span><br><span class="line">        &#125;</span><br><span class="line">        elementData[index] = obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除index位置的元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">removeElementAt</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= elementCount) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(index + <span class="string">" &gt;= "</span> +</span><br><span class="line">                                 elementCount);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (index &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(index);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> j = elementCount - index - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (j &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            System.arraycopy(elementData, index + <span class="number">1</span>, elementData, index, j);</span><br><span class="line">        &#125;</span><br><span class="line">        elementCount--;</span><br><span class="line">        elementData[elementCount] = <span class="keyword">null</span>; <span class="comment">/* to let gc do its work */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在index位置处插入元素(obj)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">insertElementAt</span><span class="params">(E obj, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="keyword">if</span> (index &gt; elementCount) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(index</span><br><span class="line">                                 + <span class="string">" &gt; "</span> + elementCount);</span><br><span class="line">        &#125;</span><br><span class="line">        ensureCapacityHelper(elementCount + <span class="number">1</span>);</span><br><span class="line">        System.arraycopy(elementData, index, elementData, index + <span class="number">1</span>, elementCount - index);</span><br><span class="line">        elementData[index] = obj;</span><br><span class="line">        elementCount++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将“元素obj”添加到Vector末尾</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">addElement</span><span class="params">(E obj)</span> </span>&#123;</span><br><span class="line">        modCount++;</span><br><span class="line">        ensureCapacityHelper(elementCount + <span class="number">1</span>);</span><br><span class="line">        elementData[elementCount++] = obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在Vector中查找并删除元素obj。</span></span><br><span class="line">    <span class="comment">// 成功的话，返回true；否则，返回false。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">removeElement</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="keyword">int</span> i = indexOf(obj);</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            removeElementAt(i);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除Vector中的全部元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">removeAllElements</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="comment">// 将Vector中的全部元素设为null</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; elementCount; i++)</span><br><span class="line">            elementData[i] = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        elementCount = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 克隆函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Object <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Vector&lt;E&gt; v = (Vector&lt;E&gt;) <span class="keyword">super</span>.clone();</span><br><span class="line">            <span class="comment">// 将当前Vector的全部元素拷贝到v中</span></span><br><span class="line">            v.elementData = Arrays.copyOf(elementData, elementCount);</span><br><span class="line">            v.modCount = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span> v;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">            <span class="comment">// this shouldn't happen, since we are Cloneable</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InternalError();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回Object数组</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> Object[] toArray() &#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.copyOf(elementData, elementCount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回Vector的模板数组。所谓模板数组，即可以将T设为任意的数据类型</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> &lt;T&gt; T[] toArray(T[] a) &#123;</span><br><span class="line">        <span class="comment">// 若数组a的大小 &lt; Vector的元素个数；</span></span><br><span class="line">        <span class="comment">// 则新建一个T[]数组，数组大小是“Vector的元素个数”，并将“Vector”全部拷贝到新数组中</span></span><br><span class="line">        <span class="keyword">if</span> (a.length &lt; elementCount)</span><br><span class="line">            <span class="keyword">return</span> (T[]) Arrays.copyOf(elementData, elementCount, a.getClass());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 若数组a的大小 &gt;= Vector的元素个数；</span></span><br><span class="line">        <span class="comment">// 则将Vector的全部元素都拷贝到数组a中。</span></span><br><span class="line">    System.arraycopy(elementData, <span class="number">0</span>, a, <span class="number">0</span>, elementCount);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (a.length &gt; elementCount)</span><br><span class="line">            a[elementCount] = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取index位置的元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= elementCount)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(index);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (E)elementData[index];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置index位置的值为element。并返回index位置的原始值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= elementCount)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(index);</span><br><span class="line"></span><br><span class="line">        Object oldValue = elementData[index];</span><br><span class="line">        elementData[index] = element;</span><br><span class="line">        <span class="keyword">return</span> (E)oldValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将“元素e”添加到Vector最后。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        modCount++;</span><br><span class="line">        ensureCapacityHelper(elementCount + <span class="number">1</span>);</span><br><span class="line">        elementData[elementCount++] = e;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除Vector中的元素o</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> removeElement(o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在index位置添加元素element</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">        insertElementAt(element, index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除index位置的元素，并返回index位置的原始值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= elementCount)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(index);</span><br><span class="line">        Object oldValue = elementData[index];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> numMoved = elementCount - index - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">            System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line">                     numMoved);</span><br><span class="line">        elementData[--elementCount] = <span class="keyword">null</span>; <span class="comment">// Let gc do its work</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (E)oldValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清空Vector</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        removeAllElements();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回Vector是否包含集合c</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">containsAll</span><span class="params">(Collection&lt;?&gt; c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.containsAll(c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将集合c添加到Vector中</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">        modCount++;</span><br><span class="line">        Object[] a = c.toArray();</span><br><span class="line">        <span class="keyword">int</span> numNew = a.length;</span><br><span class="line">        ensureCapacityHelper(elementCount + numNew);</span><br><span class="line">        <span class="comment">// 将集合c的全部元素拷贝到数组elementData中</span></span><br><span class="line">        System.arraycopy(a, <span class="number">0</span>, elementData, elementCount, numNew);</span><br><span class="line">        elementCount += numNew;</span><br><span class="line">        <span class="keyword">return</span> numNew != <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除集合c的全部元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">removeAll</span><span class="params">(Collection&lt;?&gt; c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.removeAll(c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除“非集合c中的元素”</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">retainAll</span><span class="params">(Collection&lt;?&gt; c)</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.retainAll(c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从index位置开始，将集合c添加到Vector中</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(<span class="keyword">int</span> index, Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; elementCount)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(index);</span><br><span class="line"></span><br><span class="line">        Object[] a = c.toArray();</span><br><span class="line">        <span class="keyword">int</span> numNew = a.length;</span><br><span class="line">        ensureCapacityHelper(elementCount + numNew);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> numMoved = elementCount - index;</span><br><span class="line">        <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">        System.arraycopy(elementData, index, elementData, index + numNew, numMoved);</span><br><span class="line"></span><br><span class="line">        System.arraycopy(a, <span class="number">0</span>, elementData, index, numNew);</span><br><span class="line">        elementCount += numNew;</span><br><span class="line">        <span class="keyword">return</span> numNew != <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回两个对象是否相等</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.equals(o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算哈希值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.hashCode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用父类的toString()</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取Vector中fromIndex(包括)到toIndex(不包括)的子集</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> List&lt;E&gt; <span class="title">subList</span><span class="params">(<span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Collections.synchronizedList(<span class="keyword">super</span>.subList(fromIndex, toIndex), <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除Vector中fromIndex到toIndex的元素</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">removeRange</span><span class="params">(<span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex)</span> </span>&#123;</span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="keyword">int</span> numMoved = elementCount - toIndex;</span><br><span class="line">        System.arraycopy(elementData, toIndex, elementData, fromIndex,</span><br><span class="line">                         numMoved);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Let gc do its work</span></span><br><span class="line">        <span class="keyword">int</span> newElementCount = elementCount - (toIndex-fromIndex);</span><br><span class="line">        <span class="keyword">while</span> (elementCount != newElementCount)</span><br><span class="line">            elementData[--elementCount] = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// java.io.Serializable的写入函数</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">writeObject</span><span class="params">(java.io.ObjectOutputStream s)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> java.io.IOException </span>&#123;</span><br><span class="line">        s.defaultWriteObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><ol><li>Vector实际上是通过一个数组去保存数据的。当我们构造Vecotr时；若使用默认构造函数，则Vector的默认容量大小是10。</li><li>当Vector容量不足以容纳全部元素时，Vector的容量会增加。若容量增加系数 &gt; 0，则将容量的值增加“容量增加系数”；否则，将容量大小增加一倍。</li><li>Vector的克隆函数，即是将全部元素克隆到一个数组中。</li></ol><h1 id="Vector遍历方式"><a href="#Vector遍历方式" class="headerlink" title="Vector遍历方式"></a>Vector遍历方式</h1><p>Vector支持4种遍历方式。建议使用下面的第二种去遍历Vector，因为效率问题。</p><h2 id="第一种，通过迭代器遍历。即通过Iterator去遍历。"><a href="#第一种，通过迭代器遍历。即通过Iterator去遍历。" class="headerlink" title="第一种，通过迭代器遍历。即通过Iterator去遍历。"></a>第一种，通过迭代器遍历。即通过Iterator去遍历。</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Integer value = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">int</span> size = vec.size();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;size; i++) &#123;</span><br><span class="line">    value = (Integer)vec.get(i);        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第二种，随机访问，通过索引值去遍历。"><a href="#第二种，随机访问，通过索引值去遍历。" class="headerlink" title="第二种，随机访问，通过索引值去遍历。"></a>第二种，随机访问，通过索引值去遍历。</h2><p>由于Vector实现了RandomAccess接口，它支持通过索引值去随机访问元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line">Integer value = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">int</span> size = vec.size();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;size; i++) &#123;</span><br><span class="line">    value = (Integer)vec.get(i);        </span><br><span class="line">&#125;</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">## 第三种，另一种for循环。如下：</span><br><span class="line">```java</span><br><span class="line">Integer value = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">for</span> (Integer integ:vec) &#123;</span><br><span class="line">    value = integ;</span><br><span class="line">&#125;</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">## 第四种，Enumeration遍历。如下： </span><br><span class="line">```java</span><br><span class="line">Integer value = <span class="keyword">null</span>;</span><br><span class="line">Enumeration enu = vec.elements();</span><br><span class="line"><span class="keyword">while</span> (enu.hasMoreElements()) &#123;</span><br><span class="line">    value = (Integer)enu.nextElement();</span><br><span class="line">&#125;</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">测试这些遍历方式效率的代码如下：</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @desc Vector遍历方式和效率的测试程序。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @author skywang</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VectorRandomAccessTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Vector vec= <span class="keyword">new</span> Vector();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">100000</span>; i++)</span><br><span class="line">            vec.add(i);</span><br><span class="line">        iteratorThroughRandomAccess(vec) ;</span><br><span class="line">        iteratorThroughIterator(vec) ;</span><br><span class="line">        iteratorThroughFor2(vec) ;</span><br><span class="line">        iteratorThroughEnumeration(vec) ;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">isRandomAccessSupported</span><span class="params">(List list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (list <span class="keyword">instanceof</span> RandomAccess) &#123;</span><br><span class="line">            System.out.println(<span class="string">"RandomAccess implemented!"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"RandomAccess not implemented!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">iteratorThroughRandomAccess</span><span class="params">(List list)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> startTime;</span><br><span class="line">        <span class="keyword">long</span> endTime;</span><br><span class="line">        startTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;list.size(); i++) &#123;</span><br><span class="line">            list.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        endTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">long</span> interval = endTime - startTime;</span><br><span class="line">        System.out.println(<span class="string">"iteratorThroughRandomAccess："</span> + interval+<span class="string">" ms"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">iteratorThroughIterator</span><span class="params">(List list)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> startTime;</span><br><span class="line">        <span class="keyword">long</span> endTime;</span><br><span class="line">        startTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span>(Iterator iter = list.iterator(); iter.hasNext(); ) &#123;</span><br><span class="line">            iter.next();</span><br><span class="line">        &#125;</span><br><span class="line">        endTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">long</span> interval = endTime - startTime;</span><br><span class="line">        System.out.println(<span class="string">"iteratorThroughIterator："</span> + interval+<span class="string">" ms"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">iteratorThroughFor2</span><span class="params">(List list)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> startTime;</span><br><span class="line">        <span class="keyword">long</span> endTime;</span><br><span class="line">        startTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span>(Object obj:list)</span><br><span class="line">            ;</span><br><span class="line">        endTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">long</span> interval = endTime - startTime;</span><br><span class="line">        System.out.println(<span class="string">"iteratorThroughFor2："</span> + interval+<span class="string">" ms"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">iteratorThroughEnumeration</span><span class="params">(Vector vec)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> startTime;</span><br><span class="line">        <span class="keyword">long</span> endTime;</span><br><span class="line">        startTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span>(Enumeration enu = vec.elements(); enu.hasMoreElements(); ) &#123;</span><br><span class="line">            enu.nextElement();</span><br><span class="line">        &#125;</span><br><span class="line">        endTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">long</span> interval = endTime - startTime;</span><br><span class="line">        System.out.println(<span class="string">"iteratorThroughEnumeration："</span> + interval+<span class="string">" ms"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">iteratorThroughRandomAccess：<span class="number">6</span> ms</span><br><span class="line">iteratorThroughIterator：<span class="number">9</span> ms</span><br><span class="line">iteratorThroughFor2：<span class="number">8</span> ms</span><br><span class="line">iteratorThroughEnumeration：<span class="number">7</span> ms</span><br></pre></td></tr></table></figure><p>总结：遍历Vector，使用索引的随机访问方式最快，使用迭代器最慢。</p><h1 id="Vector示例"><a href="#Vector示例" class="headerlink" title="Vector示例"></a>Vector示例</h1><p>下面通过示例学习如何使用Vector</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Vector;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desc</span> Vector测试函数：遍历Vector和常用API </span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> skywang</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VectorTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 新建Vector</span></span><br><span class="line">        Vector vec = <span class="keyword">new</span> Vector();</span><br><span class="line">            </span><br><span class="line">        <span class="comment">// 添加元素</span></span><br><span class="line">        vec.add(<span class="string">"1"</span>);</span><br><span class="line">        vec.add(<span class="string">"2"</span>);</span><br><span class="line">        vec.add(<span class="string">"3"</span>);</span><br><span class="line">        vec.add(<span class="string">"4"</span>);</span><br><span class="line">        vec.add(<span class="string">"5"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置第一个元素为100</span></span><br><span class="line">        vec.set(<span class="number">0</span>, <span class="string">"100"</span>);</span><br><span class="line">        <span class="comment">// 将“500”插入到第3个位置</span></span><br><span class="line">        vec.add(<span class="number">2</span>, <span class="string">"300"</span>);</span><br><span class="line">        System.out.println(<span class="string">"vec:"</span>+vec);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// (顺序查找)获取100的索引</span></span><br><span class="line">        System.out.println(<span class="string">"vec.indexOf(100):"</span>+vec.indexOf(<span class="string">"100"</span>));</span><br><span class="line">        <span class="comment">// (倒序查找)获取100的索引</span></span><br><span class="line">        System.out.println(<span class="string">"vec.lastIndexOf(100):"</span>+vec.lastIndexOf(<span class="string">"100"</span>));</span><br><span class="line">        <span class="comment">// 获取第一个元素</span></span><br><span class="line">        System.out.println(<span class="string">"vec.firstElement():"</span>+vec.firstElement());</span><br><span class="line">        <span class="comment">// 获取第3个元素</span></span><br><span class="line">        System.out.println(<span class="string">"vec.elementAt(2):"</span>+vec.elementAt(<span class="number">2</span>));</span><br><span class="line">        <span class="comment">// 获取最后一个元素</span></span><br><span class="line">        System.out.println(<span class="string">"vec.lastElement():"</span>+vec.lastElement());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取Vector的大小</span></span><br><span class="line">        System.out.println(<span class="string">"size:"</span>+vec.size());</span><br><span class="line">        <span class="comment">// 获取Vector的总的容量</span></span><br><span class="line">        System.out.println(<span class="string">"capacity:"</span>+vec.capacity());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取vector的“第2”到“第4”个元素</span></span><br><span class="line">        System.out.println(<span class="string">"vec 2 to 4:"</span>+vec.subList(<span class="number">1</span>, <span class="number">4</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过Enumeration遍历Vector</span></span><br><span class="line">        Enumeration enu = vec.elements();</span><br><span class="line">        <span class="keyword">while</span>(enu.hasMoreElements())</span><br><span class="line">            System.out.println(<span class="string">"nextElement():"</span>+enu.nextElement());</span><br><span class="line">            </span><br><span class="line">        Vector retainVec = <span class="keyword">new</span> Vector();</span><br><span class="line">        retainVec.add(<span class="string">"100"</span>);</span><br><span class="line">        retainVec.add(<span class="string">"300"</span>);</span><br><span class="line">        <span class="comment">// 获取“vec”中包含在“retainVec中的元素”的集合</span></span><br><span class="line">        System.out.println(<span class="string">"vec.retain():"</span>+vec.retainAll(retainVec));</span><br><span class="line">        System.out.println(<span class="string">"vec:"</span>+vec);</span><br><span class="line">            </span><br><span class="line">        <span class="comment">// 获取vec对应的String数组</span></span><br><span class="line">        String[] arr = (String[]) vec.toArray(<span class="keyword">new</span> String[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">for</span> (String str:arr)</span><br><span class="line">            System.out.println(<span class="string">"str:"</span>+str);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 清空Vector。clear()和removeAllElements()一样！</span></span><br><span class="line">        vec.clear();</span><br><span class="line"><span class="comment">//        vec.removeAllElements();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断Vector是否为空</span></span><br><span class="line">        System.out.println(<span class="string">"vec.isEmpty():"</span>+vec.isEmpty());</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">vec:[<span class="number">100</span>, <span class="number">2</span>, <span class="number">300</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">vec.indexOf(<span class="number">100</span>):<span class="number">0</span></span><br><span class="line">vec.lastIndexOf(<span class="number">100</span>):<span class="number">0</span></span><br><span class="line">vec.firstElement():<span class="number">100</span></span><br><span class="line">vec.elementAt(<span class="number">2</span>):<span class="number">300</span></span><br><span class="line">vec.lastElement():<span class="number">5</span></span><br><span class="line">size:<span class="number">6</span></span><br><span class="line">capacity:<span class="number">10</span></span><br><span class="line">vec <span class="number">2</span> to <span class="number">4</span>:[<span class="number">2</span>, <span class="number">300</span>, <span class="number">3</span>]</span><br><span class="line">nextElement():<span class="number">100</span></span><br><span class="line">nextElement():<span class="number">2</span></span><br><span class="line">nextElement():<span class="number">300</span></span><br><span class="line">nextElement():<span class="number">3</span></span><br><span class="line">nextElement():<span class="number">4</span></span><br><span class="line">nextElement():<span class="number">5</span></span><br><span class="line">vec.retain():<span class="keyword">true</span></span><br><span class="line">vec:[<span class="number">100</span>, <span class="number">300</span>]</span><br><span class="line">str:<span class="number">100</span></span><br><span class="line">str:<span class="number">300</span></span><br><span class="line">vec.isEmpty():<span class="keyword">true</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Vector简介&quot;&gt;&lt;a href=&quot;#Vector简介&quot; class=&quot;headerlink&quot; title=&quot;Vector简介&quot;&gt;&lt;/a&gt;Vector简介&lt;/h1&gt;&lt;p&gt;Vector 是矢量队列，它是JDK1.0版本添加的类。继承于AbstractList，实现了List, RandomAccess, Cloneable这些接口。&lt;/p&gt;
&lt;p&gt;Vector 继承了AbstractList，实现了List；所以，它是一个队列，支持相关的添加、删除、修改、遍历等功能。&lt;br&gt;
    
    </summary>
    
      <category term="Java 集合" scheme="http://cuijing.me/categories/Java-%E9%9B%86%E5%90%88/"/>
    
    
      <category term="Java" scheme="http://cuijing.me/tags/Java/"/>
    
      <category term="集合框架" scheme="http://cuijing.me/tags/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Ventor" scheme="http://cuijing.me/tags/Ventor/"/>
    
  </entry>
  
  <entry>
    <title>集合框架之 LinkedList</title>
    <link href="http://cuijing.me/2015/05/20/Java/8-Collection-Map/5-LinkedList/"/>
    <id>http://cuijing.me/2015/05/20/Java/8-Collection-Map/5-LinkedList/</id>
    <published>2015-05-20T00:30:00.000Z</published>
    <updated>2016-05-01T13:10:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LinkedList-简介"><a href="#LinkedList-简介" class="headerlink" title="LinkedList 简介"></a>LinkedList 简介</h1><ul><li>LinkedList 是一个继承于 AbstractSequentialList 的双向链表。它也可以被当作堆栈、队列或双端队列进行操作。</li><li>LinkedList 实现 List 接口，能对它进行队列操作。</li><li>LinkedList 实现 Deque 接口，即能将 LinkedList 当作双端队列使用。</li><li>LinkedList 实现了 Cloneable 接口，即覆盖了函数 clone()，能克隆。</li><li>LinkedList 实现java.io.Serializable接口，这意味着 LinkedList 支持序列化，能通过序列化去传输。</li><li>LinkedList 是非同步的。<a id="more"></a></li></ul><h1 id="LinkedList构造函数"><a href="#LinkedList构造函数" class="headerlink" title="LinkedList构造函数"></a>LinkedList构造函数</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认构造函数</span></span><br><span class="line">LinkedList()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个 LinkedList，保护 Collection 中的全部元素。</span></span><br><span class="line">LinkedList(Collection&lt;? extends E&gt; collection)</span><br></pre></td></tr></table></figure><h1 id="LinkedList的API"><a href="#LinkedList的API" class="headerlink" title="LinkedList的API"></a>LinkedList的API</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LinkedList 的API</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span>       <span class="title">add</span><span class="params">(E object)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span>          <span class="title">add</span><span class="params">(<span class="keyword">int</span> location, E object)</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span>       <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; collection)</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span>       <span class="title">addAll</span><span class="params">(<span class="keyword">int</span> location, Collection&lt;? extends E&gt; collection)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span>          <span class="title">addFirst</span><span class="params">(E object)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span>          <span class="title">addLast</span><span class="params">(E object)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span>          <span class="title">clear</span><span class="params">()</span></span></span><br><span class="line"><span class="function">Object        <span class="title">clone</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span>       <span class="title">contains</span><span class="params">(Object object)</span></span></span><br><span class="line"><span class="function">Iterator&lt;E&gt;   <span class="title">descendingIterator</span><span class="params">()</span></span></span><br><span class="line"><span class="function">E             <span class="title">element</span><span class="params">()</span></span></span><br><span class="line"><span class="function">E             <span class="title">get</span><span class="params">(<span class="keyword">int</span> location)</span></span></span><br><span class="line"><span class="function">E             <span class="title">getFirst</span><span class="params">()</span></span></span><br><span class="line"><span class="function">E             <span class="title">getLast</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span>           <span class="title">indexOf</span><span class="params">(Object object)</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span>           <span class="title">lastIndexOf</span><span class="params">(Object object)</span></span></span><br><span class="line"><span class="function">ListIterator&lt;E&gt;     <span class="title">listIterator</span><span class="params">(<span class="keyword">int</span> location)</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span>       <span class="title">offer</span><span class="params">(E o)</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span>       <span class="title">offerFirst</span><span class="params">(E e)</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span>       <span class="title">offerLast</span><span class="params">(E e)</span></span></span><br><span class="line"><span class="function">E             <span class="title">peek</span><span class="params">()</span></span></span><br><span class="line"><span class="function">E             <span class="title">peekFirst</span><span class="params">()</span></span></span><br><span class="line"><span class="function">E             <span class="title">peekLast</span><span class="params">()</span></span></span><br><span class="line"><span class="function">E             <span class="title">poll</span><span class="params">()</span></span></span><br><span class="line"><span class="function">E             <span class="title">pollFirst</span><span class="params">()</span></span></span><br><span class="line"><span class="function">E             <span class="title">pollLast</span><span class="params">()</span></span></span><br><span class="line"><span class="function">E             <span class="title">pop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span>          <span class="title">push</span><span class="params">(E e)</span></span></span><br><span class="line"><span class="function">E             <span class="title">remove</span><span class="params">()</span></span></span><br><span class="line"><span class="function">E             <span class="title">remove</span><span class="params">(<span class="keyword">int</span> location)</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span>       <span class="title">remove</span><span class="params">(Object object)</span></span></span><br><span class="line"><span class="function">E             <span class="title">removeFirst</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span>       <span class="title">removeFirstOccurrence</span><span class="params">(Object o)</span></span></span><br><span class="line"><span class="function">E             <span class="title">removeLast</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span>       <span class="title">removeLastOccurrence</span><span class="params">(Object o)</span></span></span><br><span class="line"><span class="function">E             <span class="title">set</span><span class="params">(<span class="keyword">int</span> location, E object)</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span>           <span class="title">size</span><span class="params">()</span></span></span><br><span class="line"><span class="function">&lt;T&gt; T[]       <span class="title">toArray</span><span class="params">(T[] contents)</span></span></span><br><span class="line"><span class="function">Object[]      <span class="title">toArray</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><h1 id="AbstractSequentialList-简介"><a href="#AbstractSequentialList-简介" class="headerlink" title="AbstractSequentialList 简介"></a>AbstractSequentialList 简介</h1><p>在介绍 LinkedList 的源码之前，先介绍一下 AbstractSequentialList。毕竟，LinkedList 是AbstractSequentialList 的子类。</p><p>AbstractSequentialList 实现了 <code>get(int index)、set(int index, E element)、add(int index, E element)</code>和<code>remove(int index)</code> 这些函数。这些接口都是随机访问List的，LinkedList是双向链表；既然它继承于<code>AbstractSequentialList</code>，就相当于已经实现了 <code>get(int index)</code> 这些接口。</p><p>此外，我们若需要通过 AbstractSequentialList 自己实现一个列表，只需要扩展此类，并提供 listIterator() 和 size() 方法的实现即可。若要实现不可修改的列表，则需要实现列表迭代器的 hasNext、next、hasPrevious、previous 和 index 方法即可。</p><h1 id="LinkedList-数据结构"><a href="#LinkedList-数据结构" class="headerlink" title="LinkedList 数据结构"></a>LinkedList 数据结构</h1><h2 id="LinkedList-的继承关系"><a href="#LinkedList-的继承关系" class="headerlink" title="LinkedList 的继承关系"></a>LinkedList 的继承关系</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">java.lang.Object</span><br><span class="line">   ↳     java.util.AbstractCollection&lt;E&gt;</span><br><span class="line">         ↳     java.util.AbstractList&lt;E&gt;</span><br><span class="line">               ↳     java.util.AbstractSequentialList&lt;E&gt;</span><br><span class="line">                     ↳     java.util.LinkedList&lt;E&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public class LinkedList&lt;E&gt;</span><br><span class="line">    extends AbstractSequentialList&lt;E&gt;</span><br><span class="line">    implements List&lt;E&gt;, Deque&lt;E&gt;, Cloneable, java.io.Serializable &#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="LinkedList-与-Collection-关系图："><a href="#LinkedList-与-Collection-关系图：" class="headerlink" title="LinkedList 与 Collection 关系图："></a>LinkedList 与 Collection 关系图：</h2><p><img src="http://oov0wb0gl.bkt.clouddn.com/2017-06-06-14954627364690.jpg" alt=""></p><p>LinkedList的本质是双向链表。</p><ol><li>LinkedList 继承于 AbstractSequentialList，并且实现了 Dequeue 接口。 </li><li>LinkedList 包含两个重要的成员：header 和 size。</li></ol><p>header是双向链表的表头，它是双向链表节点所对应的类Entry的实例。Entry中包含成员变量： previous, next, element。其中，previous是该节点的上一个节点，next是该节点的下一个节点，element是该节点所包含的值。<br>size是双向链表中节点的个数。</p><h1 id="LinkedList-源码解析-基于JDK1-6-0-45"><a href="#LinkedList-源码解析-基于JDK1-6-0-45" class="headerlink" title="LinkedList 源码解析 (基于JDK1.6.0_45)"></a>LinkedList 源码解析 (基于JDK1.6.0_45)</h1><p>为了更了解 LinkedList 的原理，下面对 LinkedList 源码代码作出分析。</p><p>在阅读源码之前，我们先对 LinkedList 的整体实现进行大致说明：</p><p>LinkedList 实际上是通过双向链表去实现的。既然是双向链表，那么它的顺序访问会非常高效，而随机访问效率比较低。</p><p>既然 LinkedList 是通过双向链表的，但是它也实现了 List 接口 {也就是说，它实现了get(int location)、remove(int location) 等“根据索引值来获取、删除节点的函数”}。</p><p>LinkedList 是如何实现 List 的这些接口的，如何将“双向链表和索引值联系起来的”？</p><p>实际原理非常简单，它就是通过一个计数索引值来实现的。例如，当我们调用get(int location)时，首先会比较“location”和“双向链表长度的1/2”；若前者大，则从链表头开始往后查找，直到 location 位置；否则，从链表末尾开始先前查找，直到 location 位置。这就是“双线链表和索引值联系起来”的方法。</p><p>好了，接下来开始阅读源码（只要理解双向链表，那么LinkedList的源码很容易理解的）。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">AbstractSequentialList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">Deque</span>&lt;<span class="title">E</span>&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// 链表的表头，表头不包含任何数据。Entry是个链表类数据结构。</span></span><br><span class="line">    <span class="comment">// transient声明一个实例变量，当对象存储时，它的值不需要维持。</span></span><br><span class="line">    <span class="comment">// 换句话来说就是，用transient关键字标记的成员变量不参与序列化过程。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> Entry&lt;E&gt; header = <span class="keyword">new</span> Entry&lt;E&gt;(<span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// LinkedList中元素个数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 默认构造函数：创建一个空的链表</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinkedList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        header.next = header.previous = header;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 包含“集合”的构造函数:创建一个包含“集合”的LinkedList</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinkedList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>();</span><br><span class="line">        addAll(c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取LinkedList的第一个元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">getFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (size==<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 链表的表头header中不包含数据。</span></span><br><span class="line">        <span class="comment">// 这里返回header所指下一个节点所包含的数据。</span></span><br><span class="line">        <span class="keyword">return</span> header.next.element;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取LinkedList的最后一个元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">getLast</span><span class="params">()</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (size==<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 由于LinkedList是双向链表；而表头header不包含数据。</span></span><br><span class="line">        <span class="comment">// 因而，这里返回表头header的前一个节点所包含的数据。</span></span><br><span class="line">        <span class="keyword">return</span> header.previous.element;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除LinkedList的第一个元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">removeFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> remove(header.next);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除LinkedList的最后一个元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">removeLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> remove(header.previous);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将元素添加到LinkedList的起始位置</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        addBefore(e, header.next);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将元素添加到LinkedList的结束位置</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        addBefore(e, header);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断LinkedList是否包含元素(o)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> indexOf(o) != -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回LinkedList的大小</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将元素(E)添加到LinkedList中</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 将节点(节点数据是e)添加到表头(header)之前。</span></span><br><span class="line">        <span class="comment">// 即，将节点添加到双向链表的末端。</span></span><br><span class="line">        addBefore(e, header);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从LinkedList中删除元素(o)</span></span><br><span class="line">    <span class="comment">// 从链表开始查找，如存在元素(o)则删除该元素并返回true；</span></span><br><span class="line">    <span class="comment">// 否则，返回false。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o==<span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 若o为null的删除情况</span></span><br><span class="line">            <span class="keyword">for</span> (Entry&lt;E&gt; e = header.next; e != header; e = e.next) &#123;</span><br><span class="line">                <span class="keyword">if</span> (e.element==<span class="keyword">null</span>) &#123;</span><br><span class="line">                    remove(e);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 若o不为null的删除情况</span></span><br><span class="line">            <span class="keyword">for</span> (Entry&lt;E&gt; e = header.next; e != header; e = e.next) &#123;</span><br><span class="line">                <span class="keyword">if</span> (o.equals(e.element)) &#123;</span><br><span class="line">                    remove(e);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将“集合(c)”添加到LinkedList中。</span></span><br><span class="line">    <span class="comment">// 实际上，是从双向链表的末尾开始，将“集合(c)”添加到双向链表中。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> addAll(size, c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从双向链表的index开始，将“集合(c)”添加到双向链表中。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(<span class="keyword">int</span> index, Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; size)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"Index: "</span>+index+</span><br><span class="line">                                                <span class="string">", Size: "</span>+size);</span><br><span class="line">        Object[] a = c.toArray();</span><br><span class="line">        <span class="comment">// 获取集合的长度</span></span><br><span class="line">        <span class="keyword">int</span> numNew = a.length;</span><br><span class="line">        <span class="keyword">if</span> (numNew==<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        modCount++;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置“当前要插入节点的后一个节点”</span></span><br><span class="line">        Entry&lt;E&gt; successor = (index==size ? header : entry(index));</span><br><span class="line">        <span class="comment">// 设置“当前要插入节点的前一个节点”</span></span><br><span class="line">        Entry&lt;E&gt; predecessor = successor.previous;</span><br><span class="line">        <span class="comment">// 将集合(c)全部插入双向链表中</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;numNew; i++) &#123;</span><br><span class="line">            Entry&lt;E&gt; e = <span class="keyword">new</span> Entry&lt;E&gt;((E)a[i], successor, predecessor);</span><br><span class="line">            predecessor.next = e;</span><br><span class="line">            predecessor = e;</span><br><span class="line">        &#125;</span><br><span class="line">        successor.previous = predecessor;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调整LinkedList的实际大小</span></span><br><span class="line">        size += numNew;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清空双向链表</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Entry&lt;E&gt; e = header.next;</span><br><span class="line">        <span class="comment">// 从表头开始，逐个向后遍历；对遍历到的节点执行一下操作：</span></span><br><span class="line">        <span class="comment">// (01) 设置前一个节点为null </span></span><br><span class="line">        <span class="comment">// (02) 设置当前节点的内容为null </span></span><br><span class="line">        <span class="comment">// (03) 设置后一个节点为“新的当前节点”</span></span><br><span class="line">        <span class="keyword">while</span> (e != header) &#123;</span><br><span class="line">            Entry&lt;E&gt; next = e.next;</span><br><span class="line">            e.next = e.previous = <span class="keyword">null</span>;</span><br><span class="line">            e.element = <span class="keyword">null</span>;</span><br><span class="line">            e = next;</span><br><span class="line">        &#125;</span><br><span class="line">        header.next = header.previous = header;</span><br><span class="line">        <span class="comment">// 设置大小为0</span></span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">        modCount++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回LinkedList指定位置的元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> entry(index).element;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置index位置对应的节点的值为element</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">        Entry&lt;E&gt; e = entry(index);</span><br><span class="line">        E oldVal = e.element;</span><br><span class="line">        e.element = element;</span><br><span class="line">        <span class="keyword">return</span> oldVal;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 在index前添加节点，且节点的值为element</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">        addBefore(element, (index==size ? header : entry(index)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除index位置的节点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> remove(entry(index));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取双向链表中指定位置的节点</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Entry&lt;E&gt; <span class="title">entry</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= size)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"Index: "</span>+index+</span><br><span class="line">                                                <span class="string">", Size: "</span>+size);</span><br><span class="line">        Entry&lt;E&gt; e = header;</span><br><span class="line">        <span class="comment">// 获取index处的节点。</span></span><br><span class="line">        <span class="comment">// 若index &lt; 双向链表长度的1/2,则从前先后查找;</span></span><br><span class="line">        <span class="comment">// 否则，从后向前查找。</span></span><br><span class="line">        <span class="keyword">if</span> (index &lt; (size &gt;&gt; <span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= index; i++)</span><br><span class="line">                e = e.next;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = size; i &gt; index; i--)</span><br><span class="line">                e = e.previous;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从前向后查找，返回“值为对象(o)的节点对应的索引”</span></span><br><span class="line">    <span class="comment">// 不存在就返回-1</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (o==<span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Entry e = header.next; e != header; e = e.next) &#123;</span><br><span class="line">                <span class="keyword">if</span> (e.element==<span class="keyword">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> index;</span><br><span class="line">                index++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (Entry e = header.next; e != header; e = e.next) &#123;</span><br><span class="line">                <span class="keyword">if</span> (o.equals(e.element))</span><br><span class="line">                    <span class="keyword">return</span> index;</span><br><span class="line">                index++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从后向前查找，返回“值为对象(o)的节点对应的索引”</span></span><br><span class="line">    <span class="comment">// 不存在就返回-1</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lastIndexOf</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> index = size;</span><br><span class="line">        <span class="keyword">if</span> (o==<span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Entry e = header.previous; e != header; e = e.previous) &#123;</span><br><span class="line">                index--;</span><br><span class="line">                <span class="keyword">if</span> (e.element==<span class="keyword">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> index;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (Entry e = header.previous; e != header; e = e.previous) &#123;</span><br><span class="line">                index--;</span><br><span class="line">                <span class="keyword">if</span> (o.equals(e.element))</span><br><span class="line">                    <span class="keyword">return</span> index;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回第一个节点</span></span><br><span class="line">    <span class="comment">// 若LinkedList的大小为0,则返回null</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (size==<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> getFirst();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回第一个节点</span></span><br><span class="line">    <span class="comment">// 若LinkedList的大小为0,则抛出异常</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">element</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getFirst();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除并返回第一个节点</span></span><br><span class="line">    <span class="comment">// 若LinkedList的大小为0,则返回null</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">poll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (size==<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> removeFirst();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将e添加双向链表末尾</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">offer</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> add(e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将e添加双向链表开头</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">offerFirst</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        addFirst(e);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将e添加双向链表末尾</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">offerLast</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        addLast(e);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回第一个节点</span></span><br><span class="line">    <span class="comment">// 若LinkedList的大小为0,则返回null</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">peekFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (size==<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> getFirst();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回最后一个节点</span></span><br><span class="line">    <span class="comment">// 若LinkedList的大小为0,则返回null</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">peekLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (size==<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> getLast();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除并返回第一个节点</span></span><br><span class="line">    <span class="comment">// 若LinkedList的大小为0,则返回null</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">pollFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (size==<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> removeFirst();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除并返回最后一个节点</span></span><br><span class="line">    <span class="comment">// 若LinkedList的大小为0,则返回null</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">pollLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (size==<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> removeLast();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将e插入到双向链表开头</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        addFirst(e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除并返回第一个节点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> removeFirst();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从LinkedList开始向后查找，删除第一个值为元素(o)的节点</span></span><br><span class="line">    <span class="comment">// 从链表开始查找，如存在节点的值为元素(o)的节点，则删除该节点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">removeFirstOccurrence</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> remove(o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从LinkedList末尾向前查找，删除第一个值为元素(o)的节点</span></span><br><span class="line">    <span class="comment">// 从链表开始查找，如存在节点的值为元素(o)的节点，则删除该节点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">removeLastOccurrence</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o==<span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Entry&lt;E&gt; e = header.previous; e != header; e = e.previous) &#123;</span><br><span class="line">                <span class="keyword">if</span> (e.element==<span class="keyword">null</span>) &#123;</span><br><span class="line">                    remove(e);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (Entry&lt;E&gt; e = header.previous; e != header; e = e.previous) &#123;</span><br><span class="line">                <span class="keyword">if</span> (o.equals(e.element)) &#123;</span><br><span class="line">                    remove(e);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回“index到末尾的全部节点”对应的ListIterator对象(List迭代器)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListIterator&lt;E&gt; <span class="title">listIterator</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ListItr(index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// List迭代器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ListItr</span> <span class="keyword">implements</span> <span class="title">ListIterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">        <span class="comment">// 上一次返回的节点</span></span><br><span class="line">        <span class="keyword">private</span> Entry&lt;E&gt; lastReturned = header;</span><br><span class="line">        <span class="comment">// 下一个节点</span></span><br><span class="line">        <span class="keyword">private</span> Entry&lt;E&gt; next;</span><br><span class="line">        <span class="comment">// 下一个节点对应的索引值</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> nextIndex;</span><br><span class="line">        <span class="comment">// 期望的改变计数。用来实现fail-fast机制。</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构造函数。</span></span><br><span class="line">        <span class="comment">// 从index位置开始进行迭代</span></span><br><span class="line">        ListItr(<span class="keyword">int</span> index) &#123;</span><br><span class="line">            <span class="comment">// index的有效性处理</span></span><br><span class="line">            <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; size)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"Index: "</span>+index+ <span class="string">", Size: "</span>+size);</span><br><span class="line">            <span class="comment">// 若 “index 小于 ‘双向链表长度的一半’”，则从第一个元素开始往后查找；</span></span><br><span class="line">            <span class="comment">// 否则，从最后一个元素往前查找。</span></span><br><span class="line">            <span class="keyword">if</span> (index &lt; (size &gt;&gt; <span class="number">1</span>)) &#123;</span><br><span class="line">                next = header.next;</span><br><span class="line">                <span class="keyword">for</span> (nextIndex=<span class="number">0</span>; nextIndex&lt;index; nextIndex++)</span><br><span class="line">                    next = next.next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                next = header;</span><br><span class="line">                <span class="keyword">for</span> (nextIndex=size; nextIndex&gt;index; nextIndex--)</span><br><span class="line">                    next = next.previous;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 是否存在下一个元素</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 通过元素索引是否等于“双向链表大小”来判断是否达到最后。</span></span><br><span class="line">            <span class="keyword">return</span> nextIndex != size;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取下一个元素</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            checkForComodification();</span><br><span class="line">            <span class="keyword">if</span> (nextIndex == size)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line"></span><br><span class="line">            lastReturned = next;</span><br><span class="line">            <span class="comment">// next指向链表的下一个元素</span></span><br><span class="line">            next = next.next;</span><br><span class="line">            nextIndex++;</span><br><span class="line">            <span class="keyword">return</span> lastReturned.element;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 是否存在上一个元素</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasPrevious</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 通过元素索引是否等于0，来判断是否达到开头。</span></span><br><span class="line">            <span class="keyword">return</span> nextIndex != <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取上一个元素</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> E <span class="title">previous</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (nextIndex == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// next指向链表的上一个元素</span></span><br><span class="line">            lastReturned = next = next.previous;</span><br><span class="line">            nextIndex--;</span><br><span class="line">            checkForComodification();</span><br><span class="line">            <span class="keyword">return</span> lastReturned.element;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取下一个元素的索引</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">nextIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> nextIndex;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取上一个元素的索引</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">previousIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> nextIndex-<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除当前元素。</span></span><br><span class="line">        <span class="comment">// 删除双向链表中的当前节点</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            checkForComodification();</span><br><span class="line">            Entry&lt;E&gt; lastNext = lastReturned.next;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                LinkedList.<span class="keyword">this</span>.remove(lastReturned);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NoSuchElementException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (next==lastReturned)</span><br><span class="line">                next = lastNext;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                nextIndex--;</span><br><span class="line">            lastReturned = header;</span><br><span class="line">            expectedModCount++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置当前节点为e</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (lastReturned == header)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">            checkForComodification();</span><br><span class="line">            lastReturned.element = e;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将e添加到当前节点的前面</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">            checkForComodification();</span><br><span class="line">            lastReturned = header;</span><br><span class="line">            addBefore(e, next);</span><br><span class="line">            nextIndex++;</span><br><span class="line">            expectedModCount++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断 “modCount和expectedModCount是否相等”，依次来实现fail-fast机制。</span></span><br><span class="line">        <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">checkForComodification</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 双向链表的节点所对应的数据结构。</span></span><br><span class="line">    <span class="comment">// 包含3部分：上一节点，下一节点，当前节点值。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">        <span class="comment">// 当前节点所包含的值</span></span><br><span class="line">        E element;</span><br><span class="line">        <span class="comment">// 下一个节点</span></span><br><span class="line">        Entry&lt;E&gt; next;</span><br><span class="line">        <span class="comment">// 上一个节点</span></span><br><span class="line">        Entry&lt;E&gt; previous;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 链表节点的构造函数。</span></span><br><span class="line"><span class="comment">         * 参数说明：</span></span><br><span class="line"><span class="comment">         *   element  —— 节点所包含的数据</span></span><br><span class="line"><span class="comment">         *   next      —— 下一个节点</span></span><br><span class="line"><span class="comment">         *   previous —— 上一个节点</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Entry(E element, Entry&lt;E&gt; next, Entry&lt;E&gt; previous) &#123;</span><br><span class="line">            <span class="keyword">this</span>.element = element;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">            <span class="keyword">this</span>.previous = previous;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将节点(节点数据是e)添加到entry节点之前。</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Entry&lt;E&gt; <span class="title">addBefore</span><span class="params">(E e, Entry&lt;E&gt; entry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 新建节点newEntry，将newEntry插入到节点e之前；并且设置newEntry的数据是e</span></span><br><span class="line">        Entry&lt;E&gt; newEntry = <span class="keyword">new</span> Entry&lt;E&gt;(e, entry, entry.previous);</span><br><span class="line">        newEntry.previous.next = newEntry;</span><br><span class="line">        newEntry.next.previous = newEntry;</span><br><span class="line">        <span class="comment">// 修改LinkedList大小</span></span><br><span class="line">        size++;</span><br><span class="line">        <span class="comment">// 修改LinkedList的修改统计数：用来实现fail-fast机制。</span></span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="keyword">return</span> newEntry;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将节点从链表中删除</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> E <span class="title">remove</span><span class="params">(Entry&lt;E&gt; e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (e == header)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line"></span><br><span class="line">        E result = e.element;</span><br><span class="line">        e.previous.next = e.next;</span><br><span class="line">        e.next.previous = e.previous;</span><br><span class="line">        e.next = e.previous = <span class="keyword">null</span>;</span><br><span class="line">        e.element = <span class="keyword">null</span>;</span><br><span class="line">        size--;</span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 反向迭代器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title">descendingIterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DescendingIterator();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 反向迭代器实现类。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">DescendingIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> ListItr itr = <span class="keyword">new</span> ListItr(size());</span><br><span class="line">        <span class="comment">// 反向迭代器是否下一个元素。</span></span><br><span class="line">        <span class="comment">// 实际上是判断双向链表的当前节点是否达到开头</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> itr.hasPrevious();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 反向迭代器获取下一个元素。</span></span><br><span class="line">        <span class="comment">// 实际上是获取双向链表的前一个节点</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> itr.previous();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 删除当前节点</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            itr.remove();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回LinkedList的Object[]数组</span></span><br><span class="line">    <span class="keyword">public</span> Object[] toArray() &#123;</span><br><span class="line">    <span class="comment">// 新建Object[]数组</span></span><br><span class="line">    Object[] result = <span class="keyword">new</span> Object[size];</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 将链表中所有节点的数据都添加到Object[]数组中</span></span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;E&gt; e = header.next; e != header; e = e.next)</span><br><span class="line">            result[i++] = e.element;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回LinkedList的模板数组。所谓模板数组，即可以将T设为任意的数据类型</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T[] toArray(T[] a) &#123;</span><br><span class="line">        <span class="comment">// 若数组a的大小 &lt; LinkedList的元素个数(意味着数组a不能容纳LinkedList中全部元素)</span></span><br><span class="line">        <span class="comment">// 则新建一个T[]数组，T[]的大小为LinkedList大小，并将该T[]赋值给a。</span></span><br><span class="line">        <span class="keyword">if</span> (a.length &lt; size)</span><br><span class="line">            a = (T[])java.lang.reflect.Array.newInstance(</span><br><span class="line">                                a.getClass().getComponentType(), size);</span><br><span class="line">        <span class="comment">// 将链表中所有节点的数据都添加到数组a中</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        Object[] result = a;</span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;E&gt; e = header.next; e != header; e = e.next)</span><br><span class="line">            result[i++] = e.element;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (a.length &gt; size)</span><br><span class="line">            a[size] = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 克隆函数。返回LinkedList的克隆对象。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LinkedList&lt;E&gt; clone = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 克隆一个LinkedList克隆对象</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            clone = (LinkedList&lt;E&gt;) <span class="keyword">super</span>.clone();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InternalError();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 新建LinkedList表头节点</span></span><br><span class="line">        clone.header = <span class="keyword">new</span> Entry&lt;E&gt;(<span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">        clone.header.next = clone.header.previous = clone.header;</span><br><span class="line">        clone.size = <span class="number">0</span>;</span><br><span class="line">        clone.modCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将链表中所有节点的数据都添加到克隆对象中</span></span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;E&gt; e = header.next; e != header; e = e.next)</span><br><span class="line">            clone.add(e.element);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> clone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// java.io.Serializable的写入函数</span></span><br><span class="line">    <span class="comment">// 将LinkedList的“容量，所有的元素值”都写入到输出流中</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeObject</span><span class="params">(java.io.ObjectOutputStream s)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> java.io.IOException </span>&#123;</span><br><span class="line">        <span class="comment">// Write out any hidden serialization magic</span></span><br><span class="line">        s.defaultWriteObject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 写入“容量”</span></span><br><span class="line">        s.writeInt(size);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将链表中所有节点的数据都写入到输出流中</span></span><br><span class="line">        <span class="keyword">for</span> (Entry e = header.next; e != header; e = e.next)</span><br><span class="line">            s.writeObject(e.element);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// java.io.Serializable的读取函数：根据写入方式反向读出</span></span><br><span class="line">    <span class="comment">// 先将LinkedList的“容量”读出，然后将“所有的元素值”读出</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">// Read in any hidden serialization magic</span></span><br><span class="line">        s.defaultReadObject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从输入流中读取“容量”</span></span><br><span class="line">        <span class="keyword">int</span> size = s.readInt();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 新建链表表头节点</span></span><br><span class="line">        header = <span class="keyword">new</span> Entry&lt;E&gt;(<span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">        header.next = header.previous = header;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从输入流中将“所有的元素值”并逐个添加到链表中</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;size; i++)</span><br><span class="line">            addBefore((E)s.readObject(), header);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><p>1、LinkedList 实际上是通过双向链表去实现的。它包含一个非常重要的内部类：Entry。Entry是双向链表节点所对应的数据结构，它包括的属性有：当前节点所包含的值，上一个节点，下一个节点。</p><p>2、从LinkedList的实现方式中可以发现，它不存在LinkedList容量不足的问题。</p><p>3、LinkedList的克隆函数，即是将全部元素克隆到一个新的LinkedList对象中。</p><p>4、LinkedList实现java.io.Serializable。当写入到输出流时，先写入“容量”，再依次写入“每一个节点保护的值”；当读出输入流时，先读取“容量”，再依次读取“每一个元素”。</p><p>5、由于LinkedList实现了Deque，而Deque接口定义了在双端队列两端访问元素的方法。提供插入、移除和检查元素的方法。每种方法都存在两种形式：一种形式在操作失败时抛出异常，另一种形式返回一个特殊值（null 或 false，具体取决于操作）。</p><p>总结起来如下表格：</p><table><thead><tr><th></th><th>第一个元素</th><th>第一个元素</th><th>最后一个元素</th><th>最后一个元素</th></tr></thead><tbody><tr><td></td><td>抛出异常</td><td>特殊值</td><td>抛出异常</td><td>特殊值</td></tr><tr><td>插入</td><td>addFirst(e)</td><td>offerFirst(e)</td><td>addLast(e)</td><td>offerLast(e)</td></tr><tr><td>移除</td><td>removeFirst()</td><td>pollFirst()</td><td>removeLast()</td><td>pollLast()</td></tr><tr><td>检查</td><td>getFirst()</td><td>peekFirst()</td><td>getLast()</td><td>peekLast()</td></tr></tbody></table><p>6、LinkedList可以作为FIFO(先进先出)的队列，作为FIFO的队列时，下表的方法等价：</p><table><thead><tr><th>队列方法</th><th>等效方法</th></tr></thead><tbody><tr><td>add(e)</td><td>addLast(e)</td></tr><tr><td>offer(e)</td><td>offerLast(e)</td></tr><tr><td>remove()</td><td>removeFirst()</td></tr><tr><td>poll()</td><td>pollFirst()</td></tr><tr><td>element()</td><td>getFirst()</td></tr><tr><td>peek()</td><td>peekFirst()</td></tr></tbody></table><p>7、LinkedList可以作为LIFO(后进先出)的栈，作为LIFO的栈时，下表的方法等价：</p><table><thead><tr><th>栈方法</th><th>等效方法</th></tr></thead><tbody><tr><td>push(e)</td><td>addFirst(e)</td></tr><tr><td>pop()</td><td>removeFirst()</td></tr><tr><td>peek()</td><td>peekFirst()</td></tr></tbody></table><h1 id="LinkedList遍历方式"><a href="#LinkedList遍历方式" class="headerlink" title="LinkedList遍历方式"></a>LinkedList遍历方式</h1><p>LinkedList遍历方式</p><p>LinkedList支持多种遍历方式。建议不要采用随机访问的方式去遍历LinkedList，而采用逐个遍历的方式。</p><h2 id="第一种，通过迭代器遍历。即通过Iterator去遍历。"><a href="#第一种，通过迭代器遍历。即通过Iterator去遍历。" class="headerlink" title="第一种，通过迭代器遍历。即通过Iterator去遍历。"></a>第一种，通过迭代器遍历。即通过Iterator去遍历。</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(Iterator iter = list.iterator(); iter.hasNext();)</span><br><span class="line">    iter.next();</span><br></pre></td></tr></table></figure><h2 id="第二种，通过快速随机访问遍历LinkedList"><a href="#第二种，通过快速随机访问遍历LinkedList" class="headerlink" title="第二种，通过快速随机访问遍历LinkedList"></a>第二种，通过快速随机访问遍历LinkedList</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> size = list.size();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;size; i++) &#123;</span><br><span class="line">    list.get(i);        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第三种，通过另外一种for循环来遍历LinkedList"><a href="#第三种，通过另外一种for循环来遍历LinkedList" class="headerlink" title="第三种，通过另外一种for循环来遍历LinkedList"></a>第三种，通过另外一种for循环来遍历LinkedList</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (Integer integ:list) </span><br><span class="line">    ;</span><br></pre></td></tr></table></figure><h2 id="通过pollFirst-来遍历LinkedList"><a href="#通过pollFirst-来遍历LinkedList" class="headerlink" title="通过pollFirst()来遍历LinkedList"></a>通过pollFirst()来遍历LinkedList</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(list.pollFirst() != <span class="keyword">null</span>)</span><br><span class="line">    ;</span><br></pre></td></tr></table></figure><h2 id="通过pollLast-来遍历LinkedList"><a href="#通过pollLast-来遍历LinkedList" class="headerlink" title="通过pollLast()来遍历LinkedList"></a>通过pollLast()来遍历LinkedList</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(list.pollLast() != <span class="keyword">null</span>)</span><br><span class="line">    ;</span><br></pre></td></tr></table></figure><h2 id="通过removeFirst-来遍历LinkedList"><a href="#通过removeFirst-来遍历LinkedList" class="headerlink" title="通过removeFirst()来遍历LinkedList"></a>通过removeFirst()来遍历LinkedList</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">while</span>(list.removeFirst() != <span class="keyword">null</span>)</span><br><span class="line">        ;</span><br><span class="line">&#125; <span class="keyword">catch</span> (NoSuchElementException e) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="通过removeLast-来遍历LinkedList"><a href="#通过removeLast-来遍历LinkedList" class="headerlink" title="通过removeLast()来遍历LinkedList"></a>通过removeLast()来遍历LinkedList</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">while</span>(list.removeLast() != <span class="keyword">null</span>)</span><br><span class="line">        ;</span><br><span class="line">&#125; <span class="keyword">catch</span> (NoSuchElementException e) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试这些遍历方式效率的代码如下：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.NoSuchElementException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @desc 测试LinkedList的几种遍历方式和效率</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @author skywang</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedListThruTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 通过Iterator遍历LinkedList</span></span><br><span class="line">        iteratorLinkedListThruIterator(getLinkedList()) ;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 通过快速随机访问遍历LinkedList</span></span><br><span class="line">        iteratorLinkedListThruForeach(getLinkedList()) ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过for循环的变种来访问遍历LinkedList</span></span><br><span class="line">        iteratorThroughFor2(getLinkedList()) ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过PollFirst()遍历LinkedList</span></span><br><span class="line">        iteratorThroughPollFirst(getLinkedList()) ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过PollLast()遍历LinkedList</span></span><br><span class="line">        iteratorThroughPollLast(getLinkedList()) ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过removeFirst()遍历LinkedList</span></span><br><span class="line">        iteratorThroughRemoveFirst(getLinkedList()) ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过removeLast()遍历LinkedList</span></span><br><span class="line">        iteratorThroughRemoveLast(getLinkedList()) ;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> LinkedList <span class="title">getLinkedList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LinkedList llist = <span class="keyword">new</span> LinkedList();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">100000</span>; i++)</span><br><span class="line">            llist.addLast(i);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> llist;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过快迭代器遍历LinkedList</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">iteratorLinkedListThruIterator</span><span class="params">(LinkedList&lt;Integer&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (list == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 记录开始时间</span></span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(Iterator iter = list.iterator(); iter.hasNext();)</span><br><span class="line">            iter.next();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 记录结束时间</span></span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">long</span> interval = end - start;</span><br><span class="line">        System.out.println(<span class="string">"iteratorLinkedListThruIterator："</span> + interval+<span class="string">" ms"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过快速随机访问遍历LinkedList</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">iteratorLinkedListThruForeach</span><span class="params">(LinkedList&lt;Integer&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (list == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 记录开始时间</span></span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> size = list.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;size; i++) &#123;</span><br><span class="line">            list.get(i);        </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 记录结束时间</span></span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">long</span> interval = end - start;</span><br><span class="line">        System.out.println(<span class="string">"iteratorLinkedListThruForeach："</span> + interval+<span class="string">" ms"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过另外一种for循环来遍历LinkedList</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">iteratorThroughFor2</span><span class="params">(LinkedList&lt;Integer&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (list == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 记录开始时间</span></span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (Integer integ:list) </span><br><span class="line">            ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 记录结束时间</span></span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">long</span> interval = end - start;</span><br><span class="line">        System.out.println(<span class="string">"iteratorThroughFor2："</span> + interval+<span class="string">" ms"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过pollFirst()来遍历LinkedList</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">iteratorThroughPollFirst</span><span class="params">(LinkedList&lt;Integer&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (list == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 记录开始时间</span></span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">while</span>(list.pollFirst() != <span class="keyword">null</span>)</span><br><span class="line">            ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 记录结束时间</span></span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">long</span> interval = end - start;</span><br><span class="line">        System.out.println(<span class="string">"iteratorThroughPollFirst："</span> + interval+<span class="string">" ms"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过pollLast()来遍历LinkedList</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">iteratorThroughPollLast</span><span class="params">(LinkedList&lt;Integer&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (list == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 记录开始时间</span></span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">while</span>(list.pollLast() != <span class="keyword">null</span>)</span><br><span class="line">            ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 记录结束时间</span></span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">long</span> interval = end - start;</span><br><span class="line">        System.out.println(<span class="string">"iteratorThroughPollLast："</span> + interval+<span class="string">" ms"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过removeFirst()来遍历LinkedList</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">iteratorThroughRemoveFirst</span><span class="params">(LinkedList&lt;Integer&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (list == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 记录开始时间</span></span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span>(list.removeFirst() != <span class="keyword">null</span>)</span><br><span class="line">                ;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchElementException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 记录结束时间</span></span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">long</span> interval = end - start;</span><br><span class="line">        System.out.println(<span class="string">"iteratorThroughRemoveFirst："</span> + interval+<span class="string">" ms"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过removeLast()来遍历LinkedList</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">iteratorThroughRemoveLast</span><span class="params">(LinkedList&lt;Integer&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (list == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 记录开始时间</span></span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span>(list.removeLast() != <span class="keyword">null</span>)</span><br><span class="line">                ;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchElementException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 记录结束时间</span></span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">long</span> interval = end - start;</span><br><span class="line">        System.out.println(<span class="string">"iteratorThroughRemoveLast："</span> + interval+<span class="string">" ms"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">iteratorLinkedListThruIterator：<span class="number">8</span> ms</span><br><span class="line">iteratorLinkedListThruForeach：<span class="number">3724</span> ms</span><br><span class="line">iteratorThroughFor2：<span class="number">5</span> ms</span><br><span class="line">iteratorThroughPollFirst：<span class="number">8</span> ms</span><br><span class="line">iteratorThroughPollLast：<span class="number">6</span> ms</span><br><span class="line">iteratorThroughRemoveFirst：<span class="number">2</span> ms</span><br><span class="line">iteratorThroughRemoveLast：<span class="number">2</span> ms</span><br></pre></td></tr></table></figure><p>由此可见，遍历LinkedList时，使用removeFist()或removeLast()效率最高。但用它们遍历时，会删除原始数据；若单纯只读取，而不删除，应该使用第3种 (增强 for循环) 遍历方式。<br>无论如何，千万不要通过随机访问去遍历LinkedList！</p><h2 id="LinkedList示例"><a href="#LinkedList示例" class="headerlink" title="LinkedList示例"></a>LinkedList示例</h2><p>下面通过一个示例来学习如何使用LinkedList的常用API </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.NoSuchElementException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @desc LinkedList测试程序。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedListTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 测试LinkedList的API</span></span><br><span class="line">        testLinkedListAPIs() ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将LinkedList当作 LIFO(后进先出)的堆栈</span></span><br><span class="line">        useLinkedListAsLIFO();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将LinkedList当作 FIFO(先进先出)的队列</span></span><br><span class="line">        useLinkedListAsFIFO();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 测试LinkedList中部分API</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testLinkedListAPIs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String val = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//LinkedList llist;</span></span><br><span class="line">        <span class="comment">//llist.offer("10");</span></span><br><span class="line">        <span class="comment">// 新建一个LinkedList</span></span><br><span class="line">        LinkedList llist = <span class="keyword">new</span> LinkedList();</span><br><span class="line">        <span class="comment">//---- 添加操作 ----</span></span><br><span class="line">        <span class="comment">// 依次添加1,2,3</span></span><br><span class="line">        llist.add(<span class="string">"1"</span>);</span><br><span class="line">        llist.add(<span class="string">"2"</span>);</span><br><span class="line">        llist.add(<span class="string">"3"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将“4”添加到第一个位置</span></span><br><span class="line">        llist.add(<span class="number">1</span>, <span class="string">"4"</span>);</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"\nTest \"addFirst(), removeFirst(), getFirst()\""</span>);</span><br><span class="line">        <span class="comment">// (01) 将“10”添加到第一个位置。  失败的话，抛出异常！</span></span><br><span class="line">        llist.addFirst(<span class="string">"10"</span>);</span><br><span class="line">        System.out.println(<span class="string">"llist:"</span>+llist);</span><br><span class="line">        <span class="comment">// (02) 将第一个元素删除。        失败的话，抛出异常！</span></span><br><span class="line">        System.out.println(<span class="string">"llist.removeFirst():"</span>+llist.removeFirst());</span><br><span class="line">        System.out.println(<span class="string">"llist:"</span>+llist);</span><br><span class="line">        <span class="comment">// (03) 获取第一个元素。          失败的话，抛出异常！</span></span><br><span class="line">        System.out.println(<span class="string">"llist.getFirst():"</span>+llist.getFirst());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"\nTest \"offerFirst(), pollFirst(), peekFirst()\""</span>);</span><br><span class="line">        <span class="comment">// (01) 将“10”添加到第一个位置。  返回true。</span></span><br><span class="line">        llist.offerFirst(<span class="string">"10"</span>);</span><br><span class="line">        System.out.println(<span class="string">"llist:"</span>+llist);</span><br><span class="line">        <span class="comment">// (02) 将第一个元素删除。        失败的话，返回null。</span></span><br><span class="line">        System.out.println(<span class="string">"llist.pollFirst():"</span>+llist.pollFirst());</span><br><span class="line">        System.out.println(<span class="string">"llist:"</span>+llist);</span><br><span class="line">        <span class="comment">// (03) 获取第一个元素。          失败的话，返回null。</span></span><br><span class="line">        System.out.println(<span class="string">"llist.peekFirst():"</span>+llist.peekFirst());</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"\nTest \"addLast(), removeLast(), getLast()\""</span>);</span><br><span class="line">        <span class="comment">// (01) 将“20”添加到最后一个位置。  失败的话，抛出异常！</span></span><br><span class="line">        llist.addLast(<span class="string">"20"</span>);</span><br><span class="line">        System.out.println(<span class="string">"llist:"</span>+llist);</span><br><span class="line">        <span class="comment">// (02) 将最后一个元素删除。        失败的话，抛出异常！</span></span><br><span class="line">        System.out.println(<span class="string">"llist.removeLast():"</span>+llist.removeLast());</span><br><span class="line">        System.out.println(<span class="string">"llist:"</span>+llist);</span><br><span class="line">        <span class="comment">// (03) 获取最后一个元素。          失败的话，抛出异常！</span></span><br><span class="line">        System.out.println(<span class="string">"llist.getLast():"</span>+llist.getLast());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"\nTest \"offerLast(), pollLast(), peekLast()\""</span>);</span><br><span class="line">        <span class="comment">// (01) 将“20”添加到第一个位置。  返回true。</span></span><br><span class="line">        llist.offerLast(<span class="string">"20"</span>);</span><br><span class="line">        System.out.println(<span class="string">"llist:"</span>+llist);</span><br><span class="line">        <span class="comment">// (02) 将第一个元素删除。        失败的话，返回null。</span></span><br><span class="line">        System.out.println(<span class="string">"llist.pollLast():"</span>+llist.pollLast());</span><br><span class="line">        System.out.println(<span class="string">"llist:"</span>+llist);</span><br><span class="line">        <span class="comment">// (03) 获取第一个元素。          失败的话，返回null。</span></span><br><span class="line">        System.out.println(<span class="string">"llist.peekLast():"</span>+llist.peekLast());</span><br><span class="line"></span><br><span class="line">         </span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将第3个元素设置300。不建议在LinkedList中使用此操作，因为效率低！</span></span><br><span class="line">        llist.set(<span class="number">2</span>, <span class="string">"300"</span>);</span><br><span class="line">        <span class="comment">// 获取第3个元素。不建议在LinkedList中使用此操作，因为效率低！</span></span><br><span class="line">        System.out.println(<span class="string">"\nget(3):"</span>+llist.get(<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// ---- toArray(T[] a) ----</span></span><br><span class="line">        <span class="comment">// 将LinkedList转行为数组</span></span><br><span class="line">        String[] arr = (String[])llist.toArray(<span class="keyword">new</span> String[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">for</span> (String str:arr) </span><br><span class="line">            System.out.println(<span class="string">"str:"</span>+str);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出大小</span></span><br><span class="line">        System.out.println(<span class="string">"size:"</span>+llist.size());</span><br><span class="line">        <span class="comment">// 清空LinkedList</span></span><br><span class="line">        llist.clear();</span><br><span class="line">        <span class="comment">// 判断LinkedList是否为空</span></span><br><span class="line">        System.out.println(<span class="string">"isEmpty():"</span>+llist.isEmpty()+<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将LinkedList当作 LIFO(后进先出)的堆栈</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">useLinkedListAsLIFO</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"\nuseLinkedListAsLIFO"</span>);</span><br><span class="line">        <span class="comment">// 新建一个LinkedList</span></span><br><span class="line">        LinkedList stack = <span class="keyword">new</span> LinkedList();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将1,2,3,4添加到堆栈中</span></span><br><span class="line">        stack.push(<span class="string">"1"</span>);</span><br><span class="line">        stack.push(<span class="string">"2"</span>);</span><br><span class="line">        stack.push(<span class="string">"3"</span>);</span><br><span class="line">        stack.push(<span class="string">"4"</span>);</span><br><span class="line">        <span class="comment">// 打印“栈”</span></span><br><span class="line">        System.out.println(<span class="string">"stack:"</span>+stack);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除“栈顶元素”</span></span><br><span class="line">        System.out.println(<span class="string">"stack.pop():"</span>+stack.pop());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 取出“栈顶元素”</span></span><br><span class="line">        System.out.println(<span class="string">"stack.peek():"</span>+stack.peek());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印“栈”</span></span><br><span class="line">        System.out.println(<span class="string">"stack:"</span>+stack);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将LinkedList当作 FIFO(先进先出)的队列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">useLinkedListAsFIFO</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"\nuseLinkedListAsFIFO"</span>);</span><br><span class="line">        <span class="comment">// 新建一个LinkedList</span></span><br><span class="line">        LinkedList queue = <span class="keyword">new</span> LinkedList();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将10,20,30,40添加到队列。每次都是插入到末尾</span></span><br><span class="line">        queue.add(<span class="string">"10"</span>);</span><br><span class="line">        queue.add(<span class="string">"20"</span>);</span><br><span class="line">        queue.add(<span class="string">"30"</span>);</span><br><span class="line">        queue.add(<span class="string">"40"</span>);</span><br><span class="line">        <span class="comment">// 打印“队列”</span></span><br><span class="line">        System.out.println(<span class="string">"queue:"</span>+queue);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除(队列的第一个元素)</span></span><br><span class="line">        System.out.println(<span class="string">"queue.remove():"</span>+queue.remove());</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 读取(队列的第一个元素)</span></span><br><span class="line">        System.out.println(<span class="string">"queue.element():"</span>+queue.element());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印“队列”</span></span><br><span class="line">        System.out.println(<span class="string">"queue:"</span>+queue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">Test <span class="string">"addFirst(), removeFirst(), getFirst()"</span></span><br><span class="line">llist:[<span class="number">10</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">llist.removeFirst():<span class="number">10</span></span><br><span class="line">llist:[<span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">llist.getFirst():<span class="number">1</span></span><br><span class="line"></span><br><span class="line">Test <span class="string">"offerFirst(), pollFirst(), peekFirst()"</span></span><br><span class="line">llist:[<span class="number">10</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">llist.pollFirst():<span class="number">10</span></span><br><span class="line">llist:[<span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">llist.peekFirst():<span class="number">1</span></span><br><span class="line"></span><br><span class="line">Test <span class="string">"addLast(), removeLast(), getLast()"</span></span><br><span class="line">llist:[<span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">20</span>]</span><br><span class="line">llist.removeLast():<span class="number">20</span></span><br><span class="line">llist:[<span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">llist.getLast():<span class="number">3</span></span><br><span class="line"></span><br><span class="line">Test <span class="string">"offerLast(), pollLast(), peekLast()"</span></span><br><span class="line">llist:[<span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">20</span>]</span><br><span class="line">llist.pollLast():<span class="number">20</span></span><br><span class="line">llist:[<span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">llist.peekLast():<span class="number">3</span></span><br><span class="line"></span><br><span class="line">get(<span class="number">3</span>):<span class="number">300</span></span><br><span class="line">str:<span class="number">1</span></span><br><span class="line">str:<span class="number">4</span></span><br><span class="line">str:<span class="number">300</span></span><br><span class="line">str:<span class="number">3</span></span><br><span class="line">size:<span class="number">4</span></span><br><span class="line">isEmpty():<span class="keyword">true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">useLinkedListAsLIFO</span><br><span class="line">stack:[<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line">stack.pop():<span class="number">4</span></span><br><span class="line">stack.peek():<span class="number">3</span></span><br><span class="line">stack:[<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">useLinkedListAsFIFO</span><br><span class="line">queue:[<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>]</span><br><span class="line">queue.remove():<span class="number">10</span></span><br><span class="line">queue.element():<span class="number">20</span></span><br><span class="line">queue:[<span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;LinkedList-简介&quot;&gt;&lt;a href=&quot;#LinkedList-简介&quot; class=&quot;headerlink&quot; title=&quot;LinkedList 简介&quot;&gt;&lt;/a&gt;LinkedList 简介&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;LinkedList 是一个继承于 AbstractSequentialList 的双向链表。它也可以被当作堆栈、队列或双端队列进行操作。&lt;/li&gt;
&lt;li&gt;LinkedList 实现 List 接口，能对它进行队列操作。&lt;/li&gt;
&lt;li&gt;LinkedList 实现 Deque 接口，即能将 LinkedList 当作双端队列使用。&lt;/li&gt;
&lt;li&gt;LinkedList 实现了 Cloneable 接口，即覆盖了函数 clone()，能克隆。&lt;/li&gt;
&lt;li&gt;LinkedList 实现java.io.Serializable接口，这意味着 LinkedList 支持序列化，能通过序列化去传输。&lt;/li&gt;
&lt;li&gt;LinkedList 是非同步的。
    
    </summary>
    
      <category term="Java 集合" scheme="http://cuijing.me/categories/Java-%E9%9B%86%E5%90%88/"/>
    
    
      <category term="Java" scheme="http://cuijing.me/tags/Java/"/>
    
      <category term="集合框架" scheme="http://cuijing.me/tags/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/"/>
    
      <category term="LinkedList" scheme="http://cuijing.me/tags/LinkedList/"/>
    
  </entry>
  
  <entry>
    <title>集合框架之 Fail-Fast</title>
    <link href="http://cuijing.me/2015/05/08/Java/8-Collection-Map/4-fail-fast/"/>
    <id>http://cuijing.me/2015/05/08/Java/8-Collection-Map/4-fail-fast/</id>
    <published>2015-05-08T00:30:00.000Z</published>
    <updated>2016-05-02T11:10:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、fail-fast简介"><a href="#1、fail-fast简介" class="headerlink" title="1、fail-fast简介"></a>1、fail-fast简介</h1><p>fail-fast 机制是 Java 集合 (Collection) 中的一种错误机制。当多个线程对同一个集合的内容进行操作时，就可能会产生 fail-fast 事件。</p><p>例如：当某一个线程 A 通过 iterator 去遍历某集合的过程中，若该集合的内容被其他线程所改变了；那么线程A访问集合时，就会抛出 ConcurrentModificationException 异常，产生 fail-fast 事件。</p><p>在详细介绍  fail-fast机制的原理之前，先通过一个示例来认识 fail-fast。<br><a id="more"></a></p><h1 id="2、fail-fast示-例"><a href="#2、fail-fast示-例" class="headerlink" title="2、fail-fast示 例"></a>2、fail-fast示 例</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @desc java集合中Fast-Fail的测试程序。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   fast-fail事件产生的条件：当多个线程对Collection进行操作时，若其中某一个线程通过iterator去遍历集合时，该集合的内容被其他线程所改变；则会抛出ConcurrentModificationException异常。</span></span><br><span class="line"><span class="comment"> *   fast-fail解决办法：通过java.util.concurrent集合包下的相应类去处理，则不会产生fast-fail事件。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   本例中，分别测试ArrayList和CopyOnWriteArrayList这两种情况。ArrayList会产生fast-fail事件，而CopyOnWriteArrayList不会产生fast-fail事件。</span></span><br><span class="line"><span class="comment"> *   (01) 使用ArrayList时，会产生fast-fail事件，抛出ConcurrentModificationException异常；定义如下：</span></span><br><span class="line"><span class="comment"> *            private static List&lt;String&gt; list = new ArrayList&lt;String&gt;();</span></span><br><span class="line"><span class="comment"> *   (02) 使用时CopyOnWriteArrayList，不会产生fast-fail事件；定义如下：</span></span><br><span class="line"><span class="comment"> *            private static List&lt;String&gt; list = new CopyOnWriteArrayList&lt;String&gt;();</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FastFailTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">    <span class="comment">//private static List&lt;String&gt; list = new CopyOnWriteArrayList&lt;String&gt;();</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 同时启动两个线程对list进行操作！</span></span><br><span class="line">        <span class="keyword">new</span> ThreadOne().start();</span><br><span class="line">        <span class="keyword">new</span> ThreadTwo().start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">        String value = <span class="keyword">null</span>;</span><br><span class="line">        Iterator iter = list.iterator();</span><br><span class="line">        <span class="keyword">while</span>(iter.hasNext()) &#123;</span><br><span class="line">            value = (String)iter.next();</span><br><span class="line">            System.out.print(value+<span class="string">", "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向list中依次添加0,1,2,3,4,5，每添加一个数之后，就通过printAll()遍历整个list</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadOne</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (i&lt;<span class="number">6</span>) &#123;</span><br><span class="line">                list.add(String.valueOf(i));</span><br><span class="line">                printAll();</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向list中依次添加10,11,12,13,14,15，每添加一个数之后，就通过printAll()遍历整个list</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTwo</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">while</span> (i&lt;<span class="number">16</span>) &#123;</span><br><span class="line">                list.add(String.valueOf(i));</span><br><span class="line">                printAll();</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：<br>运行该代码，抛出异常java.util.ConcurrentModificationException！即，产生fail-fast事件！</p><p>结果说明：<br>(01) FastFailTest中通过 new ThreadOne().start() 和 new ThreadTwo().start() 同时启动两个线程去操作list。<br>    ThreadOne线程：向list中依次添加0,1,2,3,4,5。每添加一个数之后，就通过printAll()遍历整个list。<br>    ThreadTwo线程：向list中依次添加10,11,12,13,14,15。每添加一个数之后，就通过printAll()遍历整个list。<br>(02) 当某一个线程遍历list的过程中，list的内容被另外一个线程所改变了；就会抛出ConcurrentModificationException异常，产生fail-fast事件。</p><h1 id="3、fail-fast-解决办法"><a href="#3、fail-fast-解决办法" class="headerlink" title="3、fail-fast 解决办法"></a>3、fail-fast 解决办法</h1><p>fail-fast 机制，是一种错误检测机制。它只能被用来检测错误，因为JDK并不保证 fail-fast 机制一定会发生。若在多线程环境下使用 fail-fast 机制的集合，建议使用 “java.util.concurrent包下的类”去取代“java.util包下的类”。<br>所以，本例中只需要将 ArrayList 替换成 java.util.concurrent 包下对应的类即可。<br>即，将代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br></pre></td></tr></table></figure><p>替换为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">private static List&lt;String&gt; list = new CopyOnWriteArrayList&lt;String&gt;();</span><br></pre></td></tr></table></figure><p>则可以解决该办法。</p><h1 id="fail-fast原理"><a href="#fail-fast原理" class="headerlink" title="fail-fast原理"></a>fail-fast原理</h1><p>产生fail-fast事件，是通过抛出ConcurrentModificationException异常来触发的。<br>那么，ArrayList是如何抛出ConcurrentModificationException异常的呢?</p><p>我们知道，ConcurrentModificationException 是在操作 Iterator 时抛出的异常。我们先看看 Iterator 的源码。ArrayList 的 Iterator 是在父类 AbstractList.java 中实现的。代码如下： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractCollection</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">// AbstractList中唯一的属性</span></span><br><span class="line">    <span class="comment">// 用来记录List修改的次数：每修改一次(添加/删除等操作)，将modCount+1</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">transient</span> <span class="keyword">int</span> modCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回List对应迭代器。实际上，是返回Itr对象。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Itr();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Itr是Iterator(迭代器)的实现类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Itr</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> cursor = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> lastRet = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 修改数的记录值。</span></span><br><span class="line">        <span class="comment">// 每次新建Itr()对象时，都会保存新建该对象时对应的modCount；</span></span><br><span class="line">        <span class="comment">// 以后每次遍历List中的元素的时候，都会比较expectedModCount和modCount是否相等；</span></span><br><span class="line">        <span class="comment">// 若不相等，则抛出ConcurrentModificationException异常，产生fail-fast事件。</span></span><br><span class="line">        <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> cursor != size();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 获取下一个元素之前，都会判断“新建Itr对象时保存的modCount”和“当前的modCount”是否相等；</span></span><br><span class="line">            <span class="comment">// 若不相等，则抛出ConcurrentModificationException异常，产生fail-fast事件。</span></span><br><span class="line">            checkForComodification();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                E next = get(cursor);</span><br><span class="line">                lastRet = cursor++;</span><br><span class="line">                <span class="keyword">return</span> next;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException e) &#123;</span><br><span class="line">                checkForComodification();</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (lastRet == -<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">            checkForComodification();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                AbstractList.<span class="keyword">this</span>.remove(lastRet);</span><br><span class="line">                <span class="keyword">if</span> (lastRet &lt; cursor)</span><br><span class="line">                    cursor--;</span><br><span class="line">                lastRet = -<span class="number">1</span>;</span><br><span class="line">                expectedModCount = modCount;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">checkForComodification</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从中，我们可以发现在调用 next() 和 remove() 时，都会执行 checkForComodification()。若 “modCount 不等于 expectedModCount”，则抛出ConcurrentModificationException异常，产生fail-fast事件。</p><p>要搞明白 fail-fast机制，我们就要需要理解什么时候 “modCount 不等于 expectedModCount”！<br>从 Itr 类中，我们知道 expectedModCount 在创建 Itr 时，被赋值为 modCount。通过 Itr，我们知道：expectedModCount 不可能被修改为不等于 modCount。所以，需要考证的就是 modCount 何时会被修改。</p><p>接下来，我们查看 ArrayList 的源码，来看看 modCount 是如何被修改的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">// list中容量变化时，对应的同步函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ensureCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">        <span class="keyword">if</span> (minCapacity &gt; oldCapacity) &#123;</span><br><span class="line">            Object oldData[] = elementData;</span><br><span class="line">            <span class="keyword">int</span> newCapacity = (oldCapacity * <span class="number">3</span>)/<span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (newCapacity &lt; minCapacity)</span><br><span class="line">                newCapacity = minCapacity;</span><br><span class="line">            <span class="comment">// minCapacity is usually close to size, so this is a win:</span></span><br><span class="line">            elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加元素到队列最后</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 修改modCount</span></span><br><span class="line">        ensureCapacity(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">        elementData[size++] = e;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加元素到指定的位置</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt; size || index &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(</span><br><span class="line">            <span class="string">"Index: "</span>+index+<span class="string">", Size: "</span>+size);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 修改modCount</span></span><br><span class="line">        ensureCapacity(size+<span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">        System.arraycopy(elementData, index, elementData, index + <span class="number">1</span>,</span><br><span class="line">             size - index);</span><br><span class="line">        elementData[index] = element;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加集合</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">        Object[] a = c.toArray();</span><br><span class="line">        <span class="keyword">int</span> numNew = a.length;</span><br><span class="line">        <span class="comment">// 修改modCount</span></span><br><span class="line">        ensureCapacity(size + numNew);  <span class="comment">// Increments modCount</span></span><br><span class="line">        System.arraycopy(a, <span class="number">0</span>, elementData, size, numNew);</span><br><span class="line">        size += numNew;</span><br><span class="line">        <span class="keyword">return</span> numNew != <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除指定位置的元素 </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        RangeCheck(index);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 修改modCount</span></span><br><span class="line">        modCount++;</span><br><span class="line">        E oldValue = (E) elementData[index];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">            System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index, numMoved);</span><br><span class="line">        elementData[--size] = <span class="keyword">null</span>; <span class="comment">// Let gc do its work</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> oldValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 快速删除指定位置的元素 </span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">fastRemove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 修改modCount</span></span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">            System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line">                             numMoved);</span><br><span class="line">        elementData[--size] = <span class="keyword">null</span>; <span class="comment">// Let gc do its work</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清空集合</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 修改modCount</span></span><br><span class="line">        modCount++;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Let gc do its work</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">            elementData[i] = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从中，我们发现：无论是add()、remove()，还是clear()，只要涉及到修改集合中的元素个数时，都会改变modCount的值。</p><p>接下来，我们再系统的梳理一下fail-fast是怎么产生的。步骤如下：</p><ol><li>新建了一个ArrayList，名称为arrayList。</li><li>向arrayList中添加内容。</li><li>新建一个“线程a”，并在“线程a”中通过Iterator反复的读取arrayList的值。</li><li>新建一个“线程b”，在“线程b”中删除arrayList中的一个“节点A”。</li><li>这时，就会产生有趣的事件了。</li></ol><p>在某一时刻，“线程a”创建了arrayList的Iterator。此时“节点A”仍然存在于arrayList中，创建arrayList时，expectedModCount = modCount(假设它们此时的值为N)。<br>       在“线程a”在遍历arrayList过程中的某一时刻，“线程b”执行了，并且“线程b”删除了arrayList中的“节点A”。“线程b”执行remove()进行删除操作时，在remove()中执行了“modCount++”，此时modCount变成了N+1！<br>“线程a”接着遍历，当它执行到next()函数时，调用checkForComodification()比较“expectedModCount”和“modCount”的大小；而“expectedModCount=N”，“modCount=N+1”,这样，便抛出ConcurrentModificationException异常，产生fail-fast事件。</p><p>至此，我们就完全了解了fail-fast是如何产生的！<br>即，当多个线程对同一个集合进行操作的时候，某线程访问集合的过程中，该集合的内容被其他线程所改变(即其它线程通过add、remove、clear等方法，改变了modCount的值)；这时，就会抛出ConcurrentModificationException异常，产生fail-fast事件。</p><h1 id="5、解决fail-fast的原理"><a href="#5、解决fail-fast的原理" class="headerlink" title="5、解决fail-fast的原理"></a>5、解决fail-fast的原理</h1><p>上面，说明了“解决fail-fast机制的办法”，也知道了“fail-fast产生的根本原因”。接下来，我们再进一步谈谈java.util.concurrent包中是如何解决fail-fast事件的。<br>还是以和 ArrayList 对应的 CopyOnWriteArrayList 进行说明。我们先看看 CopyOnWriteArrayList 的源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.util.concurrent;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.*;</span><br><span class="line"><span class="keyword">import</span> sun.misc.Unsafe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyOnWriteArrayList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回集合对应的迭代器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> COWIterator&lt;E&gt;(getArray(), <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">COWIterator</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">ListIterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Object[] snapshot;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> cursor;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">COWIterator</span><span class="params">(Object[] elements, <span class="keyword">int</span> initialCursor)</span> </span>&#123;</span><br><span class="line">            cursor = initialCursor;</span><br><span class="line">            <span class="comment">// 新建COWIterator时，将集合中的元素保存到一个新的拷贝数组中。</span></span><br><span class="line">            <span class="comment">// 这样，当原始集合的数据改变，拷贝数据中的值也不会变化。</span></span><br><span class="line">            snapshot = elements;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> cursor &lt; snapshot.length;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasPrevious</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> cursor &gt; <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (! hasNext())</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">            <span class="keyword">return</span> (E) snapshot[cursor++];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> E <span class="title">previous</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (! hasPrevious())</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">            <span class="keyword">return</span> (E) snapshot[--cursor];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">nextIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> cursor;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">previousIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> cursor-<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从中，我们可以看出:</p><ol><li>和 ArrayList 继承于 AbstractList 不同，CopyOnWriteArrayList 没有继承于 AbstractList，它仅仅只是实现了 List 接口。</li><li>ArrayList 的 iterator() 函数返回的 Iterator 是在 AbstractList 中实现的；而 CopyOnWriteArrayList 是自己实现 Iterator。</li><li>ArrayList 的 Iterator 实现类中调用 next() 时，会“调用 checkForComodification() 比较 ‘expectedModCount’ 和 ‘modCount’ 的大小”；但是，CopyOnWriteArrayList 的 Iterator 实现类中，没有所谓的 checkForComodification()，更不会抛出 ConcurrentModificationException 异常！ </li></ol><h2 id="为什么-CopyOnWriteArrayList-可以不比较-modCount-也能保证数据一致性？"><a href="#为什么-CopyOnWriteArrayList-可以不比较-modCount-也能保证数据一致性？" class="headerlink" title="为什么 CopyOnWriteArrayList 可以不比较 modCount 也能保证数据一致性？"></a>为什么 CopyOnWriteArrayList 可以不比较 modCount 也能保证数据一致性？</h2><p>因为 getArray() 返回的 array 的类型是 volatile 的（强制内存一致性）</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1、fail-fast简介&quot;&gt;&lt;a href=&quot;#1、fail-fast简介&quot; class=&quot;headerlink&quot; title=&quot;1、fail-fast简介&quot;&gt;&lt;/a&gt;1、fail-fast简介&lt;/h1&gt;&lt;p&gt;fail-fast 机制是 Java 集合 (Collection) 中的一种错误机制。当多个线程对同一个集合的内容进行操作时，就可能会产生 fail-fast 事件。&lt;/p&gt;
&lt;p&gt;例如：当某一个线程 A 通过 iterator 去遍历某集合的过程中，若该集合的内容被其他线程所改变了；那么线程A访问集合时，就会抛出 ConcurrentModificationException 异常，产生 fail-fast 事件。&lt;/p&gt;
&lt;p&gt;在详细介绍  fail-fast机制的原理之前，先通过一个示例来认识 fail-fast。&lt;br&gt;
    
    </summary>
    
      <category term="Java 集合" scheme="http://cuijing.me/categories/Java-%E9%9B%86%E5%90%88/"/>
    
    
      <category term="Java" scheme="http://cuijing.me/tags/Java/"/>
    
      <category term="集合框架" scheme="http://cuijing.me/tags/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Fail-Fast" scheme="http://cuijing.me/tags/Fail-Fast/"/>
    
  </entry>
  
  <entry>
    <title>集合框架之 ArrayList</title>
    <link href="http://cuijing.me/2015/04/09/Java/8-Collection-Map/3-ArrayList/"/>
    <id>http://cuijing.me/2015/04/09/Java/8-Collection-Map/3-ArrayList/</id>
    <published>2015-04-09T00:30:00.000Z</published>
    <updated>2016-05-02T11:30:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ArrayList-简介"><a href="#ArrayList-简介" class="headerlink" title="ArrayList 简介"></a>ArrayList 简介</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br><span class="line"><span class="class"></span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>ArrayList 是一个数组队列，相当于动态数组。与 Java 中的数组相比，它的容量能动态增长。它继承于 AbstractList，实现了 <code>List, RandomAccess, Cloneable, java.io.Serializable</code> 这些接口。<br><a id="more"></a><br>ArrayList 继承了 <code>AbstractList</code>，实现了 List 接口。它是一个数组队列，提供了相关的添加、删除、修改、遍历等功能。</p><p>ArrayList 实现了 <code>RandmoAccess</code> 接口，即提供了随机访问功能。RandmoAccess 是 java 中用来被 List 实现，为 List 提供快速访问功能的。在 ArrayList 中，我们即可以通过元素的序号快速获取元素对象；这就是快速随机访问。稍后，我们会比较 List 的“快速随机访问”和“通过Iterator迭代器访问”的效率。</p><p>ArrayList 实现了 <code>Cloneable</code> 接口，即覆盖了函数 clone()，能被克隆。</p><p>ArrayList 实现 <code>java.io.Serializable</code> 接口，这意味着ArrayList支持序列化，能通过序列化去传输。</p><p>和 Vector 不同，<strong>ArrayList中的操作不是线程安全的！</strong>所以，建议在单线程中才使用 ArrayList，而在多线程中可以选择 Vector 或者 CopyOnWriteArrayList。</p><h1 id="ArrayList-构造函数"><a href="#ArrayList-构造函数" class="headerlink" title="ArrayList 构造函数"></a>ArrayList 构造函数</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认构造函数</span></span><br><span class="line">ArrayList()</span><br><span class="line"></span><br><span class="line"><span class="comment">// capacity 是 ArrayList 的默认容量大小。当由于增加数据导致容量不足时，容量会添加上一次容量大小的一半。</span></span><br><span class="line">ArrayList(<span class="keyword">int</span> capacity)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个包含 collection 的ArrayList</span></span><br><span class="line">ArrayList(Collection&lt;? extends E&gt; collection)</span><br></pre></td></tr></table></figure><h1 id="ArrayList的API"><a href="#ArrayList的API" class="headerlink" title="ArrayList的API"></a>ArrayList的API</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Collection 中定义的API</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span>             <span class="title">add</span><span class="params">(E object)</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span>             <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; collection)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span>                <span class="title">clear</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span>             <span class="title">contains</span><span class="params">(Object object)</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span>             <span class="title">containsAll</span><span class="params">(Collection&lt;?&gt; collection)</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span>             <span class="title">equals</span><span class="params">(Object object)</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span>                 <span class="title">hashCode</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span>             <span class="title">isEmpty</span><span class="params">()</span></span></span><br><span class="line"><span class="function">Iterator&lt;E&gt;         <span class="title">iterator</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span>             <span class="title">remove</span><span class="params">(Object object)</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span>             <span class="title">removeAll</span><span class="params">(Collection&lt;?&gt; collection)</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span>             <span class="title">retainAll</span><span class="params">(Collection&lt;?&gt; collection)</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span>                 <span class="title">size</span><span class="params">()</span></span></span><br><span class="line"><span class="function">&lt;T&gt; T[]             <span class="title">toArray</span><span class="params">(T[] array)</span></span></span><br><span class="line"><span class="function">Object[]            <span class="title">toArray</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// AbstractCollection中定义的API</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span>                <span class="title">add</span><span class="params">(<span class="keyword">int</span> location, E object)</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span>             <span class="title">addAll</span><span class="params">(<span class="keyword">int</span> location, Collection&lt;? extends E&gt; collection)</span></span></span><br><span class="line"><span class="function">E                   <span class="title">get</span><span class="params">(<span class="keyword">int</span> location)</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span>                 <span class="title">indexOf</span><span class="params">(Object object)</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span>                 <span class="title">lastIndexOf</span><span class="params">(Object object)</span></span></span><br><span class="line"><span class="function">ListIterator&lt;E&gt;     <span class="title">listIterator</span><span class="params">(<span class="keyword">int</span> location)</span></span></span><br><span class="line"><span class="function">ListIterator&lt;E&gt;     <span class="title">listIterator</span><span class="params">()</span></span></span><br><span class="line"><span class="function">E                   <span class="title">remove</span><span class="params">(<span class="keyword">int</span> location)</span></span></span><br><span class="line"><span class="function">E                   <span class="title">set</span><span class="params">(<span class="keyword">int</span> location, E object)</span></span></span><br><span class="line"><span class="function">List&lt;E&gt;             <span class="title">subList</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// ArrayList新增的API</span></span></span><br><span class="line"><span class="function">Object               <span class="title">clone</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span>                 <span class="title">ensureCapacity</span><span class="params">(<span class="keyword">int</span> minimumCapacity)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span>                 <span class="title">trimToSize</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span>                 <span class="title">removeRange</span><span class="params">(<span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex)</span></span></span><br></pre></td></tr></table></figure><h2 id="ArrayList数据结构"><a href="#ArrayList数据结构" class="headerlink" title="ArrayList数据结构"></a>ArrayList数据结构</h2><p>ArrayList的继承关系</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">java.lang.Object</span><br><span class="line">   |___    java.util.AbstractCollection&lt;E&gt;</span><br><span class="line">         |___    java.util.AbstractList&lt;E&gt;</span><br><span class="line">               |___     java.util.ArrayList&lt;E&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>ArrayList 与 Collection 关系如下图：</p><p><img src="http://oov0wb0gl.bkt.clouddn.com/2017-06-06-14954399703939.jpg" alt=""></p><p>ArrayList 包含了两个重要的对象：elementData 和 size。</p><ol><li><p>elementData 是” Object[] 类型的数组”，它保存了添加到ArrayList中的元素。实际上，elementData 是个动态数组，我们能通过构造函数 <code>ArrayList(int initialCapacity)</code> 来执行它的初始容量为 initialCapacity；如果通过不含参数的构造函数 ArrayList() 来创建 ArrayList，则 elementData 的容量默认是10。elementData 数组的大小会根据 ArrayList 容量的增长而动态的增长，具体的增长方式，请参考源码分析中的 ensureCapacity() 函数。</p></li><li><p>size 则是动态数组的实际大小。</p></li></ol><h1 id="ArrayList源码解析-基于JDK1-6-0-45"><a href="#ArrayList源码解析-基于JDK1-6-0-45" class="headerlink" title="ArrayList源码解析(基于JDK1.6.0_45)"></a>ArrayList源码解析(基于JDK1.6.0_45)</h1><p>为了更了解 ArrayList 的原理，下面对 ArrayList 源码代码作出分析。ArrayList 是通过数组实现的，源码比较容易理解。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// 序列版本号</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">8683452581122892189L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保存ArrayList中数据的数组</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> Object[] elementData;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ArrayList中实际数据的数量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ArrayList带容量大小的构造函数。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal Capacity: "</span>+</span><br><span class="line">                                               initialCapacity);</span><br><span class="line">        <span class="comment">// 新建一个数组</span></span><br><span class="line">        <span class="keyword">this</span>.elementData = <span class="keyword">new</span> Object[initialCapacity];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ArrayList构造函数。默认容量是10。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个包含collection的ArrayList</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">        elementData = c.toArray();</span><br><span class="line">        size = elementData.length;</span><br><span class="line">        <span class="comment">// c.toArray might (incorrectly) not return Object[] (see 6260652)</span></span><br><span class="line">        <span class="keyword">if</span> (elementData.getClass() != Object[].class)</span><br><span class="line">            elementData = Arrays.copyOf(elementData, size, Object[].class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将当前容量值设为 =实际元素个数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">trimToSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">        <span class="keyword">if</span> (size &lt; oldCapacity) &#123;</span><br><span class="line">            elementData = Arrays.copyOf(elementData, size);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 确定 ArrarList 的容量。</span></span><br><span class="line">    <span class="comment">// 若ArrayList的容量不足以容纳当前的全部元素，设置 新的容量=“(原始容量x3)/2 + 1”</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ensureCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 将“修改统计数”+1</span></span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">        <span class="comment">// 若当前容量不足以容纳当前的元素个数，设置 新的容量=“(原始容量x3)/2 + 1”</span></span><br><span class="line">        <span class="keyword">if</span> (minCapacity &gt; oldCapacity) &#123;</span><br><span class="line">            Object oldData[] = elementData;</span><br><span class="line">            <span class="keyword">int</span> newCapacity = (oldCapacity * <span class="number">3</span>)/<span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (newCapacity &lt; minCapacity)</span><br><span class="line">                newCapacity = minCapacity;</span><br><span class="line">            elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加元素e</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 确定ArrayList的容量大小</span></span><br><span class="line">        ensureCapacity(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">        <span class="comment">// 添加e到ArrayList中</span></span><br><span class="line">        elementData[size++] = e;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回ArrayList的实际大小</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回ArrayList是否包含Object(o)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> indexOf(o) &gt;= <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回ArrayList是否为空</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 正向查找，返回元素的索引值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">            <span class="keyword">if</span> (elementData[i]==<span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">            <span class="keyword">if</span> (o.equals(elementData[i]))</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 反向查找(从数组末尾向开始查找)，返回元素(o)的索引值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lastIndexOf</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = size-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">            <span class="keyword">if</span> (elementData[i]==<span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = size-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">            <span class="keyword">if</span> (o.equals(elementData[i]))</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回ArrayList的Object数组</span></span><br><span class="line">    <span class="keyword">public</span> Object[] toArray() &#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.copyOf(elementData, size);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回ArrayList的模板数组。所谓模板数组，即可以将T设为任意的数据类型</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T[] toArray(T[] a) &#123;</span><br><span class="line">        <span class="comment">// 若数组a的大小 &lt; ArrayList的元素个数；</span></span><br><span class="line">        <span class="comment">// 则新建一个T[]数组，数组大小是“ArrayList的元素个数”，并将“ArrayList”全部拷贝到新数组中</span></span><br><span class="line">        <span class="keyword">if</span> (a.length &lt; size)</span><br><span class="line">            <span class="keyword">return</span> (T[]) Arrays.copyOf(elementData, size, a.getClass());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 若数组a的大小 &gt;= ArrayList的元素个数；</span></span><br><span class="line">        <span class="comment">// 则将ArrayList的全部元素都拷贝到数组a中。</span></span><br><span class="line">        System.arraycopy(elementData, <span class="number">0</span>, a, <span class="number">0</span>, size);</span><br><span class="line">        <span class="keyword">if</span> (a.length &gt; size)</span><br><span class="line">            a[size] = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取index位置的元素值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        RangeCheck(index);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (E) elementData[index];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置index位置的值为element</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">        RangeCheck(index);</span><br><span class="line"></span><br><span class="line">        E oldValue = (E) elementData[index];</span><br><span class="line">        elementData[index] = element;</span><br><span class="line">        <span class="keyword">return</span> oldValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将e添加到ArrayList中</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        ensureCapacity(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">        elementData[size++] = e;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将e添加到ArrayList的指定位置</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt; size || index &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(</span><br><span class="line">            <span class="string">"Index: "</span>+index+<span class="string">", Size: "</span>+size);</span><br><span class="line"></span><br><span class="line">        ensureCapacity(size+<span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">        System.arraycopy(elementData, index, elementData, index + <span class="number">1</span>,</span><br><span class="line">             size - index);</span><br><span class="line">        elementData[index] = element;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除ArrayList指定位置的元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        RangeCheck(index);</span><br><span class="line"></span><br><span class="line">        modCount++;</span><br><span class="line">        E oldValue = (E) elementData[index];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">            System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line">                 numMoved);</span><br><span class="line">        elementData[--size] = <span class="keyword">null</span>; <span class="comment">// Let gc do its work</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> oldValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除ArrayList的指定元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">            <span class="keyword">if</span> (elementData[index] == <span class="keyword">null</span>) &#123;</span><br><span class="line">                fastRemove(index);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">            <span class="keyword">if</span> (o.equals(elementData[index])) &#123;</span><br><span class="line">                fastRemove(index);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 快速删除第index个元素</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">fastRemove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 从"index+1"开始，用后面的元素替换前面的元素。</span></span><br><span class="line">        <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">            System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line">                             numMoved);</span><br><span class="line">        <span class="comment">// 将最后一个元素设为null</span></span><br><span class="line">        elementData[--size] = <span class="keyword">null</span>; <span class="comment">// Let gc do its work</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">            <span class="keyword">if</span> (elementData[index] == <span class="keyword">null</span>) &#123;</span><br><span class="line">                fastRemove(index);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 便利ArrayList，找到“元素o”，则删除，并返回true。</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">            <span class="keyword">if</span> (o.equals(elementData[index])) &#123;</span><br><span class="line">                fastRemove(index);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清空ArrayList，将全部的元素设为null</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        modCount++;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">            elementData[i] = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将集合c追加到ArrayList中</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">        Object[] a = c.toArray();</span><br><span class="line">        <span class="keyword">int</span> numNew = a.length;</span><br><span class="line">        ensureCapacity(size + numNew);  <span class="comment">// Increments modCount</span></span><br><span class="line">        System.arraycopy(a, <span class="number">0</span>, elementData, size, numNew);</span><br><span class="line">        size += numNew;</span><br><span class="line">        <span class="keyword">return</span> numNew != <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从index位置开始，将集合c添加到ArrayList</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(<span class="keyword">int</span> index, Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt; size || index &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(</span><br><span class="line">            <span class="string">"Index: "</span> + index + <span class="string">", Size: "</span> + size);</span><br><span class="line"></span><br><span class="line">        Object[] a = c.toArray();</span><br><span class="line">        <span class="keyword">int</span> numNew = a.length;</span><br><span class="line">        ensureCapacity(size + numNew);  <span class="comment">// Increments modCount</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> numMoved = size - index;</span><br><span class="line">        <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">            System.arraycopy(elementData, index, elementData, index + numNew,</span><br><span class="line">                 numMoved);</span><br><span class="line"></span><br><span class="line">        System.arraycopy(a, <span class="number">0</span>, elementData, index, numNew);</span><br><span class="line">        size += numNew;</span><br><span class="line">        <span class="keyword">return</span> numNew != <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除fromIndex到toIndex之间的全部元素。</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">removeRange</span><span class="params">(<span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex)</span> </span>&#123;</span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="keyword">int</span> numMoved = size - toIndex;</span><br><span class="line">            System.arraycopy(elementData, toIndex, elementData, fromIndex,</span><br><span class="line">                             numMoved);</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// Let gc do its work</span></span><br><span class="line">        <span class="keyword">int</span> newSize = size - (toIndex-fromIndex);</span><br><span class="line">        <span class="keyword">while</span> (size != newSize)</span><br><span class="line">            elementData[--size] = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">RangeCheck</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= size)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(</span><br><span class="line">            <span class="string">"Index: "</span>+index+<span class="string">", Size: "</span>+size);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 克隆函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ArrayList&lt;E&gt; v = (ArrayList&lt;E&gt;) <span class="keyword">super</span>.clone();</span><br><span class="line">            <span class="comment">// 将当前ArrayList的全部元素拷贝到v中</span></span><br><span class="line">            v.elementData = Arrays.copyOf(elementData, size);</span><br><span class="line">            v.modCount = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span> v;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">            <span class="comment">// this shouldn't happen, since we are Cloneable</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InternalError();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// java.io.Serializable的写入函数</span></span><br><span class="line">    <span class="comment">// 将ArrayList的“容量，所有的元素值”都写入到输出流中</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeObject</span><span class="params">(java.io.ObjectOutputStream s)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> java.io.IOException</span>&#123;</span><br><span class="line">        <span class="comment">// Write out element count, and any hidden stuff</span></span><br><span class="line">        <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line">        s.defaultWriteObject();</span><br><span class="line">    </span><br><span class="line">            <span class="comment">// 写入“数组的容量”</span></span><br><span class="line">            s.writeInt(elementData.length);</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 写入“数组的每一个元素”</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;size; i++)</span><br><span class="line">                s.writeObject(elementData[i]);</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span> (modCount != expectedModCount) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// java.io.Serializable的读取函数：根据写入方式读出</span></span><br><span class="line">    <span class="comment">// 先将ArrayList的“容量”读出，然后将“所有的元素值”读出</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">// Read in size, and any hidden stuff</span></span><br><span class="line">        s.defaultReadObject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从输入流中读取ArrayList的“容量”</span></span><br><span class="line">        <span class="keyword">int</span> arrayLength = s.readInt();</span><br><span class="line">        Object[] a = elementData = <span class="keyword">new</span> Object[arrayLength];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从输入流中将“所有的元素值”读出</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;size; i++)</span><br><span class="line">            a[i] = s.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><ol><li>ArrayList 实际上是通过一个数组去保存数据的。当我们构造 ArrayList 时；若使用默认构造函数，则ArrayList 的默认容量大小是10。</li><li>当 ArrayList 容量不足以容纳全部元素时，ArrayList 会重新设置容量：新的容量=“(原始容量x3)/2 + 1”。</li><li>ArrayList 的克隆函数，即是将全部元素克隆到一个数组中。</li><li>ArrayList 实现 java.io.Serializable 的方式。当写入到输出流时，先写入“容量”，再依次写入“每一个元素”；当读出输入流时，先读取“容量”，再依次读取“每一个元素”。</li></ol><h1 id="ArrayList遍历方式"><a href="#ArrayList遍历方式" class="headerlink" title="ArrayList遍历方式"></a>ArrayList遍历方式</h1><p>ArrayList支持3种遍历方式</p><h2 id="第一种，通过迭代器遍历。即通过Iterator去遍历。"><a href="#第一种，通过迭代器遍历。即通过Iterator去遍历。" class="headerlink" title="第一种，通过迭代器遍历。即通过Iterator去遍历。"></a>第一种，通过迭代器遍历。即通过Iterator去遍历。</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Integer value = <span class="keyword">null</span>;</span><br><span class="line">Iterator iter = list.iterator();</span><br><span class="line"><span class="keyword">while</span> (iter.hasNext()) &#123;</span><br><span class="line">    value = (Integer)iter.next();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第二种，随机访问，通过索引值去遍历。"><a href="#第二种，随机访问，通过索引值去遍历。" class="headerlink" title="第二种，随机访问，通过索引值去遍历。"></a>第二种，随机访问，通过索引值去遍历。</h2><p>由于ArrayList实现了RandomAccess接口，它支持通过索引值去随机访问元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Integer value = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">int</span> size = list.size();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;size; i++) &#123;</span><br><span class="line">    value = (Integer)list.get(i);        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第三种，for循环遍历。如下："><a href="#第三种，for循环遍历。如下：" class="headerlink" title="第三种，for循环遍历。如下："></a>第三种，for循环遍历。如下：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Integer value = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">for</span> (Integer integ:list) &#123;</span><br><span class="line">    value = integ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面通过一个实例，比较这3种方式的效率，实例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desc</span> ArrayList遍历方式和效率的测试程序。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListRandomAccessTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">100000</span>; i++)</span><br><span class="line">            list.add(i);</span><br><span class="line">        <span class="comment">//isRandomAccessSupported(list);</span></span><br><span class="line">        iteratorThroughRandomAccess(list) ;</span><br><span class="line">        iteratorThroughIterator(list) ;</span><br><span class="line">        iteratorThroughFor2(list) ;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">isRandomAccessSupported</span><span class="params">(List list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (list <span class="keyword">instanceof</span> RandomAccess) &#123;</span><br><span class="line">            System.out.println(<span class="string">"RandomAccess implemented!"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"RandomAccess not implemented!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">iteratorThroughRandomAccess</span><span class="params">(List list)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> startTime;</span><br><span class="line">        <span class="keyword">long</span> endTime;</span><br><span class="line">        startTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;list.size(); i++) &#123;</span><br><span class="line">            list.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        endTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">long</span> interval = endTime - startTime;</span><br><span class="line">        System.out.println(<span class="string">"iteratorThroughRandomAccess："</span> + interval+<span class="string">" ms"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">iteratorThroughIterator</span><span class="params">(List list)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> startTime;</span><br><span class="line">        <span class="keyword">long</span> endTime;</span><br><span class="line">        startTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span>(Iterator iter = list.iterator(); iter.hasNext(); ) &#123;</span><br><span class="line">            iter.next();</span><br><span class="line">        &#125;</span><br><span class="line">        endTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">long</span> interval = endTime - startTime;</span><br><span class="line">        System.out.println(<span class="string">"iteratorThroughIterator："</span> + interval+<span class="string">" ms"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">iteratorThroughFor2</span><span class="params">(List list)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> startTime;</span><br><span class="line">        <span class="keyword">long</span> endTime;</span><br><span class="line">        startTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span>(Object obj:list)</span><br><span class="line">            ;</span><br><span class="line">        endTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">long</span> interval = endTime - startTime;</span><br><span class="line">        System.out.println(<span class="string">"iteratorThroughFor2："</span> + interval+<span class="string">" ms"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">iteratorThroughRandomAccess：3 ms</span><br><span class="line">iteratorThroughIterator：8 ms</span><br><span class="line">iteratorThroughFor2：5 ms</span><br></pre></td></tr></table></figure><p>由此可见，遍历ArrayList时，使用随机访问(即，通过索引序号访问)效率最高，而使用迭代器的效率最低！</p><h1 id="toArray-异常"><a href="#toArray-异常" class="headerlink" title="toArray() 异常"></a>toArray() 异常</h1><p>当我们调用 ArrayList 中的 toArray()，可能遇到过出 “java.lang.ClassCastException” 异常的情况。下面我们说说这是怎么回事。</p><p>ArrayList 提供了2个 toArray() 函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Object[] toArray()</span><br><span class="line">&lt;T&gt; T[] toArray(T[] contents)</span><br></pre></td></tr></table></figure><p>调用 toArray() 函数会抛出“java.lang.ClassCastException”异常，但是调用 toArray(T[] contents) 能正常返回 T[]。</p><p>toArray() 会抛出异常是因为 toArray() 返回的是 Object[] 数组，将 Object[] 转换为其它类型(如将Object[]转换为的Integer[])则会抛出“java.lang.ClassCastException”异常，因为Java不支持向下转型。具体的可以参考前面ArrayList.java的源码介绍部分的toArray()。</p><p>解决该问题的办法是调用 <t> T[] toArray(T[] contents) ， 而不是 Object[] toArray()。</t></p><p>调用 toArray(T[] contents) 返回T[]的可以通过以下几种方式实现。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// toArray(T[] contents)调用方式一</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Integer[] vectorToArray1(ArrayList&lt;Integer&gt; v) &#123;</span><br><span class="line">    Integer[] newText = <span class="keyword">new</span> Integer[v.size()];</span><br><span class="line">    v.toArray(newText);</span><br><span class="line">    <span class="keyword">return</span> newText;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// toArray(T[] contents)调用方式二。最常用！</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Integer[] vectorToArray2(ArrayList&lt;Integer&gt; v) &#123;</span><br><span class="line">    Integer[] newText = (Integer[])v.toArray(<span class="keyword">new</span> Integer[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">return</span> newText;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// toArray(T[] contents)调用方式三</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Integer[] vectorToArray3(ArrayList&lt;Integer&gt; v) &#123;</span><br><span class="line">    Integer[] newText = <span class="keyword">new</span> Integer[v.size()];</span><br><span class="line">    Integer[] newStrings = (Integer[])v.toArray(newText);</span><br><span class="line">    <span class="keyword">return</span> newStrings;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ArrayList-简介&quot;&gt;&lt;a href=&quot;#ArrayList-简介&quot; class=&quot;headerlink&quot; title=&quot;ArrayList 简介&quot;&gt;&lt;/a&gt;ArrayList 简介&lt;/h1&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;E&lt;/span&gt;&amp;gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;AbstractList&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;E&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;List&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;E&lt;/span&gt;&amp;gt;, &lt;span class=&quot;title&quot;&gt;RandomAccess&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;Cloneable&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;java&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;io&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Serializable&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;ArrayList 是一个数组队列，相当于动态数组。与 Java 中的数组相比，它的容量能动态增长。它继承于 AbstractList，实现了 &lt;code&gt;List, RandomAccess, Cloneable, java.io.Serializable&lt;/code&gt; 这些接口。&lt;br&gt;
    
    </summary>
    
      <category term="Java 集合" scheme="http://cuijing.me/categories/Java-%E9%9B%86%E5%90%88/"/>
    
    
      <category term="Java" scheme="http://cuijing.me/tags/Java/"/>
    
      <category term="集合框架" scheme="http://cuijing.me/tags/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/"/>
    
      <category term="ArrayList" scheme="http://cuijing.me/tags/ArrayList/"/>
    
  </entry>
  
  <entry>
    <title>集合框架之集合框架概览</title>
    <link href="http://cuijing.me/2015/04/08/Java/8-Collection-Map/1-%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E6%A6%82%E8%A7%88/"/>
    <id>http://cuijing.me/2015/04/08/Java/8-Collection-Map/1-集合框架概览/</id>
    <published>2015-04-08T00:30:00.000Z</published>
    <updated>2016-05-02T12:10:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="集合与数组"><a href="#集合与数组" class="headerlink" title="集合与数组"></a>集合与数组</h1><h2 id="都是对象的存储："><a href="#都是对象的存储：" class="headerlink" title="都是对象的存储："></a>都是对象的存储：</h2><ol><li>数组（基本数据类型  &amp; 引用数据类型）  </li><li>集合（引用数据类型）</li></ol><p>引用数据类型数组的元素是对象引用，初值为空，必须实例化；而基本类型数组元素都有默认初值。<br><a id="more"></a></p><h2 id="数组存储数据的弊端："><a href="#数组存储数据的弊端：" class="headerlink" title="数组存储数据的弊端："></a>数组存储数据的弊端：</h2><ol><li>一旦创建，其长度不可变。</li><li>真实的数组存放的对象的个数是不可知。</li></ol><h2 id="为什么集合不能存储基本数据类型？"><a href="#为什么集合不能存储基本数据类型？" class="headerlink" title="为什么集合不能存储基本数据类型？"></a>为什么集合不能存储基本数据类型？</h2><p>集合中存放的可都是对象的引用，实际内容都在堆上面或者方法区里面，而基本数据类型都是在栈上分配空间的，随时就被收回。但通过自动包装类就可以把基本类型转为对象类型，存放引用就解决了这个问题。</p><h1 id="总体框架"><a href="#总体框架" class="headerlink" title="总体框架"></a>总体框架</h1><p><img src="http://oov0wb0gl.bkt.clouddn.com/2017-06-06-14954338994489.jpg" alt=""></p><h2 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h2><p>是一个高度抽象出来的接口，包含了集合的基本操作和属性。Collection 包含了 List 和 Set 两大分支。</p><ol><li><p>List是一个有序的队列，每一个元素都有它的索引。第一个元素的索引值是0。<br> List的实现类有 LinkedList, ArrayList, Vector, Stack。</p></li><li><p>Set 是一个不允许有重复元素的集合。<br> Set 的实现类有 HastSet 和 TreeSet 。HashSet 依赖于 HashMap，它实际上是通过 HashMap 实现的；TreeSet 依赖于 TreeMap，它实际上是通过 TreeMap 实现的。</p></li></ol><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p>是一个映射接口，即 key-value 键值对。Map 中的每一个元素包含 “一个key” 和 “key对应的value”。</p><p>AbstractMap 是个抽象类，它实现了 Map 接口中的大部分 API。而 HashMap，TreeMap，WeakHashMap都是继承于 AbstractMap。</p><p>Hashtable 虽然继承于 Dictionary ，但它实现了 Map 接口。</p><p>接下来，再看 Iterator。它是遍历集合的工具，即我们通常通过 Iterator 迭代器来遍历集合。我们说Collection 依赖于 Iterator，是因为 Collection 的实现类都要实现 iterator() 函数，返回一个 Iterator 对象。</p><p>ListIterator 是专门为遍历 List 而存在的。</p><p>再看 Enumeration，它是JDK 1.0引入的抽象类。作用和 Iterator 一样，也是遍历集合；但是 Enumeration 的功能要比 Iterator 少。在上面的框图中，Enumeration只能在 Hashtable, Vector, Stack 中使用。</p><p>Arrays 和 Collections。它们是操作数组、集合的两个工具类。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;集合与数组&quot;&gt;&lt;a href=&quot;#集合与数组&quot; class=&quot;headerlink&quot; title=&quot;集合与数组&quot;&gt;&lt;/a&gt;集合与数组&lt;/h1&gt;&lt;h2 id=&quot;都是对象的存储：&quot;&gt;&lt;a href=&quot;#都是对象的存储：&quot; class=&quot;headerlink&quot; title=&quot;都是对象的存储：&quot;&gt;&lt;/a&gt;都是对象的存储：&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;数组（基本数据类型  &amp;amp; 引用数据类型）  &lt;/li&gt;
&lt;li&gt;集合（引用数据类型）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;引用数据类型数组的元素是对象引用，初值为空，必须实例化；而基本类型数组元素都有默认初值。&lt;br&gt;
    
    </summary>
    
      <category term="Java 集合" scheme="http://cuijing.me/categories/Java-%E9%9B%86%E5%90%88/"/>
    
    
      <category term="Java" scheme="http://cuijing.me/tags/Java/"/>
    
      <category term="集合框架" scheme="http://cuijing.me/tags/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>集合框架之 Collection</title>
    <link href="http://cuijing.me/2015/04/08/Java/8-Collection-Map/2-Collection/"/>
    <id>http://cuijing.me/2015/04/08/Java/8-Collection-Map/2-Collection/</id>
    <published>2015-04-08T00:30:00.000Z</published>
    <updated>2016-05-02T11:59:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h1><p>Collection 框架类的关系图：</p><p><img src="http://oov0wb0gl.bkt.clouddn.com/2017-06-06-14954368188311.jpg" alt=""></p><p>Collection 是一个接口，它主要的两个分支是：List 和 Set。<br><a id="more"></a><br>List 和 Set 都是接口，它们继承于 Collection。List 是有序的队列，List 中可以有重复的元素；而 Set 是数学概念中的集合，Set 中没有重复元素！<br>List 和 Set 都有它们各自的实现类。</p><p>为了方便，我们抽象出了 AbstractCollection 抽象类，它实现了 Collection 中的绝大部分函数；这样，在Collection 的实现类中，我们就可以通过继承 AbstractCollection 省去重复编码。AbstractList 和AbstractSet 都继承于 AbstractCollection，具体的 List 实现类继承于 AbstractList，而 Set 的实现类则继承于 AbstractSet。</p><p>另外，Collection 中有一个 iterator() 函数，它的作用是返回一个 Iterator 接口。通常，我们通过 Iterator 迭代器来遍历集合。ListIterator 是 List 接口所特有的，在 List 接口中，通过 ListIterator() 返回一个 ListIterator 对象。</p><h2 id="1、Collection-接口简介"><a href="#1、Collection-接口简介" class="headerlink" title="1、Collection 接口简介"></a>1、Collection 接口简介</h2><p>Collection 定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Collection</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">Iterable</span>&lt;<span class="title">E</span>&gt; </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>它是一个接口，是高度抽象出来的集合，它包含了集合的基本操作：添加、删除、清空、遍历(读取)、是否为空、获取大小、是否保护某元素等等。</p><p>Collection 接口的所有子类（直接子类和间接子类）都必须实现2种构造函数：不带参数的构造函数和参数为 Collection 的构造函数。带参数的构造函数，可以用来转换 Collection 的类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JDK 1.8 Collection 的API</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span>                    <span class="title">add</span><span class="params">(E e)</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span>                    <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span>                    <span class="title">clear</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span>                    <span class="title">contains</span><span class="params">(Object o)</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span>                    <span class="title">containsAll</span><span class="params">(Collection&lt;?&gt; c)</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span>                    <span class="title">equals</span><span class="params">(Object o)</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span>                        <span class="title">hashCode</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span>                    <span class="title">isEmpty</span><span class="params">()</span></span></span><br><span class="line"><span class="function">Iterator&lt;E&gt;                <span class="title">iterator</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span>                    <span class="title">remove</span><span class="params">(Object o)</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span>                    <span class="title">removeAll</span><span class="params">(Collection&lt;?&gt; c)</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span>                    <span class="title">retainAll</span><span class="params">(Collection&lt;?&gt; c)</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span>                        <span class="title">size</span><span class="params">()</span></span></span><br><span class="line"><span class="function">Object[]                <span class="title">toArray</span><span class="params">()</span></span></span><br><span class="line"><span class="function">&lt;T&gt; T[]                    <span class="title">toArray</span><span class="params">(T[] a)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 相对 JDK 1.6 新增的 API </span></span></span><br><span class="line"><span class="function"><span class="keyword">default</span> Stream&lt;E&gt;        <span class="title">parallelStream</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">boolean</span>            <span class="title">removeIf</span><span class="params">(Predicate&lt;? <span class="keyword">super</span> E&gt; filter)</span></span></span><br><span class="line"><span class="function"><span class="keyword">default</span> Spliterator&lt;E&gt;    <span class="title">spliterator</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">default</span> Stream&lt;E&gt;        <span class="title">stream</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><h2 id="2、List-接口简介"><a href="#2、List-接口简介" class="headerlink" title="2、List 接口简介"></a>2、List 接口简介</h2><p>List 的定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">Collection</span>&lt;<span class="title">E</span>&gt; </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>List 是一个继承于 Collection 的接口，即 List 是集合中的一种。List 是有序的队列，List 中的每一个元素都有一个索引；第一个元素的索引值是0，往后的元素的索引值依次+1。和 Set 不同，List 中允许有重复的元素。</p><p>List 继承于 Collection 接口，它包含了 Collection 中的全部函数接口；由于 List 是有序队列，它也额外的有自己的API接口。主要有“添加、删除、获取、修改指定位置的元素”、“获取 List 中的子队列”等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Collection的API</span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">boolean</span>         <span class="title">add</span><span class="params">(E object)</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">boolean</span>         <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; collection)</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span>            <span class="title">clear</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">boolean</span>         <span class="title">contains</span><span class="params">(Object object)</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">boolean</span>         <span class="title">containsAll</span><span class="params">(Collection&lt;?&gt; collection)</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">boolean</span>         <span class="title">equals</span><span class="params">(Object object)</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">int</span>             <span class="title">hashCode</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">boolean</span>         <span class="title">isEmpty</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> Iterator&lt;E&gt;     <span class="title">iterator</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">boolean</span>         <span class="title">remove</span><span class="params">(Object object)</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">boolean</span>         <span class="title">removeAll</span><span class="params">(Collection&lt;?&gt; collection)</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">boolean</span>         <span class="title">retainAll</span><span class="params">(Collection&lt;?&gt; collection)</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">int</span>             <span class="title">size</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> &lt;T&gt; T[]         <span class="title">toArray</span><span class="params">(T[] array)</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> Object[]        <span class="title">toArray</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 相比与Collection，List新增的API：</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span>                <span class="title">add</span><span class="params">(<span class="keyword">int</span> location, E object)</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">boolean</span>             <span class="title">addAll</span><span class="params">(<span class="keyword">int</span> location, Collection&lt;? extends E&gt; collection)</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> E                   <span class="title">get</span><span class="params">(<span class="keyword">int</span> location)</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">int</span>                 <span class="title">indexOf</span><span class="params">(Object object)</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">int</span>                 <span class="title">lastIndexOf</span><span class="params">(Object object)</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> ListIterator&lt;E&gt;     <span class="title">listIterator</span><span class="params">(<span class="keyword">int</span> location)</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> ListIterator&lt;E&gt;     <span class="title">listIterator</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> E                   <span class="title">remove</span><span class="params">(<span class="keyword">int</span> location)</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> E                   <span class="title">set</span><span class="params">(<span class="keyword">int</span> location, E object)</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> List&lt;E&gt;             <span class="title">subList</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span></span></span><br></pre></td></tr></table></figure><h2 id="3、Set-接口简介"><a href="#3、Set-接口简介" class="headerlink" title="3、Set 接口简介"></a>3、Set 接口简介</h2><p>Set的定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Set</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">Collection</span>&lt;<span class="title">E</span>&gt; </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>Set 是一个继承于 Collection 的接口，即 Set 也是集合中的一种。Set 是没有重复元素的集合。</p><p>关于 API 方面。Set 的 API 和 Collection 完全一样。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Set 的API</span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">boolean</span>         <span class="title">add</span><span class="params">(E object)</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">boolean</span>         <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; collection)</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span>             <span class="title">clear</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">boolean</span>         <span class="title">contains</span><span class="params">(Object object)</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">boolean</span>         <span class="title">containsAll</span><span class="params">(Collection&lt;?&gt; collection)</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">boolean</span>         <span class="title">equals</span><span class="params">(Object object)</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">int</span>             <span class="title">hashCode</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">boolean</span>         <span class="title">isEmpty</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> Iterator&lt;E&gt;     <span class="title">iterator</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">boolean</span>         <span class="title">remove</span><span class="params">(Object object)</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">boolean</span>         <span class="title">removeAll</span><span class="params">(Collection&lt;?&gt; collection)</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">boolean</span>         <span class="title">retainAll</span><span class="params">(Collection&lt;?&gt; collection)</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">int</span>             <span class="title">size</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> &lt;T&gt; T[]         <span class="title">toArray</span><span class="params">(T[] array)</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> Object[]         <span class="title">toArray</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><h2 id="4、AbstractCollection-抽象类"><a href="#4、AbstractCollection-抽象类" class="headerlink" title="4、AbstractCollection 抽象类"></a>4、AbstractCollection 抽象类</h2><p>AbstractCollection 的定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractCollection</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">Collection</span>&lt;<span class="title">E</span>&gt; </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>AbstractCollection 是一个抽象类，它实现了 Collection 中除iterator()和size()之外的函数。<br>AbstractCollection 的主要作用：它实现了 Collection 接口中的大部分函数。从而方便其它类实现 Collection，比如 ArrayList、LinkedList 等，它们这些类想要实现 Collection 接口，通过继承AbstractCollection 就已经实现了大部分的接口了。</p><h2 id="5、AbstractList-抽象类"><a href="#5、AbstractList-抽象类" class="headerlink" title="5、AbstractList 抽象类"></a>5、AbstractList 抽象类</h2><p>AbstractList 的定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractCollection</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt; </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>AbstractList 是一个继承于 AbstractCollection，并且实现 List 接口的抽象类。它实现了 List 中除 size()、get(int location) 之外的函数。<br>AbstractList 的主要作用：它实现了 List 接口中的大部分函数。从而方便其它类继承 List。<br>另外，和 AbstractCollection 相比，AbstractList 抽象类中，实现了 iterator() 接口。</p><h2 id="6、AbstractSet-抽象类"><a href="#6、AbstractSet-抽象类" class="headerlink" title="6、AbstractSet 抽象类"></a>6、AbstractSet 抽象类</h2><p>AbstractSet 的定义如下： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractSet</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractCollection</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">Set</span>&lt;<span class="title">E</span>&gt; </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>AbstractSet 是一个继承于 AbstractCollection，并且实现 Set 接口的抽象类。由于 Set 接口和 Collection 接口中的 API 完全一样，Set也就没有自己单独的API。和 AbstractCollection 一样，它实现了 List 中除iterator() 和 size() 之外的函数。</p><p>AbstractSet 的主要作用：它实现了 Set 接口中的大部分函数。从而方便其它类实现 Set 接口。</p><h2 id="7、Iterator-接口"><a href="#7、Iterator-接口" class="headerlink" title="7、Iterator 接口"></a>7、Iterator 接口</h2><p>Iterator 的定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>Iterator 是一个接口，它是集合的迭代器。集合可以通过 Iterator 去遍历集合中的元素。Iterator 提供的 API 接口，包括：是否存在下一个元素、获取下一个元素、删除当前元素。</p><p>注意：Iterator 遍历 Collection 时，是 fail-fast 机制的。即，当某一个线程A通过 iterator 去遍历某集合的过程中，若该集合的内容被其他线程所改变了；那么线程 A 访问集合时，就会抛出ConcurrentModificationException 异常，产生 fail-fast 事件。关于 fail-fast 的详细内容，我们会在后面专门进行说明。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Iterator的API</span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> E <span class="title">next</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><h2 id="8、ListIterator-接口"><a href="#8、ListIterator-接口" class="headerlink" title="8、ListIterator 接口"></a>8、ListIterator 接口</h2><p>ListIterator 定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ListIterator</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>ListIterator 是一个继承于 Iterator 的接口，它是队列迭代器。专门用于遍历 List，能提供向前/向后遍历。相比于 Iterator，它新增了添加、是否存在上一个元素、获取上一个元素等等 API 接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ListIterator 的API</span></span><br><span class="line"><span class="comment">// 继承于 Iterator 的接口</span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> E <span class="title">next</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">// 新增 API 接口</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E object)</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">hasPrevious</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">nextIndex</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> E <span class="title">previous</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">previousIndex</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(E object)</span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Collection&quot;&gt;&lt;a href=&quot;#Collection&quot; class=&quot;headerlink&quot; title=&quot;Collection&quot;&gt;&lt;/a&gt;Collection&lt;/h1&gt;&lt;p&gt;Collection 框架类的关系图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://oov0wb0gl.bkt.clouddn.com/2017-06-06-14954368188311.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Collection 是一个接口，它主要的两个分支是：List 和 Set。&lt;br&gt;
    
    </summary>
    
      <category term="Java 集合" scheme="http://cuijing.me/categories/Java-%E9%9B%86%E5%90%88/"/>
    
    
      <category term="Java" scheme="http://cuijing.me/tags/Java/"/>
    
      <category term="集合框架" scheme="http://cuijing.me/tags/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Collection" scheme="http://cuijing.me/tags/Collection/"/>
    
  </entry>
  
  <entry>
    <title>Java 网络编程</title>
    <link href="http://cuijing.me/2015/03/15/HTTP/3-Java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    <id>http://cuijing.me/2015/03/15/HTTP/3-Java网络编程/</id>
    <published>2015-03-15T00:30:00.000Z</published>
    <updated>2016-05-02T13:33:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="经典例子说明"><a href="#经典例子说明" class="headerlink" title="经典例子说明"></a>经典例子说明</h1><p>有一个夜店（ServerSocket）,你是嫖客(socket)，晚上6点夜店进入营业状态，夜店正在阻塞等客户，你一进来，夜店马上安排一个小姐（server.accept()的client）与你激情对接，你向小姐输出就是你调用（outputStream）, 你吸入小姐精华是你调用（inputStream）,你吸入小姐精华的时候得有小姐在向你输出（outputStream）.</p><p>Java最初是作为网络编程语言出现的，其对网络提供了高度的支持，使得客户端和服务器的沟通变成了现实，而在网络编程中，使用最多的就是Socket。像大家熟悉的QQ、MSN都使用了Socket相关的技术。下面就让我们一起揭开Socket的神秘面纱。<br><a id="more"></a></p><h1 id="一、网络基础知识（参考计算机网络）"><a href="#一、网络基础知识（参考计算机网络）" class="headerlink" title="一、网络基础知识（参考计算机网络）"></a>一、网络基础知识（参考计算机网络）</h1><h2 id="1、两台计算机间进行通讯需要以下三个条件："><a href="#1、两台计算机间进行通讯需要以下三个条件：" class="headerlink" title="1、两台计算机间进行通讯需要以下三个条件："></a>1、两台计算机间进行通讯需要以下三个条件：</h2><p>IP地址、协议、端口号</p><h2 id="2、TCP-IP协议："><a href="#2、TCP-IP协议：" class="headerlink" title="2、TCP/IP协议："></a>2、TCP/IP协议：</h2><p>是目前世界上应用最为广泛的协议，是以TCP和IP为基础的不同层次上多个协议的集合，也成TCP/IP协议族、或TCP/IP协议栈<br>TCP：Transmission Control Protocol 传输控制协议<br>IP：Internet Protocol 互联网协议</p><h2 id="3、TCP-IP-五层模型"><a href="#3、TCP-IP-五层模型" class="headerlink" title="3、TCP/IP  五层模型"></a>3、TCP/IP  五层模型</h2><p>应用层：HTTP、FTP、SMTP、Telnet等<br>传输层：TCP/IP 、UDP<br>网络层 : IP 、 ICMP<br>数据链路层：Mac 地址<br>物理层：网线、双绞线、网卡等</p><h2 id="4、IP地址"><a href="#4、IP地址" class="headerlink" title="4、IP地址"></a>4、IP地址</h2><p>为实现网络中不同计算机之间的通信，每台计算机都必须有一个唯一的标识—IP地址。 32位二进制</p><h2 id="5、端口"><a href="#5、端口" class="headerlink" title="5、端口"></a>5、端口</h2><p>区分一台主机的多个不同应用程序，端口号范围为0-65535，其中0-1023位为系统保留。<br>如：HTTP：80   FTP：21    Telnet：23<br>IP地址+端口号组成了所谓的Socket，Socket是网络上运行的程序之间双向通信链路的终结点，是TCP和UDP的基础</p><h2 id="6、Socket套接字："><a href="#6、Socket套接字：" class="headerlink" title="6、Socket套接字："></a>6、Socket套接字：</h2><p>网络上具有唯一标识的IP地址和端口组合在一起才能构成唯一能识别的标识符套接字。<br>Socket原理机制：<br>通信的两端都有Socket<br>网络通信其实就是Socket间的通信<br>数据在两个Socket间通过IO传输</p><h2 id="7、Java中的网络支持"><a href="#7、Java中的网络支持" class="headerlink" title="7、Java中的网络支持"></a>7、Java中的网络支持</h2><p>针对网络通信的不同层次，Java提供了不同的API，其提供的网络功能有四大类：<br>InetAddress:  用于标识网络上的硬件资源，主要是IP地址<br>URL：           统一资源定位符，通过URL可以直接读取或写入网络上的数据<br>Sockets：     使用TCP协议实现的网络通信Socket相关的类<br>Datagram :    使用UDP协议，将数据保存在用户数据报中，通过网络进行通信。</p><h1 id="二、InetAddress"><a href="#二、InetAddress" class="headerlink" title="二、InetAddress"></a>二、InetAddress</h1><p><code>InetAddress</code>类用于标识网络上的硬件资源，标识互联网协议(IP)地址。</p><p>该类没有构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取本机的InetAddress实例</span></span><br><span class="line">InetAddress address =InetAddress.getLocalHost();</span><br><span class="line">address.getHostName();              <span class="comment">//获取计算机名</span></span><br><span class="line">address.getHostAddress();           <span class="comment">//获取IP地址</span></span><br><span class="line"><span class="keyword">byte</span>[] bytes = address.getAddress();<span class="comment">//获取字节数组形式的IP地址,以点分隔的四部分</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取其他主机的InetAddress实例</span></span><br><span class="line">InetAddress address2 = InetAddress.getByName(<span class="string">"其他主机名"</span>);</span><br><span class="line">InetAddress address3 = InetAddress.getByName(<span class="string">"IP地址"</span>);</span><br></pre></td></tr></table></figure><h1 id="三、URL类"><a href="#三、URL类" class="headerlink" title="三、URL类"></a>三、URL类</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个URL的实例</span></span><br><span class="line">URL baidu = <span class="keyword">new</span> URL(<span class="string">"http://www.baidu.com"</span>);</span><br><span class="line">URL url   = <span class="keyword">new</span> URL(baidu,<span class="string">"/index.html?username=tom#test"</span>);<span class="comment">// ？表示参数，#表示锚点</span></span><br><span class="line">url.getProtocol(); <span class="comment">//获取协议</span></span><br><span class="line">url.getHost();     <span class="comment">//获取主机</span></span><br><span class="line">url.getPort();     <span class="comment">//如果没有指定端口号，根据协议不同使用默认端口。此时getPort()方法的返回值为 -1</span></span><br><span class="line">url.getPath();     <span class="comment">//获取文件路径</span></span><br><span class="line">url.getFile();     <span class="comment">//文件名，包括文件路径+参数</span></span><br><span class="line">url.getRef();      <span class="comment">//相对路径，就是锚点，即#号后面的内容</span></span><br><span class="line">url.getQuery();    <span class="comment">//查询字符串，即参数</span></span><br></pre></td></tr></table></figure><p>通过URL对象的openStream()方法可以得到指定资源的输入流，通过流能够读取或访问网页上的资源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用URL读取网页内容</span></span><br><span class="line"><span class="comment">//创建一个URL实例</span></span><br><span class="line">URL               url  = <span class="keyword">new</span> URL(<span class="string">"http://www.baidu.com"</span>);</span><br><span class="line">InputStream       is   = url.openStream();                <span class="comment">//通过openStream方法获取资源的字节输入流</span></span><br><span class="line">InputStreamReader isr  = newInputStreamReader(is,<span class="string">"UTF-8"</span>);<span class="comment">//将字节输入流转换为字符输入流,如果不指定编码，中文可能会出现乱码</span></span><br><span class="line">BufferedReader    br   = newBufferedReader(isr);          <span class="comment">//为字符输入流添加缓冲，提高读取效率</span></span><br><span class="line">String            data = br.readLine();                   <span class="comment">//读取数据</span></span><br><span class="line"><span class="keyword">while</span>(data!=<span class="keyword">null</span>)&#123;</span><br><span class="line">     System.out.println(data);<span class="comment">//输出数据</span></span><br><span class="line">     data = br.readerLine();</span><br><span class="line">&#125;</span><br><span class="line">br.close();</span><br><span class="line">isr.colose();</span><br><span class="line">is.close();</span><br></pre></td></tr></table></figure><h1 id="四、TCP编程"><a href="#四、TCP编程" class="headerlink" title="四、TCP编程"></a>四、TCP编程</h1><h2 id="1、TCP协议是面向连接的、可靠的、有序的、以字节流的方式发送数据，通过三次握手方式建立连接，形成传输数据的通道，在连接中进行大量数据的传输，效率会稍低。"><a href="#1、TCP协议是面向连接的、可靠的、有序的、以字节流的方式发送数据，通过三次握手方式建立连接，形成传输数据的通道，在连接中进行大量数据的传输，效率会稍低。" class="headerlink" title="1、TCP协议是面向连接的、可靠的、有序的、以字节流的方式发送数据，通过三次握手方式建立连接，形成传输数据的通道，在连接中进行大量数据的传输，效率会稍低。"></a>1、TCP协议是面向连接的、可靠的、有序的、以字节流的方式发送数据，通过三次握手方式建立连接，形成传输数据的通道，在连接中进行大量数据的传输，效率会稍低。</h2><h2 id="2、Java中基于TCP协议实现网络通信的类"><a href="#2、Java中基于TCP协议实现网络通信的类" class="headerlink" title="2、Java中基于TCP协议实现网络通信的类"></a>2、Java中基于TCP协议实现网络通信的类</h2><p>客户端的Socket类<br>服务器端的ServerSocket类</p><h2 id="3、Socket通信的步骤"><a href="#3、Socket通信的步骤" class="headerlink" title="3、Socket通信的步骤"></a>3、Socket通信的步骤</h2><p>① 创建ServerSocket和Socket<br>② 打开连接到Socket的输入/输出流<br>③ 按照协议对Socket进行读/写操作<br>④ 关闭输入输出流、关闭Socket</p><h2 id="4、服务器端："><a href="#4、服务器端：" class="headerlink" title="4、服务器端："></a>4、服务器端：</h2><p>① 创建ServerSocket对象，绑定监听端口<br>② 通过accept()方法监听客户端请求<br>③ 连接建立后，通过输入流读取客户端发送的请求信息<br>④ 通过输出流向客户端发送乡音信息<br>⑤ 关闭相关资源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 基于TCP协议的Socket通信，实现用户登录，服务端</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//1、创建一个服务器端Socket，即ServerSocket，指定绑定的端口，并监听此端口</span></span><br><span class="line">ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">10086</span>); <span class="comment">//1024-65535的某个端口</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2、调用accept()方法开始监听，等待客户端的连接</span></span><br><span class="line">Socket socket = serverSocket.accept();</span><br><span class="line"></span><br><span class="line"><span class="comment">//3、获取输入流，并读取客户端信息</span></span><br><span class="line">InputStream is = socket.getInputStream();</span><br><span class="line">InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(is);</span><br><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(isr);</span><br><span class="line">String info = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">while</span>((info = br.readLine()) != <span class="keyword">null</span>)&#123;</span><br><span class="line">   System.out.println(<span class="string">"我是服务器，客户端说："</span>+info);</span><br><span class="line">&#125;</span><br><span class="line">socket.shutdownInput();<span class="comment">//关闭输入流</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4、获取输出流，响应客户端的请求</span></span><br><span class="line">OutputStream os = socket.getOutputStream();</span><br><span class="line">PrintWriter  pw = <span class="keyword">new</span> PrintWriter(os);</span><br><span class="line">pw.write(<span class="string">"欢迎您！"</span>);</span><br><span class="line">pw.flush();</span><br><span class="line"></span><br><span class="line"><span class="comment">//5、关闭资源</span></span><br><span class="line">pw.close();</span><br><span class="line">os.close();</span><br><span class="line">br.close();</span><br><span class="line">isr.close();</span><br><span class="line">is.close();</span><br><span class="line">socket.close();</span><br><span class="line">serverSocket.close();</span><br></pre></td></tr></table></figure><h2 id="5、客户端："><a href="#5、客户端：" class="headerlink" title="5、客户端："></a>5、客户端：</h2><p>① 创建Socket对象，指明需要连接的服务器的地址和端口号<br>② 连接建立后，通过输出流想服务器端发送请求信息<br>③ 通过输入流获取服务器响应的信息<br>④ 关闭响应资源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//客户端</span></span><br><span class="line"><span class="comment">//1、创建客户端Socket，指定服务器地址和端口</span></span><br><span class="line">Socket socket =<span class="keyword">new</span> Socket(<span class="string">"localhost"</span>,<span class="number">10086</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、获取输出流，向服务器端发送信息</span></span><br><span class="line">OutputStream os = socket.getOutputStream(); <span class="comment">//字节输出流</span></span><br><span class="line">PrintWriter  pw = <span class="keyword">new</span> PrintWriter(os);      <span class="comment">//将输出流包装成打印流</span></span><br><span class="line">pw.write(<span class="string">"用户名：admin；密码：123"</span>);</span><br><span class="line">pw.flush();</span><br><span class="line">socket.shutdownOutput();</span><br><span class="line"></span><br><span class="line"><span class="comment">//3、获取输入流，并读取服务器端的响应信息</span></span><br><span class="line">InputStream is = socket.getInputStream();</span><br><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(is));</span><br><span class="line">String info = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">while</span>((info = br.readLine())!<span class="keyword">null</span>)  ????</span><br><span class="line">&#123;</span><br><span class="line">   System.out.println(<span class="string">"我是客户端，服务器说："</span>+info);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4、关闭资源</span></span><br><span class="line">br.close();</span><br><span class="line">is.close();</span><br><span class="line">pw.close();</span><br><span class="line">os.close();</span><br><span class="line">socket.close();</span><br></pre></td></tr></table></figure><h2 id="6、应用多线程实现服务器与多客户端之间的通信"><a href="#6、应用多线程实现服务器与多客户端之间的通信" class="headerlink" title="6、应用多线程实现服务器与多客户端之间的通信"></a>6、应用多线程实现服务器与多客户端之间的通信</h2><p>① 服务器端创建ServerSocket，循环调用accept()等待客户端连接<br>② 客户端创建一个socket并请求和服务器端连接<br>③ 服务器端接受苦读段请求，创建socket与该客户建立专线连接<br>④ 建立连接的两个socket在一个单独的线程上对话<br>⑤ 服务器端继续等待新的连接</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//服务器线程处理</span></span><br><span class="line"><span class="comment">//和本线程相关的socket</span></span><br><span class="line">Socket socket = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">serverThread</span><span class="params">(Socket socket)</span></span>&#123;</span><br><span class="line">     <span class="keyword">this</span>.socket = socket;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">publicvoid <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//服务器处理代码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//============================================</span></span><br><span class="line"><span class="comment">//服务器代码</span></span><br><span class="line">ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">10086</span>);</span><br><span class="line">Socket socket = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;<span class="comment">//记录客户端的数量</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">     socket = serverScoket.accept();</span><br><span class="line">     ServerThread serverThread = <span class="keyword">new</span> ServerThread(socket);</span><br><span class="line">     serverThread.start();</span><br><span class="line">     count++;</span><br><span class="line">     System.out.println(<span class="string">"客户端连接的数量："</span>+count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="五、UDP编程"><a href="#五、UDP编程" class="headerlink" title="五、UDP编程"></a>五、UDP编程</h1><p>UDP协议（用户数据报协议）是无连接的、不可靠的、无序的,速度快<br>进行数据传输时，首先将要传输的数据定义成数据报（Datagram），大小限制在64k，在数据报中指明数据索要达到的Socket（主机地址和端口号），然后再将数据报发送出去</p><p>DatagramPacket类  : 表示数据报包<br>DatagramSocket类：进行端到端通信的类</p><h2 id="1、服务器端实现步骤"><a href="#1、服务器端实现步骤" class="headerlink" title="1、服务器端实现步骤"></a>1、服务器端实现步骤</h2><p>① 创建DatagramSocket，指定端口号<br>② 创建DatagramPacket<br>③ 接受客户端发送的数据信息<br>④ 读取数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//服务器端，实现基于UDP的用户登录</span></span><br><span class="line"><span class="comment">//1、创建服务器端DatagramSocket，指定端口</span></span><br><span class="line">DatagramSocket socket = <span class="keyword">new</span> datagramSocket(<span class="number">10010</span>);</span><br><span class="line"><span class="comment">//2、创建数据报，用于接受客户端发送的数据</span></span><br><span class="line"><span class="keyword">byte</span>[] data =newbyte[<span class="number">1024</span>];<span class="comment">//</span></span><br><span class="line">DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(data,data.length);</span><br><span class="line"><span class="comment">//3、接受客户端发送的数据</span></span><br><span class="line">socket.receive(packet);<span class="comment">//此方法在接受数据报之前会一致阻塞</span></span><br><span class="line"><span class="comment">//4、读取数据</span></span><br><span class="line">String info = <span class="keyword">new</span> String(data,o,data.length);</span><br><span class="line">System.out.println(<span class="string">"我是服务器，客户端告诉我"</span>+info);</span><br><span class="line"></span><br><span class="line"><span class="comment">//=========================================================</span></span><br><span class="line"><span class="comment">//向客户端响应数据</span></span><br><span class="line"><span class="comment">//1、定义客户端的地址、端口号、数据</span></span><br><span class="line">InetAddress address = packet.getAddress();</span><br><span class="line"><span class="keyword">int</span> port = packet.getPort();</span><br><span class="line"><span class="keyword">byte</span>[] data2 = <span class="string">"欢迎您！"</span>.geyBytes();</span><br><span class="line"><span class="comment">//2、创建数据报，包含响应的数据信息</span></span><br><span class="line">DatagramPacket packet2 = <span class="keyword">new</span> DatagramPacket(data2,data2.length,address,port);</span><br><span class="line"><span class="comment">//3、响应客户端</span></span><br><span class="line">socket.send(packet2);</span><br><span class="line"><span class="comment">//4、关闭资源</span></span><br><span class="line">socket.close();</span><br></pre></td></tr></table></figure><h2 id="2、客户端实现步骤"><a href="#2、客户端实现步骤" class="headerlink" title="2、客户端实现步骤"></a>2、客户端实现步骤</h2><ol><li>定义发送信息</li><li>创建DatagramPacket，包含将要发送的信息</li><li>创建DatagramSocket</li><li>发送数据</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//客户端</span></span><br><span class="line"><span class="comment">//1、定义服务器的地址、端口号、数据</span></span><br><span class="line">InetAddress address =InetAddress.getByName(<span class="string">"localhost"</span>);</span><br><span class="line"><span class="keyword">int</span> port =<span class="number">10010</span>;</span><br><span class="line"><span class="keyword">byte</span>[] data =<span class="string">"用户名：admin;密码：123"</span>.getBytes();</span><br><span class="line"><span class="comment">//2、创建数据报，包含发送的数据信息</span></span><br><span class="line">DatagramPacket packet = newDatagramPacket(data,data,length,address,port);</span><br><span class="line"><span class="comment">//3、创建DatagramSocket对象</span></span><br><span class="line">DatagramSocket socket =newDatagramSocket();</span><br><span class="line"><span class="comment">//4、向服务器发送数据</span></span><br><span class="line">socket.send(packet);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//接受服务器端响应数据</span></span><br><span class="line"><span class="comment">//======================================</span></span><br><span class="line"><span class="comment">//1、创建数据报，用于接受服务器端响应数据</span></span><br><span class="line"><span class="keyword">byte</span>[] data2 = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">DatagramPacket packet2 = <span class="keyword">new</span> DatagramPacket(data2,data2.length);</span><br><span class="line"><span class="comment">//2、接受服务器响应的数据</span></span><br><span class="line">socket.receive(packet2);</span><br><span class="line">String raply = <span class="keyword">new</span> String(data2,<span class="number">0</span>,packet2.getLenth());</span><br><span class="line">System.out.println(<span class="string">"我是客户端，服务器说："</span>+reply);</span><br><span class="line"><span class="comment">//4、关闭资源</span></span><br><span class="line">socket.close();</span><br></pre></td></tr></table></figure><h1 id="六、注意问题："><a href="#六、注意问题：" class="headerlink" title="六、注意问题："></a>六、注意问题：</h1><h2 id="1、多线程的优先级问题："><a href="#1、多线程的优先级问题：" class="headerlink" title="1、多线程的优先级问题："></a>1、多线程的优先级问题：</h2><p>根据实际的经验，适当的降低优先级，否侧可能会有程序运行效率低的情况??????</p><h2 id="2、是否关闭输出流和输入流："><a href="#2、是否关闭输出流和输入流：" class="headerlink" title="2、是否关闭输出流和输入流："></a>2、是否关闭输出流和输入流：</h2><p>对于同一个socket，如果关闭了输出流，则与该输出流关联的socket也会被关闭，所以一般不用关闭流，直接关闭socket即可</p><h2 id="3、使用TCP通信传输对象，IO中序列化部分"><a href="#3、使用TCP通信传输对象，IO中序列化部分" class="headerlink" title="3、使用TCP通信传输对象，IO中序列化部分"></a>3、使用TCP通信传输对象，IO中序列化部分</h2><h2 id="4、socket编程传递文件，IO流部分"><a href="#4、socket编程传递文件，IO流部分" class="headerlink" title="4、socket编程传递文件，IO流部分"></a>4、socket编程传递文件，IO流部分</h2>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;经典例子说明&quot;&gt;&lt;a href=&quot;#经典例子说明&quot; class=&quot;headerlink&quot; title=&quot;经典例子说明&quot;&gt;&lt;/a&gt;经典例子说明&lt;/h1&gt;&lt;p&gt;有一个夜店（ServerSocket）,你是嫖客(socket)，晚上6点夜店进入营业状态，夜店正在阻塞等客户，你一进来，夜店马上安排一个小姐（server.accept()的client）与你激情对接，你向小姐输出就是你调用（outputStream）, 你吸入小姐精华是你调用（inputStream）,你吸入小姐精华的时候得有小姐在向你输出（outputStream）.&lt;/p&gt;
&lt;p&gt;Java最初是作为网络编程语言出现的，其对网络提供了高度的支持，使得客户端和服务器的沟通变成了现实，而在网络编程中，使用最多的就是Socket。像大家熟悉的QQ、MSN都使用了Socket相关的技术。下面就让我们一起揭开Socket的神秘面纱。&lt;br&gt;
    
    </summary>
    
      <category term="网络编程" scheme="http://cuijing.me/categories/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Java" scheme="http://cuijing.me/tags/Java/"/>
    
      <category term="网络编程" scheme="http://cuijing.me/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>HTTP 协议</title>
    <link href="http://cuijing.me/2015/03/14/HTTP/1-HTTP/"/>
    <id>http://cuijing.me/2015/03/14/HTTP/1-HTTP/</id>
    <published>2015-03-14T00:30:00.000Z</published>
    <updated>2016-05-02T13:09:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h1><p>本篇总结关于http的相关知识，主要内容参考如下导图：<br><a id="more"></a><br><img src="http://oov0wb0gl.bkt.clouddn.com/2017-05-21-14952846932690.jpg" alt=""></p><h1 id="常见关键词概念"><a href="#常见关键词概念" class="headerlink" title="常见关键词概念"></a>常见关键词概念</h1><p>平时会经常接触到URL，他就是我们访问web的一个字符串地址，那么URI是什么呢？他们是什么关系呢？</p><p>　　先看看官方的解释：</p><p>　　<strong>URL：uniform resource location 统一资源定位符</strong></p><p>　　<strong>URI：uniform resource identifier 统一资源标识符</strong></p><p>　　这也就是说，URI是一种资源的标识；而URL也是一种URI，也是一种资源的标识，但它也指明了如何定位Locate到这个资源。</p><p>　　URI是一种抽象的资源标识，既可以是绝对的，也可以是相对的。但是URL是一种URI，它指明了定位的信息，必须是绝对的。</p><p>　　而我们平时所说的相对地址，仅仅是相对于另一个绝对地址而言。</p><p>　　<strong>RFC：reqeust for comments 征求修正意见书</strong></p><p>　　RFC素有网络知识圣经之称，规定了网络中协议的基本内容。因此许多的不同系统的应用程序才可以互相访问。　　</p><h1 id="报文格式"><a href="#报文格式" class="headerlink" title="报文格式"></a>报文格式</h1><p>首先报文的格式如下：<br><img src="http://oov0wb0gl.bkt.clouddn.com/2017-05-21-14953517116238.png" alt=""></p><p>其中空行用于区分报文首部和报文主体内容，是由一个回车符和一个换行符组成。</p><p>无论是请求报文还是响应报文都需要有报文首部，当然报文主体有的请求报文是没有的。</p><p>可以看到，差别就在于请求行中指定的是HTTP版本和请求的方式（GET\POST等）。状态行中指定了HTTP版本和返回的状态码以及短语。</p><h2 id="请求报文格式："><a href="#请求报文格式：" class="headerlink" title="请求报文格式："></a>请求报文格式：</h2><p><img src="http://oov0wb0gl.bkt.clouddn.com/2017-05-21-14952850688940.png" alt=""></p><p>其中请求首部还包括其他的内容，不一一列举了。</p><h2 id="响应报文格式："><a href="#响应报文格式：" class="headerlink" title="响应报文格式："></a>响应报文格式：</h2><p><img src="http://oov0wb0gl.bkt.clouddn.com/2017-05-21-14952850977965.png" alt=""></p><p>下面我们看一下在不同的浏览器中http报文的内容：<br><img src="http://oov0wb0gl.bkt.clouddn.com/2017-05-21-14952851375758.png" alt=""></p><p>上图是chrome中http的内容，其中request headers描述了请求报文头部的内容，response headers描述了响应报文头部的内容。</p><h2 id="常使用的属性："><a href="#常使用的属性：" class="headerlink" title="常使用的属性："></a>常使用的属性：</h2><ol><li>URL, 即http访问的地址</li><li>request method, 报文的请求方式</li><li>status code, 状态码以及状态短语</li><li>Accept Encoding, 内容编码</li><li>Connection, 连接方式</li><li>Cookie, 添加的cookie内容</li><li>Host, 目标主机</li><li>User-Agent, 客户端浏览器的相关信息</li><li>Set-Cookie, 指定想要在Cookie中保存的内容</li></ol><p>常用的属性内容就是上面这些。</p><p>在IE中捕获到的显示方式不同，但是内容都是相同的：<br><img src="http://oov0wb0gl.bkt.clouddn.com/2017-05-21-14952856333060.png" alt=""></p><h1 id="http请求方式"><a href="#http请求方式" class="headerlink" title="http请求方式"></a>http请求方式</h1><p>如何发送http有很多种方式，但是最常用的就是POST和GET。</p><p>其他的有些出于安全性的考虑一般都不建议使用。</p><h2 id="POST与GET的区别"><a href="#POST与GET的区别" class="headerlink" title="POST与GET的区别"></a>POST与GET的区别</h2><ol><li>使用目标不同：POST与GET都用于获取信息，但是GET方式仅仅是查询，并不对服务器上的内容产生任何作用结果；每次GET的内容都是相同的。POST则常用于发送一定的内容进行某些修改操作。</li><li>大小不同：由于不同的浏览器对URL的长度大小有一定的字符限制，因此由于GET方式放在URL的首部中，自然也跟着首先，但是具体的大小要依浏览器而定。POST方式则是把内容放在报文内容中，因此只要报文的内容没有限制，它的大小就没有限制。</li><li>安全性不同：上面也说了GET是直接添加到URL后面的，直接就可以在URL中看到内容。而POST是放在报文内部的，用户无法直接看到。</li><li>总的来说，GET用于获取某个内容，POST用于提交某种数据请求。</li></ol><p>按照使用场景来说，一般用户注册的内容属于私密的，这应该使用POST方式；而针对某一内容的查询，为了快速的响应，可以使用GET方式。</p><h1 id="Cookies"><a href="#Cookies" class="headerlink" title="Cookies"></a>Cookies</h1><p>由于http是一种无状态的协议，因此无论是客户端还是服务器都不记录http的相关信息。</p><p>这样设计一方面减轻了服务器端的负载，另一方面减小了http请求的开销。</p><p>但是针对某些特殊的场景，需要时刻记录用户的相关信息，这该如何处理呢?</p><p>Cookie恰好可以解决这个问题,Cookie的运行机制如下：<br><img src="http://oov0wb0gl.bkt.clouddn.com/2017-05-21-14953509687844.png" alt=""></p><p>Cookie是一种由服务器端确定，并保存在客户端浏览器中的内容。这样，就不需要每次都添加用户的相关信息，请求会自动添加cookie中对应的内容。</p><p>正常在发送http时，都需要建立TCP的连接，再发送报文。<br><img src="http://oov0wb0gl.bkt.clouddn.com/2017-05-21-14953510150475.png" alt=""></p><p>如果每次想要发送http报文都需要经过这个过程，那么时间大部分都会消耗在建立和断开连接的过程中。</p><p>因此http中使用了connection属性，用于指定连接的方式。<br><img src="http://oov0wb0gl.bkt.clouddn.com/2017-05-21-14953510710986.png" alt=""></p><p>当设置成<code>keep-alive</code>，如上面所示的<code>www.baidu.com</code>的http头部信息所示，就会建立一条持久化的连接。不需要每次都建立连接，再中断。</p><p>如果一个http请求，请求了大量的图片等大文件，那么其他的http请求怎么办呢？<br><img src="http://oov0wb0gl.bkt.clouddn.com/2017-05-21-14953519089722.png" alt=""></p><p>不用怕，http可以一次发送多个http请求，然后等待响应连接。不需要排队等候，这样就加快了http的响应时间。</p><p>由于某些报文的内容过大，因此在传输时，为了减少传输的时间，会采取一些压缩的措施。</p><p>例如上面的报文信息中，Accept-Encoding就定义了内容编码的格式：gzip</p><p>有下面几种方式：</p><ol><li>gzip：GNU压缩格式</li><li>compress：UNIX系统的标准压缩格式</li><li>deflate：是一种同时使用了LZ77和哈弗曼编码的无损压缩格式</li><li>identity：不进行压缩</li></ol><h1 id="多部分对象集合"><a href="#多部分对象集合" class="headerlink" title="多部分对象集合"></a>多部分对象集合</h1><p>有的时候传输的内容，不仅仅是一些字符串，还有可能是一些图片，字符，音乐二进制等混杂的内容。这就需要使用多部分对象集合，multipart，例如在使用java编写web上传文件的代码时，需要在form中指定form的编码格式。</p><p>设置form的enctype属性的值为multipart/form-data。这是因为默认的情况下form使用的编码格式是：applicatin/x-www-form-urlencoded，这种编码格式会把所有的内容进行编码，不适合上传文件这种情况。</p><p>这两种编码格式的区别主要是：</p><ul><li>multipart/form-data 会以控件为基准，编码form中的内容。</li><li>application/x-www-form-urlencoded 会把form中的内容编码成键值对的形式。</li></ul><h1 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h1><p><img src="http://oov0wb0gl.bkt.clouddn.com/2017-05-21-14953552214248.jpg" alt=""></p><h1 id="报文首部"><a href="#报文首部" class="headerlink" title="报文首部"></a>报文首部</h1><p><img src="http://oov0wb0gl.bkt.clouddn.com/2017-05-21-14953551700221.jpg" alt=""></p><h1 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h1><p><strong>HTTP+加密+认证+完整性保护 = HTTPS</strong></p><p>为什么会出现https呢，多个s又有什么用呢！</p><h2 id="HTTP的缺点："><a href="#HTTP的缺点：" class="headerlink" title="HTTP的缺点："></a>HTTP的缺点：</h2><ol><li><p>传输的时候使用明文，这显然会被不法者截取干一些见不得人的勾当。</p></li><li><p>没有认证机制，这样我们就可以伪造一些http访问，这显然会造成一些困扰。比如Jmeter就是典型的例子，伪造一大堆的http URL然后压力测试，这也就是DOS攻击的一种。</p></li><li><p>无法验证报文的完整性，比如一个http的报文已经被不法者截取并且篡改，服务器端也无法验证。</p></li></ol><p>而HTTPS相当于套上SSL的HTTP。</p><p>但是HTTPS也有它自身的缺点。</p><h2 id="HTTPS的缺点："><a href="#HTTPS的缺点：" class="headerlink" title="HTTPS的缺点："></a>HTTPS的缺点：</h2><ol><li><p>通信的速度变慢，由于需要加密，一个握手就多了好几个往返</p></li><li><p>对用户端的机器负载的增加。</p></li></ol><p>因此，如果不是像金融支付这种需要高强度的安全性的场景，还是http比较好。</p><h1 id="HTTP中认证的概念"><a href="#HTTP中认证的概念" class="headerlink" title="HTTP中认证的概念"></a>HTTP中认证的概念</h1><p>有一些网址或者服务需要用户的身份信息，因此需要随时知道这些消息，但是肯定不能每次都让用户输入用户密码，因此关于认证就有下面几种方式：</p><h2 id="BASIC认证"><a href="#BASIC认证" class="headerlink" title="BASIC认证"></a>BASIC认证</h2><p>BASIC认证是最简单的认证，大致过程如下：</p><ol><li>客户端访问某URL。</li><li>服务器端返回401状态码，提示用户输入用户名密码。</li><li>用户输入用户名密码，通过BASE64编码传输。</li><li>服务器通过认证，返回状态码200</li></ol><p>通过上面的过程，就可以发现BASIC的问题：</p><ol><li>仅仅通过BASE64编码，其实还是属于明文传输，安全性不高</li><li>有的浏览器不支持注销</li></ol><h2 id="DIGEST认证"><a href="#DIGEST认证" class="headerlink" title="DIGEST认证"></a>DIGEST认证</h2><p>鉴于上面BASIC的问题，DIGEST做了补充，它的过程与上面类似：</p><ol><li>客户端访问</li><li>服务器端返回质询码</li><li>客户端发送响应码</li></ol><p>这里通过随机的生成质询码来作为计算的一种方式，客户端依据这个质询码生成响应码，进行验证。</p><p>这样就弥补了明文传输用户密码的风险。</p><h2 id="SSL客户端验证"><a href="#SSL客户端验证" class="headerlink" title="SSL客户端验证"></a>SSL客户端验证</h2><p>这个比较普遍了！</p><p>像支付宝啊，邮政网银啊之类的，在登录时，都需要下载一个数字认证的东西，这个东西就属于一种SSL客户端的验证。</p><p>很显然它的缺点就是需要客户去手动的安装，这个对于一般的用户来说，代价有点高。</p><h2 id="cookie-session"><a href="#cookie-session" class="headerlink" title="cookie \ session"></a>cookie \ session</h2><p>最后一种是应用最普遍的，通过表单记录用户的身份信息，可以使用cookie或者session的方式保存用户信息。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;HTTP&quot;&gt;&lt;a href=&quot;#HTTP&quot; class=&quot;headerlink&quot; title=&quot;HTTP&quot;&gt;&lt;/a&gt;HTTP&lt;/h1&gt;&lt;p&gt;本篇总结关于http的相关知识，主要内容参考如下导图：&lt;br&gt;
    
    </summary>
    
      <category term="网络编程" scheme="http://cuijing.me/categories/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="HTTP" scheme="http://cuijing.me/tags/HTTP/"/>
    
      <category term="网络编程" scheme="http://cuijing.me/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java 反射之动态代理</title>
    <link href="http://cuijing.me/2015/03/07/Java/6-Reflection/2-%E6%9C%BA%E5%88%B6%E4%B9%8B%E9%9D%99%E5%8A%A8%E4%BB%A3%E7%90%86/"/>
    <id>http://cuijing.me/2015/03/07/Java/6-Reflection/2-机制之静动代理/</id>
    <published>2015-03-07T00:30:00.000Z</published>
    <updated>2016-05-02T14:39:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h1><h2 id="代理模式："><a href="#代理模式：" class="headerlink" title="代理模式："></a>代理模式：</h2><p>代理模式的作用=为其他对象提供一种代理以控制对这个对象的访问。<br><a id="more"></a></p><h2 id="代理模式的角色："><a href="#代理模式的角色：" class="headerlink" title="代理模式的角色："></a>代理模式的角色：</h2><ul><li><p>抽象角色：声明真实对象和代理对象的共同接口</p></li><li><p>代理角色：代理角色内部包含有真实对象的引用，从而可以操作真实对象。</p></li><li><p>真实角色：代理角色所代表的真实对象，是我们最终要引用的对象。</p></li></ul><h1 id="动态代理："><a href="#动态代理：" class="headerlink" title="动态代理："></a>动态代理：</h1><h2 id="java-lang-reflect-Proxy"><a href="#java-lang-reflect-Proxy" class="headerlink" title="java.lang.reflect.Proxy"></a>java.lang.reflect.Proxy</h2><p>Proxy 提供用于创建动态代理类和实例的静态方法，它还是由这些方法创建的所有动态代理类的超类</p><h2 id="InvocationHandler"><a href="#InvocationHandler" class="headerlink" title="InvocationHandler"></a>InvocationHandler</h2><p>是代理实例的调用处理程序 实现的接口，每个代理实例都具有一个关联的调用处理程序。对代理实例调用方法时，将对方法调用进行编码并将其指派到它的调用处理程序的 invoke 方法。</p><h2 id="动态Proxy是这样的一种类"><a href="#动态Proxy是这样的一种类" class="headerlink" title="动态Proxy是这样的一种类:"></a>动态Proxy是这样的一种类:</h2><p>它是在运行生成的类，在生成时你必须提供一组Interface给它，然后该class就宣称它实现了这些interface。你可以把该class的实例当作这些interface中的任何一个来用。当然，这个Dynamic Proxy其实就是一个Proxy，它不会替你作实质性的工作，在生成它的实例时你必须提供一个handler，由它接管实际的工作。</p><h2 id="在使用动态代理类时，我们必须实现InvocationHandler接口"><a href="#在使用动态代理类时，我们必须实现InvocationHandler接口" class="headerlink" title="在使用动态代理类时，我们必须实现InvocationHandler接口"></a>在使用动态代理类时，我们必须实现<code>InvocationHandler</code>接口</h2><p>步骤：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、定义抽象角色 [共同的接口] :动态代理的使用，体会反射是动态语言的关键</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">action</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、定义真实角色 :被代理类</span></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">RealSubject</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println( <span class="string">"我是被代理类，记得要执行我！"</span> );</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3、定义代理角色 :定义代理类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">      Object obj;<span class="comment">// 实现了接口的被代理类的对象的声明</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 作用：①给被代理的对象实例化②返回一个代理类的对象</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> Object <span class="title">blind</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">             <span class="keyword">this</span>.obj = obj;</span><br><span class="line">             <span class="keyword">return</span> Proxy.newProxyInstance(obj.getClass().getClassLoader(), obj</span><br><span class="line">                        .getClass().getInterfaces(), <span class="keyword">this</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//当通过代理类的对象发起对被重写的方法的调用时，都会转换为对如下的invoke方法的调用</span></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span></span></span><br><span class="line"><span class="function">                   <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">             <span class="comment">//method方法的返回值时returnVal</span></span><br><span class="line">            Object returnVal = method.invoke(obj, args);</span><br><span class="line">            <span class="keyword">return</span> returnVal; </span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestProxy</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">             <span class="comment">//1.被代理类的对象</span></span><br><span class="line">            RealSubject real = <span class="keyword">new</span> RealSubject();</span><br><span class="line">             <span class="comment">//2.创建一个实现了InvacationHandler接口的代理类的对象</span></span><br><span class="line">            MyInvocationHandler handler = <span class="keyword">new</span> MyInvocationHandler();</span><br><span class="line">             <span class="comment">//3.调用blind()方法，动态的返回一个同样实现了real所在类实现的接口Subject的代理类的对象。</span></span><br><span class="line">            Object obj = handler.blind(real);</span><br><span class="line">            Subject sub = (Subject)obj; <span class="comment">//此时sub就是代理类的对象</span></span><br><span class="line">            sub.action(); <span class="comment">//转到对InvacationHandler接口的实现类的invoke()方法的调用</span></span><br><span class="line">                       </span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> utils;</span><br><span class="line"></span><br><span class="line"><span class="comment">//静态代理模式</span></span><br><span class="line"><span class="comment">//接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ClothFactory</span></span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">productCloth</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//被代理类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NikeClothFactory</span> <span class="keyword">implements</span> <span class="title">ClothFactory</span></span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">productCloth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println( <span class="string">"Nike工厂生产一批衣服"</span> );</span><br><span class="line">      &#125;     </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//代理类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProxyFactory</span> <span class="keyword">implements</span> <span class="title">ClothFactory</span></span>&#123;</span><br><span class="line">      ClothFactory cf;</span><br><span class="line">      <span class="comment">//创建代理类的对象时，实际传入一个被代理类的对象</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="title">ProxyFactory</span><span class="params">(ClothFactory cf)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>. cf = cf; </span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">productCloth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println( <span class="string">"代理类开始执行，收代理费$1000"</span> );</span><br><span class="line">            cf.productCloth();</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestClothProduct</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">            NikeClothFactory nike = <span class="keyword">new</span> NikeClothFactory(); <span class="comment">//创建被代理类的对象</span></span><br><span class="line">            ProxyFactory proxy = <span class="keyword">new</span> ProxyFactory(nike); <span class="comment">//创建代理类的对象</span></span><br><span class="line">            proxy.productCloth();</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;代理&quot;&gt;&lt;a href=&quot;#代理&quot; class=&quot;headerlink&quot; title=&quot;代理&quot;&gt;&lt;/a&gt;代理&lt;/h1&gt;&lt;h2 id=&quot;代理模式：&quot;&gt;&lt;a href=&quot;#代理模式：&quot; class=&quot;headerlink&quot; title=&quot;代理模式：&quot;&gt;&lt;/a&gt;代理模式：&lt;/h2&gt;&lt;p&gt;代理模式的作用=为其他对象提供一种代理以控制对这个对象的访问。&lt;br&gt;
    
    </summary>
    
      <category term="Java 反射" scheme="http://cuijing.me/categories/Java-%E5%8F%8D%E5%B0%84/"/>
    
    
      <category term="Java" scheme="http://cuijing.me/tags/Java/"/>
    
      <category term="代理模式" scheme="http://cuijing.me/tags/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Java 反射机制</title>
    <link href="http://cuijing.me/2015/03/06/Java/6-Reflection/1-%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/"/>
    <id>http://cuijing.me/2015/03/06/Java/6-Reflection/1-反射机制/</id>
    <published>2015-03-06T00:30:00.000Z</published>
    <updated>2016-05-02T14:13:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、如何创建Class的实例-重点"><a href="#1、如何创建Class的实例-重点" class="headerlink" title="1、如何创建Class的实例(重点)"></a>1、如何创建Class的实例(重点)</h1><ol><li>过程： 源文件经过编译javac.exe以后，得到一个或多个<code>.class</code>文件。<code>.class</code>文件经过运行java.exe这步，就需要进行类的加载（通过JVM的类的加载器），记载到内存中的缓存。每一个放入缓存中的.class文件就是一个Class的实例！</li><li>Class的一个对象，对应着一个运行时类。相当于一个运行时类本身充当了Class的一个实例。</li><li>java.lang.Class是反射的源头。<br> 接下来涉及到反射的类都在java.lang.reflect子包下。<br> 如：Field 、 Method 、Constructor 、 Type 、Package..<br> 当通过Class的实例调用<code>getMethods() ---&gt;Method</code>, <code>getConstructors() ----&gt;Constructor</code><a id="more"></a></li><li><p>实例化Class的方法(五种):<br>(1) 调用运行时类的.class属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Class clazz1 = Person.class;</span><br><span class="line">System.out.println(clazz1);  <span class="comment">// me.cuijing.java.Person</span></span><br></pre></td></tr></table></figure></li></ol><p>(2)通过运行时类的对象，调用其getClass()方法</p><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Class clazz2 = <span class="keyword">new</span> Person().getClass();</span><br><span class="line">System.out.println(clazz3);  <span class="comment">// me.cuijing.java.Person</span></span><br></pre></td></tr></table></figure></code></pre><p>(3)调用Class的静态方法forName(String className)。此方法报ClassNotFoundException   </p><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Class clazz3 = Class.forName(com.atguigu.java.Person );</span><br><span class="line">System.out.println(clazz4);  <span class="comment">// me.cuijing.java.Person</span></span><br></pre></td></tr></table></figure></code></pre><p>(4)运用primitive wrapper classes的TYPE 语法这里返回的是原生类型，和Person.class返回的不同</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Class clazz4 = Person.TYPE;</span><br><span class="line">System.out.println(clazz4)   <span class="comment">//Person</span></span><br></pre></td></tr></table></figure><p>(5)利用反序列化</p><h1 id="2、有了Class实例以后，可以做什么？"><a href="#2、有了Class实例以后，可以做什么？" class="headerlink" title="2、有了Class实例以后，可以做什么？"></a>2、有了Class实例以后，可以做什么？</h1><h2 id="应用一：可以创建对应的运行时类的对象-重点"><a href="#应用一：可以创建对应的运行时类的对象-重点" class="headerlink" title="应用一：可以创建对应的运行时类的对象(重点)"></a>应用一：可以创建对应的运行时类的对象(重点)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> 获取方法一</span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">( )</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">       Class clazz = Class.forName(<span class="string">"com.atguigu.review.Animal"</span>);</span><br><span class="line">       Object obj = clazz.newInstance( );</span><br><span class="line">       Animal a = (Animal)obj;</span><br><span class="line">       System.out.println(a);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">获取方法二</span><br><span class="line"> 调用指定的构造器创建运行时类的对象</span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">( )</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">       Class clazz = Animal.class;</span><br><span class="line">       Constructor cons = clazz.getDeclaredConstructor(String.class,<span class="keyword">int</span>.class);</span><br><span class="line">       cons.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">       Animal a = (Animal)cons.newInstance(<span class="string">"Tom"</span>,<span class="number">10</span>);</span><br><span class="line">       System.out.println(a);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="应用二：获取对应的运行时类的完整的类的结构："><a href="#应用二：获取对应的运行时类的完整的类的结构：" class="headerlink" title="应用二：获取对应的运行时类的完整的类的结构："></a>应用二：获取对应的运行时类的完整的类的结构：</h2><p>属性、方法、构造器、包、父类、接口、泛型、注解、异常、内部类。。。</p><p>如：Method[] m1 = clazz.getMethods() :获取到对应的运行时类中声明的权限为public的方法（包含其父类中的声明的public）<br>      Method[] m2 = clazz.getDeclaredMethods()：获取到对应的运行时类中声明的所有的方法（①任何权限修饰符修饰的都能获取②不含父类中的）</p><h2 id="应用三：调用对应的运行时类中指定的结构（某个指定的属性、方法、构造器）-重点"><a href="#应用三：调用对应的运行时类中指定的结构（某个指定的属性、方法、构造器）-重点" class="headerlink" title="应用三：调用对应的运行时类中指定的结构（某个指定的属性、方法、构造器）(重点)"></a>应用三：调用对应的运行时类中指定的结构（某个指定的属性、方法、构造器）(重点)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//调用指定属性</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">( )</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">     Class clazz = Class.forName(<span class="string">"com.atguigu.review.Animal"</span>);</span><br><span class="line">     Object obj = clazz.newInstance();</span><br><span class="line">     Animal a = (Animal)obj;</span><br><span class="line">     <span class="comment">//调用非public的属性</span></span><br><span class="line">     Field f1 = clazz.getDeclaredField(<span class="string">"name"</span>);</span><br><span class="line">     f1.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">     f1.set(a, <span class="string">"Jerry"</span>);</span><br><span class="line">     <span class="comment">//调用public的属性</span></span><br><span class="line">     Field f2 = clazz.getField(<span class="string">"age"</span>);</span><br><span class="line">     f2.set(a, <span class="number">9</span>);</span><br><span class="line">     System.out.println(f2.get(a));</span><br><span class="line">     System.out.println(a);</span><br><span class="line">     <span class="comment">//调用static的属性</span></span><br><span class="line">     Field f3 = clazz.getDeclaredField(<span class="string">"desc"</span>);</span><br><span class="line">     System.out.println(f3.get(<span class="keyword">null</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用指定的方法</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span> <span class="params">( )</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">     Class clazz = Class.forName(<span class="string">"com.atguigu.review.Animal"</span>);</span><br><span class="line">     Object obj = clazz.newInstance();</span><br><span class="line">     Animal a = (Animal)obj;</span><br><span class="line">    </span><br><span class="line">     <span class="comment">//调用非public的方法</span></span><br><span class="line">     Method m1 = clazz.getDeclaredMethod(<span class="string">"getAge"</span>);</span><br><span class="line">     m1.setAccessible(<span class="keyword">true</span>);      <span class="comment">// 暴力破解权限</span></span><br><span class="line">     <span class="keyword">int</span> age = (Integer)m1.invoke(a);</span><br><span class="line">     System.out.println(age);</span><br><span class="line"></span><br><span class="line">     <span class="comment">//调用public的方法</span></span><br><span class="line">     Method m2 = clazz.getMethod(<span class="string">"show"</span>, String.class);</span><br><span class="line">     Object returnVal = m2.invoke(a,<span class="string">"金毛"</span>);</span><br><span class="line">     System.out.println(returnVal);</span><br><span class="line"></span><br><span class="line">     <span class="comment">//调用static的方法</span></span><br><span class="line">     Method m3 = clazz.getDeclaredMethod(<span class="string">"info"</span>);</span><br><span class="line">     m3.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">//  m3.invoke(Animal.class);</span></span><br><span class="line">     m3.invoke(<span class="keyword">null</span>);</span><br><span class="line">   </span><br><span class="line">     <span class="comment">//调用形参是数组的方法  比如是main方法</span></span><br><span class="line">     Method m4 = clazz.getMethod(<span class="string">"main"</span> , String[].class);</span><br><span class="line">     m4.invoke(<span class="keyword">null</span> , (object)String[](<span class="string">"aa"</span>,<span class="string">"22"</span>));</span><br><span class="line"> 或者</span><br><span class="line">     m4.invoke(<span class="keyword">null</span> , <span class="keyword">new</span> object[]( String[]( <span class="string">"aa"</span>,<span class="string">"22"</span>) ) );</span><br><span class="line"></span><br><span class="line"><span class="comment">// public static void main(String[] args)&#123;</span></span><br><span class="line">      <span class="meta">@Test</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">             Class clazz = Class.forName(<span class="string">"com.gplayo.reflect.Person"</span> );</span><br><span class="line">            Method method = clazz.getMethod(<span class="string">"main"</span>,String[].class);</span><br><span class="line">            method.invoke( <span class="keyword">null</span>, <span class="keyword">new</span> Object[]&#123; <span class="keyword">new</span> String[]&#123; <span class="string">"1"</span>, <span class="string">"2"</span>&#125;&#125;);</span><br><span class="line">            method.invoke( <span class="keyword">null</span>, (Object) <span class="keyword">new</span> String[]&#123; <span class="string">"1"</span>, <span class="string">"2"</span>&#125;);</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-动态代理—反射的应用。体会反射的动态性"><a href="#3-动态代理—反射的应用。体会反射的动态性" class="headerlink" title="3.动态代理—反射的应用。体会反射的动态性"></a>3.动态代理—反射的应用。体会反射的动态性</h1><p>代理设计模式的原理:<br>     使用一个代理将对象包装起来, 然后用该代理对象取代原始对象. 任何对原始对象的调用都要通过代理. 代理对象决定是否以及何时将方法调用转到原始对象上</p><ul><li><p>静态代理：要求被代理类和代理类同时实现相应的一套接口；通过代理类的对象调用重写接口的方法时，实际上执行的是被代理类的同样的方法的调用。</p></li><li><p>动态代理：在程序运行时，根据被代理类及其实现的接口，动态的创建一个代理类。当调用代理类的实现的抽象方法时，就发起对被代理类同样方法的调用。 涉及到的技术点：</p><ol><li>提供一个实现了InvocationHandler接口实现类，并重写其invoke()方法</li><li>Proxy.newProxyInstance(obj.getClass().getClassLoader(),obj.getClass().getInterfaces(), h);<pre><code>//注：obj：被代理类对象 ； h:实现了InvocationHandler接口的实现类的对象</code></pre></li></ol></li></ul><h1 id="动态代理与AOP"><a href="#动态代理与AOP" class="headerlink" title="动态代理与AOP"></a>动态代理与AOP</h1>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1、如何创建Class的实例-重点&quot;&gt;&lt;a href=&quot;#1、如何创建Class的实例-重点&quot; class=&quot;headerlink&quot; title=&quot;1、如何创建Class的实例(重点)&quot;&gt;&lt;/a&gt;1、如何创建Class的实例(重点)&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;过程： 源文件经过编译javac.exe以后，得到一个或多个&lt;code&gt;.class&lt;/code&gt;文件。&lt;code&gt;.class&lt;/code&gt;文件经过运行java.exe这步，就需要进行类的加载（通过JVM的类的加载器），记载到内存中的缓存。每一个放入缓存中的.class文件就是一个Class的实例！&lt;/li&gt;
&lt;li&gt;Class的一个对象，对应着一个运行时类。相当于一个运行时类本身充当了Class的一个实例。&lt;/li&gt;
&lt;li&gt;java.lang.Class是反射的源头。&lt;br&gt; 接下来涉及到反射的类都在java.lang.reflect子包下。&lt;br&gt; 如：Field 、 Method 、Constructor 、 Type 、Package..&lt;br&gt; 当通过Class的实例调用&lt;code&gt;getMethods() ---&amp;gt;Method&lt;/code&gt;, &lt;code&gt;getConstructors() ----&amp;gt;Constructor&lt;/code&gt;
    
    </summary>
    
      <category term="Java 反射" scheme="http://cuijing.me/categories/Java-%E5%8F%8D%E5%B0%84/"/>
    
    
      <category term="Java" scheme="http://cuijing.me/tags/Java/"/>
    
      <category term="反射" scheme="http://cuijing.me/tags/%E5%8F%8D%E5%B0%84/"/>
    
      <category term="Reflection" scheme="http://cuijing.me/tags/Reflection/"/>
    
  </entry>
  
  <entry>
    <title>线程间的通信</title>
    <link href="http://cuijing.me/2015/03/04/Java/5-Multithreaded/4-%E7%BA%BF%E7%A8%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1/"/>
    <id>http://cuijing.me/2015/03/04/Java/5-Multithreaded/4-线程间的通信/</id>
    <published>2015-03-04T00:30:00.000Z</published>
    <updated>2016-05-03T12:35:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="线程间的通信"><a href="#线程间的通信" class="headerlink" title="线程间的通信"></a>线程间的通信</h1><p>Java的进程同步是通过<code>synchronized()</code>来实现的，Java的<code>synchronized()</code>方法类似于操作系统概念中的互斥内存块，在Java中的Object类型中，都是带有一个内存锁的，在有线程获取该内存锁后，其它线程无法访问该内存，从而实现Java中简单的同步、互斥操作。</p><p>但如果需要在线程间相互唤醒的话就需要借助<code>Obj.wait(), Obj.nofity()</code>了。<a id="more"></a></p><p><code>Obj.wait()，Obj.notify()</code> 必须要与 <code>synchronized(Obj)</code> 一起使用，也就是wait(),与notify()是针对已经获取了Obj锁进行操作</p><p><strong>从语法角度来说就是<code>Obj.wait()，Obj.notify()</code> 必须在<code>synchronized(Obj){...}</code> 语句块内。</strong></p><p>从功能上来说wait就是说线程在获取对象锁后，主动释放对象锁，同时本线程休眠。直到有其它线程调用对象的notify()唤醒该线程，才能继续获取对象锁，并继续执行。</p><p>相应的notify()就是对对象锁的唤醒操作。但有一点需要注意的是notify()调用后，并不是马上就释放对象锁的，而是在相应的synchronized(){}语句块执行结束，自动释放锁后，JVM会在wait()对象锁的线程中随机选取一线程，赋予其对象锁，唤醒线程，继续执行。这样就提供了在线程间同步、唤醒的操作。<code>Thread.sleep()</code> 与 <code>Object.wait()</code> 二者都可以暂停当前线程，释放CPU控制权，主要的区别在于Object.wait()在释放CPU同时，释放了对象锁的控制。</p><p>单单在概念上理解清楚了还不够，需要在实际的例子中进行测试才能更好的理解。对<code>Object.wait()，Object.notify()</code>的应用最经典的例子，应该是三线程打印ABC的问题了吧，这是一道比较经典的面试题。</p><h2 id="题目要求："><a href="#题目要求：" class="headerlink" title="题目要求："></a>题目要求：</h2><p>建立三个线程，A线程打印10次A，B线程打印10次B,C线程打印10次C，要求线程同时运行，交替打印10次ABC。这个问题用Object的wait()，notify()就可以很方便的解决。代码如下：  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> me.cuijing.test.thread;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> CuiJing</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2017/5/16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 建立三个线程，A线程打印10次A，B线程打印10次B,C线程打印10次C，要求线程同时运行，交替打印10次ABC。</span></span><br><span class="line">        Object a = <span class="keyword">new</span> Object();</span><br><span class="line">        Object b = <span class="keyword">new</span> Object();</span><br><span class="line">        Object c = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">        PrintChar A = <span class="keyword">new</span> PrintChar(<span class="string">"A"</span>, c, a);</span><br><span class="line">        PrintChar B = <span class="keyword">new</span> PrintChar(<span class="string">"B"</span>, a, b);</span><br><span class="line">        PrintChar C = <span class="keyword">new</span> PrintChar(<span class="string">"C"</span>, b, c);</span><br><span class="line"></span><br><span class="line">        Thread ta = <span class="keyword">new</span> Thread(A);</span><br><span class="line">        Thread tb = <span class="keyword">new</span> Thread(B);</span><br><span class="line">        Thread tc = <span class="keyword">new</span> Thread(C);</span><br><span class="line"></span><br><span class="line">        ta.start();</span><br><span class="line">        tb.start();</span><br><span class="line">        tc.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrintChar</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Object prev;</span><br><span class="line">    <span class="keyword">private</span> Object self;</span><br><span class="line"></span><br><span class="line">    PrintChar(String name, Object prev, Object self) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.prev = prev;</span><br><span class="line">        <span class="keyword">this</span>.self = self;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (prev) &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (self) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"****"</span> + name + <span class="string">"****"</span>);</span><br><span class="line">                    count--;</span><br><span class="line">                    <span class="keyword">try</span>&#123;</span><br><span class="line">                        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 表示当前线程 唤醒 之前执行过 wait() 方法且 需要此对象锁 self 的线程</span></span><br><span class="line">                    <span class="comment">// 继续执行 synchronized 区域的代码后会释放  self 锁。</span></span><br><span class="line">                    self.notify();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 表示当前线程 释放 prev 的锁并等待(休眠 sleep)</span></span><br><span class="line">                    prev.wait();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要的目的就是ThreadA-&gt;ThreadB-&gt;ThreadC-&gt;ThreadA循环执行三个线程。为了控制线程执行的顺序，那么就必须要确定唤醒、等待的顺序，所以每一个线程必须同时持有两个对象锁，才能继续执行。一个对象锁是prev，就是前一个线程所持有的对象锁。还有一个就是自身对象锁。</p><p>主要的思想就是，为了控制执行的顺序，必须要先持有prev锁，也就前一个线程要释放自身对象锁，再去申请自身对象锁，两者兼备时打印，之后首先调用 <code>self.notify()</code> 释放自身对象锁，唤醒下一个等待线程，再调用<code>prev.wait()</code>释放prev对象锁，终止当前线程，等待循环结束后再次被唤醒。运行上述代码，可以发现三个线程循环打印ABC，共10次。程序运行的主要过程就是A线程最先运行，持有C,A对象锁，后释放A,C锁，唤醒B。线程B等待A锁，再申请B锁，后打印B，再释放B，A锁，唤醒C，线程C等待B锁，再申请C锁，后打印C，再释放C,B锁，唤醒A。看起来似乎没什么问题，但如果你仔细想一下，就会发现有问题，就是初始条件，三个线程按照A,B,C的顺序来启动，按照前面的思考，A唤醒B，B唤醒C，C再唤醒A。但是这种假设依赖于JVM中线程调度、执行的顺序。具体来说就是，在main主线程启动ThreadA后，需要在ThreadA执行完，在prev.wait()等待时，再切回线程启动ThreadB，ThreadB执行完，在prev.wait()等待时，再切回主线程，启动ThreadC，只有JVM按照这个线程运行顺序执行，才能保证输出的结果是正确的。而这依赖于JVM的具体实现。考虑一种情况，如下：如果主线程在启动A后，执行A，过程中又切回主线程，启动了ThreadB,ThreadC，之后，由于A线程尚未释放self.notify，也就是B需要在synchronized(prev)处等待，而这时C却调用synchronized(prev)获取了对b的对象锁。这样，在A调用完后，同时ThreadB获取了prev也就是a的对象锁，ThreadC的执行条件就已经满足了，会打印C，之后释放c,及b的对象锁，这时ThreadB具备了运行条件，会打印B，也就是循环变成了ACBACB了。这种情况，可以通过在run中主动释放CPU，来进行模拟。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;   </span><br><span class="line">   <span class="keyword">int</span> count = <span class="number">10</span>;   </span><br><span class="line">   <span class="keyword">while</span> (count &gt; <span class="number">0</span>) &#123;   </span><br><span class="line">       <span class="keyword">synchronized</span> (prev) &#123;   </span><br><span class="line">           <span class="keyword">synchronized</span> (self) &#123;   </span><br><span class="line">               System.out.print(name);   </span><br><span class="line">               count--;  </span><br><span class="line">               <span class="keyword">try</span>&#123;</span><br><span class="line">                   Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">                   e.printStackTrace();</span><br><span class="line">               &#125;</span><br><span class="line">               self.notify();   </span><br><span class="line">           &#125;   </span><br><span class="line">           <span class="keyword">try</span> &#123;   </span><br><span class="line">               prev.wait();   </span><br><span class="line">           &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;   </span><br><span class="line">               e.printStackTrace();   </span><br><span class="line">           &#125;   </span><br><span class="line">       &#125;   </span><br><span class="line">   &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行后的打印结果就变成了ACBACB了。为了避免这种与JVM调度有关的不确定性。需要让A,B,C三个线程以确定的顺序启动，最终代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> me.cuijing.test.thread;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> CuiJing</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2017/5/16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 建立三个线程，A线程打印10次A，B线程打印10次B,C线程打印10次C，要求线程同时运行，交替打印10次ABC。</span></span><br><span class="line">        Object a = <span class="keyword">new</span> Object();</span><br><span class="line">        Object b = <span class="keyword">new</span> Object();</span><br><span class="line">        Object c = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">        PrintChar A = <span class="keyword">new</span> PrintChar(<span class="string">"A"</span>, c, a);</span><br><span class="line">        PrintChar B = <span class="keyword">new</span> PrintChar(<span class="string">"B"</span>, a, b);</span><br><span class="line">        PrintChar C = <span class="keyword">new</span> PrintChar(<span class="string">"C"</span>, b, c);</span><br><span class="line"></span><br><span class="line">        Thread ta = <span class="keyword">new</span> Thread(A);</span><br><span class="line">        Thread tb = <span class="keyword">new</span> Thread(B);</span><br><span class="line">        Thread tc = <span class="keyword">new</span> Thread(C);</span><br><span class="line"></span><br><span class="line">        ta.start();</span><br><span class="line">        Thread.sleep(<span class="number">1001</span>);</span><br><span class="line">        tb.start();</span><br><span class="line">        Thread.sleep(<span class="number">1001</span>);</span><br><span class="line">        tc.start();</span><br><span class="line">        Thread.sleep(<span class="number">1001</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrintChar</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Object prev;</span><br><span class="line">    <span class="keyword">private</span> Object self;</span><br><span class="line"></span><br><span class="line">    PrintChar(String name, Object prev, Object self) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.prev = prev;</span><br><span class="line">        <span class="keyword">this</span>.self = self;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (prev) &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (self) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"****"</span> + name + <span class="string">"****"</span>);</span><br><span class="line">                    count--;</span><br><span class="line">                    <span class="keyword">try</span>&#123;</span><br><span class="line">                        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 表示当前线程 唤醒 之前执行过 wait() 方法且 需要此对象锁 self 的线程</span></span><br><span class="line">                    <span class="comment">// 继续执行 synchronized 区域的代码后会释放  self 锁。</span></span><br><span class="line">                    self.notify();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 表示当前线程 释放 prev 的锁并等待(休眠 sleep)</span></span><br><span class="line">                    prev.wait();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样才可以完美的解决该问题。通过这个例子也是想说明一下，很多理论、概念如Obj.wait(),Obj.notify()等，理解起来，比较简单，但是在实际的应用当中，这里却是往往出现问题的地方。需要更加深入的理解。并在解决问题的过程中不断加深对概念的掌握。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;线程间的通信&quot;&gt;&lt;a href=&quot;#线程间的通信&quot; class=&quot;headerlink&quot; title=&quot;线程间的通信&quot;&gt;&lt;/a&gt;线程间的通信&lt;/h1&gt;&lt;p&gt;Java的进程同步是通过&lt;code&gt;synchronized()&lt;/code&gt;来实现的，Java的&lt;code&gt;synchronized()&lt;/code&gt;方法类似于操作系统概念中的互斥内存块，在Java中的Object类型中，都是带有一个内存锁的，在有线程获取该内存锁后，其它线程无法访问该内存，从而实现Java中简单的同步、互斥操作。&lt;/p&gt;
&lt;p&gt;但如果需要在线程间相互唤醒的话就需要借助&lt;code&gt;Obj.wait(), Obj.nofity()&lt;/code&gt;了。
    
    </summary>
    
      <category term="多线程与并发" scheme="http://cuijing.me/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E5%B9%B6%E5%8F%91/"/>
    
    
      <category term="Java" scheme="http://cuijing.me/tags/Java/"/>
    
      <category term="Thread" scheme="http://cuijing.me/tags/Thread/"/>
    
      <category term="多线程通信" scheme="http://cuijing.me/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E9%80%9A%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>多线程之生产者与消费者</title>
    <link href="http://cuijing.me/2015/03/04/Java/5-Multithreaded/3-%E7%BA%BF%E7%A8%8B%E7%BB%83%E4%B9%A0-%E7%94%9F%E4%BA%A7%E4%B8%8E%E6%B6%88%E8%B4%B9/"/>
    <id>http://cuijing.me/2015/03/04/Java/5-Multithreaded/3-线程练习-生产与消费/</id>
    <published>2015-03-04T00:30:00.000Z</published>
    <updated>2016-05-03T12:11:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="生产者与消费者"><a href="#生产者与消费者" class="headerlink" title="生产者与消费者"></a>生产者与消费者</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 生产者/消费者问题</span></span><br><span class="line"><span class="comment"> * 生产者(Productor)将产品交给店员(Clerk)，而消费者(Customer)从店员处取走产品，</span></span><br><span class="line"><span class="comment"> * 店员一次只能持有固定数量的产品(比如:20），如果生产者试图生产更多的产品，店员会叫生产者停一下，</span></span><br><span class="line"><span class="comment"> * 如果店中有空位放产品了再通知生产者继续生产；如果店中没有产品了，店员会告诉消费者等一下，</span></span><br><span class="line"><span class="comment"> * 如果店中有产品了再通知消费者来取走产品。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 分析：</span></span><br><span class="line"><span class="comment"> 1.是否涉及到多线程的问题？是！生产者、消费者</span></span><br><span class="line"><span class="comment"> 2.是否涉及到共享数据？有！考虑线程的安全</span></span><br><span class="line"><span class="comment"> 3.此共享数据是谁？即为产品的数量</span></span><br><span class="line"><span class="comment"> 4.是否涉及到线程的通信呢？存在生产者与消费者的通信</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">&lt;!-- more --&gt;</span><br><span class="line"><span class="keyword">package</span> me.cuijing.test.thread;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> CuiJing</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2017/5/16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPCC</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Clerk clerk = <span class="keyword">new</span> Clerk();</span><br><span class="line">        Productor p = <span class="keyword">new</span> Productor(clerk);</span><br><span class="line">        Consumer c = <span class="keyword">new</span> Consumer(clerk);</span><br><span class="line"></span><br><span class="line">        Thread p1 = <span class="keyword">new</span> Thread(p);</span><br><span class="line">        Thread p2 = <span class="keyword">new</span> Thread(p);</span><br><span class="line">        Thread c1 = <span class="keyword">new</span> Thread(c);</span><br><span class="line"></span><br><span class="line">        p1.setName( <span class="string">"生产者1"</span>);</span><br><span class="line">        p2.setName( <span class="string">"生产者2"</span>);</span><br><span class="line">        c1.setName( <span class="string">"消费者1"</span>);</span><br><span class="line"></span><br><span class="line">        p1.start();</span><br><span class="line">        p2.start();</span><br><span class="line">        c1.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Clerk</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> productCount;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buyProduct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (productCount &gt;= <span class="number">20</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    wait();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                notifyAll();</span><br><span class="line">                productCount++; <span class="comment">//一开始没有产品 所有 先++ 后打印</span></span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">":生产了第"</span> + productCount + <span class="string">"个产品"</span>);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sellProduct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(productCount &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    wait();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                notifyAll();</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">":卖出了第"</span> + productCount + <span class="string">"个产品"</span>);</span><br><span class="line">                productCount--; <span class="comment">// 先卖出去，再--</span></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Productor</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Clerk clerk;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Productor</span><span class="params">(Clerk clerk)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.clerk = clerk;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"生产者生产产品！"</span>);</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            clerk.buyProduct();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Clerk clerk;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Consumer</span> <span class="params">(Clerk clerk)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.clerk = clerk;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"消费者消费产品！"</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            clerk.sellProduct();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;生产者与消费者&quot;&gt;&lt;a href=&quot;#生产者与消费者&quot; class=&quot;headerlink&quot; title=&quot;生产者与消费者&quot;&gt;&lt;/a&gt;生产者与消费者&lt;/h1&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;
      
    
    </summary>
    
      <category term="多线程与并发" scheme="http://cuijing.me/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E5%B9%B6%E5%8F%91/"/>
    
    
      <category term="Java" scheme="http://cuijing.me/tags/Java/"/>
    
      <category term="多线程" scheme="http://cuijing.me/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="Thread" scheme="http://cuijing.me/tags/Thread/"/>
    
  </entry>
  
  <entry>
    <title>多线程常用方法</title>
    <link href="http://cuijing.me/2015/03/03/Java/5-Multithreaded/2-%E7%BA%BF%E7%A8%8B%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>http://cuijing.me/2015/03/03/Java/5-Multithreaded/2-线程常用方法/</id>
    <published>2015-03-03T00:30:00.000Z</published>
    <updated>2016-05-03T12:01:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="多线程常用方法"><a href="#多线程常用方法" class="headerlink" title="多线程常用方法"></a>多线程常用方法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Thread的常用方法：</span></span><br><span class="line"><span class="comment"> * 1.start()        :启动线程并执行相应的run()方法</span></span><br><span class="line"><span class="comment"> * 2.run()          :子线程要执行的代码放入run()方法中</span></span><br><span class="line"><span class="comment"> * 3.currentThread():静态方法: 调取当前的线程</span></span><br><span class="line"><span class="comment"> * 4.getName()      :获取此线程的名字</span></span><br><span class="line"><span class="comment"> * 5.setName()      :设置此线程的名字，主线程main也可以设置。</span></span><br><span class="line"><span class="comment"> * 6.yield()        :调用此方法的线程释放当前CPU的执行权</span></span><br><span class="line"><span class="comment"> * 7.join()         :在A线程中调用B线程的join()方法，表示：当执行到此方法，A线程停止执行，直至B线程执行完毕，</span></span><br><span class="line"><span class="comment"> *                   A线程再接着join()之后的代码执行</span></span><br><span class="line"><span class="comment"> * 8.isAlive()      :判断当前线程是否还存活</span></span><br><span class="line"><span class="comment"> * 9.sleep(long l)  :显式的让当前线程睡眠 l 毫秒</span></span><br><span class="line"><span class="comment"> * 10.线程通信      : wait()    等待 </span></span><br><span class="line"><span class="comment">               notify()  notifyAll()   通知,唤醒</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 设置线程的优先级</span></span><br><span class="line"><span class="comment"> * getPriority() ：返回线程优先值</span></span><br><span class="line"><span class="comment">   setPriority(int newPriority) ：改变线程的优先级</span></span><br><span class="line"><span class="comment">&lt;!-- more --&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubThread1</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">             <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">                   <span class="comment">// try &#123;</span></span><br><span class="line">                   <span class="comment">// Thread.currentThread().sleep(1000);</span></span><br><span class="line">                   <span class="comment">// &#125; catch (InterruptedException e) &#123;</span></span><br><span class="line">                   <span class="comment">// // TODO Auto-generated catch block</span></span><br><span class="line">                   <span class="comment">// e.printStackTrace();</span></span><br><span class="line">                   <span class="comment">// &#125;</span></span><br><span class="line">                  System. out.println(Thread.currentThread().getName() + <span class="string">":"</span></span><br><span class="line">                              + Thread.currentThread().getPriority() + <span class="string">":"</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread1</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            SubThread1 st1 = <span class="keyword">new</span> SubThread1();</span><br><span class="line">            st1.setName( <span class="string">"子线程1"</span>);</span><br><span class="line">            st1.setPriority(Thread. MAX_PRIORITY);</span><br><span class="line">            st1.start();</span><br><span class="line">            Thread. currentThread().setName(<span class="string">"========主线程"</span>);</span><br><span class="line">             <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">                  System. out.println(Thread.currentThread().getName() + <span class="string">":"</span></span><br><span class="line">                              + Thread.currentThread().getPriority() + <span class="string">":"</span> + i);</span><br><span class="line">                   <span class="comment">// if(i % 10 == 0)&#123;</span></span><br><span class="line">                   <span class="comment">// Thread.currentThread().yield();</span></span><br><span class="line">                   <span class="comment">// &#125;</span></span><br><span class="line">                   <span class="comment">// if(i == 20)&#123;</span></span><br><span class="line">                   <span class="comment">// try &#123;</span></span><br><span class="line">                   <span class="comment">// st1.join();</span></span><br><span class="line">                   <span class="comment">// &#125; catch (InterruptedException e) &#123;</span></span><br><span class="line">                   <span class="comment">// // TODO Auto-generated catch block</span></span><br><span class="line">                   <span class="comment">// e.printStackTrace();</span></span><br><span class="line">                   <span class="comment">// &#125;</span></span><br><span class="line">                   <span class="comment">// &#125;</span></span><br><span class="line">            &#125;</span><br><span class="line">            System. out.println(st1.isAlive());</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;多线程常用方法&quot;&gt;&lt;a href=&quot;#多线程常用方法&quot; class=&quot;headerlink&quot; title=&quot;多线程常用方法&quot;&gt;&lt;/a&gt;多线程常用方法&lt;/h1&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;
      
    
    </summary>
    
      <category term="多线程与并发" scheme="http://cuijing.me/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E5%B9%B6%E5%8F%91/"/>
    
    
      <category term="Java" scheme="http://cuijing.me/tags/Java/"/>
    
      <category term="多线程" scheme="http://cuijing.me/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="Thread" scheme="http://cuijing.me/tags/Thread/"/>
    
  </entry>
  
  <entry>
    <title>多线程概念</title>
    <link href="http://cuijing.me/2015/03/03/Java/5-Multithreaded/1-%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>http://cuijing.me/2015/03/03/Java/5-Multithreaded/1-多线程/</id>
    <published>2015-03-03T00:30:00.000Z</published>
    <updated>2016-05-03T11:39:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="理解程序、进程、线程的概念"><a href="#理解程序、进程、线程的概念" class="headerlink" title="理解程序、进程、线程的概念"></a>理解程序、进程、线程的概念</h1><p>程序：静态的代码；<br>进程：执行中的程序，动态的过程；<br>线程：进程的进一步细分，程序的一条执行路径。<br><a id="more"></a></p><h1 id="如何创建java程序的线程（重点）"><a href="#如何创建java程序的线程（重点）" class="headerlink" title="如何创建java程序的线程（重点）"></a>如何创建java程序的线程（重点）</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">方式一：继承于Thread类</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 创建一个子线程，完成1-100之间自然数的输出。同样地，主线程执行同样的操作</span></span><br><span class="line"><span class="comment"> * 创建多线程的第一种方式：继承java.lang.Thread类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.创建一个继承于Thread的子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"><span class="comment">// 2.重写Thread类的run()方法.方法内实现此子线程要完成的功能</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">             <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">100</span>;i++)&#123;</span><br><span class="line">                  System. out.println(Thread. currentThread().getName() +<span class="string">":"</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">             <span class="comment">// 3.创建子类的对象</span></span><br><span class="line">            SubThread st1 = <span class="keyword">new</span> SubThread();</span><br><span class="line">            SubThread st2 = <span class="keyword">new</span> SubThread();</span><br><span class="line"></span><br><span class="line">             <span class="comment">// 4.调用线程的start()：启动此线程；调用相应的run()方法</span></span><br><span class="line">             <span class="comment">//一个线程只能够执行一次start()</span></span><br><span class="line">             <span class="comment">//不能通过Thread实现类对象的run()去启动一个线程</span></span><br><span class="line">            st1.start();</span><br><span class="line">             <span class="comment">//st.start();</span></span><br><span class="line">             <span class="comment">//st.run();</span></span><br><span class="line">            st2.start();</span><br><span class="line">            </span><br><span class="line">             <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">100</span>;i++)&#123;</span><br><span class="line">                  System. out.println(Thread. currentThread().getName() +<span class="string">":"</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">方式二：实现Runnable接口</span><br><span class="line">             </span><br><span class="line"><span class="comment">//1.创建一个实现了Runnable接口的类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrintNum1</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">      <span class="comment">//2.实现接口的抽象方法</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">// 子线程执行的代码</span></span><br><span class="line">            <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123; </span><br><span class="line">                   <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                        System. out.println(Thread. currentThread().getName() + <span class="string">":"</span> + i);</span><br><span class="line">                  &#125;</span><br><span class="line">            &#125;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread1</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">             <span class="comment">//3.创建一个Runnable接口实现类的对象</span></span><br><span class="line">            PrintNum1 p = <span class="keyword">new</span> PrintNum1();</span><br><span class="line"><span class="comment">//          p.start();</span></span><br><span class="line"><span class="comment">//          p.run();</span></span><br><span class="line">             <span class="comment">//要想启动一个多线程，必须调用start()</span></span><br><span class="line">             <span class="comment">//4.将此对象作为形参传递给Thread类的构造器中，创建Thread类的对象，此对象即为一个线程</span></span><br><span class="line">            Thread t1 = <span class="keyword">new</span> Thread(p);</span><br><span class="line">             <span class="comment">//5.调用start()方法：启动线程并执行run()</span></span><br><span class="line">            t1.start(); <span class="comment">//启动线程；执行Thread对象生成时构造器形参的对象的run()方法。</span></span><br><span class="line">            </span><br><span class="line">             <span class="comment">//再创建一个线程</span></span><br><span class="line">            Thread t2 = <span class="keyword">new</span> Thread(p);</span><br><span class="line">            t2.start();</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="两种方式的对比"><a href="#两种方式的对比" class="headerlink" title="两种方式的对比"></a>两种方式的对比</h2><p>联系：<code>class Thread implements Runnable</code></p><p>比较哪个好？<strong>实现的方式较好</strong>。</p><ol><li>解决了单继承的局限性；</li><li>如果多个线程有共享数据的话，建议使用实现方式，同时，共享数据所在的类可以作为Runnable接口的实现类；</li></ol><h1 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h1><p><img src="http://oov0wb0gl.bkt.clouddn.com/2017-06-06-14949029843063.jpg" alt=""></p><h1 id="线程的同步机制（重点、难点）"><a href="#线程的同步机制（重点、难点）" class="headerlink" title="线程的同步机制（重点、难点）"></a>线程的同步机制（重点、难点）</h1><p>前提：</p><p>如果我们创建的多个线程，存在着共享数据，那么就有可能出现线程的安全问题：当其中一个线程操作共享数据时，还未操作完成，另外的线程就参与进来，导致对共享数据的操作出现问题。</p><p>解决方式：要求一个线程操作共享数据时，只有当其完成操作完成共享数据，其它线程才有机会执行共享数据。</p><p><strong>建议使用方式</strong><br>(非静态方法) 同步代码块(this)</p><p>(静态方法) 同步代码块(clazz)  : <code>Class clazz = Singleton.class</code></p><h2 id="方式一：同步代码块"><a href="#方式一：同步代码块" class="headerlink" title="方式一：同步代码块"></a>方式一：同步代码块</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(同步监视器)&#123;</span><br><span class="line">     <span class="comment">//操作共享数据的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：</p><ol><li>同步监视器：俗称锁，任何一个类的对象都可以充当锁.。要想保证线程的安全，必须要求所有的线程共用同一把锁！</li><li>使用实现Runnable接口的方式创建多线程的话，同步代码块中的锁，可以考虑是this。如果使用继承Thread类的方式，慎用this!</li><li>共享数据：多个线程需要共同操作的变量。明确哪部分是操作共享数据的代码。</li><li>对于非静态的方法而言，使用同步的话，默认锁为：this；</li><li>对于静态的方法，如果使用同步，默认的锁为：当前类本身。以单例的懒汉式为例，<code>Class clazz = Singleton.class</code>。</li></ol><h2 id="方式二：同步方法"><a href="#方式二：同步方法" class="headerlink" title="方式二：同步方法"></a>方式二：同步方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法声明为synchronized</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">( )</span></span>&#123;</span><br><span class="line">   操作共享数据额代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同步方法的锁默认为  this  如果使用在继承的方式实现多线程，同步方法中默认锁不可用this！</p><blockquote><p>同步会导致程序的执行效率降低，但是即使这样也不能不用！！！</p></blockquote><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>释放锁:  <code>notify()/notifyAll()</code>:</p><p>notify()和notifyAll()都是Object对象用于通知处在等待该对象的线程的方法。</p><p>两者的最大区别在于：</p><ul><li><p><code>notifyAll()</code>：使所有原来在<strong>该对象上等待</strong>被notify的线程统统退出wait的状态，变成等待该对象上的锁，一旦该对象被解锁，他们就会去竞争。</p></li><li><p><code>notify()</code>：则文明得多，他只是选择一个wait状态线程进行通知，并使它获得该对象上的锁，但不惊动其他同样在等待被该对象notify的线程们，当第一个线程运行完毕以后释放对象上的锁此时如果该对象没有再次使用notify语句，则即便该对象已经空闲，其他wait状态等待的线程由于没有得到该对象的通知，继续处在wait状态，直到这个对象发出一个notify或notifyAll，它们等待的是被notify或notifyAll，而不是锁。</p></li></ul><p>不释放锁:  <code>sleep()  , yield() , suspend()  (过时，可能导致死锁)</code></p><p>死锁：不同的线程分别占用对方需要的同步资源不放弃，都在等待对方放弃自己需要的同步资源，就形成了线程的死锁，死锁是我们在使用同步时，需要避免的问题！</p><h1 id="5、线程的通信："><a href="#5、线程的通信：" class="headerlink" title="5、线程的通信："></a>5、线程的通信：</h1><p>重要： <strong>如下的三个方法必须使用在同步代码块或同步方法中！</strong></p><h2 id="wait"><a href="#wait" class="headerlink" title="wait()"></a>wait()</h2><p>当在同步中，执行到此方法，则此线程“等待”，直至其他线程执行notify()的方法，将其唤醒，唤醒后继续其wait()后的代码</p><h2 id="notify-notifyAll"><a href="#notify-notifyAll" class="headerlink" title="notify()/notifyAll()"></a>notify()/notifyAll()</h2><ul><li><p>notify()调用后，并不是马上就释放对象锁的，而是在相应的synchronized(){}语句块执行结束，自动释放锁后，JVM会在wait()对象锁的线程中随机选取一线程，赋予其对象锁，唤醒线程，继续执行</p></li><li><p>释放自身对象锁，唤醒下一个\全部 等待线程，在同步中，执行到此方法，则唤醒其他的某一个或所有的被wait的线程。</p></li></ul><blockquote><p>例题：1.两个线程交替打印1-100自然数   2.生产者、消费者的例子</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;理解程序、进程、线程的概念&quot;&gt;&lt;a href=&quot;#理解程序、进程、线程的概念&quot; class=&quot;headerlink&quot; title=&quot;理解程序、进程、线程的概念&quot;&gt;&lt;/a&gt;理解程序、进程、线程的概念&lt;/h1&gt;&lt;p&gt;程序：静态的代码；&lt;br&gt;进程：执行中的程序，动态的过程；&lt;br&gt;线程：进程的进一步细分，程序的一条执行路径。&lt;br&gt;
    
    </summary>
    
      <category term="多线程与并发" scheme="http://cuijing.me/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E5%B9%B6%E5%8F%91/"/>
    
    
      <category term="Java" scheme="http://cuijing.me/tags/Java/"/>
    
      <category term="多线程" scheme="http://cuijing.me/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="Thread" scheme="http://cuijing.me/tags/Thread/"/>
    
  </entry>
  
  <entry>
    <title>IO 流</title>
    <link href="http://cuijing.me/2015/03/03/Java/4-IO-Stream/IO/"/>
    <id>http://cuijing.me/2015/03/03/Java/4-IO-Stream/IO/</id>
    <published>2015-03-03T00:30:00.000Z</published>
    <updated>2016-05-04T11:05:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h1><p>字节流：一次读入或读出是8位二进制。<br>字符流：一次读入或读出是16位二进制。</p><p>字节流和字符流的原理是相同的，只不过处理的单位不同而已。后缀是Stream是字节流，而后缀是Reader，Writer是字符流。<a id="more"></a></p><p>节点流：直接与数据源相连，读入或读出。</p><p><img src="http://oov0wb0gl.bkt.clouddn.com/2017-06-06-14948633565434.jpg" alt=""></p><p>直接使用节点流，读写不方便，为了更快的读写文件，才有了处理流。</p><p><img src="http://oov0wb0gl.bkt.clouddn.com/2017-06-06-14948633652124.jpg" alt=""></p><p>处理流：与节点流一块使用，在节点流的基础上，再套接一层，套接在节点流上的就是处理流。</p><p><img src="http://oov0wb0gl.bkt.clouddn.com/2017-06-06-14948631079354.jpg?imageMogr2/thumbnail/!50p/blur/1x0/quality/75|imageslim" alt=""></p><h1 id="1、java-io包下的File类"><a href="#1、java-io包下的File类" class="headerlink" title="1、java.io包下的File类"></a>1、java.io包下的File类</h1><p> File类：java程序中的此类的一个对象，就对应着硬盘中的一个文件或网络中的一个资源。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">File file1 = <span class="keyword">new</span> File(<span class="string">"d:\\io\\helloworld.txt"</span>);</span><br><span class="line">File file2 = <span class="keyword">new</span> File(<span class="string">"d:\\io\\io1"</span>); </span><br><span class="line"><span class="comment">//或者  </span></span><br><span class="line">File file3 = <span class="keyword">new</span> File(<span class="string">"d:/io/io1"</span>);</span><br></pre></td></tr></table></figure><p>File的静态属性<code>String separator</code>存储了当前系统的路径分隔符。<br>在UNIX中，此字段为‘/’，在Windows中，为‘\’</p><ol><li>File既可以表示一个文件（.doc  .xls   .mp3  .avi   .jpg  .dat），也可以表示一个文件目录！</li><li>File类的对象是与平台无关的。</li><li>File类针对于文件或文件目录，只能进行新建、删除、重命名、上层目录等等的操作。如果涉及到访问文件的内容，File是无能为力的，只能使用IO流下 提供的相应的输入输出流来实现。</li><li>常把File类的对象作为形参传递给相应的输入输出流的构造器中！</li></ol><h2 id="File类的常见构造方法："><a href="#File类的常见构造方法：" class="headerlink" title="File类的常见构造方法："></a>File类的常见构造方法：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">File</span><span class="params">(String pathname)</span></span></span><br><span class="line"><span class="function">         以pathname为路径创建File对象，可以是绝对路径或者相对路径，如果pathname是相对路径，则默认的当前路径在系统属性user.dir中存储。</span></span><br><span class="line"><span class="function">         </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">File</span><span class="params">(String parent,String child)</span></span></span><br><span class="line"><span class="function">          以parent为父路径，child为子路径创建File对象。</span></span><br></pre></td></tr></table></figure><p><img src="http://oov0wb0gl.bkt.clouddn.com/2017-06-06-14948455642362.png" alt=""></p><h1 id="2、IO-流的结构"><a href="#2、IO-流的结构" class="headerlink" title="2、IO 流的结构"></a>2、IO 流的结构</h1><table><thead><tr><th>分类</th><th>字节输入流</th><th>字节输出流</th><th>字符输入流</th><th>字符输出流</th></tr></thead><tbody><tr><td>抽象基类</td><td>InputStream</td><td>OutputStream</td><td>Reader</td><td>Writer</td></tr><tr><td>访问文件</td><td>FileInputStream</td><td>FileOutputStream</td><td>FileReader</td><td>FileWriter</td></tr><tr><td>访问数组</td><td>ByteArrayInputStream</td><td>ByteArrayOutputStream</td><td>CharArrayReader</td><td>CharArrayWriter</td></tr><tr><td>访问管道</td><td>PipedInputStream</td><td>PipedOutputStream</td><td>PipedReader</td><td>PipedWriter</td></tr><tr><td>访问字符串</td><td></td><td></td><td>StringReader</td><td>StringWriter</td></tr><tr><td>缓冲流</td><td>BufferedInputStream</td><td>BufferedOutputStream</td><td>BufferedReader</td><td>BufferedWriter</td></tr><tr><td>转换流</td><td></td><td></td><td>InputStreamReader</td><td>OutputStreamWriter</td></tr><tr><td>对象流</td><td>ObjectInputStream</td><td>ObjectOutputStream</td><td></td><td></td></tr><tr><td></td><td>FilterInputStream</td><td>FilterOutputStream</td><td>FilterReader</td><td>FilterWriter</td></tr><tr><td>打印流</td><td></td><td>PrintStream</td><td></td><td>PrintWriter</td></tr><tr><td>推回输入流</td><td>PushbackInputStream</td><td></td><td>PushbackReader</td><td></td></tr><tr><td>特殊流</td><td>DataInputStream</td><td>DataOutputStream</td><td></td></tr></tbody></table><h1 id="3、IO流的划分"><a href="#3、IO流的划分" class="headerlink" title="3、IO流的划分"></a>3、IO流的划分</h1><ol><li>按照流的流向的不同：输入流   输出流  (站位于程序的角度)</li><li>按照流中的数据单位的不同：字节流   字符流  （纯文本文件使用字符流 ，除此之外使用字节流）</li><li>按照流的角色的不同：节点流   处理流（流直接作用于文件上是节点流（4个），除此之外都是处理流）</li></ol><h1 id="4、重点掌握"><a href="#4、重点掌握" class="headerlink" title="4、重点掌握"></a>4、重点掌握</h1><table><thead><tr><th>抽象基类</th><th>节点流(文件流)</th><th>缓冲流（处理流的一种,可以提升文件操作的效率）</th></tr></thead><tbody><tr><td>InputStream</td><td>FileInputStream （int read(byte[] b)）</td><td>BufferedInputStream  (int read(byte[] b))</td></tr><tr><td>OutputStream</td><td>FileOutputStream (void write(b,0,len))</td><td>BufferedOutputStream  (flush())  (void write(b,0,len))</td></tr><tr><td>Reader</td><td>FileReader (int read(char[] c))</td><td>BufferedReader  (readLine())  (int read(char[] c))或String readLine()</td></tr><tr><td>Writer</td><td>FileWriter (void write(c,0,len))</td><td>BufferedWriter  (flush()) (void write(c,0,len)或void write(String str))</td></tr></tbody></table><p> 注：</p><ol><li>从硬盘中读入一个文件，要求此文件一定得存在。若不存在，报<code>FileNotFoundException</code>的异常；</li><li>从程序中输出一个文件到硬盘，此文件可以不存在。若不存在，就创建一个实现输出。若存在，则将已存在的文件覆盖；</li><li>真正开发时，就使用缓冲流来代替节点流；</li><li>主要最后要关闭相应的流。先关闭输出流，再关闭输入流。将此操作放入<code>finally</code>。</li></ol><h1 id="5、其它的流"><a href="#5、其它的流" class="headerlink" title="5、其它的流"></a>5、其它的流</h1><h2 id="1、转换流：实现字节流与字符流之间的转换"><a href="#1、转换流：实现字节流与字符流之间的转换" class="headerlink" title="1、转换流：实现字节流与字符流之间的转换"></a>1、转换流：实现字节流与字符流之间的转换</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">InputStreamReader:  输入时，实现字节流到字符流的转换，提高操作的效率（前提是，数据是文本文件）  </span><br><span class="line">               ===&gt;解码：字节数组---&gt;字符串</span><br><span class="line">               </span><br><span class="line">OutputStreamWriter：输出时，实现字符流到字节流的转换。</span><br><span class="line">               ===&gt;编码：  字符串----&gt;字节数组</span><br></pre></td></tr></table></figure><h2 id="2、标准的输入输出流"><a href="#2、标准的输入输出流" class="headerlink" title="2、标准的输入输出流"></a>2、标准的输入输出流</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.in:  The <span class="string">"standard"</span> input stream:  从键盘输入数据   </span><br><span class="line">System.out: The <span class="string">"standard"</span> output stream： 从显示器输出数据</span><br></pre></td></tr></table></figure><h2 id="3、打印流-都是输出流-PrintStream-处理字节-PrintWriter-处理字符"><a href="#3、打印流-都是输出流-PrintStream-处理字节-PrintWriter-处理字符" class="headerlink" title="3、打印流 (都是输出流)  PrintStream(处理字节)  PrintWriter(处理字符)"></a>3、打印流 (都是输出流)  PrintStream(处理字节)  PrintWriter(处理字符)</h2><h2 id="4、数据流（处理基本数据类型、String类、字节数组）"><a href="#4、数据流（处理基本数据类型、String类、字节数组）" class="headerlink" title="4、数据流（处理基本数据类型、String类、字节数组）"></a>4、数据流（处理基本数据类型、String类、字节数组）</h2><pre><code>DataInputStream  DataOutputStream</code></pre><h2 id="5、对象流-用来处理对象的"><a href="#5、对象流-用来处理对象的" class="headerlink" title="5、对象流(用来处理对象的)"></a>5、对象流(用来处理对象的)</h2><p>对象的序列化机制：允许把内存中的Java对象转换成平台无关的二进制流，从而允许把这种二进制流持久地保存在磁盘上，或通过网络将这种二进制流传输到另一个网络节点。当其它程序获取了这种二进制流，就可以恢复成原来的Java对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ObjectInputStream（Object readObject();）   </span></span><br><span class="line"><span class="comment">// ObjectOutputStream  (void writeObject(Object obj))</span></span><br><span class="line">     如何创建流的对象：</span><br><span class="line">ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(<span class="string">"person.txt"</span>)));</span><br><span class="line"></span><br><span class="line">ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(<span class="string">"person.txt"</span>)));</span><br><span class="line">```            </span><br><span class="line">实现序列化机制的对象对应的类的要求：</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>. 要求类要实现Serializable接口</span><br><span class="line"><span class="number">2</span>. 同样要求类的所有属性也必须实现Serializable接口</span><br><span class="line"><span class="number">3</span>.  要求给类提供一个序列版本号：<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID;</span><br><span class="line"><span class="number">4</span>. 属性声明为<span class="keyword">static</span> 或<span class="keyword">transient</span>的，不可以实现序列化</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 6、随机存取文件流:RandomAccessFile</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>. 既可以充当一个输入流，又可以充当一个输出流：`<span class="function"><span class="keyword">public</span> <span class="title">RandomAccessFile</span><span class="params">(File file, String mode)</span>`</span></span><br><span class="line"><span class="function">2. 支持从文件的开头读取、写入。若输出的文件不存在，直接创建。若存在，则是对原有文件内容的覆盖。</span></span><br><span class="line"><span class="function">3. 支持任意位置的“插入”。</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">```java</span></span><br><span class="line"><span class="function"><span class="comment">// 构造器</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">RandomAccessFile</span><span class="params">(File file, String mode)</span> </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">RandomAccessFile</span><span class="params">(String name, String mode)</span></span></span><br><span class="line"><span class="function"> </span></span><br><span class="line"><span class="function"><span class="comment">// 创建 RandomAccessFile 类实例需要指定一个 mode 参数，该参数指定 RandomAccessFile 的访问模式：</span></span></span><br><span class="line"><span class="function">r: 以只读方式打开</span></span><br><span class="line"><span class="function">rw：打开以便读取和写入</span></span><br><span class="line"><span class="function">rwd:打开以便读取和写入；同步文件内容的更新</span></span><br><span class="line"><span class="function">rws:打开以便读取和写入；同步文件内容和元数据的更新</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;总览&quot;&gt;&lt;a href=&quot;#总览&quot; class=&quot;headerlink&quot; title=&quot;总览&quot;&gt;&lt;/a&gt;总览&lt;/h1&gt;&lt;p&gt;字节流：一次读入或读出是8位二进制。&lt;br&gt;字符流：一次读入或读出是16位二进制。&lt;/p&gt;
&lt;p&gt;字节流和字符流的原理是相同的，只不过处理的单位不同而已。后缀是Stream是字节流，而后缀是Reader，Writer是字符流。
    
    </summary>
    
      <category term="Java 基础" scheme="http://cuijing.me/categories/Java-%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="http://cuijing.me/tags/Java/"/>
    
      <category term="IO" scheme="http://cuijing.me/tags/IO/"/>
    
  </entry>
  
  <entry>
    <title>TCP/IP 概念小结</title>
    <link href="http://cuijing.me/2015/03/03/HTTP/2-TCP:IP/"/>
    <id>http://cuijing.me/2015/03/03/HTTP/2-TCP:IP/</id>
    <published>2015-03-03T00:30:00.000Z</published>
    <updated>2016-05-02T13:23:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="为什么会有TCP-IP协议？"><a href="#为什么会有TCP-IP协议？" class="headerlink" title="为什么会有TCP/IP协议？"></a>为什么会有TCP/IP协议？</h1><p>在世界上各地，各种各样的电脑运行着各自不同的操作系统为大家服务，计算机使用者意识到，计算机只是单兵作战并不会发挥太大的作用。只有把它们联合起来，电脑才会发挥出它最大的潜力。于是人们就想方设法的用电线把电脑连接到了一起。</p><p>但是简单的连到一起是远远不够的，就好像语言不同的两个人互相见了面，完全不能交流信息。因而他们需要定义一些共通的东西来进行交流，TCP/IP就是为此而生。</p><p><strong>TCP/IP不是一个协议，而是一个协议族的统称</strong>。<br><a id="more"></a><br>里面包括了IP协议，IMCP协议，TCP协议，以及我们更加熟悉的http、ftp、pop3协议等等。电脑有了这些，就好像学会了外语一样，就可以和其他的计算机终端做自由的交流了。</p><h1 id="TCP-IP协议分层"><a href="#TCP-IP协议分层" class="headerlink" title="TCP/IP协议分层"></a>TCP/IP协议分层</h1><p>提到协议分层，我们很容易联想到ISO-OSI的七层协议经典架构，但是TCP/IP协议族的结构则稍有不同。如图所示<br><img src="http://oov0wb0gl.bkt.clouddn.com/2017-06-06-14953600518085.png" alt=""></p><p>TCP/IP协议族按照层次由上到下，层层包装。</p><ol><li>最上面是应用层，这里面有http，ftp,等等我们熟悉的协议。</li><li>第二层则是传输层，著名的TCP和UDP协议就在这个层次。</li><li>第三层是网络层，IP协议就在这里，它负责对数据加上IP地址和其他的数据（后面会讲到）以确定传输的目标。</li><li>第四层是叫数据链路层，这个层次为待传送的数据加入一个以太网协议头，并进行CRC编码，为最后的数据传输做准备。</li><li>再往下则是硬件层次了，负责网络的传输，这个层次的定义包括网线的制式，网卡的定义等等（这些我们就不用关心了，我们也不做网卡），所以有些书并不把这个层次放在tcp/ip协议族里面，因为它几乎和tcp/ip协议的编写者没有任何的关系。</li></ol><p>发送协议的主机从上自下将数据按照协议封装，而接收数据的主机则按照协议从得到的数据包解开，最后拿到需要的数据。这种结构非常有栈的味道，所以某些文章也把tcp/ip协议族称为tcp/ip协议栈。</p><h1 id="基本常识"><a href="#基本常识" class="headerlink" title="基本常识"></a>基本常识</h1><p>在学习协议之前，我们应该具备一些基本知识。</p><ul><li><p>互联网地址(ip地址)<br>网络上每一个节点都必须有一个独立的Internet地址（也叫做IP地址）。现在，通常使用的IP地址是一个32bit的数字，也就是我们常说的IPv4标准，这32bit的数字分成四组，也就是常见的255.255.255.255的样式。IPv4标准上，地址被分为五类，我们常用的是B类地址。具体的分类请参考其他文档。需要注意的是IP地址是网络号+主机号的组合，这非常重要。</p></li><li><p>域名系统是一个分布的数据库，它提供将主机名（就是网址啦）转换成IP地址的服务。</p></li><li><p>RFC是什么？RFC就是tcp/ip协议的标准文档，在这里我们可以看到RFC那长长的定义列表，现在它一共有4000多个协议的定义，当然，我们所要学习的，也就是那么十几个协议而已。</p></li><li><p>端口号(port)<br>注意，这个号码是用在TCP，UDP上的一个逻辑号码，并不是一个硬件端口，我们平时说把某某端口封掉了，也只是在IP层次把带有这个号码的IP包给过滤掉了而已。</p></li><li><p>应用编程接口<br>现在常用的编程接口有socket和TLI。而前面的有时候也叫做“Berkeley socket”，可见Berkeley对于网络的发展有多大的贡献。</p></li></ul><h1 id="TCP-协议"><a href="#TCP-协议" class="headerlink" title="TCP 协议"></a>TCP 协议</h1><p>终于看到了TCP协议，这是TCP/IP详解里面最重要也是最精彩的部分，要花大力气来读。<br>TCP和UDP处在同一层—传输层，但是TCP和UDP最不同的地方是，TCP提供了一种可靠的数据传输服务，TCP是面向连接的，也就是说，利用TCP通信的两台主机首先要经历一个“拨打电话”的过程，等到通信准备结束才开始传输数据，最后结束通话。所以TCP要比UDP可靠的多，UDP是把数据直接发出去，而不管对方是不是在收信，就算是UDP无法送达，也不会产生ICMP差错报文。</p><p>把TCP保证可靠性的简单工作原理摘抄如下</p><ul><li>应用数据被分割成TCP认为最适合发送的数据块。这和UDP完全不同，UDP应用程序产生的数据报长度将保持不变。由TCP传递给IP的信息单位称为报文段或段（ segment）。</li><li>当TCP发出一个段后，它启动一个定时器，等待目的端确认收到这个报文段。如果不能及时收到一个确认，将重发这个报文段。</li><li>当TCP收到发自TCP连接另一端的数据，它将发送一个确认。这个确认不是立即发送，通常将推迟几分之一秒。</li><li>TCP将保持它首部和数据的检验和。这是一个端到端的检验和，目的是检测数据在传输过程中的任何变化。如果收到段的检验和有差错， TCP将丢弃这个报文段和不确认收到此报文段（希望发端超时并重发）。</li><li>既然TCP报文段作为IP数据报来传输，而IP数据报的到达可能会失序，因此TCP报文段的到达也可能会失序。如果必要， TCP将对收到的数据进行重新排序，将收到的数据以正确的顺序交给应用层。</li><li>TCP还能提供流量控制。TCP连接的每一方都有固定大小的缓冲空间。TCP的接收端只允许另一端发送接收端缓冲区所能接纳的数据。这将防止较快主机致使较慢主机的缓冲区溢出。</li></ul><p>从这段话中可以看到，TCP中保持可靠性的方式就是超时重发，这是有道理的，虽然TCP也可以用各种各样的ICMP报文来处理这些，但是这也不是可靠的，<strong>最可靠的方式就是只要不得到确认，就重新发送数据报，直到得到对方的确认为止。</strong></p><p>TCP的首部和UDP首部一样，都有发送端口号和接收端口号。但是显然，TCP的首部信息要比UDP的多，可以看到，TCP协议提供了发送和确认所需要的所有必要的信息。可以想象一个TCP数据的发送应该是如下的一个过程。</p><ol><li>双方建立连接</li><li>发送方给接受方TCP数据报，然后等待对方的确认TCP数据报，如果没有，就重新发，如果有，就发送下一个数据报。</li><li>接受方等待发送方的数据报，如果得到数据报并检验无误，就发送ACK(确认)数据报，并等待下一个TCP数据报的到来。直到接收到FIN(发送完成数据报)</li></ol><p>可以想见，为了建立一个TCP连接，系统可能会建立一个新的进程（最差也是一个线程），来进行数据的传送。</p><h1 id="TCP连接的建立与中止"><a href="#TCP连接的建立与中止" class="headerlink" title="TCP连接的建立与中止"></a>TCP连接的建立与中止</h1><p>TCP是一个面向连接的协议，所以在连接双方发送数据之前，都需要首先建立一条连接。这和前面讲到的协议完全不同。前面讲的所有协议都只是发送数据而已，大多数都不关心发送的数据是不是送到，UDP尤其明显，从编程的角度来说，UDP编程也要简单的多—-UDP都不用考虑数据分片。<br>书中用telnet登陆退出来解释TCP协议连接的建立和中止的过程，可以看到，TCP连接的建立可以简单的称为三次握手，而连接的中止则可以叫做四次握手。</p><p><img src="http://oov0wb0gl.bkt.clouddn.com/2017-06-06-14953701252071.jpg" alt=""></p><h2 id="1、连接的建立"><a href="#1、连接的建立" class="headerlink" title="1、连接的建立"></a>1、连接的建立</h2><p>在建立连接的时候，客户端首先向服务器申请打开某一个端口(用SYN段等于1的TCP报文)，然后服务器端发回一个ACK报文通知客户端请求报文收到，客户端收到确认报文以后再次发出确认报文确认刚才服务器端发出的确认报文（绕口么），至此，连接的建立完成。这就叫做三次握手。如果打算让双方都做好准备的话，一定要发送三次报文，而且只需要三次报文就可以了。<br><img src="http://oov0wb0gl.bkt.clouddn.com/2017-06-06-14953711068491.jpg" alt=""></p><p>可以想见，如果再加上TCP的超时重传机制，那么TCP就完全可以保证一个数据包被送到目的地。</p><h2 id="2、结束连接"><a href="#2、结束连接" class="headerlink" title="2、结束连接"></a>2、结束连接</h2><p><img src="http://oov0wb0gl.bkt.clouddn.com/2017-06-06-14953699173364.jpg" alt=""></p><p>TCP有一个特别的概念叫做half-close，这个概念是说，TCP的连接是全双工（可以同时发送和接收）连接，因此在关闭连接的时候，必须关闭传和送两个方向上的连接。客户机给服务器一个FIN为1的TCP报文，然后服务器返回给客户端一个确认ACK报文，并且发送一个FIN报文，当客户机回复ACK报文后（四次握手），连接就结束了。</p><h2 id="3、最大报文长度"><a href="#3、最大报文长度" class="headerlink" title="3、最大报文长度"></a>3、最大报文长度</h2><p>在建立连接的时候，通信的双方要互相确认对方的最大报文长度(MSS)，以便通信。一般这个SYN长度是MTU减去固定IP首部和TCP首部长度。对于一个以太网，一般可以达到1460字节。当然如果对于非本地的IP，这个MSS可能就只有536字节，而且，如果中间的传输网络的MSS更佳的小的话，这个值还会变得更小。</p><h2 id="4、为什么连接的时候是三次握手，关闭的时候却是四次握手？"><a href="#4、为什么连接的时候是三次握手，关闭的时候却是四次握手？" class="headerlink" title="4、为什么连接的时候是三次握手，关闭的时候却是四次握手？"></a>4、为什么连接的时候是三次握手，关闭的时候却是四次握手？</h2><p>答：因为当Server端收到Client端的SYN连接请求报文后，可以直接发送SYN+ACK报文。其中ACK报文是用来应答的，SYN报文是用来同步的。但是关闭连接时，当Server端收到FIN报文时，很可能并不会立即关闭SOCKET，所以只能先回复一个ACK报文，告诉Client端，”你发的FIN报文我收到了”。只有等到我Server端所有的报文都发送完了，我才能发送FIN报文，因此不能一起发送。故需要四步握手。</p><h2 id="5、为什么TIME-WAIT状态需要经过2MSL-最大报文段生存时间-才能返回到CLOSE状态？"><a href="#5、为什么TIME-WAIT状态需要经过2MSL-最大报文段生存时间-才能返回到CLOSE状态？" class="headerlink" title="5、为什么TIME_WAIT状态需要经过2MSL(最大报文段生存时间)才能返回到CLOSE状态？"></a>5、为什么TIME_WAIT状态需要经过2MSL(最大报文段生存时间)才能返回到CLOSE状态？</h2><p>答：虽然按道理，四个报文都发送完毕，我们可以直接进入CLOSE状态了，但是我们必须假象网络是不可靠的，有可以最后一个ACK丢失。所以TIME_WAIT状态就是用来重发可能丢失的ACK报文。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;为什么会有TCP-IP协议？&quot;&gt;&lt;a href=&quot;#为什么会有TCP-IP协议？&quot; class=&quot;headerlink&quot; title=&quot;为什么会有TCP/IP协议？&quot;&gt;&lt;/a&gt;为什么会有TCP/IP协议？&lt;/h1&gt;&lt;p&gt;在世界上各地，各种各样的电脑运行着各自不同的操作系统为大家服务，计算机使用者意识到，计算机只是单兵作战并不会发挥太大的作用。只有把它们联合起来，电脑才会发挥出它最大的潜力。于是人们就想方设法的用电线把电脑连接到了一起。&lt;/p&gt;
&lt;p&gt;但是简单的连到一起是远远不够的，就好像语言不同的两个人互相见了面，完全不能交流信息。因而他们需要定义一些共通的东西来进行交流，TCP/IP就是为此而生。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TCP/IP不是一个协议，而是一个协议族的统称&lt;/strong&gt;。&lt;br&gt;
    
    </summary>
    
      <category term="网络编程" scheme="http://cuijing.me/categories/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Java" scheme="http://cuijing.me/tags/Java/"/>
    
      <category term="TCP/IP" scheme="http://cuijing.me/tags/TCP-IP/"/>
    
  </entry>
  
  <entry>
    <title>多线程总结</title>
    <link href="http://cuijing.me/2015/03/03/Java/5-Multithreaded/5-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%80%BB%E7%BB%93/"/>
    <id>http://cuijing.me/2015/03/03/Java/5-Multithreaded/5-多线程总结/</id>
    <published>2015-03-03T00:30:00.000Z</published>
    <updated>2016-05-03T13:35:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、多线程有什么用？"><a href="#1、多线程有什么用？" class="headerlink" title="1、多线程有什么用？"></a>1、多线程有什么用？</h1><p>一个可能在很多人看来很扯淡的一个问题：我会用多线程就好了，还管它有什么用？在我看来，这个回答更扯淡。所谓”知其然知其所以然”，”会用”只是”知其然”，”为什么用”才是”知其所以然”，只有达到”知其然知其所以然”的程度才可以说是把一个知识点运用自如。OK，下面说说我对这个问题的看法：<br><a id="more"></a></p><p>（1）发挥多核CPU的优势</p><p>随着工业的进步，现在的笔记本、台式机乃至商用的应用服务器至少也都是双核的，4核、8核甚至16核的也都不少见，如果是单线程的程序，那么在双核CPU上就浪费了50%，在4核CPU上就浪费了75%。单核CPU上所谓的”多线程”那是假的多线程，同一时间处理器只会处理一段逻辑，只不过线程之间切换得比较快，看着像多个线程”同时”运行罢了。多核CPU上的多线程才是真正的多线程，它能让你的多段逻辑同时工作，多线程，可以真正发挥出多核CPU的优势来，达到充分利用CPU的目的。</p><p>（2）防止阻塞</p><p>从程序运行效率的角度来看，单核CPU不但不会发挥出多线程的优势，反而会因为在单核CPU上运行多线程导致线程上下文的切换，而降低程序整体的效率。但是单核CPU我们还是要应用多线程，就是为了防止阻塞。试想，如果单核CPU使用单线程，那么只要这个线程阻塞了，比方说远程读取某个数据吧，对端迟迟未返回又没有设置超时时间，那么你的整个程序在数据返回回来之前就停止运行了。多线程可以防止这个问题，多条线程同时运行，哪怕一条线程的代码执行读取数据阻塞，也不会影响其它任务的执行。</p><p>（3）便于建模</p><p>这是另外一个没有这么明显的优点了。假设有一个大的任务A，单线程编程，那么就要考虑很多，建立整个程序模型比较麻烦。但是如果把这个大的任务A分解成几个小任务，任务B、任务C、任务D，分别建立程序模型，并通过多线程分别运行这几个任务，那就简单很多了。</p><h1 id="2、创建线程的方式"><a href="#2、创建线程的方式" class="headerlink" title="2、创建线程的方式"></a>2、创建线程的方式</h1><p>比较常见的一个问题了，一般就是两种：</p><ol><li><p>继承Thread类</p></li><li><p>实现Runnable接口</p></li></ol><p>至于哪个好，不用说肯定是后者好，因为实现接口的方式比继承类的方式更灵活，也能减少程序之间的耦合度，面向接口编程也是设计模式6大原则的核心。</p><h1 id="3、start-方法和run-方法的区别"><a href="#3、start-方法和run-方法的区别" class="headerlink" title="3、start()方法和run()方法的区别"></a>3、start()方法和run()方法的区别</h1><p>只有调用了start()方法，才会表现出多线程的特性，不同线程的run()方法里面的代码交替执行。如果只是调用run()方法，那么代码还是同步执行的，必须等待一个线程的run()方法里面的代码全部执行完毕之后，另外一个线程才可以执行其run()方法里面的代码。</p><h1 id="4、Runnable接口和Callable接口的区别"><a href="#4、Runnable接口和Callable接口的区别" class="headerlink" title="4、Runnable接口和Callable接口的区别"></a>4、Runnable接口和Callable接口的区别</h1><p>有点深的问题了，也看出一个Java程序员学习知识的广度。</p><p>Runnable接口中的run()方法的返回值是void，它做的事情只是纯粹地去执行run()方法中的代码而已；Callable接口中的call()方法是有返回值的，是一个泛型，和Future、FutureTask配合可以用来获取异步执行的结果。</p><p>这其实是很有用的一个特性，因为多线程相比单线程更难、更复杂的一个重要原因就是因为多线程充满着未知性，某条线程是否执行了？某条线程执行了多久？某条线程执行的时候我们期望的数据是否已经赋值完毕？无法得知，我们能做的只是等待这条多线程的任务执行完毕而已。而Callable+Future/FutureTask却可以获取多线程运行的结果，可以在等待时间太长没获取到需要的数据的情况下取消该线程的任务，真的是非常有用。</p><h1 id="5、CyclicBarrier和CountDownLatch的区别"><a href="#5、CyclicBarrier和CountDownLatch的区别" class="headerlink" title="5、CyclicBarrier和CountDownLatch的区别"></a>5、CyclicBarrier和CountDownLatch的区别</h1><p>两个看上去有点像的类，都在java.util.concurrent下，都可以用来表示代码运行到某个点上，二者的区别在于：</p><ol><li><p>CyclicBarrier的某个线程运行到某个点上之后，该线程即停止运行，直到所有的线程都到达了这个点，所有线程才重新运行；CountDownLatch则不是，某线程运行到某个点上之后，只是给某个数值-1而已，该线程继续运行</p></li><li><p>CyclicBarrier只能唤起一个任务，CountDownLatch可以唤起多个任务</p></li><li><p>CyclicBarrier可重用，CountDownLatch不可重用，计数值为0该CountDownLatch就不可再用了</p></li></ol><h1 id="6、volatile关键字的作用"><a href="#6、volatile关键字的作用" class="headerlink" title="6、volatile关键字的作用"></a>6、volatile关键字的作用</h1><p>一个非常重要的问题，是每个学习、应用多线程的Java程序员都必须掌握的。理解volatile关键字的作用的前提是要理解Java内存模型，这里就不讲Java内存模型了，可以参见第31点，volatile关键字的作用主要有两个：</p><ol><li><p>多线程主要围绕可见性和原子性两个特性而展开，使用volatile关键字修饰的变量，保证了其在多线程之间的可见性，即每次读取到volatile变量，一定是最新的数据</p></li><li><p>代码底层执行不像我们看到的高级语言—-Java程序这么简单，它的执行是Java代码–&gt;字节码–&gt;根据字节码执行对应的C/C++代码–&gt;C/C++代码被编译成汇编语言–&gt;和硬件电路交互，现实中，为了获取更好的性能JVM可能会对指令进行重排序，多线程下可能会出现一些意想不到的问题。使用volatile则会对禁止语义重排序，当然这也一定程度上降低了代码执行效率</p></li></ol><p>从实践角度而言，volatile的一个重要作用就是和CAS结合，保证了原子性，详细的可以参见<code>java.util.concurrent.atomic</code>包下的类，比如<code>AtomicInteger</code>。</p><h1 id="7、什么是线程安全"><a href="#7、什么是线程安全" class="headerlink" title="7、什么是线程安全"></a>7、什么是线程安全</h1><p>又是一个理论的问题，各式各样的答案有很多，我给出一个个人认为解释地最好的：如果你的代码在多线程下执行和在单线程下执行永远都能获得一样的结果，那么你的代码就是线程安全的。</p><p>这个问题有值得一提的地方，就是线程安全也是有几个级别的：</p><h2 id="（1）不可变"><a href="#（1）不可变" class="headerlink" title="（1）不可变"></a>（1）不可变</h2><p>像String、Integer、Long这些，都是final类型的类，任何一个线程都改变不了它们的值，要改变除非新创建一个，因此这些不可变对象不需要任何同步手段就可以直接在多线程环境下使用</p><p>##（2）绝对线程安全</p><p>不管运行时环境如何，调用者都不需要额外的同步措施。要做到这一点通常需要付出许多额外的代价，Java中标注自己是线程安全的类，实际上绝大多数都不是线程安全的，不过绝对线程安全的类，Java中也有，比方说CopyOnWriteArrayList、CopyOnWriteArraySet</p><p>##（3）相对线程安全</p><p>相对线程安全也就是我们通常意义上所说的线程安全，像Vector这种，add、remove方法都是原子操作，不会被打断，但也仅限于此，如果有个线程在遍历某个Vector、有个线程同时在add这个Vector，99%的情况下都会出现ConcurrentModificationException，也就是fail-fast机制。</p><p>##（4）线程非安全</p><p>这个就没什么好说的了，ArrayList、LinkedList、HashMap等都是线程非安全的类</p><h1 id="8、Java中如何获取到线程dump文件"><a href="#8、Java中如何获取到线程dump文件" class="headerlink" title="8、Java中如何获取到线程dump文件"></a>8、Java中如何获取到线程dump文件</h1><p>死循环、死锁、阻塞、页面打开慢等问题，打线程dump是最好的解决问题的途径。所谓线程dump也就是线程堆栈，获取到线程堆栈有两步：</p><p>（1）获取到线程的pid，可以通过使用jps命令，在Linux环境下还可以使用ps -ef | grep java</p><p>（2）打印线程堆栈，可以通过使用jstack pid命令，在Linux环境下还可以使用kill -3 pid</p><p>另外提一点，Thread类提供了一个getStackTrace()方法也可以用于获取线程堆栈。这是一个实例方法，因此此方法是和具体线程实例绑定的，每次获取获取到的是具体某个线程当前运行的堆栈，</p><h1 id="9、一个线程如果出现了运行时异常会怎么样"><a href="#9、一个线程如果出现了运行时异常会怎么样" class="headerlink" title="9、一个线程如果出现了运行时异常会怎么样"></a>9、一个线程如果出现了运行时异常会怎么样</h1><p>如果这个异常没有被捕获的话，这个线程就停止执行了。另外重要的一点是：如果这个线程持有某个某个对象的监视器，那么这个对象监视器会被立即释放。</p><h1 id="10、如何在两个线程之间共享数据"><a href="#10、如何在两个线程之间共享数据" class="headerlink" title="10、如何在两个线程之间共享数据"></a>10、如何在两个线程之间共享数据</h1><p>通过在线程之间共享对象就可以了，然后通过wait/notify/notifyAll、await/signal/signalAll进行唤起和等待，比方说阻塞队列BlockingQueue就是为线程之间共享数据而设计的</p><h1 id="11、sleep方法和wait方法有什么区别"><a href="#11、sleep方法和wait方法有什么区别" class="headerlink" title="11、sleep方法和wait方法有什么区别"></a>11、sleep方法和wait方法有什么区别</h1><p>这个问题常问，sleep方法和wait方法都可以用来放弃CPU一定的时间，不同点在于如果线程持有某个对象的监视器，sleep方法不会放弃这个对象的监视器，wait方法会放弃这个对象的监视器。</p><h1 id="12、生产者消费者模型的作用是什么"><a href="#12、生产者消费者模型的作用是什么" class="headerlink" title="12、生产者消费者模型的作用是什么"></a>12、生产者消费者模型的作用是什么</h1><p>这个问题很理论，但是很重要：</p><p>（1）通过平衡生产者的生产能力和消费者的消费能力来提升整个系统的运行效率，这是生产者消费者模型最重要的作用</p><p>（2）解耦，这是生产者消费者模型附带的作用，解耦意味着生产者和消费者之间的联系少，联系越少越可以独自发展而不需要收到相互的制约</p><h1 id="13、ThreadLocal有什么用"><a href="#13、ThreadLocal有什么用" class="headerlink" title="13、ThreadLocal有什么用"></a>13、ThreadLocal有什么用</h1><p>简单说ThreadLocal就是一种以空间换时间的做法，在每个Thread里面维护了一个以开地址法实现的ThreadLocal.ThreadLocalMap，把数据进行隔离，数据不共享，自然就没有线程安全方面的问题了</p><h1 id="14、为什么wait-方法和notify-notifyAll-方法要在同步块中被调用"><a href="#14、为什么wait-方法和notify-notifyAll-方法要在同步块中被调用" class="headerlink" title="14、为什么wait()方法和notify()/notifyAll()方法要在同步块中被调用"></a>14、为什么wait()方法和notify()/notifyAll()方法要在同步块中被调用</h1><p>这是JDK强制的，wait()方法和notify()/notifyAll()方法在调用前都必须先获得对象的锁</p><h1 id="15、wait-方法和notify-notifyAll-方法在放弃对象监视器时有什么区别"><a href="#15、wait-方法和notify-notifyAll-方法在放弃对象监视器时有什么区别" class="headerlink" title="15、wait()方法和notify()/notifyAll()方法在放弃对象监视器时有什么区别"></a>15、wait()方法和notify()/notifyAll()方法在放弃对象监视器时有什么区别</h1><p>wait()方法和notify()/notifyAll()方法在放弃对象监视器的时候的区别在于：wait()方法立即释放对象监视器，notify()/notifyAll()方法则会等待线程剩余代码执行完毕才会放弃对象监视器。</p><h1 id="16、为什么要使用线程池"><a href="#16、为什么要使用线程池" class="headerlink" title="16、为什么要使用线程池"></a>16、为什么要使用线程池</h1><p>避免频繁地创建和销毁线程，达到线程对象的重用。另外，使用线程池还可以根据项目灵活地控制并发的数目。</p><h1 id="17、怎么检测一个线程是否持有对象监视器"><a href="#17、怎么检测一个线程是否持有对象监视器" class="headerlink" title="17、怎么检测一个线程是否持有对象监视器"></a>17、怎么检测一个线程是否持有对象监视器</h1><p>我也是在网上看到一道多线程面试题才知道有方法可以判断某个线程是否持有对象监视器：Thread类提供了一个holdsLock(Object obj)方法，当且仅当对象obj的监视器被某条线程持有的时候才会返回true，注意这是一个static方法，这意味着”某条线程”指的是当前线程。</p><h1 id="18、synchronized和ReentrantLock的区别"><a href="#18、synchronized和ReentrantLock的区别" class="headerlink" title="18、synchronized和ReentrantLock的区别"></a>18、synchronized和ReentrantLock的区别</h1><p>synchronized是和if、else、for、while一样的关键字，ReentrantLock是类，这是二者的本质区别。既然ReentrantLock是类，那么它就提供了比synchronized更多更灵活的特性，可以被继承、可以有方法、可以有各种各样的类变量，ReentrantLock比synchronized的扩展性体现在几点上：</p><ol><li><p>ReentrantLock可以对获取锁的等待时间进行设置，这样就避免了死锁</p></li><li><p>ReentrantLock可以获取各种锁的信息</p></li><li><p>ReentrantLock可以灵活地实现多路通知</p></li></ol><p>另外，二者的锁机制其实也是不一样的。ReentrantLock底层调用的是Unsafe的park方法加锁，synchronized操作的应该是对象头中mark word，这点我不能确定。</p><h1 id="19、ConcurrentHashMap的并发度是什么"><a href="#19、ConcurrentHashMap的并发度是什么" class="headerlink" title="19、ConcurrentHashMap的并发度是什么"></a>19、ConcurrentHashMap的并发度是什么</h1><p>ConcurrentHashMap的并发度就是segment的大小，默认为16，这意味着最多同时可以有16条线程操作ConcurrentHashMap，这也是ConcurrentHashMap对Hashtable的最大优势，任何情况下，Hashtable能同时有两条线程获取Hashtable中的数据吗？</p><h1 id="20、ReadWriteLock是什么"><a href="#20、ReadWriteLock是什么" class="headerlink" title="20、ReadWriteLock是什么"></a>20、ReadWriteLock是什么</h1><p>首先明确一下，不是说ReentrantLock不好，只是ReentrantLock某些时候有局限。如果使用ReentrantLock，可能本身是为了防止线程A在写数据、线程B在读数据造成的数据不一致，但这样，如果线程C在读数据、线程D也在读数据，读数据是不会改变数据的，没有必要加锁，但是还是加锁了，降低了程序的性能。</p><p>因为这个，才诞生了读写锁ReadWriteLock。ReadWriteLock是一个读写锁接口，ReentrantReadWriteLock是ReadWriteLock接口的一个具体实现，实现了读写的分离，读锁是共享的，写锁是独占的，读和读之间不会互斥，读和写、写和读、写和写之间才会互斥，提升了读写的性能。</p><h1 id="21、FutureTask是什么"><a href="#21、FutureTask是什么" class="headerlink" title="21、FutureTask是什么"></a>21、FutureTask是什么</h1><p>这个其实前面有提到过，FutureTask表示一个异步运算的任务。FutureTask里面可以传入一个Callable的具体实现类，可以对这个异步运算的任务的结果进行等待获取、判断是否已经完成、取消任务等操作。当然，由于FutureTask也是Runnable接口的实现类，所以FutureTask也可以放入线程池中。</p><h1 id="22、Linux环境下如何查找哪个线程使用CPU最长"><a href="#22、Linux环境下如何查找哪个线程使用CPU最长" class="headerlink" title="22、Linux环境下如何查找哪个线程使用CPU最长"></a>22、Linux环境下如何查找哪个线程使用CPU最长</h1><p>这是一个比较偏实践的问题，这种问题我觉得挺有意义的。可以这么做：</p><p>（1）获取项目的pid，jps或者ps -ef | grep java，这个前面有讲过</p><p>（2）top -H -p pid，顺序不能改变</p><p>这样就可以打印出当前的项目，每条线程占用CPU时间的百分比。注意这里打出的是LWP，也就是操作系统原生线程的线程号，我笔记本上没有部署Linux环境下的Java工程，因此没有办法截图演示，网友朋友们如果公司是使用Linux环境部署项目的话，可以尝试一下。</p><p>使用”top -H -p pid”+”jps pid”可以很容易地找到某条占用CPU高的线程的线程堆栈，从而定位占用CPU高的原因，一般是因为不当的代码操作导致了死循环。</p><p>最后提一点，”top -H -p pid”打出来的LWP是十进制的，”jps pid”打出来的本地线程号是十六进制的，转换一下，就能定位到占用CPU高的线程的当前线程堆栈了。</p><h1 id="23、Java编程写一个会导致死锁的程序"><a href="#23、Java编程写一个会导致死锁的程序" class="headerlink" title="23、Java编程写一个会导致死锁的程序"></a>23、Java编程写一个会导致死锁的程序</h1><p>第一次看到这个题目，觉得这是一个非常好的问题。很多人都知道死锁是怎么一回事儿：线程A和线程B相互等待对方持有的锁导致程序无限死循环下去。当然也仅限于此了，问一下怎么写一个死锁的程序就不知道了，这种情况说白了就是不懂什么是死锁，懂一个理论就完事儿了，实践中碰到死锁的问题基本上是看不出来的。</p><p>真正理解什么是死锁，这个问题其实不难，几个步骤：</p><ol><li><p>两个线程里面分别持有两个Object对象：lock1和lock2。这两个lock作为同步代码块的锁；</p></li><li><p>线程1的run()方法中同步代码块先获取lock1的对象锁，Thread.sleep(xxx)，时间不需要太多，50毫秒差不多了，然后接着获取lock2的对象锁。这么做主要是为了防止线程1启动一下子就连续获得了lock1和lock2两个对象的对象锁</p></li><li><p>线程2的run)(方法中同步代码块先获取lock2的对象锁，接着获取lock1的对象锁，当然这时lock1的对象锁已经被线程1锁持有，线程2肯定是要等待线程1释放lock1的对象锁的</p></li></ol><p>这样，线程1”睡觉”睡完，线程2已经获取了lock2的对象锁了，线程1此时尝试获取lock2的对象锁，便被阻塞，此时一个死锁就形成了。代码就不写了，占的篇幅有点多，Java多线程7：死锁这篇文章里面有，就是上面步骤的代码实现。</p><h1 id="24、怎么唤醒一个阻塞的线程"><a href="#24、怎么唤醒一个阻塞的线程" class="headerlink" title="24、怎么唤醒一个阻塞的线程"></a>24、怎么唤醒一个阻塞的线程</h1><p>如果线程是因为调用了wait()、sleep()或者join()方法而导致的阻塞，可以中断线程，并且通过抛出InterruptedException来唤醒它；如果线程遇到了IO阻塞，无能为力，因为IO是操作系统实现的，Java代码并没有办法直接接触到操作系统。</p><h1 id="25、不可变对象对多线程有什么帮助"><a href="#25、不可变对象对多线程有什么帮助" class="headerlink" title="25、不可变对象对多线程有什么帮助"></a>25、不可变对象对多线程有什么帮助</h1><p>前面有提到过的一个问题，不可变对象保证了对象的内存可见性，对不可变对象的读取不需要进行额外的同步手段，提升了代码执行效率。</p><h1 id="26、什么是多线程的上下文切换"><a href="#26、什么是多线程的上下文切换" class="headerlink" title="26、什么是多线程的上下文切换"></a>26、什么是多线程的上下文切换</h1><p>多线程的上下文切换是指CPU控制权由一个已经正在运行的线程切换到另外一个就绪并等待获取CPU执行权的线程的过程。</p><h1 id="27、如果你提交任务时，线程池队列已满，这时会发生什么"><a href="#27、如果你提交任务时，线程池队列已满，这时会发生什么" class="headerlink" title="27、如果你提交任务时，线程池队列已满，这时会发生什么"></a>27、如果你提交任务时，线程池队列已满，这时会发生什么</h1><p>如果你使用的LinkedBlockingQueue，也就是无界队列的话，没关系，继续添加任务到阻塞队列中等待执行，因为LinkedBlockingQueue可以近乎认为是一个无穷大的队列，可以无限存放任务；</p><p>如果你使用的是有界队列比方说ArrayBlockingQueue的话，任务首先会被添加到ArrayBlockingQueue中，ArrayBlockingQueue满了，则会使用拒绝策略RejectedExecutionHandler处理满了的任务，默认是AbortPolicy。</p><h1 id="28、Java中用到的线程调度算法是什么"><a href="#28、Java中用到的线程调度算法是什么" class="headerlink" title="28、Java中用到的线程调度算法是什么"></a>28、Java中用到的线程调度算法是什么</h1><p>抢占式。一个线程用完CPU之后，操作系统会根据线程优先级、线程饥饿情况等数据算出一个总的优先级并分配下一个时间片给某个线程执行。</p><h1 id="29、Thread-sleep-0-的作用是什么"><a href="#29、Thread-sleep-0-的作用是什么" class="headerlink" title="29、Thread.sleep(0)的作用是什么"></a>29、Thread.sleep(0)的作用是什么</h1><p>这个问题和上面那个问题是相关的，我就连在一起了。由于Java采用抢占式的线程调度算法，因此可能会出现某条线程常常获取到CPU控制权的情况，为了让某些优先级比较低的线程也能获取到CPU控制权，可以使用Thread.sleep(0)手动触发一次操作系统分配时间片的操作，这也是平衡CPU控制权的一种操作。</p><h1 id="30、什么是自旋"><a href="#30、什么是自旋" class="headerlink" title="30、什么是自旋"></a>30、什么是自旋</h1><p>很多synchronized里面的代码只是一些很简单的代码，执行时间非常快，此时等待的线程都加锁可能是一种不太值得的操作，因为线程阻塞涉及到用户态和内核态切换的问题。既然synchronized里面的代码执行得非常快，不妨让等待锁的线程不要被阻塞，而是在synchronized的边界做忙循环，这就是自旋。如果做了多次忙循环发现还没有获得锁，再阻塞，这样可能是一种更好的策略。</p><h1 id="31、什么是Java内存模型"><a href="#31、什么是Java内存模型" class="headerlink" title="31、什么是Java内存模型"></a>31、什么是Java内存模型</h1><p>Java内存模型定义了一种多线程访问Java内存的规范。Java内存模型要完整讲不是这里几句话能说清楚的，我简单总结一下Java内存模型的几部分内容：</p><ol><li><p>Java内存模型将内存分为了主内存和工作内存。类的状态，也就是类之间共享的变量，是存储在主内存中的，每次Java线程用到这些主内存中的变量的时候，会读一次主内存中的变量，并让这些内存在自己的工作内存中有一份拷贝，运行自己线程代码的时候，用到这些变量，操作的都是自己工作内存中的那一份。在线程代码执行完毕之后，会将最新的值更新到主内存中去</p></li><li><p>定义了几个原子操作，用于操作主内存和工作内存中的变量</p></li><li><p>定义了volatile变量的使用规则</p></li><li><p>happens-before，即先行发生原则，定义了操作A必然先行发生于操作B的一些规则，比如在同一个线程内控制流前面的代码一定先行发生于控制流后面的代码、一个释放锁unlock的动作一定先行发生于后面对于同一个锁进行锁定lock的动作等等，只要符合这些规则，则不需要额外做同步措施，如果某段代码不符合所有的happens-before规则，则这段代码一定是线程非安全的</p></li></ol><h1 id="32、什么是CAS"><a href="#32、什么是CAS" class="headerlink" title="32、什么是CAS"></a>32、什么是CAS</h1><p>CAS，全称为Compare and Swap，即比较-替换。假设有三个操作数：内存值V、旧的预期值A、要修改的值B，当且仅当预期值A和内存值V相同时，才会将内存值修改为B并返回true，否则什么都不做并返回false。当然CAS一定要volatile变量配合，这样才能保证每次拿到的变量是主内存中最新的那个值，否则旧的预期值A对某条线程来说，永远是一个不会变的值A，只要某次CAS操作失败，永远都不可能成功。</p><h1 id="33、什么是乐观锁和悲观锁"><a href="#33、什么是乐观锁和悲观锁" class="headerlink" title="33、什么是乐观锁和悲观锁"></a>33、什么是乐观锁和悲观锁</h1><p>（1）乐观锁：就像它的名字一样，对于并发间操作产生的线程安全问题持乐观状态，乐观锁认为竞争不总是会发生，因此它不需要持有锁，将比较-替换这两个动作作为一个原子操作尝试去修改内存中的变量，如果失败则表示发生冲突，那么就应该有相应的重试逻辑。</p><p>（2）悲观锁：还是像它的名字一样，对于并发间操作产生的线程安全问题持悲观状态，悲观锁认为竞争总是会发生，因此每次对某资源进行操作时，都会持有一个独占的锁，就像synchronized，不管三七二十一，直接上了锁就操作资源了。</p><h1 id="34、什么是AQS"><a href="#34、什么是AQS" class="headerlink" title="34、什么是AQS"></a>34、什么是AQS</h1><p>简单说一下AQS，AQS全称为AbstractQueuedSychronizer，翻译过来应该是抽象队列同步器。</p><p>如果说java.util.concurrent的基础是CAS的话，那么AQS就是整个Java并发包的核心了，ReentrantLock、CountDownLatch、Semaphore等等都用到了它。AQS实际上以双向队列的形式连接所有的Entry，比方说ReentrantLock，所有等待的线程都被放在一个Entry中并连成双向队列，前面一个线程使用ReentrantLock好了，则双向队列实际上的第一个Entry开始运行。</p><p>AQS定义了对双向队列所有的操作，而只开放了tryLock和tryRelease方法给开发者使用，开发者可以根据自己的实现重写tryLock和tryRelease方法，以实现自己的并发功能。</p><h1 id="35、单例模式的线程安全性"><a href="#35、单例模式的线程安全性" class="headerlink" title="35、单例模式的线程安全性"></a>35、单例模式的线程安全性</h1><p>老生常谈的问题了，首先要说的是单例模式的线程安全意味着：某个类的实例在多线程环境下只会被创建一次出来。单例模式有很多种的写法，我总结一下：</p><p>（1）饿汉式单例模式的写法：线程安全</p><p>（2）懒汉式单例模式的写法：非线程安全</p><p>（3）双检锁单例模式的写法：线程安全</p><h1 id="36、Semaphore有什么作用"><a href="#36、Semaphore有什么作用" class="headerlink" title="36、Semaphore有什么作用"></a>36、Semaphore有什么作用</h1><p>Semaphore就是一个信号量，它的作用是限制某段代码块的并发数。Semaphore有一个构造函数，可以传入一个int型整数n，表示某段代码最多只有n个线程可以访问，如果超出了n，那么请等待，等到某个线程执行完毕这段代码块，下一个线程再进入。由此可以看出如果Semaphore构造函数中传入的int型整数n=1，相当于变成了一个synchronized了。</p><h1 id="37、Hashtable的size-方法中明明只有一条语句”return-count”，为什么还要做同步？"><a href="#37、Hashtable的size-方法中明明只有一条语句”return-count”，为什么还要做同步？" class="headerlink" title="37、Hashtable的size()方法中明明只有一条语句”return count”，为什么还要做同步？"></a>37、Hashtable的size()方法中明明只有一条语句”return count”，为什么还要做同步？</h1><p>这是我之前的一个困惑，不知道大家有没有想过这个问题。某个方法中如果有多条语句，并且都在操作同一个类变量，那么在多线程环境下不加锁，势必会引发线程安全问题，这很好理解，但是size()方法明明只有一条语句，为什么还要加锁？</p><p>关于这个问题，在慢慢地工作、学习中，有了理解，主要原因有两点：</p><p>（1）同一时间只能有一条线程执行固定类的同步方法，但是对于类的非同步方法，可以多条线程同时访问。所以，这样就有问题了，可能线程A在执行Hashtable的put方法添加数据，线程B则可以正常调用size()方法读取Hashtable中当前元素的个数，那读取到的值可能不是最新的，可能线程A添加了完了数据，但是没有对size++，线程B就已经读取size了，那么对于线程B来说读取到的size一定是不准确的。而给size()方法加了同步之后，意味着线程B调用size()方法只有在线程A调用put方法完毕之后才可以调用，这样就保证了线程安全性。</p><p>（2）CPU执行代码，执行的不是Java代码，这点很关键，一定得记住。Java代码最终是被翻译成汇编代码执行的，汇编代码才是真正可以和硬件电路交互的代码。即使你看到Java代码只有一行，甚至你看到Java代码编译之后生成的字节码也只有一行，也不意味着对于底层来说这句语句的操作只有一个。一句”return count”假设被翻译成了三句汇编语句执行，完全可能执行完第一句，线程就切换了。</p><h1 id="38、线程类的构造方法、静态块是被哪个线程调用的"><a href="#38、线程类的构造方法、静态块是被哪个线程调用的" class="headerlink" title="38、线程类的构造方法、静态块是被哪个线程调用的"></a>38、线程类的构造方法、静态块是被哪个线程调用的</h1><p>这是一个非常刁钻和狡猾的问题。请记住：线程类的构造方法、静态块是被new这个线程类所在的线程所调用的，而run方法里面的代码才是被线程自身所调用的。</p><p>如果说上面的说法让你感到困惑，那么我举个例子，假设Thread2中new了Thread1，main函数中new了Thread2，那么：</p><p>（1）Thread2的构造方法、静态块是main线程调用的，Thread2的run()方法是Thread2自己调用的</p><p>（2）Thread1的构造方法、静态块是Thread2调用的，Thread1的run()方法是Thread1自己调用的</p><h1 id="39、同步方法和同步块，哪个是更好的选择"><a href="#39、同步方法和同步块，哪个是更好的选择" class="headerlink" title="39、同步方法和同步块，哪个是更好的选择"></a>39、同步方法和同步块，哪个是更好的选择</h1><p>同步块，这意味着同步块之外的代码是异步执行的，这比同步整个方法更提升代码的效率。请知道一条原则：同步的范围越小越好。</p><p>借着这一条，我额外提一点，虽说同步的范围越少越好，但是在Java虚拟机中还是存在着一种叫做<strong>锁粗化的优化</strong>方法，</p><p><strong>锁粗化的优化</strong></p><p>这种方法就是把同步范围变大。这是有用的，比方说StringBuffer，它是一个线程安全的类，自然最常用的append()方法是一个同步方法，我们写代码的时候会反复append字符串，这意味着要进行反复的加锁-&gt;解锁，这对性能不利，因为这意味着Java虚拟机在这条线程上要反复地在内核态和用户态之间进行切换，因此Java虚拟机会将多次append方法调用的代码进行一个锁粗化的操作，将多次的append的操作扩展到append方法的头尾，变成一个大的同步块，这样就减少了加锁–&gt;解锁的次数，有效地提升了代码执行的效率。</p><h1 id="40、高并发、任务执行时间短的业务怎样使用线程池？并发不高、任务执行时间长的业务怎样使用线程池？并发高、业务执行时间长的业务怎样使用线程池？"><a href="#40、高并发、任务执行时间短的业务怎样使用线程池？并发不高、任务执行时间长的业务怎样使用线程池？并发高、业务执行时间长的业务怎样使用线程池？" class="headerlink" title="40、高并发、任务执行时间短的业务怎样使用线程池？并发不高、任务执行时间长的业务怎样使用线程池？并发高、业务执行时间长的业务怎样使用线程池？"></a>40、高并发、任务执行时间短的业务怎样使用线程池？并发不高、任务执行时间长的业务怎样使用线程池？并发高、业务执行时间长的业务怎样使用线程池？</h1><p>这是我在并发编程网上看到的一个问题，把这个问题放在最后一个，希望每个人都能看到并且思考一下，因为这个问题非常好、非常实际、非常专业。关于这个问题，个人看法是：</p><p>（1）高并发、任务执行时间短的业务，线程池线程数可以设置为CPU核数+1，减少线程上下文的切换；</p><p>（2）并发不高、任务执行时间长的业务要区分开看：</p><p>　　a）假如是业务时间长集中在IO操作上，也就是IO密集型的任务，因为IO操作并不占用CPU，所以不要让所有的CPU闲下来，可以加大线程池中的线程数目，让CPU处理更多的业务</p><p>　　b）假如是业务时间长集中在计算操作上，也就是计算密集型任务，这个就没办法了，和（1）一样吧，线程池中的线程数设置得少一些，减少线程上下文的切换</p><p>（3）并发高、业务执行时间长，解决这种类型任务的关键不在于线程池而在于整体架构的设计，看看这些业务里面某些数据是否能做缓存是第一步，增加服务器是第二步，至于线程池的设置，设置参考（2）。最后，业务执行时间长的问题，也可能需要分析一下，看看能不能使用中间件对任务进行拆分和解耦。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1、多线程有什么用？&quot;&gt;&lt;a href=&quot;#1、多线程有什么用？&quot; class=&quot;headerlink&quot; title=&quot;1、多线程有什么用？&quot;&gt;&lt;/a&gt;1、多线程有什么用？&lt;/h1&gt;&lt;p&gt;一个可能在很多人看来很扯淡的一个问题：我会用多线程就好了，还管它有什么用？在我看来，这个回答更扯淡。所谓”知其然知其所以然”，”会用”只是”知其然”，”为什么用”才是”知其所以然”，只有达到”知其然知其所以然”的程度才可以说是把一个知识点运用自如。OK，下面说说我对这个问题的看法：&lt;br&gt;
    
    </summary>
    
      <category term="多线程与并发" scheme="http://cuijing.me/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E5%B9%B6%E5%8F%91/"/>
    
    
      <category term="Java" scheme="http://cuijing.me/tags/Java/"/>
    
      <category term="多线程" scheme="http://cuijing.me/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="Thread" scheme="http://cuijing.me/tags/Thread/"/>
    
      <category term="总结" scheme="http://cuijing.me/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>Java 异常</title>
    <link href="http://cuijing.me/2015/02/12/Java/3-Exception/1-%E5%BC%82%E5%B8%B8/"/>
    <id>http://cuijing.me/2015/02/12/Java/3-Exception/1-异常/</id>
    <published>2015-02-12T00:30:00.000Z</published>
    <updated>2016-05-04T12:05:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="异常体系结构"><a href="#异常体系结构" class="headerlink" title="异常体系结构"></a>异常体系结构</h1><a id="more"></a><p><img src="http://oov0wb0gl.bkt.clouddn.com/2017-06-06-14945852057220.jpg" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">java.lang.Throwable</span><br><span class="line">     |-----Error:错误，程序中不进行处理</span><br><span class="line">     |-----Exception:异常，要求在编写程序时，就要考虑到对这些异常的处理</span><br><span class="line">        |-----编译时异常：在编译期间会出现的异常（执行javac.exe命令时，出现异常）</span><br><span class="line">        |-----运行时异常：在运行期间出现的异常   (执行java.exe命令时，出现异常)</span><br></pre></td></tr></table></figure><p>因为<code>java</code>程序分为<code>javac.exe</code>和<code>java.exe</code>两个过程，在每个过程中，都有可能出现异常。故分为编译时异常、运行时异常</p><ul><li>对于运行时异常比较常见，可以不显式的来处理。</li><li>对于编译时异常，必须要显式的处理</li></ul><p>编译时异常，不是说有异常才处理，而是存在异常的隐患，必须在编译前，提示程序，万一出现异常，如何处理！</p><h2 id="Throwable（可抛出）"><a href="#Throwable（可抛出）" class="headerlink" title="Throwable（可抛出）"></a>Throwable（可抛出）</h2><p>在 Java 中，所有的异常都有一个共同的祖先 <code>Throwable</code>（可抛出）。<code>Throwable</code> 指定代码中可用异常传播机制通过 Java 应用程序传输的任何问题的共性。</p><p>Throwable： 有两个重要的子类：<code>Exception</code>（异常）和 <code>Error</code>（错误），二者都是 Java 异常处理的重要子类，各自都包含大量子类。</p><h2 id="Error"><a href="#Error" class="headerlink" title="Error :"></a>Error :</h2><p>是程序无法处理的错误，表示运行应用程序中较严重问题。</p><p>大多数错误与代码编写者执行的操作无关，而表示代码运行时 JVM（Java 虚拟机）出现的问题。例如，Java虚拟机运行错误<code>Virtual MachineError</code>，当 JVM 不再有继续执行操作所需的内存资源时，将出现 <code>OutOfMemoryError</code>。这些异常发生时，Java虚拟机（JVM）一般会选择线程终止。</p><h2 id="Exception"><a href="#Exception" class="headerlink" title="Exception :"></a>Exception :</h2><p>是程序本身可以处理的异常。</p><p>Exception 类有一个重要的子类 <code>RuntimeException</code>。<code>RuntimeException</code> 类及其子类表示“JVM 常用操作”引发的错误。例如，若试图使用空值对象引用、除数为零或数组越界，则分别引发运行时异常<code>NullPointerException、ArithmeticException</code>和 <code>ArrayIndexOutOfBoundException</code>。</p><p>通常，Java的异常(包括<code>Exception 和 Error</code>)分为可查的异常<code>checked exceptions</code>和不可查的异常<code>unchecked exceptions</code>。</p><h3 id="可查异常（编译器要求必须处置的异常）："><a href="#可查异常（编译器要求必须处置的异常）：" class="headerlink" title="可查异常（编译器要求必须处置的异常）："></a>可查异常（编译器要求必须处置的异常）：</h3><p>可查异常虽是异常状况，但在一定程度上它的发生是可以预计的，而且一旦发生这种异常状况，就必须采取某种方式进行处理。</p><p>除了<code>RuntimeException</code>及其子类以外，其他的<code>Exception</code>类及其子类都属于可查异常。这种异常的特点是Java编译器会检查它，也就是说，当程序中可能出现这类异常，要么用<code>try-catch</code>语句捕获它，要么用<code>throws</code>子句声明抛出它，否则编译不会通过。</p><h3 id="不可查异常（编译器不要求强制处置的异常）"><a href="#不可查异常（编译器不要求强制处置的异常）" class="headerlink" title="不可查异常（编译器不要求强制处置的异常）:"></a>不可查异常（编译器不要求强制处置的异常）:</h3><p>包括运行时异常（RuntimeException与其子类）和错误（Error）。</p><p>Exception 这种异常分两大类运行时异常和非运行时异常(编译异常)。程序中应当尽可能去处理这些异常。</p><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><p>异常和错误的区别：异常能被程序本身可以处理，错误是无法处理。</p><h1 id="如何处理异常"><a href="#如何处理异常" class="headerlink" title="如何处理异常"></a>如何处理异常</h1><p>Java 中的“抓抛模型”</p><h2 id="“抛”："><a href="#“抛”：" class="headerlink" title="“抛”："></a>“抛”：</h2><p>当我们执行代码时，一旦出现异常，就会在异常的代码处生成一个对应的异常类型的对象，并将此对象抛出。(自动抛出   / 手动抛出)</p><ul><li>一旦抛出此异常类的对象，那么程序就终止执行</li><li>此异常类的对象抛给方法的调用者</li></ul><h2 id="“抓”："><a href="#“抓”：" class="headerlink" title="“抓”："></a>“抓”：</h2><p>抓住上一步抛出来的异常类的对象。如何抓？即为异常处理的方式<br>    java 提供了两种方式用来处理一个异常类的对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//处理的方式一：</span></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="comment">//可能出现异常的代码</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception1 e1)&#123;</span><br><span class="line">   <span class="comment">//处理的方式1</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception2 e2)&#123;</span><br><span class="line">    <span class="comment">//处理的方式2</span></span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">    <span class="comment">//一定要执行的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：</p><ol><li>try内声明的变量，类似于局部变量，出了try{ }语句，就不能被调用；</li><li>finally是可选的；</li><li>catch语句内部是对异常对象的处理：getMessage();  printStackTrace()；</li><li>可以有多个catch语句，try中抛出的异常类对象从上往下去匹配catch中的异常类的类型，一旦满足就执行catch中的代码。执行完，就跳出其后的多条catch语句；</li><li>如果异常被处理了，那么其后的代码继续执行。（这就是异常处理的好处）；</li><li>若catch中多个异常类型是”并列”关系，孰上孰下都可以。若catch中多个异常类型是”包含”关系，须将子类放在父类的上面，进行处理。否则报错；</li><li>finally中存放的是一定会被执行的代码，不管try中、catch中是否仍有异常未被处理，以及是否有return语句；</li><li>try-catch是可以嵌套的。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">处理方式二：</span><br><span class="line">在方法的声明处，显式的使用<span class="keyword">throws</span> + 异常类型</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> <span class="keyword">throws</span> Exception1 e1,Exception2 e2</span>&#123;</span><br><span class="line">    <span class="comment">//可能出现异常（尤其是编译时异常，一定要处理）</span></span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> <span class="keyword">throws</span> Exception1 e1,Exception2 e2</span>&#123;</span><br><span class="line">    method1();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        method2();</span><br><span class="line">    &#125;<span class="keyword">catch</span>(Exception1 e1)&#123;</span><br><span class="line">        System.out.println(e1.getMessage());   </span><br><span class="line">    &#125;<span class="keyword">catch</span>(Exception2 e2)&#123;</span><br><span class="line">        System.out.println(e2.getMessage());   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    对象<span class="number">1</span>.method3();<span class="comment">//不会再出现上述的Exception1和Exception2的异常！</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="如何手动的抛出一个异常？"><a href="#如何手动的抛出一个异常？" class="headerlink" title="如何手动的抛出一个异常？"></a>如何手动的抛出一个异常？</h2><p>在方法的内部，可以使用  throw + new 异常类对象，来手动的抛出一个异常！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//比较两个圆的半径的大小。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span> == obj) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(obj <span class="keyword">instanceof</span> Circle) &#123;</span><br><span class="line">        Circle c = (Circle)obj;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.radius &gt; c.radius) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">this</span>.radius == c.radius) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//return -2;</span></span><br><span class="line">        <span class="comment">//手动的抛出一个异常</span></span><br><span class="line">        <span class="comment">//throw new Exception("传入的类型有误！");</span></span><br><span class="line">        <span class="comment">//throw new String("传入的类型有误！");</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> MyException(<span class="string">"传入的类型有误！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="如何自定义一个异常类"><a href="#如何自定义一个异常类" class="headerlink" title="如何自定义一个异常类"></a>如何自定义一个异常类</h2><p>手动的抛出一个异常，除了抛出的是现成的异常类的对象之外，还可以抛出一个自定义的异常类的对象！</p><p><strong>自定义异常类</strong></p><ol><li>自定义的异常类继承现有的异常类</li><li>提供一个序列号，提供几个重载的构造器</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;  </span><br><span class="line">     <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">70348975766939L</span>;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="title">MyException</span><span class="params">()</span></span>&#123;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="title">MyException</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">          <span class="keyword">super</span>(msg);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五个关键字搞定异常处理！"><a href="#五个关键字搞定异常处理！" class="headerlink" title="五个关键字搞定异常处理！"></a>五个关键字搞定异常处理！</h2><p>其中，要区分：throw与throws的区别？</p><ol><li>用户程序自定义的异常和应用程序特定的异常,必须借助于 throws 和 throw 语句来定义抛出异常。</li></ol><ul><li>throw是语句抛出一个异常。  <code>throw e;</code></li><li>throws是方法可能抛出异常的声明。(用在声明方法时，表示该方法可能要抛出异常)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doA</span><span class="params">(<span class="keyword">int</span> a)</span> <span class="keyword">throws</span> Exception1,Exception3</span>&#123;......&#125;</span><br></pre></td></tr></table></figure><p><code>throws E1,E2,E3</code>只是告诉程序这个方法可能会抛出这些异常，方法的调用者可能要处理这些异常，而这些异常<code>E1,E2,E3</code>可能是该函数体产生的。<br><code>throw</code> 则是明确了这个地方要抛出这个异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doA</span><span class="params">(<span class="keyword">int</span> a)</span> <span class="keyword">throws</span> IOException,</span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        ......</span><br><span class="line">    &#125;<span class="keyword">catch</span>(Exception1 e)&#123;</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">    &#125;<span class="keyword">catch</span>(Exception2 e)&#123;</span><br><span class="line">        System.out.println(<span class="string">"出错了！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(a!=b)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception3(<span class="string">"自定义异常"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码块中可能会产生3个异常，(Exception1,Exception2,Exception3)。如果产生Exception1异常，则捕获之后再抛出，由该方法的调用者去处理；如果产生Exception2异常，则该方法自己处理了，所以该方法就不会再向外抛出Exception2异常了，void doA() throws Exception1,Exception3 里面的Exception2也就不用写了。而Exception3异常是该方法的某段逻辑出错，程序员自己做了处理，在该段逻辑错误的情况下抛出异常Exception3，则该方法的调用者也要处理此异常。</p><ul><li>throw语句用在方法体内，表示抛出异常，由方法体内的语句处理。</li><li>throws语句用在方法声明后面，表示再抛出异常，由该方法的调用者来处理。</li><li>throws主要是声明这个方法会抛出这种类型的异常，使它的调用者知道要捕获这个异常。</li><li>throw是具体向外抛异常的动作，所以它是抛出一个异常实例。</li><li>throws说明你有那个可能，倾向。</li><li>throw的话，那就是你把那个倾向变成真实的了。</li></ul><p>同时：</p><ol><li>throws出现在方法函数头；而throw出现在函数体。</li><li>throws表示出现异常的一种可能性，并不一定会发生这些异常；throw则是抛出了异常，执行throw则一定抛出了某种异常。</li><li>两者都是消极处理异常的方式（这里的消极并不是说这种方式不好），只是抛出或者可能抛出异常，但是不会由函数去处理异常，真正的处理异常由函数的上层调用处理。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;异常体系结构&quot;&gt;&lt;a href=&quot;#异常体系结构&quot; class=&quot;headerlink&quot; title=&quot;异常体系结构&quot;&gt;&lt;/a&gt;异常体系结构&lt;/h1&gt;
    
    </summary>
    
      <category term="Java 基础" scheme="http://cuijing.me/categories/Java-%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="http://cuijing.me/tags/Java/"/>
    
      <category term="面向对象" scheme="http://cuijing.me/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
      <category term="exception" scheme="http://cuijing.me/tags/exception/"/>
    
  </entry>
  
  <entry>
    <title>Java 枚举</title>
    <link href="http://cuijing.me/2015/02/09/Java/2-Object-Oriented/8-%E6%9E%9A%E4%B8%BE/"/>
    <id>http://cuijing.me/2015/02/09/Java/2-Object-Oriented/8-枚举/</id>
    <published>2015-02-09T00:30:00.000Z</published>
    <updated>2016-05-05T12:43:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="枚举类基础"><a href="#枚举类基础" class="headerlink" title="枚举类基础"></a>枚举类基础</h1><h2 id="1、如何自定义枚举类。"><a href="#1、如何自定义枚举类。" class="headerlink" title="1、如何自定义枚举类。"></a>1、如何自定义枚举类。</h2><p>是 JDK 1.5  中引入的新特性，存放在 java.lang 包中。</p><p>枚举类：类的对象是有限个的，确定的。<br>   <a id="more"></a></p><ol><li>私有化类的构造器，保证不能在类的外部创建其对象</li><li>在类的内部创建枚举类的实例。声明为：public static final</li><li>若类有属性，那么属性声明为：private final 。此属性在构造器中赋值。</li></ol><h2 id="2、使用enum关键字定义枚举类"><a href="#2、使用enum关键字定义枚举类" class="headerlink" title="2、使用enum关键字定义枚举类"></a>2、使用enum关键字定义枚举类</h2><ol><li>其中常用的方法：values() , valueOf(String name);</li><li>枚举类如何实现接口：<ul><li>让类实现此接口，类的对象共享同一套接口的抽象方法的实现；</li><li>让类的每一个对象都去实现接口的抽象方法，进而通过类的对象调用被重写的抽象方法时，执行的效果不同。</li></ul></li></ol><h2 id="3、枚举类和普通类的区别："><a href="#3、枚举类和普通类的区别：" class="headerlink" title="3、枚举类和普通类的区别："></a>3、枚举类和普通类的区别：</h2><ol><li>必须在枚举类的第一行声明枚举类对象,枚举列表必须写在最前面，否则编译出错；</li><li>使用 <code>enum</code>定义的枚举类默认继承了<code>java.lang.Enum</code> 类；</li><li>枚举类的构造器只能使用 <code>private</code> 访问控制符；</li><li>枚举类的所有实例必须在枚举类中显式列出( , 分隔  ; 结尾). 列出的实例系统会自动添加 <code>public static final</code> 修饰；</li><li>JDK 1.5 中可以在 <code>switch</code> 表达式中使用<code>Enum</code>定义的枚举类的对象作为表达式, <code>case</code> 子句可以直接使用枚举值的。</li></ol><h2 id="4、实例"><a href="#4、实例" class="headerlink" title="4、实例"></a>4、实例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSeason</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">         Season spring = Season SPRING;</span><br><span class="line">         System.out.println(spring);</span><br><span class="line">         spring.show();</span><br><span class="line">         System.out.println(spring.getSeasonName());</span><br><span class="line">         System.out.println();</span><br><span class="line">         <span class="comment">//1.values()</span></span><br><span class="line">         Season[] seasons = Season.values();</span><br><span class="line">         <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; seasons.length;i++)&#123;</span><br><span class="line">              System.out.println(seasons[i]);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">//2.valueOf(String name):要求传入的形参name是枚举类对象的名字。</span></span><br><span class="line">         <span class="comment">//否则，报java.lang.IllegalArgumentException异常</span></span><br><span class="line">         String str = <span class="string">"WINTER"</span>;</span><br><span class="line">         Season sea = Season.valueOf(str);</span><br><span class="line">         System.out.println(sea);</span><br><span class="line">         System.out.println();</span><br><span class="line">       </span><br><span class="line">         Thread.State[] states = Thread.State.values();</span><br><span class="line">         <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span>;i &lt; states.length;i++)&#123;</span><br><span class="line">              System.out.println(states[i]);</span><br><span class="line">         &#125;</span><br><span class="line">         sea.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span>  <span class="title">Info</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span>  <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//枚举类</span></span><br><span class="line"><span class="keyword">enum</span> Season implements Info&#123;</span><br><span class="line">    <span class="comment">// 所有枚举值都是public static final的</span></span><br><span class="line">    SPRING(<span class="string">"spring"</span>, <span class="string">"春暖花开"</span>)&#123;</span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">              System.out.println( <span class="string">"春天在哪里？"</span> );</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    SUMMER(<span class="string">"summer"</span>, <span class="string">"夏日炎炎"</span>)&#123;</span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">              System.out.println( <span class="string">"生如夏花"</span>);</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    AUTUMN(<span class="string">"autumn"</span>, <span class="string">"秋高气爽"</span>)&#123;</span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">              System.out.println( <span class="string">"秋天是用来分手的季节"</span> );</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    WINTER(<span class="string">"winter"</span>, <span class="string">"白雪皑皑"</span>)&#123;</span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">              System.out.println( <span class="string">"冬天里的一把火"</span> );</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String seasonName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String seasonDesc;</span><br><span class="line">  </span><br><span class="line">   <span class="comment">// 注意这里的构造函数是 private 私有的 </span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Season</span><span class="params">(String seasonName , String seasonDesc)</span></span>&#123;</span><br><span class="line">         <span class="keyword">this</span>.seasonName = seasonName;</span><br><span class="line">         <span class="keyword">this</span>.seasonDesc = seasonDesc;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSeasonName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> seasonName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSeasonDesc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> seasonDesc;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="string">"Season [seasonName="</span> + seasonName + <span class="string">", seasonDesc="</span></span><br><span class="line">                   + seasonDesc + <span class="string">"]"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    public void show()&#123;</span></span><br><span class="line"><span class="comment">//         System.out.println("这是一个季节");</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="枚举类的使用"><a href="#枚举类的使用" class="headerlink" title="枚举类的使用"></a>枚举类的使用</h1><h2 id="1、原始的接口定义常量"><a href="#1、原始的接口定义常量" class="headerlink" title="1、原始的接口定义常量"></a>1、原始的接口定义常量</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IConstants</span> </span>&#123;</span><br><span class="line">    String MON = <span class="string">"Mon"</span>;</span><br><span class="line">    String TUE = <span class="string">"Tue"</span>;</span><br><span class="line">    String WED = <span class="string">"Wed"</span>;</span><br><span class="line">    String THU = <span class="string">"Thu"</span>;</span><br><span class="line">    String FRI = <span class="string">"Fri"</span>;</span><br><span class="line">    String SAT = <span class="string">"Sat"</span>;</span><br><span class="line">    String SUN = <span class="string">"Sun"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、语法（定义）"><a href="#2、语法（定义）" class="headerlink" title="2、语法（定义）"></a>2、语法（定义）</h2><p>创建枚举类型要使用 <code>enum</code> 关键字，隐含了所创建的类型都是 java.lang.Enum 类的子类（<code>java.lang.Enum</code> 是一个抽象类）。枚举类型符合通用模式<code>Class Enum&lt;E extends Enum&lt;E&gt;&gt;</code>，而 E 表示枚举类型的名称。枚举类型的每一个值都将映射到<code>protected Enum(String name, int ordinal)</code> 构造函数中，在这里，每个值的名称都被转换成一个字符串，并且序数设置表示了此设置被创建的顺序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hmw.test;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 枚举测试类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> EnumTest &#123;</span><br><span class="line">    MON, TUE, WED, THU, FRI, SAT, SUN;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">这段代码实际上调用了<span class="number">7</span>次 Enum(String name, <span class="keyword">int</span> ordinal)：</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Enum&lt;EnumTest&gt;(<span class="string">"MON"</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">new</span> Enum&lt;EnumTest&gt;(<span class="string">"TUE"</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">new</span> Enum&lt;EnumTest&gt;(<span class="string">"WED"</span>,<span class="number">2</span>);</span><br><span class="line">    ... ...</span><br></pre></td></tr></table></figure><h2 id="3、遍历、switch-等常用操作"><a href="#3、遍历、switch-等常用操作" class="headerlink" title="3、遍历、switch 等常用操作"></a>3、遍历、switch 等常用操作</h2><p>对enum进行遍历和switch的操作示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (EnumTest e : EnumTest.values()) &#123;</span><br><span class="line">            System.out.println(e.toString());</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        System.out.println(<span class="string">"-------我是分隔线---------"</span>);</span><br><span class="line">         </span><br><span class="line">        EnumTest test = EnumTest.TUE;</span><br><span class="line">        <span class="keyword">switch</span> (test) &#123;</span><br><span class="line">        <span class="keyword">case</span> MON:</span><br><span class="line">            System.out.println(<span class="string">"今天是星期一"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> TUE:</span><br><span class="line">            System.out.println(<span class="string">"今天是星期二"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">// ... ...</span></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            System.out.println(test);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">MON</span><br><span class="line">TUE</span><br><span class="line">WED</span><br><span class="line">THU</span><br><span class="line">FRI</span><br><span class="line">SAT</span><br><span class="line">SUN</span><br><span class="line">----------------我是分隔线------------------</span><br><span class="line">今天是星期二</span><br></pre></td></tr></table></figure><h2 id="4、enum-对象的常用方法介绍"><a href="#4、enum-对象的常用方法介绍" class="headerlink" title="4、enum 对象的常用方法介绍"></a>4、enum 对象的常用方法介绍</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(E o)</span></span></span><br><span class="line"><span class="function">              比较此枚举与指定对象的顺序。</span></span><br><span class="line"><span class="function">              </span></span><br><span class="line"><span class="function">Class&lt;E&gt; <span class="title">getDeclaringClass</span><span class="params">()</span></span></span><br><span class="line"><span class="function">              返回与此枚举常量的枚举类型相对应的 Class 对象。</span></span><br><span class="line"><span class="function">              </span></span><br><span class="line"><span class="function">String  <span class="title">name</span><span class="params">()</span></span></span><br><span class="line"><span class="function">              返回此枚举常量的名称，在其枚举声明中对其进行声明。</span></span><br><span class="line"><span class="function">              </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ordinal</span><span class="params">()</span></span></span><br><span class="line"><span class="function">              返回枚举常量的序数（它在枚举声明中的位置，其中初始常量序数为零）。</span></span><br><span class="line"><span class="function">              </span></span><br><span class="line"><span class="function">String <span class="title">toString</span><span class="params">()</span></span></span><br><span class="line"><span class="function">              返回枚举常量的名称，它包含在声明中。</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> &lt;T extends Enum&lt;T&gt;&gt; T <span class="title">valueOf</span><span class="params">(Class&lt;T&gt; enumType, String name)</span></span></span><br><span class="line"><span class="function">              返回带指定名称的指定枚举类型的枚举常量。</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        EnumTest test = EnumTest.TUE;</span><br><span class="line">        <span class="comment">//compareTo(E o)  int = (test-MON)</span></span><br><span class="line">        <span class="keyword">switch</span> (test.compareTo(EnumTest.MON)) &#123;</span><br><span class="line">        <span class="keyword">case</span> -<span class="number">1</span>:</span><br><span class="line">            System.out.println(<span class="string">"TUE 在 MON 之前"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            System.out.println(<span class="string">"TUE 在 MON 之后"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            System.out.println(<span class="string">"TUE 与 MON 在同一位置"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//getDeclaringClass() : com.gplayo.eumn.EnumTest</span></span><br><span class="line">        System.out.println(<span class="string">"getDeclaringClass(): "</span> +    </span><br><span class="line">test.getDeclaringClass().getName());</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//name() 和  toString()</span></span><br><span class="line">        System.out.println(<span class="string">"name(): "</span> + test.name()); </span><br><span class="line">        System.out.println(<span class="string">"toString(): "</span> + test.toString());</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//ordinal()， 返回值是从 0 开始</span></span><br><span class="line">        System.out.println(<span class="string">"ordinal(): "</span> + test.ordinal()); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">TUE 在 MON 之后</span><br><span class="line">getDeclaringClass(): com.gplayo.eumn.EnumTest</span><br><span class="line">name(): TUE</span><br><span class="line">toString(): TUE</span><br><span class="line">ordinal(): <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="5、给-enum-自定义属性和方法"><a href="#5、给-enum-自定义属性和方法" class="headerlink" title="5、给 enum 自定义属性和方法"></a>5、给 enum 自定义属性和方法</h2><p>给 enum 对象加一下 value 的属性和 getValue() 的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hmw.test;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 枚举测试类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> cui</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> EnumTest &#123;</span><br><span class="line">    MON(<span class="number">1</span>), TUE(<span class="number">2</span>), WED(<span class="number">3</span>), THU(<span class="number">4</span>), FRI(<span class="number">5</span>), SAT(<span class="number">6</span>) &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isRest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    SUN(<span class="number">0</span>) &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isRest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> value;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">EnumTest</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isRest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"EnumTest.FRI 的 value = "</span> + EnumTest.FRI.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EnumTest.FRI 的 value = <span class="number">5</span></span><br></pre></td></tr></table></figure><h2 id="6、EnumSet，EnumMap-的应用"><a href="#6、EnumSet，EnumMap-的应用" class="headerlink" title="6、EnumSet，EnumMap 的应用"></a>6、EnumSet，EnumMap 的应用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// EnumSet的使用</span></span><br><span class="line">        EnumSet&lt;EnumTest&gt; weekSet = EnumSet.allOf(EnumTest.class);</span><br><span class="line">        <span class="keyword">for</span> (EnumTest day : weekSet) &#123;</span><br><span class="line">            System.out.println(day);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// EnumMap的使用</span></span><br><span class="line">        EnumMap&lt;EnumTest, String&gt; weekMap = <span class="keyword">new</span> EnumMap(EnumTest.class);</span><br><span class="line">        weekMap.put(EnumTest.MON, <span class="string">"星期一"</span>);</span><br><span class="line">        weekMap.put(EnumTest.TUE, <span class="string">"星期二"</span>);</span><br><span class="line">        <span class="comment">// ... ...</span></span><br><span class="line">        <span class="keyword">for</span> (Iterator&lt;Entry&lt;EnumTest, String&gt;&gt; iter = weekMap.entrySet().iterator(); iter.hasNext();) &#123;</span><br><span class="line">            Entry&lt;EnumTest, String&gt; entry = iter.next();</span><br><span class="line">            System.out.println(entry.getKey().name() + <span class="string">":"</span> + entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7、原理分析"><a href="#7、原理分析" class="headerlink" title="7、原理分析"></a>7、原理分析</h2><p>enum 的语法结构尽管和 class 的语法不一样，但是经过编译器编译之后产生的是一个class文件。该class文件经过反编译可以看到实际上是生成了一个类，该类继承了<code>java.lang.Enum&lt;E&gt;</code>。EnumTest 经过反编译(javap com.hmw.test.EnumTest 命令)之后得到的内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">com</span>.<span class="title">hmw</span>.<span class="title">test</span>.<span class="title">EnumTest</span> <span class="keyword">extends</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">Enum</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> com.hmw.test.EnumTest MON;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> com.hmw.test.EnumTest TUE;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> com.hmw.test.EnumTest WED;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> com.hmw.test.EnumTest THU;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> com.hmw.test.EnumTest FRI;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> com.hmw.test.EnumTest SAT;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> com.hmw.test.EnumTest SUN;</span><br><span class="line">    <span class="keyword">static</span> &#123;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getValue</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isRest</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> com.hmw.test.EnumTest[] values();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> com.hmw.test.<span class="function">EnumTest <span class="title">valueOf</span><span class="params">(java.lang.String)</span></span>;</span><br><span class="line">    com.hmw.test.EnumTest(java.lang.String, <span class="keyword">int</span>, <span class="keyword">int</span>, com.hmw.test.EnumTest);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以，实际上 <code>enum</code> 就是一个 <code>class</code>，只不过 Java 编译器帮我们做了语法的解析和编译而已。</p><h2 id="8、小结"><a href="#8、小结" class="headerlink" title="8、小结"></a>8、小结</h2><p>可以把 <code>enum</code> 看成是一个普通的 <code>class</code>，它们都可以定义一些属性和方法，不同之处是：<code>enum</code> 不能使用 <code>extends</code> 关键字继承其他类，因为 <code>enum</code> 已经继承了 <code>java.lang.Enum</code>（java是单一继承）。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;枚举类基础&quot;&gt;&lt;a href=&quot;#枚举类基础&quot; class=&quot;headerlink&quot; title=&quot;枚举类基础&quot;&gt;&lt;/a&gt;枚举类基础&lt;/h1&gt;&lt;h2 id=&quot;1、如何自定义枚举类。&quot;&gt;&lt;a href=&quot;#1、如何自定义枚举类。&quot; class=&quot;headerlink&quot; title=&quot;1、如何自定义枚举类。&quot;&gt;&lt;/a&gt;1、如何自定义枚举类。&lt;/h2&gt;&lt;p&gt;是 JDK 1.5  中引入的新特性，存放在 java.lang 包中。&lt;/p&gt;
&lt;p&gt;枚举类：类的对象是有限个的，确定的。&lt;br&gt;
    
    </summary>
    
      <category term="Java 基础" scheme="http://cuijing.me/categories/Java-%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="http://cuijing.me/tags/Java/"/>
    
      <category term="面向对象" scheme="http://cuijing.me/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
      <category term="枚举" scheme="http://cuijing.me/tags/%E6%9E%9A%E4%B8%BE/"/>
    
      <category term="Enumeration" scheme="http://cuijing.me/tags/Enumeration/"/>
    
  </entry>
  
  <entry>
    <title>Java 接口</title>
    <link href="http://cuijing.me/2015/02/09/Java/2-Object-Oriented/6-%E6%8E%A5%E5%8F%A3/"/>
    <id>http://cuijing.me/2015/02/09/Java/2-Object-Oriented/6-接口/</id>
    <published>2015-02-09T00:30:00.000Z</published>
    <updated>2016-05-05T12:23:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="接口（interface）"><a href="#接口（interface）" class="headerlink" title="接口（interface）"></a>接口（interface）</h1><p>是与类并行的一个概念</p><a id="more"></a><ol><li>接口可以看做是一个特殊的抽象类。是常量与抽象方法的一个集合，不能包含变量、一般的方法；</li><li>接口是没有构造器的；</li><li>接口定义的就是一种功能。此功能可以被类所实现（implements）。<br>比如：<code>class CC extends DD implements AA,BB,CC</code>；</li><li>实现接口的类，必须要重写其中的所有的抽象方法，方可实例化。若没有重写所有的抽象方法，则此类仍为一个抽象类；</li><li>类可以实现多个接口。—-java 中的类的继承是单继承的；</li><li>接口与接口之间也是继承的关系，而且可以实现多继承；</li><li>接口与具体的实现类之间也存在多态性；</li><li>面向接口编程的思想。</li></ol><p>接口是公开的，里面不能有私有的方法或变量，是用于让别人使用的，而抽象类是可以有私有方法或私有变量的， 另外，实现接口的一定要实现接口里定义的所有方法，而实现抽象类可以有选择地重写需要用到的方法，一般的应用里，最顶级的是接口，然后是抽象类实现接口，最后才到具体类实现。 还有，接口可以实现多重继承，而一个类只能继承一个超类，但可以通过继承多个接口实现多重继承，接口还有标识（里面没有任何方法，如Remote接口）和数据共享（里面的变量全是常量）的作用.</p><h1 id="接口的特点："><a href="#接口的特点：" class="headerlink" title="接口的特点："></a>接口的特点：</h1><ol><li>用interface来定义。</li><li>接口中的所有常量都默认是由public static final修饰的。</li><li>接口中的所有方法都默认是由public abstract修饰的。</li><li>接口没有构造器。</li><li>接口采用多继承机制。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.java;</span><br><span class="line"></span><br><span class="line"><span class="comment">//接口的应用：工厂方法的设计模式</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFactoryMethod</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">            IWorkFactory i = <span class="keyword">new</span> StudentWorkFactory();</span><br><span class="line">            i.getWork().doWork();           </span><br><span class="line">            IWorkFactory i1 = <span class="keyword">new</span> TeacherWorkFactory();</span><br><span class="line">            i1.getWork().doWork();</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IWorkFactory</span></span>&#123;</span><br><span class="line">      <span class="function">Work <span class="title">getWork</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentWorkFactory</span> <span class="keyword">implements</span> <span class="title">IWorkFactory</span></span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> Work <span class="title">getWork</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> StudentWork();</span><br><span class="line">      &#125;     </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TeacherWorkFactory</span> <span class="keyword">implements</span> <span class="title">IWorkFactory</span></span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> Work <span class="title">getWork</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> TeacherWork();</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Work</span></span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">doWork</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentWork</span> <span class="keyword">implements</span> <span class="title">Work</span></span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doWork</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           System.out.println( <span class="string">"学生写作业"</span> );</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TeacherWork</span> <span class="keyword">implements</span> <span class="title">Work</span></span>&#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doWork</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println( <span class="string">"老师批改作业"</span> );</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;接口（interface）&quot;&gt;&lt;a href=&quot;#接口（interface）&quot; class=&quot;headerlink&quot; title=&quot;接口（interface）&quot;&gt;&lt;/a&gt;接口（interface）&lt;/h1&gt;&lt;p&gt;是与类并行的一个概念&lt;/p&gt;
    
    </summary>
    
      <category term="Java 基础" scheme="http://cuijing.me/categories/Java-%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="http://cuijing.me/tags/Java/"/>
    
      <category term="面向对象" scheme="http://cuijing.me/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
      <category term="接口" scheme="http://cuijing.me/tags/%E6%8E%A5%E5%8F%A3/"/>
    
      <category term="interface" scheme="http://cuijing.me/tags/interface/"/>
    
  </entry>
  
  <entry>
    <title>创建对象的5种方式</title>
    <link href="http://cuijing.me/2015/02/09/Java/2-Object-Oriented/7-%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E7%9A%845%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>http://cuijing.me/2015/02/09/Java/2-Object-Oriented/7-创建对象的5种方式/</id>
    <published>2015-02-09T00:30:00.000Z</published>
    <updated>2016-05-05T12:33:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>作为Java开发者，我们每天都会创建大量的对象。但是，我们总是使用管理依赖系统（如Spring框架）来创建这些对象。其实还有其他方法可以创建对象，在接下来的文章中我会进行详细介绍。<br><a id="more"></a></p><h1 id="1-使用new关键字"><a href="#1-使用new关键字" class="headerlink" title="1. 使用new关键字"></a>1. 使用new关键字</h1><p>这是最常见的创建对象的方法，并且也非常简单。通过使用这种方法我们可以调用任何我们需要调用的构造函数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Employee emp1 = <span class="keyword">new</span> Employee();</span><br></pre></td></tr></table></figure><h1 id="2-使用class类的newInstance方法"><a href="#2-使用class类的newInstance方法" class="headerlink" title="2. 使用class类的newInstance方法"></a>2. 使用class类的newInstance方法</h1><p>我们也可以使用<code>class</code>类的<code>newInstance()</code>方法来创建对象。此<code>newInstance()</code>方法调用无参构造函数以创建对象。<br>我们可以通过<code>newInstance()</code>用以下方式创建对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Employee emp2 = (Employee) Class.forName(<span class="string">"org.programming.mitra.exercises.Employee"</span>).newInstance();</span><br><span class="line">Employee emp2 = Employee.class.newInstance();</span><br></pre></td></tr></table></figure><h1 id="3-使用构造函数类的-newInstance方法"><a href="#3-使用构造函数类的-newInstance方法" class="headerlink" title="3. 使用构造函数类的 newInstance方法"></a>3. 使用构造函数类的 newInstance方法</h1><p>与使用<code>class</code>类的<code>newInstance()</code>方法相似，<code>java.lang.reflect.Constructor</code>类中有一个可以用来创建对象的newInstance()函数方法。通过使用这个<code>newInstance()</code>方法我们也可以调用参数化构造函数和私有构造函数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Constructor&lt;employee&gt; constructor = Employee.class.getConstructor();</span><br><span class="line">Employee emp3 = constructor.newInstance();</span><br></pre></td></tr></table></figure><p>这些 <code>newInstance()</code>方法被认为是创建对象的反射手段。实际上，内部类的<code>newInstance()</code>方法使用构造函数类的 <code>newInstance()</code>方法。这就是为什么后者是首选并且使用不同的框架如<code>Spring, Hibernate, Struts</code>等。</p><h1 id="4-使用clone方法"><a href="#4-使用clone方法" class="headerlink" title="4. 使用clone方法"></a>4. 使用clone方法</h1><p>实际上无论何时我们调用<code>clone()</code>方法，Java 虚拟机都为我们创建了一个新的对象并且复制了之前对象的内容到这个新的对象中。使用 <code>clone()</code>方法创建对象不会调用任何构造函数。<br>为了在对象中使用<code>clone()</code>方法，我们需要在其中实现可克隆类型并定义<code>clone()</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Employee emp4 = (Employee) emp3.clone();</span><br></pre></td></tr></table></figure><h1 id="5-使用反序列化"><a href="#5-使用反序列化" class="headerlink" title="5. 使用反序列化"></a>5. 使用反序列化</h1><p>无论何时我们对一个对象进行序列化和反序列化，JAVA虚拟机都会为我们创建一个单独的对象。在反序列化中，JAVA虚拟机不会使用任何构造函数来创建对象。<br>对一个对象进行序列化需要我们在类中实现可序列化的接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ObjectInputStream in = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"data.obj"</span>));</span><br><span class="line">Employee emp5 = (Employee) in.readObject();</span><br></pre></td></tr></table></figure><p>正如我们在以上的字节代码片段中所看到的，除第一种被转换为一个新的函数和一个 invokespecial 指令以外，其它4种方法都被调用并转换为invokevirtual。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作为Java开发者，我们每天都会创建大量的对象。但是，我们总是使用管理依赖系统（如Spring框架）来创建这些对象。其实还有其他方法可以创建对象，在接下来的文章中我会进行详细介绍。&lt;br&gt;
    
    </summary>
    
      <category term="Java 基础" scheme="http://cuijing.me/categories/Java-%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="http://cuijing.me/tags/Java/"/>
    
      <category term="面向对象" scheme="http://cuijing.me/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>Java 注解</title>
    <link href="http://cuijing.me/2015/02/09/Java/2-Object-Oriented/9-%E6%B3%A8%E8%A7%A3/"/>
    <id>http://cuijing.me/2015/02/09/Java/2-Object-Oriented/9-注解/</id>
    <published>2015-02-09T00:30:00.000Z</published>
    <updated>2016-05-05T12:54:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><p>带着问题去读！为什么写注解可以替代大量配置文件呢？</p><a id="more"></a><h1 id="什么是注解？"><a href="#什么是注解？" class="headerlink" title="什么是注解？"></a>什么是注解？</h1><p>在IDE中，我们可以链接<code>SpringMVC</code>中的<code>@RequestMapping</code>注解，发现以下源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(value = &#123;ElementType.METHOD, ElementType.TYPE&#125;)  </span><br><span class="line"><span class="meta">@Retention</span>(value = RetentionPolicy.RUNTIME)  </span><br><span class="line"><span class="meta">@Documented</span>  </span><br><span class="line"><span class="meta">@Mapping</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RequestMapping &#123;     </span><br><span class="line">     <span class="keyword">public</span> String[] value() <span class="keyword">default</span> &#123;&#125;;     </span><br><span class="line">     <span class="keyword">public</span> RequestMethod[] method() <span class="keyword">default</span> &#123;&#125;;  </span><br><span class="line">     <span class="keyword">public</span> String[] params() <span class="keyword">default</span> &#123;&#125;;  </span><br><span class="line">     <span class="keyword">public</span> String[] headers() <span class="keyword">default</span> &#123;&#125;;  </span><br><span class="line">     <span class="keyword">public</span> String[] consumes() <span class="keyword">default</span> &#123;&#125;;  </span><br><span class="line">     <span class="keyword">public</span> String[] produces() <span class="keyword">default</span> &#123;&#125;;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这其实就是注解的写法。从这里我们可以发现，注解的写法比较简单，只要在<code>interface</code>前面加上<code>@</code>，就可以定义一个注解。但有几个其他的注解我们还不是很明白，同样<code>spring</code>是怎么通过这个注解进行运转的呢？</p><h2 id="注解的作用是什么？"><a href="#注解的作用是什么？" class="headerlink" title="注解的作用是什么？"></a>注解的作用是什么？</h2><ol><li>生成文档，比如我们用的ide里面会自动加上比如@param，@return，@author等注解。</li><li>编译时格式检查。这个最常见的是@override，@SuppressWarnings等等。</li><li>跟踪代码依赖性，实现替代配置文件功能。上面的源码例子其实就是这个作用。</li></ol><h2 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h2><p>在包 <code>Java.lang.annotation</code> 中包含所有定义【自定义注解】所需用到的原注解和接口。如接口 <code>java.lang.annotation.Annotation</code> 是所有注解继承的接口,并且是自动继承，不需要定义时指定，类似于所有类都自动继承<code>Object</code>。查看<code>Documented.class</code>，可以看到这是个借口。它有三个注解（@Documented，@Retention，@Target），除此外，还有@Inherited，构成4个元注解。</p><h3 id="1、-Documented"><a href="#1、-Documented" class="headerlink" title="1、@Documented"></a>1、@Documented</h3><p>将此注解包含在 javadoc 中 ，它代表着此注解会被javadoc工具提取成文档。在doc文档中的内容会因为此注解的信息内容不同而不同。相当与@see,@param 等。</p><h3 id="2、-Retention"><a href="#2、-Retention" class="headerlink" title="2、@Retention"></a>2、@Retention</h3><p>表示在什么级别保存该注解信息。可选的参数值在枚举类型 RetentionPolicy 中，包括： </p><ul><li>RetentionPolicy.SOURCE 注解将被编译器丢弃 </li><li>RetentionPolicy.CLASS 注解在class文件中可用，但会被VM丢弃 </li><li>RetentionPolicy.RUNTIME VM将在运行期也保留注释，因此可以通过反射机制读取注解的信息。</li></ul><h3 id="3、-Target"><a href="#3、-Target" class="headerlink" title="3、@Target"></a>3、@Target</h3><p>表示该注解用于什么地方，可能的值在枚举类 ElemenetType 中，包括： </p><ul><li>ElemenetType.CONSTRUCTOR 构造器声明 </li><li>ElemenetType.FIELD 域声明（包括 enum 实例） </li><li>ElemenetType.LOCAL_VARIABLE 局部变量声明</li><li>ElemenetType.ANNOTATION_TYPE 作用于注解量声明</li><li>ElemenetType.METHOD 方法声明</li><li>ElemenetType.PACKAGE 包声明 </li><li>ElemenetType.PARAMETER 参数声明 </li><li>ElemenetType.TYPE 类，接口（包括注解类型）或enum声明<br>@Inherited 允许子类继承父类中的注解。</li></ul><h1 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> me.cuijing.test.anotation;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义注解</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> CuiJing</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2017/5/13</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> AnnotationTest &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sex</span><span class="params">()</span> <span class="keyword">default</span> "男"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注解测试</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Cui</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@AnnotationTest</span>(sex = <span class="string">"男"</span>, name = <span class="string">"张飞"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AnnotationTest</span>(sex = <span class="string">"男"</span>, name = <span class="string">"Fly"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AnnotationTest</span>(sex = <span class="string">"女"</span>, name = <span class="string">"李明"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLiMing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//检查类MyAnnotationTest是否含有@AnnotationTest注解</span></span><br><span class="line">        <span class="keyword">if</span> (MyAnnotationTest.class.isAnnotationPresent(AnnotationTest.class)) &#123;</span><br><span class="line">            <span class="comment">//若存在就获取注解</span></span><br><span class="line">            AnnotationTest annotation = (AnnotationTest) MyAnnotationTest.class.getAnnotation(AnnotationTest.class);</span><br><span class="line">            System.out.println(annotation);</span><br><span class="line">            <span class="comment">//获取注解属性</span></span><br><span class="line">            System.out.println(annotation.sex());</span><br><span class="line">            System.out.println(annotation.name());</span><br><span class="line">            System.out.println(<span class="string">"///////////////////////////////////////////"</span>);</span><br><span class="line">            Method[] _methods = MyAnnotationTest.class.getDeclaredMethods();</span><br><span class="line">            <span class="keyword">for</span> (Method method : _methods) &#123;</span><br><span class="line">                System.out.println(method);</span><br><span class="line">                <span class="keyword">if</span> (method.isAnnotationPresent(AnnotationTest.class)) &#123;</span><br><span class="line">                    AnnotationTest test = method.getAnnotation(AnnotationTest.class);</span><br><span class="line">                    System.out.println(<span class="string">"AnnotationTest(method="</span> + method.getName() + <span class="string">",name="</span> + test.name() + <span class="string">",sex="</span> + test.sex() + <span class="string">")"</span>);</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@test</span>.AnnotationTest(sex=男, name=张飞)</span><br><span class="line">男</span><br><span class="line">张飞</span><br><span class="line"><span class="comment">///////////////////////////////////////////</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> test.MyAnnotationTest.main(java.lang.String[])</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> test.MyAnnotationTest.setLiMing()</span><br><span class="line">AnnotationTest(method=setLiMing,name=李明,sex=女)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> test.MyAnnotationTest.setFly()</span><br><span class="line">AnnotationTest(method=setFly,name=Fly,sex=男)</span><br></pre></td></tr></table></figure><p>到这里，我们对注解的基本有点了解了，注解的运用其实与反射式分不开的。我们可以利用代码中的注解间接控制程序代码的运行，它们通过Java反射机制读取注解的信息，并根据这些信息更改目标程序的逻辑。但是我们怎么使用注解呢？怎么让注解发挥作用，例如<code>spring</code>等框架时如何应用注解的呢？</p><h1 id="注解理解的深入"><a href="#注解理解的深入" class="headerlink" title="注解理解的深入"></a>注解理解的深入</h1><p>我们结合spring的控制反转和依赖注入来继续说明这个问题。</p><p>看下面的代码，首先是一个IUser接口，包含一个login方法。然后又一个中文登录方法和英文登录方法都实现了Iuser接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUser</span> </span>&#123;   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">()</span></span>;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChineseUserImpl</span> <span class="keyword">implements</span> <span class="title">IUser</span> </span>&#123;  </span><br><span class="line">   <span class="meta">@Override</span>  </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">       System.err.println(<span class="string">"用户登录！"</span>);  </span><br><span class="line">   &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EnglishUserImpl</span> <span class="keyword">implements</span> <span class="title">IUser</span> </span>&#123;  </span><br><span class="line">   <span class="meta">@Override</span>  </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">       System.err.println(<span class="string">"User Login！"</span>);  </span><br><span class="line">   &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后有一个Test类，要注入IUser接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AnnotationTest</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> IUser userdao;  </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> IUser <span class="title">getUserdao</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> userdao;  </span><br><span class="line">    &#125;  </span><br><span class="line">       </span><br><span class="line">    <span class="meta">@AnnotationTest</span>(nation = <span class="string">"ChineseUserImpl"</span>)  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserdao</span><span class="params">(IUser userdao)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.userdao = userdao;  </span><br><span class="line">    &#125;  </span><br><span class="line">       </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loginTest</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        userdao.login();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们实现的是setter注入方式。为了配合这个例子，我把@AnnotationTest也稍作修改。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Documented</span>  </span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.METHOD, ElementType.TYPE, ElementType.FIELD&#125;)  </span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)  </span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> AnnotationTest &#123;         </span><br><span class="line">     <span class="function"><span class="keyword">public</span> String <span class="title">nation</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后再引入一个类Container，类似spring容器的作用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Container</span> </span>&#123;     </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Test <span class="title">getBean</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">         Test test = <span class="keyword">new</span> Test();   </span><br><span class="line">         <span class="keyword">if</span> (Test.class.isAnnotationPresent(AnnotationTest.class)) &#123;  </span><br><span class="line">             Method[] methods = Test.class.getDeclaredMethods();  </span><br><span class="line">             <span class="keyword">for</span> (Method method : methods) &#123;  </span><br><span class="line">                 System.out.println(method);  </span><br><span class="line">                 <span class="keyword">if</span> (method.isAnnotationPresent(AnnotationTest.class)) &#123;  </span><br><span class="line">                     AnnotationTest annotest = method.getAnnotation(AnnotationTest.class);  </span><br><span class="line">                     System.out.println(<span class="string">"AnnotationTest(field="</span> + method.getName()  </span><br><span class="line">                             + <span class="string">",nation="</span> + annotest.nation() + <span class="string">")"</span>);  </span><br><span class="line">                     IUser userdao;  </span><br><span class="line">                    <span class="keyword">try</span> &#123;  </span><br><span class="line">                         userdao = (IUser) Class.forName(<span class="string">"test."</span> + annotest.nation()).newInstance();  </span><br><span class="line">                         test.setUserdao(userdao);  </span><br><span class="line">                     &#125; <span class="keyword">catch</span> (Exception ex) &#123;  </span><br><span class="line">                         Logger.getLogger(Container.class.getName()).log(Level.SEVERE, <span class="keyword">null</span>, ex);  </span><br><span class="line">                     &#125;  </span><br><span class="line">                 &#125;  </span><br><span class="line">             &#125;  </span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">             System.out.println(<span class="string">"没有注解标记！"</span>);  </span><br><span class="line">         &#125;  </span><br><span class="line">         <span class="keyword">return</span> test;  </span><br><span class="line">     &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在容器里面我使用反射获取注解属性nation所标注的内容，然后对Test类中的接口进行具体实现。这里的Container就是所谓的外部容器，可以对我们的注解或者是xml配置文件进行解析，以降低耦合性。<br>最后我们再进行测试，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/** </span></span><br><span class="line"><span class="comment">  * 注解测试 </span></span><br><span class="line"><span class="comment">  * </span></span><br><span class="line"><span class="comment">  * <span class="doctag">@author</span> Fly </span></span><br><span class="line"><span class="comment">  */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAnnotationTest</span> </span>&#123;   </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">         Test test = Container.getBean();  </span><br><span class="line">         test.loginTest();  </span><br><span class="line">     &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> test.Test.loginTest()  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> test.Test.setUserdao(test.IUser)  </span><br><span class="line">AnnotationTest(field=setUserdao,nation=ChineseUserDaoImpl)  </span><br><span class="line"><span class="keyword">public</span> test.IUser test.Test.getUserdao()  </span><br><span class="line">用户登录！</span><br></pre></td></tr></table></figure><p>如果我把Test类中的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AnnotationTest</span>(nation = <span class="string">"ChineseUserImpl"</span>)</span><br></pre></td></tr></table></figure><p>修改成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AnnotationTest</span>(nation = <span class="string">"EnglishUserImpl"</span>)</span><br></pre></td></tr></table></figure><p>结构就变成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> test.Test.loginTest()  </span><br><span class="line"><span class="keyword">public</span> test.IUser test.Test.getUserdao()  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> test.Test.setUserdao(test.IUser)  </span><br><span class="line">AnnotationTest(field=setUserdao,nation=EnglishUserImpl)  </span><br><span class="line">User Login！</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li><p>所有的注解类都隐式继承于 java.lang.annotation.Annotation，注解不允许显式继承于其他的接口。</p></li><li><p>注解不能直接干扰程序代码的运行，无论增加或删除注解，代码都能够正常运行。Java语言解释器会忽略这些注解，而由第三方工具负责对注解进行处理。</p></li><li><p>一个注解可以拥有多个成员，成员声明和接口方法声明类似，这里，我们仅定义了一个成员，成员的声明有以下几点限制：</p><ul><li>成员以无入参无抛出异常的方式声明，如boolean value(String str)、boolean value() throws Exception等方式是非法的；<ul><li>可以通过default为成员指定一个默认值，如String level() default “LOW_LEVEL”、int high() default 2是合法的，当然也可以不指定默认值；</li><li>成员类型是受限的，合法的类型包括原始类型及其封装类、String、Class、enums、注解类型，以及上述类型的数组类型。如ForumService value()、List foo()是非法的。</li><li>如果注解只有一个成员，则成员名必须取名为value()，在使用时可以忽略成员名和赋值号（=），如@Description(“使用注解的实例”)。注解类拥有多个成员时，如果仅对value成员进行赋值则也可不使用赋值号，如果同时对多个成员进行赋值，则必须使用赋值号，如@DeclareParents (value = “NaiveWaiter”, defaultImpl = SmartSeller.class)。</li><li>注解类可以没有成员，没有成员的注解称为标识注解，解释程序以标识注解存在与否进行相应的处理；</li></ul></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;注解&quot;&gt;&lt;a href=&quot;#注解&quot; class=&quot;headerlink&quot; title=&quot;注解&quot;&gt;&lt;/a&gt;注解&lt;/h1&gt;&lt;p&gt;带着问题去读！为什么写注解可以替代大量配置文件呢？&lt;/p&gt;
    
    </summary>
    
      <category term="Java 基础" scheme="http://cuijing.me/categories/Java-%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="http://cuijing.me/tags/Java/"/>
    
      <category term="面向对象" scheme="http://cuijing.me/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
      <category term="注解" scheme="http://cuijing.me/tags/%E6%B3%A8%E8%A7%A3/"/>
    
      <category term="annotation" scheme="http://cuijing.me/tags/annotation/"/>
    
  </entry>
  
  <entry>
    <title>Java 面向对象的特性</title>
    <link href="http://cuijing.me/2015/02/08/Java/2-Object-Oriented/3-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%A3%85%E6%80%A7/"/>
    <id>http://cuijing.me/2015/02/08/Java/2-Object-Oriented/3-面向对象装性/</id>
    <published>2015-02-08T00:30:00.000Z</published>
    <updated>2016-05-05T12:22:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、封装性"><a href="#一、封装性" class="headerlink" title="一、封装性"></a>一、封装性</h1><h2 id="1、面向对象的特征一：封装与隐藏"><a href="#1、面向对象的特征一：封装与隐藏" class="headerlink" title="1、面向对象的特征一：封装与隐藏"></a>1、面向对象的特征一：封装与隐藏</h2><p> 问题：当创建了类的对象以后，如果直接通过”对象.属性”的方式对相应的对象属性赋值的话，可能会出现不满足实际情况的意外，我们考虑不让对象来直接作用属性，而是通过”对象.方法”的形式，来控制对象对属性的访问。实际情况中，对属性的要求就可以通过方法来体现。<br><a id="more"></a></p><h2 id="2、面向对象思想的落地法则二："><a href="#2、面向对象思想的落地法则二：" class="headerlink" title="2、面向对象思想的落地法则二："></a>2、面向对象思想的落地法则二：</h2><p>（封装性的思想）①将类的属性私有化，②提供公共的方法（<code>setter &amp; getter</code>）来实现调用。</p><h2 id="3、四种权限修饰符"><a href="#3、四种权限修饰符" class="headerlink" title="3、四种权限修饰符"></a>3、四种权限修饰符</h2><ol><li>权限从大到小为：<code>public   protected   缺省   private</code></li><li>四种权限都可以用来修饰   属性、方法、构造器</li><li>修饰类的话：<code>public  &amp;  缺省</code></li></ol><p><img src="http://oov0wb0gl.bkt.clouddn.com/2017-05-07-14941662098225.png" alt=""></p><h1 id="二、继承性"><a href="#二、继承性" class="headerlink" title="二、继承性"></a>二、继承性</h1><h2 id="1、为什么要有继承性："><a href="#1、为什么要有继承性：" class="headerlink" title="1、为什么要有继承性："></a>1、为什么要有继承性：</h2><p>多个类中存在相同属性和行为时，将这些内容抽取到单独一个类中，那么多个类无需再定义这些属性和行为，只要继承那个类即可。此处的多个类称为子类，单独的这个类称为父类（基类或超类）。可以理解为:“子类<br>is a 父类”</p><ol><li>继承的出现提高了<strong>代码的复用性</strong></li><li>继承的出现让类与类之间产生了关系，<strong>提供了多态的前提</strong></li><li>不要仅为了获取其他类中某个功能而去继承</li></ol><h2 id="2、声明格式"><a href="#2、声明格式" class="headerlink" title="2、声明格式"></a>2、声明格式</h2><p>通过 <code>class A extends B</code> 类实现类的继承。<br>子类：A<br>父类或基类SuperClass：B</p><h2 id="3、继承"><a href="#3、继承" class="headerlink" title="3、继承"></a>3、继承</h2><p>父类中声明的属性、方法，子类就可以获取到。子类除了通过继承，获取父类的结构之外，还可以定义自己的特有的成分。</p><p>extends：子类是对父类功能的“扩展”，明确子类不是父类的子集。<br>关于继承的规则：子类不能直接访问父类中私有的(private)的成员变量和方法。<br><img src="http://oov0wb0gl.bkt.clouddn.com/2017-06-06-14942304203686.png" alt=""><br>Java中类的单继承：一个类只能继承一个父类。反之，一个父类可以有多个子类。<br>子类和父类：是相对的概念。</p><p><strong>问题：</strong><br>修改了父类后，父类会重新编译，子类也会重新编译吗？<br>答案：是。</p><h1 id="三、多态性"><a href="#三、多态性" class="headerlink" title="三、多态性"></a>三、多态性</h1><h2 id="什么是多态-？："><a href="#什么是多态-？：" class="headerlink" title="什么是多态 ？："></a>什么是多态 ？：</h2><ol><li>面向对象的三大特性：封装、继承、多态。从一定角度来看，封装和继承几乎都是为多态而准备的。这是我们最后一个概念，也是最重要的知识点。</li><li>多态的定义：指允许不同类的对象对同一消息做出响应。即同一消息可以根据发送对象的不同而采用多种不同的行为方式。（发送消息就是函数调用）</li><li>实现多态的技术称为：动态绑定（dynamic binding），是指在执行期间判断所引用对象的实际类型，根据其实际的类型调用其相应的方法。</li><li>多态的作用：消除类型之间的耦合关系。</li><li>现实中，关于多态的例子不胜枚举。比方说按下 F1 键这个动作，如果当前在 Flash 界面下弹出的就是 AS 3 的帮助文档；如果当前在 Word 下弹出的就是 Word 帮助；在 Windows 下弹出的就是 Windows 帮助和支持。同一个事件发生在不同的对象上会产生不同的结果。</li></ol><h2 id="多态存在的三个必要条件-（重要）："><a href="#多态存在的三个必要条件-（重要）：" class="headerlink" title="多态存在的三个必要条件 （重要）："></a>多态存在的三个必要条件 （重要）：</h2><ol><li>要有继承；</li><li>要有重写；</li><li>父类引用指向子类对象。</li></ol><h2 id="格式："><a href="#格式：" class="headerlink" title="格式："></a>格式：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Person p = <span class="keyword">new</span> Man();<span class="comment">//向上转型</span></span><br><span class="line"><span class="comment">// 虚拟方法调用：通过父类的引用指向子类的对象实体，</span></span><br><span class="line"><span class="comment">// 当调用方法时，实际执行的是子类重写父类的方法</span></span><br><span class="line">p1.eat();</span><br><span class="line">p1.walk();</span><br><span class="line"><span class="comment">// p1.entertainment();</span></span><br></pre></td></tr></table></figure><h2 id="动态绑定："><a href="#动态绑定：" class="headerlink" title="动态绑定："></a>动态绑定：</h2><p>编译时，认为<code>p</code>是<code>Person</code>类型的，故只能执行<code>Person</code>里才有的结构，即<code>Man</code>里特有的结构不能够调用。</p><p>对于多态性来说，编译时，”看左边”，将此引用变量理解为父类的类型；运行时，”看右边”，关注于真正对象的实体，子类的对象，那么执行的方法就是子类重写的。</p><p><strong>子类对象的多态性，并不适用于属性。</strong></p><h2 id="关于向下转型："><a href="#关于向下转型：" class="headerlink" title="关于向下转型："></a>关于向下转型：</h2><ol><li>向下转型,使用强转符：()</li><li>为了保证不报ClassCastException，最好在向下转型前，进行 <code>instanceof</code> 判断。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 若a是A类的实例，那么a也一定是A类的父类的实例。</span></span><br><span class="line"><span class="keyword">if</span> (p1 <span class="keyword">instanceof</span> Woman) &#123;</span><br><span class="line">    Woman w1 = (Woman) p1;</span><br><span class="line">    w1.shopping();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (p1 <span class="keyword">instanceof</span> Man) &#123;</span><br><span class="line">    Man m1 = (Man) p1;</span><br><span class="line">    m1.entertainment();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若出现父类的引用指向子类的对象实体</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person p = <span class="keyword">new</span> Man();  <span class="comment">// 向上转型</span></span><br></pre></td></tr></table></figure><p>当调用方法时，先查看父类是否也有这个方法，有的话，实际执行的是子类重写父类的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person p = <span class="keyword">new</span> Person(); <span class="comment">// 一般情况</span></span><br></pre></td></tr></table></figure><p>一般情况继承类的情况 ， 若子类没有这个方法，而父类有此方法，则执行父类中的方法。</p><h2 id="多态的好处："><a href="#多态的好处：" class="headerlink" title="多态的好处："></a>多态的好处：</h2><ol><li>可替换性（substitutability）。多态对已存在代码具有可替换性。例如，多态对圆Circle类工作，对其他任何圆形几何体，如圆环，也同样工作。</li><li>可扩充性（extensibility）。多态对代码具有可扩充性。增加新的子类不影响已存在类的多态性、继承性，以及其他特性的运行和操作。实际上新加子类更容易获得多态功能。例如，在实现了圆锥、半圆锥以及半球体的多态基础上，很容易增添球体类的多态性。</li><li>接口性（interface-ability）。多态是超类通过方法签名，向子类提供了一个共同接口，由子类来完善或者覆盖它而实现的。如图8.3 所示。图中超类Shape规定了两个实现多态的接口方法，computeArea()以及computeVolume()。子类，如Circle和Sphere为了实现多态，完善或者覆盖这两个接口方法。</li><li>灵活性（flexibility）。它在应用中体现了灵活多样的操作，提高了使用效率。</li><li>简化性（simplicity）。多态简化对应用软件的代码编写和修改过程，尤其在处理大量对象的运算和操作时，这个特点尤为突出和重要。</li></ol><h1 id="测试题："><a href="#测试题：" class="headerlink" title="测试题："></a>测试题：</h1><h2 id="题-1"><a href="#题-1" class="headerlink" title="题 1"></a>题 1</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 学习完 Java 面向对象的特性后你会做这一题吗？</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> String <span class="title">show</span><span class="params">(D obj)</span></span>&#123;</span><br><span class="line">             <span class="keyword">return</span> ( <span class="string">"A and D"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> String <span class="title">show</span><span class="params">(A obj)</span></span>&#123;</span><br><span class="line">             <span class="keyword">return</span> ( <span class="string">"A and A"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> String <span class="title">show</span><span class="params">(B obj)</span></span>&#123;</span><br><span class="line">             <span class="keyword">return</span> ( <span class="string">"B and B"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> String <span class="title">show</span><span class="params">(A obj)</span></span>&#123;</span><br><span class="line">             <span class="keyword">return</span> ( <span class="string">"B and A"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">B</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> <span class="keyword">extends</span> <span class="title">B</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestA</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">            A a1 = <span class="keyword">new</span> A();</span><br><span class="line">            A a2 = <span class="keyword">new</span> B();</span><br><span class="line">            B b = <span class="keyword">new</span> B();</span><br><span class="line">            C c = <span class="keyword">new</span> C();</span><br><span class="line">            D d = <span class="keyword">new</span> D();</span><br><span class="line">            System. out.println(a1.show(b)); <span class="comment">//1 </span></span><br><span class="line">            System. out.println(a1.show(c)); <span class="comment">//2 </span></span><br><span class="line">            System. out.println(a1.show(d)); <span class="comment">//3 </span></span><br><span class="line">            System. out.println(a2.show(b)); <span class="comment">//4 </span></span><br><span class="line">            System. out.println(a2.show(c)); <span class="comment">//5 </span></span><br><span class="line">            System. out.println(a2.show(d)); <span class="comment">//6 </span></span><br><span class="line">            System. out.println(b.show(b));  <span class="comment">//7 </span></span><br><span class="line">            System. out.println(b.show(c));  <span class="comment">//8   </span></span><br><span class="line">            System. out.println(b.show(d));  <span class="comment">//9 </span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">答案</span><br><span class="line">①   A and A</span><br><span class="line">②   A and A</span><br><span class="line">③   A and D</span><br><span class="line">④   B and A</span><br><span class="line">⑤   B and A</span><br><span class="line">⑥   A and D</span><br><span class="line">⑦   B and B</span><br><span class="line">⑧   B and B</span><br><span class="line">⑨   A and D</span><br><span class="line"><span class="number">1</span>.实例对象为A，参数为对象B，B为A的子类。执行A.class中show(A obj)</span><br><span class="line"><span class="number">2</span>.同上</span><br><span class="line"><span class="number">3</span>.实例对象为A，参数为对象D，执行A.class中show(D obj)</span><br><span class="line"><span class="number">4</span>.实例对象依然为A，参数为B，本应执行A.class中show(A obj)，但是，B.class重写了show(A obj),所以执行B.class show(A obj)</span><br><span class="line"><span class="number">5</span>.同上</span><br><span class="line"><span class="number">6</span>.执行A.class show(D obj) B中并没有重写。</span><br><span class="line"><span class="number">7</span>，<span class="number">8</span>.实例对象为B，参数为B或者B的子类，执行show(B obj)</span><br><span class="line"><span class="number">9</span>.实例对象为B，参数为D，因为B继承自A，优先可以执行A中的show(D obj)</span><br></pre></td></tr></table></figure><h2 id="题-2"><a href="#题-2" class="headerlink" title="题 2"></a>题 2</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> me.cuijing.test.inherit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> CuiJing</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2017/5/9</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PolymorphismTest2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person p = <span class="keyword">new</span> Student();</span><br><span class="line">        System.out.println(p.age);</span><br><span class="line">        System.out.println(p.name);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    String name = <span class="string">"人类"</span>;</span><br><span class="line">    <span class="keyword">int</span> age = <span class="number">12</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    String name = <span class="string">"学生"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">12</span><br><span class="line">人类</span><br></pre></td></tr></table></figure><p>因为 <code>Person p = new Son();</code> 就是把子类转型为父类</p><h1 id="子类转型为父类的规则："><a href="#子类转型为父类的规则：" class="headerlink" title="子类转型为父类的规则："></a>子类转型为父类的规则：</h1><ol><li>只能调用父类的属性</li><li>只能调用父类未被复重写的方法</li><li>只能调用被子类复写的方法</li></ol><p><strong>属性（变量）是静态绑定<br>方法（函数）是动态绑定</strong></p><p>静态绑定就是变量本身什么类型，就用哪个里面的。<br>例如，你的<code>p.name</code>的<code>p</code>是<code>Person</code>类型，那么<code>name</code>就是<code>Person</code>类中的<code>name</code>。</p><p>如果是动态绑定，那么会从本身类型开始向超类型查找。如果<code>name</code>是方法，那么用于<code>p</code>是<code>Son</code>类的一个对象，所以会从<code>Son</code>开始找<code>name</code>方法，如果找不到再到父类中找。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、封装性&quot;&gt;&lt;a href=&quot;#一、封装性&quot; class=&quot;headerlink&quot; title=&quot;一、封装性&quot;&gt;&lt;/a&gt;一、封装性&lt;/h1&gt;&lt;h2 id=&quot;1、面向对象的特征一：封装与隐藏&quot;&gt;&lt;a href=&quot;#1、面向对象的特征一：封装与隐藏&quot; class=&quot;headerlink&quot; title=&quot;1、面向对象的特征一：封装与隐藏&quot;&gt;&lt;/a&gt;1、面向对象的特征一：封装与隐藏&lt;/h2&gt;&lt;p&gt; 问题：当创建了类的对象以后，如果直接通过”对象.属性”的方式对相应的对象属性赋值的话，可能会出现不满足实际情况的意外，我们考虑不让对象来直接作用属性，而是通过”对象.方法”的形式，来控制对象对属性的访问。实际情况中，对属性的要求就可以通过方法来体现。&lt;br&gt;
    
    </summary>
    
      <category term="Java 基础" scheme="http://cuijing.me/categories/Java-%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="http://cuijing.me/tags/Java/"/>
    
      <category term="面向对象" scheme="http://cuijing.me/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
      <category term="特性" scheme="http://cuijing.me/tags/%E7%89%B9%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>Java 关键字</title>
    <link href="http://cuijing.me/2015/02/08/Java/2-Object-Oriented/4-%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    <id>http://cuijing.me/2015/02/08/Java/2-Object-Oriented/4-关键字/</id>
    <published>2015-02-08T00:30:00.000Z</published>
    <updated>2016-05-05T12:52:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="package"><a href="#package" class="headerlink" title="package:"></a>package:</h1><ul><li>声明源文件所在的包，写在程序的第一行。</li><li>每<code>.</code>一次，表示一层文件目录。</li><li>包名都要小写。<a id="more"></a></li></ul><h1 id="import"><a href="#import" class="headerlink" title="import:"></a>import:</h1><ol><li>显式导入指定包下的类或接口</li><li>写在包的声明和源文件之间</li><li>如果需要引入多个类或接口，那么就并列写出</li><li>如果导入的类是<code>java.lang</code>包下的，如：<code>System String Math</code>等，就不需要显式的声明</li><li>理解 <code>.*</code> 的概念。比如<code>java.util.*</code></li><li>如何处理同名类的导入。如：在util包和sql包下同时存在Date类</li><li><code>import static</code> 静态导入: 表示导入指定类的<code>static</code>的属性或方法</li><li>导入<code>java.lang.*</code>只能导入<code>lang</code>包下的所有类或接口，不能导入<code>lang</code>的子包下的类或接口</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//import java.util.Scanner;</span></span><br><span class="line"><span class="comment">//import java.util.Date;</span></span><br><span class="line"><span class="comment">//import java.util.List;</span></span><br><span class="line"><span class="comment">//import java.util.ArrayList;</span></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.System.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPackageImport</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">          out.println(<span class="string">"helloworld"</span>);</span><br><span class="line">          Scanner s = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">          s.next();</span><br><span class="line">         </span><br><span class="line">          Date d = <span class="keyword">new</span> Date();</span><br><span class="line">          List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">         </span><br><span class="line">          java.sql.Date d1 = <span class="keyword">new</span> java.sql.Date(<span class="number">522535114234L</span>);</span><br><span class="line">         </span><br><span class="line">          Field f = <span class="keyword">null</span>;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="this"><a href="#this" class="headerlink" title="this :"></a>this :</h1><ol><li>使用在类中，可以用来修饰属性、方法、构造器</li><li>表示当前对象或者是当前正在创建的对象</li><li>当形参与成员变量重名时，如果在方法内部需要使用成员变量，必须添加<code>this</code>来表明该变量时类成员</li><li>在任意方法内，如果使用当前类的成员变量或成员方法可以在其前面添加<code>this</code>，增强程序的阅读性</li><li>在构造器中使用<code>this(形参列表)</code>显式的调用本类中重载的其它的构造器</li></ol><p>注意：</p><ul><li>要求“this(形参列表)”要声明在构造器的首行！</li><li>类中若存在n个构造器，那么最多有n-1构造器中使用了this。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPerson</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">          Person p1 = <span class="keyword">new</span> Person();</span><br><span class="line">          System.out.println(p1.getName() + <span class="string">":"</span> + p1.getAge());</span><br><span class="line"></span><br><span class="line">          Person p2 = <span class="keyword">new</span> Person(<span class="string">"BB"</span>,<span class="number">23</span>);</span><br><span class="line">          <span class="keyword">int</span> temp = p2.compare(p1);</span><br><span class="line">          System.out.println(temp);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">private</span> String name;</span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">          <span class="keyword">this</span>.name = <span class="string">"AA"</span>;</span><br><span class="line">          <span class="keyword">this</span>.age = <span class="number">1</span>;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">          <span class="keyword">this</span>();</span><br><span class="line">          <span class="keyword">this</span>.name = name;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name,<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">          <span class="keyword">this</span>(name);</span><br><span class="line">          <span class="keyword">this</span>.age = age;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> name;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">          <span class="keyword">this</span>.name = name;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> age;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">          <span class="keyword">this</span>.age = age;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">          System.out.println(<span class="string">"eating"</span>);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span></span>&#123;</span><br><span class="line">          System.out.println(<span class="string">"sleeping"</span>);</span><br><span class="line">          <span class="keyword">this</span>.eat();</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">//比较当前对象与形参的对象的age谁大。</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Person p)</span></span>&#123;</span><br><span class="line">          <span class="keyword">if</span>(<span class="keyword">this</span>.age &gt; p.age)</span><br><span class="line">               <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">          <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">this</span>.age &lt; p.age)</span><br><span class="line">               <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">               <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="super"><a href="#super" class="headerlink" title="super :"></a>super :</h1><p>相较于关键字 <code>this</code>，可以修饰属性、方法、构造器<br>在Java类中使用super来调用父类中的指定操作：</p><ul><li><code>super</code> 可用于访问父类中定义的属性，</li><li><code>super</code> 可用于调用父类中定义的成员方法</li><li><code>super</code> 可用于在子类构造方法中调用父类的构造器</li></ul><h2 id="super-修饰属性、方法："><a href="#super-修饰属性、方法：" class="headerlink" title="super 修饰属性、方法："></a>super 修饰属性、方法：</h2><p>在子类的方法、构造器中，通过<code>super.</code>属性或者<code>super.</code>方法的形式，显式的调用父类的指定属性或方法。尤其是，当子类与父类有同名的属性、或方法时，调用父类中的结构的话，一定要用<code>super.</code>。</p><h2 id="super-调用父类构造器"><a href="#super-调用父类构造器" class="headerlink" title="super 调用父类构造器"></a>super 调用父类构造器</h2><p>通过 <code>super(形参列表)</code> 显式的在子类的构造器中，调用父类指定的构造器！</p><p>任何一个类（除Object类）的构造器的首行，要么显式的调用本类中重载的其它的构造器 <code>this(形参列表)</code> 或显式的调用父类中，指定的构造器 <code>super(形参列表)</code> ，要么默认的调用父类空参的构造器 <code>super()</code> 。</p><ul><li>建议在设计类时，提供一个空参的构造器！</li><li>子类中所有的构造器默认都会访问父类中空参数的构造器</li><li>当父类中没有空参数的构造器时，子类的构造器必须通过 <code>this(参数列表)</code> 或者 <code>super(参数列表)</code> 语句，指定调用本类或者父类中相应的构造器，且必须放在构造器的第一行</li><li>如果子类构造器中既未显式调用父类或本类的构造器，且父类中又没有无参的构造器，则编译出错</li></ul><h2 id="this-和-super-的区别"><a href="#this-和-super-的区别" class="headerlink" title="this 和 super 的区别"></a>this 和 super 的区别</h2><p><img src="http://oov0wb0gl.bkt.clouddn.com/2017-06-06-14942345368657.jpg" alt=""></p><h1 id="static"><a href="#static" class="headerlink" title="static :"></a>static :</h1><p>static: 静态的，可以用来修饰属性、方法、代码块、内部类。</p><h2 id="修饰属性（类变量）"><a href="#修饰属性（类变量）" class="headerlink" title="修饰属性（类变量）:"></a>修饰属性（类变量）:</h2><ol><li>由类创建的所有的对象，都共用这一个属性；</li><li>当其中一个对象对此属性进行修改，会导致其他对象对此属性的一个调用；</li><li>类变量随着类的加载而加载的，而且独一份；</li><li>静态的变量可以直接通过<code>类.类变量</code>的形式来调用；</li><li>类变量的加载是要早于对象。所以当有对象以后，可以<code>对象.类变量</code>使用。但是<code>类.实例变量</code>是不行的；</li><li>类变量存在于静态域中。</li></ol><h2 id="修饰方法（类方法）"><a href="#修饰方法（类方法）" class="headerlink" title="修饰方法（类方法）:"></a>修饰方法（类方法）:</h2><ol><li>随着类的加载而加载，在内存中也是独一份;</li><li>可以直接通过 <code>类.类方法</code> 的方式调用</li><li>内部可以调用静态的属性或静态的方法，而不能调用非静态的属性或方法。反之，非静态的方法是可以调用静态的属性或静态的方法</li><li>静态的方法内是不可以有this或super关键字的！</li></ol><p><strong>注：</strong>静态的结构(static的属性、方法、代码块、内部类)的生命周期要早于非静态的结构，同时被回收（与当前类同时被回收）也要晚于非静态的结构。</p><h1 id="final"><a href="#final" class="headerlink" title="final :"></a>final :</h1><p>final: 最终的、绝育的，可以用来修饰类、属性、方法。</p><h2 id="修饰类："><a href="#修饰类：" class="headerlink" title="修饰类："></a>修饰类：</h2><p>这个类就不能被继承。如：<code>String类、StringBuffer类、System类</code></p><h2 id="修饰方法："><a href="#修饰方法：" class="headerlink" title="修饰方法："></a>修饰方法：</h2><p>不能被重写。如：<code>Object</code>类的<code>getClass()</code></p><h2 id="修饰属性："><a href="#修饰属性：" class="headerlink" title="修饰属性："></a>修饰属性：</h2><p>此属性就是一个常量，一旦初始化后，不可再被赋值。习惯上，常量用大写字符表示。</p><p>此常量在哪里赋值：<br>①此常量不能使用默认初始化 ，必须至少显示初始化<br>②可以显式的赋值、在代码块里赋值、在构造器里赋值。</p><p>变量用<code>static final</code>修饰：全局常量。比如：Math 类的PI</p><p><strong>与<code>finally 、finalize()</code>区分开</strong></p><h1 id="abstract"><a href="#abstract" class="headerlink" title="abstract"></a>abstract</h1><p>abstract：抽象的，可以用来修饰类、方法；不能用来修饰属性、构造器、<code>private、final、static</code>。</p><h2 id="修饰类：抽象类"><a href="#修饰类：抽象类" class="headerlink" title="修饰类：抽象类"></a>修饰类：抽象类</h2><ol><li>类不可被实例化；</li><li>抽象类有构造器 (凡是类都有构造器)；</li><li>抽象方法所在的类，一定是抽象类；</li><li>抽象类中可以没有抽象方法。</li></ol><p>当我们设计一个类，不需要创建此类的实例时候，就可以考虑将其设置为抽象的，由其子类实现这个类的抽象方法以后，就可以实例化。</p><h2 id="修饰方法：抽象方法"><a href="#修饰方法：抽象方法" class="headerlink" title="修饰方法：抽象方法"></a>修饰方法：抽象方法</h2><ol><li>格式：没有方法体，包括{}.如：public abstract void eat();</li><li>抽象方法只保留方法的功能，而具体的执行，交给继承抽象类的子类，由子类重写此抽象方法。</li><li>若子类继承抽象类，并重写了所有的抽象方法，则此类是一个”实体类”,即可以实例化</li><li>若子类继承抽象类，没有重写所有的抽象方法，意味着此类中仍有抽象方法，则此类必须声明为抽象的！</li></ol><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul><li>抽象类可以有非抽象方法吗？可以；</li><li>抽象类可以有静态方法吗？当然可以；</li><li>抽象类可以有属性，有构造器；</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;package&quot;&gt;&lt;a href=&quot;#package&quot; class=&quot;headerlink&quot; title=&quot;package:&quot;&gt;&lt;/a&gt;package:&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;声明源文件所在的包，写在程序的第一行。&lt;/li&gt;
&lt;li&gt;每&lt;code&gt;.&lt;/code&gt;一次，表示一层文件目录。&lt;/li&gt;
&lt;li&gt;包名都要小写。
    
    </summary>
    
      <category term="Java 基础" scheme="http://cuijing.me/categories/Java-%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="http://cuijing.me/tags/Java/"/>
    
      <category term="关键字" scheme="http://cuijing.me/tags/%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    
      <category term="面向对象" scheme="http://cuijing.me/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>Java 类及对象</title>
    <link href="http://cuijing.me/2015/02/08/Java/2-Object-Oriented/1-%E7%B1%BB%E5%8F%8A%E5%AF%B9%E8%B1%A1/"/>
    <id>http://cuijing.me/2015/02/08/Java/2-Object-Oriented/1-类及对象/</id>
    <published>2015-02-08T00:30:00.000Z</published>
    <updated>2016-05-05T11:30:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="面向对象-vs-面向过程（了解）"><a href="#面向对象-vs-面向过程（了解）" class="headerlink" title="面向对象  vs 面向过程（了解）"></a>面向对象  vs 面向过程（了解）</h1><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 理解一：人开门</span></span><br><span class="line"><span class="comment"> * 面向过程：人 打开 门</span></span><br><span class="line"><span class="comment"> * 面向对象:</span></span><br><span class="line"><span class="comment"> * 人&#123;</span></span><br><span class="line"><span class="comment"> *     打开(门)&#123;</span></span><br><span class="line"><span class="comment"> *         门.开开();</span></span><br><span class="line"><span class="comment"> *  &#125;      </span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 门&#123;</span></span><br><span class="line"><span class="comment"> *   开开()&#123;</span></span><br><span class="line"><span class="comment"> *  &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 理解二：人把大象装进冰箱</span></span><br><span class="line"><span class="comment"> * 面向过程：1）打开冰箱2）把大象放进去 3)关闭冰箱门</span></span><br><span class="line"><span class="comment"> * 面向对象：</span></span><br><span class="line"><span class="comment"> * 人&#123;</span></span><br><span class="line"><span class="comment"> *      打开(冰箱)&#123;冰箱.开开()&#125;</span></span><br><span class="line"><span class="comment"> *   操作(大象)&#123;大象.进入(冰箱)&#125;</span></span><br><span class="line"><span class="comment"> *   关闭(冰箱)&#123;冰箱.合上()&#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 大象&#123;</span></span><br><span class="line"><span class="comment"> *      进入(冰箱)&#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * 冰箱&#123;</span></span><br><span class="line"><span class="comment"> *   开开()&#123;&#125;</span></span><br><span class="line"><span class="comment"> *  合上()&#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h1 id="面向对象的特点"><a href="#面向对象的特点" class="headerlink" title="面向对象的特点"></a>面向对象的特点</h1><p>面向对象的特点答：面向对象有三大特点：封装、继承、多态。(如果要回答四个，可加上 抽象性 这一特点)</p><h2 id="封装："><a href="#封装：" class="headerlink" title="封装："></a>封装：</h2><p>封装是把过程和数据包围起来，对数据的访问只能通过已定义的界面。面向对象计算始于这个基本概念，即现实世界可以被描绘成一系列完全自治、封装的对象，这些对象通过一个受保护的接口访问其他对象。</p><h2 id="继承："><a href="#继承：" class="headerlink" title="继承："></a>继承：</h2><p>继承是一种联结类的层次模型，并且允许和鼓励类的重用，它提供了一种明确表述共性的方法。对象的一个新类可以从现有的类中派生，这个过程称为类继承。新类继承了原始类的特性，新类称为原始类的派生类（子类），而原始类称为新类的基类（父类）。派生类可以从它的基类那里继承方法和实例变量，并且类可以修改或增加新的方法使之更适合特殊的需要。</p><h2 id="多态性："><a href="#多态性：" class="headerlink" title="多态性："></a>多态性：</h2><p>多态性是指允许不同类的对象对同一消息作出不同地响应。多态性包括参数化多态性和子类多态性。多态性语言具有灵活、抽象、行为共享、代码共享的优势，很好的解决了应用程序函数同名问题。</p><h2 id="抽象：-了解"><a href="#抽象：-了解" class="headerlink" title="抽象：(了解)"></a>抽象：(了解)</h2><p>抽象就是忽略一个主题中与当前目标无关的那些方面，以便更充分地注意与当前目标有关的方面。抽象并不打算了解全部问题，而只是选择其中的一部分，暂时不用部分细节。抽象包括两个方面，一是过程抽象，二是数据抽象。</p><h1 id="类的设计"><a href="#类的设计" class="headerlink" title="类的设计"></a>类的设计</h1><ol><li>一个项目或工程，不管多庞大，一定是有一个一个类构成的。</li><li><p>类是抽象的，好比是制造汽车的图纸。<br>  而具体的一辆一辆的车，是根据图纸制造的，实际上就是类的实例化</p></li><li><p>完成一个项目（或功能）的思路<br>1）所要完成的功能对应的类的对象是否存在。<br>2）若存在，则通过对象直接调用对应的类中的属性或方法即可<br>3）若不存在，需要创建类的对象。甚至说，类都不存在，就需要设计类。</p></li><li><p>面向对象编程的三条主线：<br>1）类及类的构成成分：属性  方法 构造器  代码块 内部类<br>2）面向对象编程的特征：封装性  继承性 多态性  （抽象性）<br>3）其它的关键字：<code>this super package import static final abstract interface ...</code></p></li></ol><h1 id="类的组成成分："><a href="#类的组成成分：" class="headerlink" title="类的组成成分："></a>类的组成成分：</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">   <span class="comment">// 属性或成员变量</span></span><br><span class="line">   String name;</span><br><span class="line">   <span class="keyword">boolean</span> isMarried;</span><br><span class="line">   <span class="comment">// 构造器</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String n , <span class="keyword">boolean</span> im)</span></span>&#123;</span><br><span class="line">       name = n;</span><br><span class="line">       isMarryed = im;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 方法或函数</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">walk</span><span class="params">()</span></span>&#123;</span><br><span class="line">       System.out.println(<span class="string">"人走路..."</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">"名字是："</span> +name+<span class="string">",Married："</span>+isMarried;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 代码块</span></span><br><span class="line">   &#123;</span><br><span class="line">       name = <span class="string">"Cui Jing"</span>;</span><br><span class="line">       age = <span class="string">"25"</span>;</span><br><span class="line">       isMarried = <span class="keyword">false</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 内部类</span></span><br><span class="line">   <span class="class"><span class="keyword">class</span> <span class="title">pet</span>()</span>&#123;</span><br><span class="line">       String name;</span><br><span class="line">       <span class="keyword">int</span> Weight;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>Java 类有五部分组成</p><ol><li>属性（成员变量，Field）</li><li>构造方法（构造器，Constructor）</li><li>方法（成员方法，函数，Method）</li><li>代码块</li><li>内部类</li></ol><h2 id="属性-成员变量，Field"><a href="#属性-成员变量，Field" class="headerlink" title="属性:(成员变量，Field)"></a>属性:(成员变量，Field)</h2><p><strong>成员变量 vs 局部变量</strong></p><p>相同点：</p><ul><li>遵循变量声明的格式： 数据类型 变量名 = 初始化值</li><li>都有作用域</li></ul><p>不同点：</p><table><thead><tr><th></th><th>成员变量</th><th>局部变量</th></tr></thead><tbody><tr><td>声明位置</td><td>类里，方法外</td><td>方法内，方法形参上，代码块内</td></tr><tr><td>权限修饰符</td><td>public private protected 缺省</td><td>没有显示修饰符</td></tr><tr><td>初始化值</td><td>不显式赋值会有默认值</td><td>必须有初始化值</td></tr><tr><td>内存位置</td><td>堆空间</td><td>栈空间</td></tr></tbody></table><p>总结：关于变量的分类：</p><ul><li>按照数据类型的不同：基本数据类型（8种）  &amp; 引用数据类型</li><li>按照声明的位置的不同：成员变量 &amp; 局部变量</li></ul><h2 id="方法-成员方法，Method"><a href="#方法-成员方法，Method" class="headerlink" title="方法:(成员方法，Method)"></a>方法:(成员方法，Method)</h2><p>提供某种功能的实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">格式：权限修饰符 返回值类型（<span class="keyword">void</span>:无返回值/具体的返回值） 方法名 (形参) &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//方法体</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String n)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>关于返回值类型：<code>void</code>：表明此方法不需要返回值</li><li>有返回值的方法：在方法的最后一定有return + 返回值类型对应的变量</li><li>方法内可以调用本类的其他方法或属性，但是不能在方法内再定义方法！</li></ul><h2 id="构造器-构造方法，constructor"><a href="#构造器-构造方法，constructor" class="headerlink" title="构造器: (构造方法，constructor)"></a>构造器: (构造方法，constructor)</h2><ol><li>设计类时，若不显式声明类的构造器的话，<br>   程序会默认提供一个空参的构造器.</li><li>一旦显式的定义类的构造器，那么默认的构造器就不再提供。</li><li>如何声明类的构造器。<br>   格式：权限修饰符  类名(形参){ }</li><li>类的多个构造器之间构成重载。</li></ol><p>构造器的特征：</p><ul><li>它具有与类相同的名称</li><li>它不声明返回值类型。（与声明为void不同）</li><li>不能被<code>static、final、synchronized、abstract、native</code>修饰，不能有<code>return</code>语句返回值</li></ul><p>构造器的作用：</p><ul><li>创建对象 </li><li>给创建的对象的属性赋值</li></ul><p><strong>类对象的属性赋值的先后顺序：</strong></p><ol><li>属性的默认初始化 </li><li>属性的显式初始化</li><li>通过构造器给属性初始化</li><li>通过”对象.方法”的方式给属性赋值</li></ol><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><p>代码块：是类的第4个成员，用来初始化类的属性，如果有修饰符的话，只能用static来修饰。</p><h3 id="用static修饰的-静态代码块："><a href="#用static修饰的-静态代码块：" class="headerlink" title="用static修饰的-静态代码块："></a>用static修饰的-静态代码块：</h3><ol><li>里面可以有输出语句</li><li>随着类的加载而加载，而且只被加载一次</li><li>一个类中可以有多个静态的代码块 多个静态代码块之间按照顺序结构执行</li><li>静态代码块的执行要早于非静态代码块的执行。</li><li>静态的代码块中只能执行静态的结构(类属性，类方法)</li></ol><h3 id="没用static修饰-非静态代码块："><a href="#没用static修饰-非静态代码块：" class="headerlink" title="没用static修饰-非静态代码块："></a>没用static修饰-非静态代码块：</h3><ol><li>可以对类的属性(静态的 &amp; 非静态的)进行初始化操作，同时也可以调用本类声明的方法(静态的 &amp; 非静态的)</li><li>里面可以有输出语句</li><li>一个类中可以有多个非静态的代码块，多个代码块之间按照顺序结构执行</li><li>每创建一个类的对象，非静态代码块就加载一次。</li><li>非静态代码块的执行要早于构造器</li></ol><h3 id="关于属性赋值的操作的顺序-（越来越晚）"><a href="#关于属性赋值的操作的顺序-（越来越晚）" class="headerlink" title="关于属性赋值的操作的顺序 （越来越晚）"></a>关于属性赋值的操作的顺序 （越来越晚）</h3><p>①默认的初始化<br>②显式的初始化或代码块初始化(此处两个结构按照顺序执行)<br>③构造器初始化；<br>——————以上是对象的属性初始化的过————————<br>④通过方法对对象的相应属性进行修改</p><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;面向对象-vs-面向过程（了解）&quot;&gt;&lt;a href=&quot;#面向对象-vs-面向过程（了解）&quot; class=&quot;headerlink&quot; title=&quot;面向对象  vs 面向过程（了解）&quot;&gt;&lt;/a&gt;面向对象  vs 面向过程（了解）&lt;/h1&gt;
    
    </summary>
    
      <category term="Java 基础" scheme="http://cuijing.me/categories/Java-%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="http://cuijing.me/tags/Java/"/>
    
      <category term="面向对象" scheme="http://cuijing.me/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>Java 方法</title>
    <link href="http://cuijing.me/2015/02/08/Java/2-Object-Oriented/2-%E6%96%B9%E6%B3%95/"/>
    <id>http://cuijing.me/2015/02/08/Java/2-Object-Oriented/2-方法/</id>
    <published>2015-02-08T00:30:00.000Z</published>
    <updated>2016-05-05T11:52:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="方法的重载（overload）"><a href="#方法的重载（overload）" class="headerlink" title="方法的重载（overload）"></a>方法的重载（overload）</h1><a id="more"></a><h2 id="要求："><a href="#要求：" class="headerlink" title="要求："></a>要求：</h2><ol><li>同一个类</li><li>方法名必须相同 </li><li>必须具有不同的参数列表； </li><li>可以有不同的返回类型，只要参数列表不同就可以了； </li><li>可以有不同的访问修饰符； </li><li>可以抛出不同的异常；</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestOverload</span> </span>&#123;</span><br><span class="line">     </span><br><span class="line"> &#125;</span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">OverLoad</span></span>&#123;</span><br><span class="line">      <span class="comment">//定义两个int型变量的和</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSum</span><span class="params">( <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">             <span class="keyword">return</span> i + j;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//定义三个int型变量的和</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSum</span><span class="params">( <span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">             <span class="keyword">return</span> i + j + k;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//不能与其它几个方法构成重载</span></span><br><span class="line"> <span class="comment">//   public int getSum1( int i, int j,int k)&#123;</span></span><br><span class="line"><span class="comment">//             return i + j + k;</span></span><br><span class="line"> <span class="comment">//   &#125;</span></span><br><span class="line"> <span class="comment">//   public void getSum( int i, int j,int k)&#123;</span></span><br><span class="line"><span class="comment">//             System.out.println(i + j + k);</span></span><br><span class="line"> <span class="comment">//   &#125;</span></span><br><span class="line">      <span class="comment">//定义两个double型数据的和</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getSum</span><span class="params">( <span class="keyword">double</span> d1, <span class="keyword">double</span> d2)</span></span>&#123;</span><br><span class="line">             <span class="keyword">return</span> d1 + d2;</span><br><span class="line">      &#125;</span><br><span class="line">     </span><br><span class="line">      <span class="comment">//定义三个double型数组的和</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getSum</span><span class="params">( <span class="keyword">double</span> d1, <span class="keyword">double</span> d2, <span class="keyword">double</span> d3)</span></span>&#123;</span><br><span class="line">            System.out.println(d1 + d2 + d3);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//以下的两个方法构成重载。</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">( <span class="keyword">int</span> i,String str)</span></span>&#123;</span><br><span class="line">           </span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">(String str1, <span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">           </span><br><span class="line">      &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h1 id="方法的重写（override-overwrite）"><a href="#方法的重写（override-overwrite）" class="headerlink" title="方法的重写（override overwrite）"></a>方法的重写（override overwrite）</h1><h2 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h2><p>在子类中可以根据需要对从父类中继承来的方法进行改造，也称方法的重置、覆盖。在程序执行时，子类的方法将覆盖父类的方法。</p><h2 id="要求：-1"><a href="#要求：-1" class="headerlink" title="要求："></a>要求：</h2><ol><li>重写方法必须和被重写方法具有相同的方法名称、参数列表和返回值类型。</li><li>重写方法不能使用比被重写方法更严格的访问权限</li><li>重写和被重写的方法须同时为<code>static</code>的，或同时为<code>非static</code>的</li><li>子类方法抛出的异常不能大于父类被重写方法的异常</li></ol><h2 id="方法的重载与重写的区别？"><a href="#方法的重载与重写的区别？" class="headerlink" title="方法的重载与重写的区别？"></a>方法的重载与重写的区别？</h2><p>重载：“两同一不同”：</p><ul><li>同一个类</li><li>同一个方法名</li><li>不同的参数列表 </li></ul><p>注：方法的重载与返回值无关    构造器是可以重载的</p><p>重写:（前提：在继承的基础之上，子类在获取了父类的结构以后，可以对父类中的方法进行“重构”）</p><ul><li>方法的返回值，方法名，形参列表形同；</li><li>权限修饰符不小于父类的同名方法；</li><li>子类方法的异常类型不大于父类的；</li><li>两个方法要同为<code>static</code>或同为<code>非static</code>。</li></ul><h1 id="可变个数形参的方法："><a href="#可变个数形参的方法：" class="headerlink" title="可变个数形参的方法："></a>可变个数形参的方法：</h1><ul><li>格式：对于方法的形参： 数据类型 …   形参名</li><li>可变个数的形参的方法与同名的方法之间构成重载</li><li>可变个数的形参在调用时，个数从0开始，到无穷多个都可以。</li><li>使用可变多个形参的方法与方法的形参使用数组是一致的。</li><li>若方法中存在可变个数的形参，那么一定要声明在方法形参的最后。</li><li>在一个方法中，最多声明一个可变个数的形参。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestArgs</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">           TestArgs t = <span class="keyword">new</span> TestArgs();</span><br><span class="line">           t.sayHello();</span><br><span class="line">            <span class="comment">//t.sayHello(new String[]&#123;"hello China","hello BeiJing"&#125;);</span></span><br><span class="line">           t.sayHello( <span class="string">"hello China"</span>,<span class="string">"hello BeiJing"</span> );</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line"><span class="comment">//如下四个方法构成重载</span></span><br><span class="line"><span class="comment">//在类中一旦定义了重载的可变个数的形参的方法以后，如下的两个方法可以省略</span></span><br><span class="line"><span class="comment">//   public void sayHello()&#123;</span></span><br><span class="line"><span class="comment">//         System.out.println("hello world!");</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">//   public void sayHello(String str1)&#123;</span></span><br><span class="line"><span class="comment">//         System.out.println("hello " + str1);</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line">     <span class="comment">//可变个数的形参的方法</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">(String ... args)</span></span>&#123;</span><br><span class="line">            <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span>;i &lt; args.length;i++)&#123;</span><br><span class="line">                System.out.println(args[i] + <span class="string">"$"</span>);</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="comment">//System.out.println("=====");</span></span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">(<span class="keyword">int</span> i,String ... args)</span></span>&#123;</span><br><span class="line">     <span class="comment">//public void sayHello(String ... args, int i)&#123;</span></span><br><span class="line">           System.out.println(i);</span><br><span class="line">           </span><br><span class="line">            <span class="keyword">for</span>( <span class="keyword">int</span> j = <span class="number">0</span>;j &lt; args.length;j++)&#123;</span><br><span class="line">                System.out.println(args[j] + <span class="string">"$"</span>);</span><br><span class="line">           &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello1</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">            <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span>;i &lt; args.length;i++)&#123;</span><br><span class="line">                System.out.println(args[i]);</span><br><span class="line">           &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     <span class="comment">//可变个数形参的使用的例子</span></span><br><span class="line"><span class="comment">//   public int getSum(int i, int j)&#123;</span></span><br><span class="line"><span class="comment">//         return i + j;</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">//   public int getSum(int i, int j,int k)&#123;</span></span><br><span class="line"><span class="comment">//         return i + j + k;</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span> ... args)</span></span>&#123;</span><br><span class="line">            <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span>;i &lt; args.length;i++)&#123;</span><br><span class="line">                sum += args[i];</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">return</span> sum;</span><br><span class="line">     &#125;          </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="方法的参数传递（重点、难点）"><a href="#方法的参数传递（重点、难点）" class="headerlink" title="方法的参数传递（重点、难点）"></a>方法的参数传递（重点、难点）</h1><p>1、形参与实参</p><ul><li>形参：方法声明时，方法小括号内的参数</li><li>实参：调用方法时，实际传入的参数的值</li></ul><p>2、Java中的参数传递机制：值传递机制</p><ul><li>形参是基本数据类型的：将实参的值传递给形参的基本数据类型的变量</li><li>形参是引用数据类型的：将实参的引用类型变量的值（对应的堆空间的对象实体的首地址值）传递给形参的引用类型变量。</li></ul><p><strong>从程序运行的角度来看，参数传递，只有传值，从不传递其它的东西。只不过值的内容有可能是数据，也有可能是一个内存地址</strong></p><p>Java中的数据类型有两大类，即基本类型(primitive types), 共有8种，包括<code>int, short, long, byte, float, double, boolean, char，</code> 存在于栈（Stack）中。另一种暂称为对象类型，包括Integer, String, Double等相应基本数据类型的包装类，以及其他所有 Java 自带和用户自定义的类,这些类数据全部存在于堆中（Heap）。</p><table><thead><tr><th></th><th>Heap( 堆)</th><th>Stack( 栈)</th></tr></thead><tbody><tr><td>JVM 中的功能</td><td>存储数据</td><td>内存指令区</td></tr><tr><td>存储</td><td>对象实例</td><td>基本数据类型 , 指令代码, 常量 , 对象引用地址</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    System.out.println( <span class="string">"Before test: i = "</span> + i);</span><br><span class="line">    changeValue(i);</span><br><span class="line">    System.out.println( <span class="string">"After test: i = "</span> + i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">changeValue</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    i = <span class="number">2</span>;</span><br><span class="line">    System.out.println( <span class="string">"during test: i = "</span> + i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Before test: i = <span class="number">1</span></span><br><span class="line">during test: i = <span class="number">2</span></span><br><span class="line">After test: i = <span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>不难看出，虽然在 <code>changeValue(int i)</code> 方法中改变了传进来的参数的值，但对这个参数源变量本身并没有影响。其内部原理是，<code>main</code> 方法里的变量和 <code>changeValue()</code> 方法的参数是两个不同的变量，以参数形式传递简单类型的变量时，实际上是将参数的值作了一个拷贝传进方法的，那么在方法里再怎么改变其值，其结果都是只改变了拷贝的值，而不是源值。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    StringBuffer string = <span class="keyword">new</span> StringBuffer(<span class="string">"Hello"</span>);</span><br><span class="line">    test6(string);</span><br><span class="line">    System.out.println(string);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">(StringBuffer str)</span> </span>&#123;</span><br><span class="line">    str.append(<span class="string">", World!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello, World!</span><br></pre></td></tr></table></figure><p>在这个例子里，似乎变量<code>string</code>被“改变”了。但其实改变的并不是<code>string</code>变量本身，也就是说<code>string</code>保存的内存地址并没有被改变，改变的是它所指向的对象实例。内部原理是这样的，在<code>main</code>方法里定义了一个对象引用<code>string</code>，并且把它和一个对象实例关联<code>new StringBuffer</code>。方法调用的时候，<code>string</code>所保存的对象实例的内存地址传递给了<code>test</code>方法的对象引用参数<code>str</code>，这时就有两个对象引用变量指向同一个对象实例。这两个对象引用都可以对该对象实例进行操作，操作结果都有效，因此在<code>test</code>方法执行完之后，对象实例的内容已经被改变了，这个时候再通过<code>main</code>方法里的<code>string</code>引用去查看对象实例的内容，看到的就是改变之后的内容。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test7</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String string = <span class="string">"Hello"</span>;</span><br><span class="line">    test7(string);</span><br><span class="line">    System. out.println(string);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test7</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">    str = <span class="string">"World"</span>;  </span><br><span class="line">    <span class="comment">//将str 原先的地址改为 world 字符的地址,对原地址没有任何影响</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello</span><br></pre></td></tr></table></figure><p>这个结果和上面结果矛盾吗？一点也不矛盾。在这个例子中，参数传递过程和上个例子完全一样，但是在<code>test()</code>方法里并不是对原来指向的对象实例进行操作，而是把<code>str</code>指向了另外一个对象实例，当然对原来的对象实例毫无影响。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;方法的重载（overload）&quot;&gt;&lt;a href=&quot;#方法的重载（overload）&quot; class=&quot;headerlink&quot; title=&quot;方法的重载（overload）&quot;&gt;&lt;/a&gt;方法的重载（overload）&lt;/h1&gt;
    
    </summary>
    
      <category term="Java 基础" scheme="http://cuijing.me/categories/Java-%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="http://cuijing.me/tags/Java/"/>
    
      <category term="面向对象" scheme="http://cuijing.me/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
      <category term="方法" scheme="http://cuijing.me/tags/%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Java 基本数据类型包装类</title>
    <link href="http://cuijing.me/2015/02/08/Java/2-Object-Oriented/5-%E5%8C%85%E8%A3%85%E7%B1%BB/"/>
    <id>http://cuijing.me/2015/02/08/Java/2-Object-Oriented/5-包装类/</id>
    <published>2015-02-08T00:30:00.000Z</published>
    <updated>2016-05-05T12:12:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>基本数据类型由于不是类，不能够使用java类库里提供的大量的方法。所有在设计上，我们让每一个基本数据类型都对应一个类，同时数据存储的范围还不变。此时相当于基本数据类型就具有了类的特点。</p><p>这些类即为包装类（wrapper 或封装类）。<a id="more"></a></p><table><thead><tr><th>基本数据类型</th><th>相应包装类型</th></tr></thead><tbody><tr><td>boolean</td><td>Boolean</td></tr><tr><td>byte</td><td>Byte</td></tr><tr><td>short</td><td>Short</td></tr><tr><td>int</td><td>Integer</td></tr><tr><td>long</td><td>Long</td></tr><tr><td>char</td><td>Char</td></tr><tr><td>float</td><td>Float</td></tr><tr><td>double</td><td>Double</td></tr></tbody></table><h1 id="基本类型、包装类、String之间的转换"><a href="#基本类型、包装类、String之间的转换" class="headerlink" title="基本类型、包装类、String之间的转换"></a>基本类型、包装类、String之间的转换</h1><h2 id="1、基本数据类型与对应的包装类有自动装箱、自动拆箱"><a href="#1、基本数据类型与对应的包装类有自动装箱、自动拆箱" class="headerlink" title="1、基本数据类型与对应的包装类有自动装箱、自动拆箱"></a>1、基本数据类型与对应的包装类有自动装箱、自动拆箱</h2><p>如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line">Integer i1 = i;     <span class="comment">//自动装箱</span></span><br><span class="line"><span class="keyword">int</span> j = i1;         <span class="comment">//自动拆箱</span></span><br></pre></td></tr></table></figure><h2 id="2、基本数据类型、包装类-lt-gt-String类："><a href="#2、基本数据类型、包装类-lt-gt-String类：" class="headerlink" title="2、基本数据类型、包装类 &lt;==&gt; String类："></a>2、基本数据类型、包装类 &lt;==&gt; String类：</h2><p>基本类型 –&gt; <code>String</code> 调用 <code>String</code>类的重载的 <code>valueOf(Xxx xx)</code>;</p><p><code>String</code> –&gt; 基本类型、包装类：调用相应的包装的<code>parseXxx(String str)</code></p><p>注意:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">"123"</span>;</span><br><span class="line"><span class="keyword">int</span> i = (<span class="keyword">int</span>)str;是错误的转法。</span><br></pre></td></tr></table></figure><p><img src="http://oov0wb0gl.bkt.clouddn.com/2017-06-06-14944244602555.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;基本数据类型由于不是类，不能够使用java类库里提供的大量的方法。所有在设计上，我们让每一个基本数据类型都对应一个类，同时数据存储的范围还不变。此时相当于基本数据类型就具有了类的特点。&lt;/p&gt;
&lt;p&gt;这些类即为包装类（wrapper 或封装类）。
    
    </summary>
    
      <category term="Java 基础" scheme="http://cuijing.me/categories/Java-%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="http://cuijing.me/tags/Java/"/>
    
      <category term="面向对象" scheme="http://cuijing.me/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
      <category term="包装类" scheme="http://cuijing.me/tags/%E5%8C%85%E8%A3%85%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>Java 关键字与标识符</title>
    <link href="http://cuijing.me/2015/02/06/Java/1-Java-Base/1-Java-keyword-and-identifier/"/>
    <id>http://cuijing.me/2015/02/06/Java/1-Java-Base/1-Java-keyword-and-identifier/</id>
    <published>2015-02-06T00:30:00.000Z</published>
    <updated>2016-04-13T11:23:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h1><p><strong>关键字</strong>：被Java语言赋予了特殊含义，用做专门用途的字符串（单词）<br><a id="more"></a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">关键字列表</span><br><span class="line"><span class="keyword">abstract</span>    <span class="keyword">boolean</span>     <span class="keyword">break</span>       <span class="keyword">byte</span>        <span class="keyword">case</span> </span><br><span class="line"><span class="keyword">catch</span>       <span class="keyword">char</span>        <span class="class"><span class="keyword">class</span>       <span class="title">continue</span>    <span class="title">default</span> </span></span><br><span class="line"><span class="class"><span class="title">do</span>          <span class="title">double</span>      <span class="title">else</span>        <span class="keyword">extends</span>     <span class="title">enum</span>    </span></span><br><span class="line"><span class="class"><span class="title">false</span>       <span class="title">final</span>       <span class="title">finally</span>     <span class="title">float</span>       <span class="title">for</span></span></span><br><span class="line"><span class="class"><span class="title">if</span>          <span class="keyword">implements</span>  <span class="title">import</span>      <span class="title">instanceof</span>  <span class="title">int</span></span></span><br><span class="line"><span class="class"><span class="title">interface</span>   <span class="title">long</span>        <span class="title">native</span>      <span class="title">new</span>         <span class="title">null</span></span></span><br><span class="line"><span class="class"><span class="title">package</span>     <span class="title">private</span>     <span class="title">protected</span>   <span class="title">public</span>      <span class="title">return</span></span></span><br><span class="line"><span class="class"><span class="title">short</span>       <span class="title">static</span>      <span class="title">super</span>       <span class="title">switch</span>      <span class="title">synchronized</span></span></span><br><span class="line"><span class="class"><span class="title">this</span>        <span class="title">throw</span>       <span class="title">throws</span>      <span class="title">transient</span>   <span class="title">true</span></span></span><br><span class="line"><span class="class"><span class="title">try</span>         <span class="title">void</span>        <span class="title">volatile</span>    <span class="title">while</span></span></span><br></pre></td></tr></table></figure></p><p>Java 中 <code>true false</code>不是关键字，而是 boolean 类型的字面量。但也不能当作变量用。<br>所有的关键字都是小写，<code>friendly sizeof</code> 不是 java 的关键字 。</p><h1 id="保留字"><a href="#保留字" class="headerlink" title="保留字"></a>保留字</h1><p><strong>保留字</strong>：指在高级语言中已经定义过的字，使用者不能再将这些字作为变量名或过程名使用。<br>保留字：<code>const goto</code>  这两个已经削去意义，但同样不能用作变量名。</p><h1 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h1><p><strong>标识符</strong>：用来给一个类、变量或方法命名的符号（凡是自己可以起名字的地方都叫标识符）</p><p><strong>标识符的命名规则</strong>：（一定要遵守，不遵守就会报编译的错误）</p><ul><li>由26个英文字母大小写，0-9 , 或者下划线”_“和”$”开头，数字不可以开头。</li><li>Java中严格区分大小写，</li><li>不可以使用关键字和保留字，但能包含关键字和保留字。</li><li>Java中长度无限制。</li><li>标识符不能包含空格。</li></ul><p><strong>Java中的名称命名规范</strong>：（不遵守，也不会出现编译的错误）</p><ul><li>包名：                    多单词组成时所有字母都小写：<code>xxxyyyzzz</code></li><li>类名、接口名：       多单词组成时，所有单词的首字母大写：<code>XxxYyyZzz</code></li><li>变量名、方法名：   多单词组成时，第一个单词首字母小写，第二个单词开始每个单词首字母大写：<code>xxxYyyZzz</code></li><li>常量名：                 所有字母都大写。多单词时下划线连接：<code>XXX_YYY_ZZZ</code></li><li>建议使用JavaBeans规则命名，并根据方法的目的，以 <code>set</code>、<code>get</code>、<code>is</code>、<code>add</code> 或 <code>remove</code> 开头。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;关键字&quot;&gt;&lt;a href=&quot;#关键字&quot; class=&quot;headerlink&quot; title=&quot;关键字&quot;&gt;&lt;/a&gt;关键字&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;关键字&lt;/strong&gt;：被Java语言赋予了特殊含义，用做专门用途的字符串（单词）&lt;br&gt;
    
    </summary>
    
      <category term="Java 基础" scheme="http://cuijing.me/categories/Java-%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="http://cuijing.me/tags/Java/"/>
    
      <category term="基础" scheme="http://cuijing.me/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="关键字" scheme="http://cuijing.me/tags/%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    
      <category term="标识符" scheme="http://cuijing.me/tags/%E6%A0%87%E8%AF%86%E7%AC%A6/"/>
    
  </entry>
  
  <entry>
    <title>Java 变量</title>
    <link href="http://cuijing.me/2015/02/06/Java/1-Java-Base/2-Java-variable/"/>
    <id>http://cuijing.me/2015/02/06/Java/1-Java-Base/2-Java-variable/</id>
    <published>2015-02-06T00:30:00.000Z</published>
    <updated>2016-04-13T12:43:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="变量的概述"><a href="#变量的概述" class="headerlink" title="变量的概述"></a>变量的概述</h1><p>通常，根据内存地址可以找到这块内存空间的位置，也就找到了存储的数据。但是内存地址非常不好记，因此，我们给这块空间起一个别名，通过使用别名找到对应空间存储的数据。变量是一个数据存储空间的表示。通过变量名可以简单快速地找到它存储的数据。变量是存储数据的一个基本单元，不同的变量相互独立。<br><a id="more"></a><br>按照用法 可分为 <strong>基本数据类型</strong> 和 <strong>引用数据类型</strong>。</p><p><em>基本数据类型不存在“引用”的概念，基本数据类型都是直接存储在内存中的内存栈上的，数据本身的值就是存储在栈空间里面，而Java语言里面八种数据类型是这种存储模型；</em></p><p><em>引用类型继承于Object类（也是引用类型）都是按照Java里面存储对象的内存模型来进行数据存储的，使用Java内存堆和内存栈来进行这种类型的数据存储，简单地讲，“引用”是存储在有序的内存栈上的，而对象本身的值存储在内存堆上的；</em></p><p>区别:基本数据类型和引用类型的区别主要在于基本数据类型是分配在栈上的，而引用类型是分配在堆上的（需要理解java中的栈、堆概念）。</p><p>-</p><h1 id="基本数据类型（8种）"><a href="#基本数据类型（8种）" class="headerlink" title="基本数据类型（8种）"></a>基本数据类型（8种）</h1><table><thead><tr><th>类型</th><th>占用空间</th><th>表值范围</th><th>说明</th><th>默认值</th></tr></thead><tbody><tr><td>bolean</td><td>1字节=8bit</td><td>false；true</td><td>不能取null</td><td>false</td></tr><tr><td>char</td><td>2字节</td><td>0 ~ 2^16 - 1</td><td>2^16 = 65536</td><td>为空</td></tr><tr><td>byte</td><td>1字节</td><td>- 2^7~ 2^7 - 1</td><td>两byte相加，变 int</td><td>0</td></tr><tr><td>short</td><td>2字节</td><td>- 2^15 ~ 2^15 - 1</td><td>2^15 = 32768</td><td>0</td></tr><tr><td>int</td><td>4字节</td><td>- 2^31 ~ 2^31 - 1</td><td>约20亿,10位有效数字</td><td>0</td></tr><tr><td>long</td><td>8字节</td><td>- 2^63 ~ 2^63 - 1</td><td>约900亿亿,20位有效数字</td><td>0</td></tr><tr><td>float</td><td>4字节</td><td>9位有效数字</td><td>小数算，正负号不算</td><td>0.0</td></tr><tr><td>double</td><td>8字节</td><td>18位有效数字</td><td>同 float</td><td>0.0</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">注：</span><br><span class="line"><span class="number">1</span>、java中所有的数据类所占据的字节数量与平台无关，java也没有任何无符号类型</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、<span class="keyword">float</span> 和 <span class="keyword">double</span> 的小数部分不可能精确，只能近似。比较小数时，用 </span><br><span class="line">   <span class="keyword">double</span> i=<span class="number">0.01</span>; </span><br><span class="line">   <span class="keyword">if</span> ( i - <span class="number">0.01</span> &lt; <span class="number">1E-6</span>) ...</span><br><span class="line">   <span class="comment">// 不能直接 if (i==0.01)...</span></span><br><span class="line">   </span><br><span class="line"><span class="number">3</span>、<span class="keyword">float</span> 与 <span class="keyword">double</span> 的区别在于<span class="keyword">float</span>类型有效小数点只有<span class="number">6</span>~<span class="number">7</span>位 ， </span><br><span class="line">   <span class="keyword">double</span> 有<span class="number">15</span>~<span class="number">16</span>位。</span><br></pre></td></tr></table></figure><p>补充：按照在类中存在的位置的不同：成员变量 vs 局部变量</p><p>-</p><h1 id="引用数据类型（类、接口、数组）"><a href="#引用数据类型（类、接口、数组）" class="headerlink" title="引用数据类型（类、接口、数组）"></a>引用数据类型（类、接口、数组）</h1><p>Java 中除去基本数据类型以外的数据类型都是引用数据类型，包括我们自己创建的类。</p><h2 id="Java中什么叫做引用数据类型？"><a href="#Java中什么叫做引用数据类型？" class="headerlink" title="Java中什么叫做引用数据类型？"></a>Java中什么叫做引用数据类型？</h2><p>引用：<strong>就是按内存地址查询</strong><br>比如：<code>Object o = new Object();</code> 这个其实是在栈内存里分配一块内存空间为o，在堆内存里 new 了一个Object 类型的空间，在运行时是栈内存里的 o 指向堆内存里的那一块存储空间。</p><p>引用类型变量是以间接方式去获取数据。引用类型变量都属于对象类型，如：数组、类、字符串等都属于引用类型变量。所以，引用类型变量里面存放的是数据的地址。说白了基本数据类型变量就像是直接放在柜子里的东西，而引用数据类型变量就是这个柜子对应编码的钥匙。钥匙号和柜子对应。</p><h1 id="进制（了解）"><a href="#进制（了解）" class="headerlink" title="进制（了解）"></a>进制（了解）</h1><table><thead><tr><th>进制</th><th>缩写</th><th>英文</th><th>说明</th></tr></thead><tbody><tr><td>十进制</td><td>D</td><td>Decimal</td><td>0-9 ；满10进1</td></tr><tr><td>二进制</td><td>B</td><td>binaries</td><td>0,1 ；满2进1，以0b或0B开头</td></tr><tr><td>八进制</td><td>O</td><td>octal</td><td>0-7 ，满8进1， 以数字0开头</td></tr><tr><td>十六进制</td><td>H</td><td>Hexagon</td><td>0-9及A-F(a-f)，满16进1,以0x或0X开头。</td></tr></tbody></table><p>二进制：计算机底层都是用二进制来存储、运算。</p><blockquote><p>二进制 与十进制之间的转换。<br>二进制在底层存储：正数、负数都是以补码的形式存储的。<br>四种进制间的转换 ？？？</p></blockquote><h1 id="变量的数据类型转换"><a href="#变量的数据类型转换" class="headerlink" title="变量的数据类型转换"></a>变量的数据类型转换</h1><h2 id="自动类型转换："><a href="#自动类型转换：" class="headerlink" title="自动类型转换："></a>自动类型转换：</h2><p>容量小的类型自动转换为容量大的类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">short</span> s = <span class="number">12</span>;</span><br><span class="line"><span class="keyword">int</span> i = s + <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p><strong>注意：byte  short char之间做运算，结果为int型！</strong></p><h2 id="强制类型转换："><a href="#强制类型转换：" class="headerlink" title="强制类型转换："></a>强制类型转换：</h2><p>是自动类型转换的逆过程，使用 “( )” 实现强转，会丢失精度或者出现异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">32767</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">32768</span>;</span><br><span class="line"><span class="keyword">short</span> s1 = (<span class="keyword">short</span>) a;  </span><br><span class="line"><span class="keyword">short</span> s2 = (<span class="keyword">short</span>) b;  </span><br><span class="line">System.out.println(s1); <span class="comment">// 32767</span></span><br><span class="line">System.out.println(s2); <span class="comment">// -32768</span></span><br></pre></td></tr></table></figure><h2 id="实例测试类"><a href="#实例测试类" class="headerlink" title="实例测试类"></a>实例测试类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestVeriable</span> </span>&#123;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">             <span class="comment">// 1.变量得先定义后使用</span></span><br><span class="line">            <span class="keyword">int</span> myInt1 = <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">double</span> d = <span class="number">12.3</span>;</span><br><span class="line">            System.out.println(myInt1);</span><br><span class="line">            System.out.println(myInt1 + d);</span><br><span class="line">            <span class="comment">// i1 超出了其作用的范围，不可使用。</span></span><br><span class="line">            <span class="comment">// System.out.println(i1);</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2.整型：byte(-128~+127)  short  int（默认类型） long</span></span><br><span class="line">            <span class="keyword">byte</span> b1 = <span class="number">12</span>;           <span class="comment">//byte b2 = 128;</span></span><br><span class="line">            <span class="keyword">short</span> s1 = <span class="number">128</span>;</span><br><span class="line">            <span class="keyword">int</span> i1 = <span class="number">12</span>;</span><br><span class="line">            <span class="comment">// 定义long型变量，值的末尾加“L”或“l”</span></span><br><span class="line">            <span class="keyword">long</span> l1 = <span class="number">2134123351345325L</span>;</span><br><span class="line">            System.out.println(l1);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 3.浮点型（带小数点的数值）：double 是默认类型  float  </span></span><br><span class="line">            <span class="keyword">double</span> d1 = <span class="number">12.3</span>;</span><br><span class="line">            <span class="comment">//声明float类型的浮点型数据，末尾要加“F”或者“f”</span></span><br><span class="line">            <span class="keyword">float</span> f1 = <span class="number">12.3F</span>;</span><br><span class="line">            System.out.println(f1);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 4.字符型（两个字节）：</span></span><br><span class="line">            <span class="comment">// char 只能表示一个字符(英文、中文、标点符号、日文、。。。)</span></span><br><span class="line">            <span class="keyword">char</span> c1 = <span class="string">'a'</span>;          <span class="comment">//char c2 = ' ab'; </span></span><br><span class="line">            String str = <span class="string">"ab"</span>;</span><br><span class="line">            <span class="keyword">char</span> c3 = <span class="string">'中'</span>;</span><br><span class="line">            String str1 = <span class="string">"中国"</span>;</span><br><span class="line">            <span class="comment">// 可以表示转义字符</span></span><br><span class="line">            <span class="keyword">char</span> c4 = <span class="string">'\t'</span>;</span><br><span class="line">            <span class="keyword">char</span> c5 = <span class="string">'\n'</span> ;</span><br><span class="line">            System.out.println(<span class="string">"abc"</span> + c5 + <span class="string">"def"</span>);</span><br><span class="line">            <span class="comment">// 了解</span></span><br><span class="line">            <span class="keyword">char</span> c6 = <span class="string">'\u1234'</span> ;        <span class="comment">//unicode值 == ？</span></span><br><span class="line">            System.out.println(c6);    <span class="comment">//char 类型是可以运算的，因为它都对应有Unicode值</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 5.布尔类型：boolean  只能够取值为true 或 false 。不能取值null</span></span><br><span class="line">            <span class="keyword">boolean</span> bool1 = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(bool1)</span><br><span class="line">                System.out.println(<span class="string">"哈哈！周末不上班 );</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="变量间的运算"><a href="#变量间的运算" class="headerlink" title="变量间的运算"></a>变量间的运算</h2><p>两个数相运算时，默认是 int 类型<br>如果有更高级的，就按高级的那个类型<br>   if(其中一个是double型)double型；<br>   else if(其中一个是float型)float型；<br>   else if(其中一个是long型)long型；<br>   else int 型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">变量之间的运算：(不考虑boolean ：char byte short int long float double)</span></span><br><span class="line"><span class="comment">1.自动类型转换</span></span><br><span class="line"><span class="comment">2.强制类型转换</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestVeriable</span></span>&#123;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">            <span class="comment">// 1.自动类型转换:当容量小的数据类型与容量大的数据类型做运算时，</span></span><br><span class="line">            <span class="comment">// 容量小的会自动转换为容量大的数据类型:</span></span><br><span class="line">            <span class="comment">// char,byte,short ===&gt; int ===&gt;long ===&gt;float===double</span></span><br><span class="line">            <span class="keyword">int</span> i1 = <span class="number">12</span>;</span><br><span class="line">            <span class="keyword">short</span> s1 = <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">int</span> i2 = i1 + s1;</span><br><span class="line">            <span class="keyword">float</span> f1 = <span class="number">12.3F</span>;</span><br><span class="line">            <span class="keyword">float</span> f2 = f1 + i2;</span><br><span class="line">            <span class="comment">//float d1 = f2 + 12.3;</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">long</span> l = <span class="number">12L</span>;</span><br><span class="line">            <span class="keyword">float</span> f3 = l;</span><br><span class="line">            System.out.println(i2);</span><br><span class="line">            System.out.println(f2);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">char</span> c1 = <span class="string">'a'</span> ;<span class="comment">//97</span></span><br><span class="line">            c1 = <span class="string">'A'</span>;<span class="comment">//65</span></span><br><span class="line">            <span class="keyword">int</span> i3 = c1 + <span class="number">1</span>;</span><br><span class="line">            System.out.println(i3);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//需要注意的：当char\byte\short之间做运算时，默认的结果为 int类型</span></span><br><span class="line">            <span class="keyword">short</span> ss1 = <span class="number">12</span>;</span><br><span class="line">            <span class="keyword">byte</span> bb1 = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">char</span> cc1 = <span class="string">'a'</span> ;</span><br><span class="line">            <span class="comment">//short ss2 = ss1 + bb1;</span></span><br><span class="line">            <span class="keyword">int</span> ii1 = ss1 + bb1;</span><br><span class="line">            <span class="comment">//char cc2 = cc1 + bb1;</span></span><br><span class="line">            <span class="keyword">int</span> ii2 = cc1 + bb1;</span><br><span class="line">            <span class="keyword">short</span> ss2 = <span class="number">11</span>;</span><br><span class="line">            <span class="comment">//short ss3 = ss1 + ss2;</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">//2.强制类型转换：容量大转换为容量小的.要使用强制类型转换符：()</span></span><br><span class="line">            <span class="comment">//强制类型转换的问题：导致精度的损失</span></span><br><span class="line">            <span class="keyword">long</span> l1 = <span class="number">12345L</span>;</span><br><span class="line">            <span class="keyword">int</span> m1 = (<span class="keyword">int</span>)l1;</span><br><span class="line">            System.out.println(m1);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">byte</span> by1 = (<span class="keyword">byte</span>)m1;</span><br><span class="line">            System.out.println(by1);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//平时常用的字符串,也是一种数据类型：String</span></span><br><span class="line">            String nation = <span class="string">"我是一个中国人"</span> ;</span><br><span class="line">            System.out.println(nation);</span><br><span class="line">            <span class="comment">//字符串与基本数据类型之间的运算:只能是连接运算：+。得到的结果仍为一个字符串</span></span><br><span class="line">            String str = <span class="string">"abc"</span>;</span><br><span class="line">            String str1 = str + m1; <span class="comment">//abc12345</span></span><br><span class="line">            System.out.println(str1);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//题目：</span></span><br><span class="line">            String st1 = <span class="string">"hello"</span>;</span><br><span class="line">            <span class="keyword">int</span> myInt1 = <span class="number">12</span>;</span><br><span class="line">            <span class="keyword">char</span> ch1 = <span class="string">'a'</span> ;<span class="comment">//97</span></span><br><span class="line">            System.out.println(str1 + myInt1 + ch1);  <span class="comment">// hello12a</span></span><br><span class="line">            System.out.println(myInt1 + ch1 + str1);  <span class="comment">// 109hello</span></span><br><span class="line">            System.out.println(ch1 + str1 + myInt1);  <span class="comment">// ahello12</span></span><br><span class="line"></span><br><span class="line">            String st2 = <span class="string">"12"</span>;</span><br><span class="line">            st2 = <span class="number">12</span> + <span class="string">""</span>; </span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;变量的概述&quot;&gt;&lt;a href=&quot;#变量的概述&quot; class=&quot;headerlink&quot; title=&quot;变量的概述&quot;&gt;&lt;/a&gt;变量的概述&lt;/h1&gt;&lt;p&gt;通常，根据内存地址可以找到这块内存空间的位置，也就找到了存储的数据。但是内存地址非常不好记，因此，我们给这块空间起一个别名，通过使用别名找到对应空间存储的数据。变量是一个数据存储空间的表示。通过变量名可以简单快速地找到它存储的数据。变量是存储数据的一个基本单元，不同的变量相互独立。&lt;br&gt;
    
    </summary>
    
      <category term="Java 基础" scheme="http://cuijing.me/categories/Java-%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="http://cuijing.me/tags/Java/"/>
    
      <category term="基础" scheme="http://cuijing.me/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="变量" scheme="http://cuijing.me/tags/%E5%8F%98%E9%87%8F/"/>
    
  </entry>
  
  <entry>
    <title>Java 运算符</title>
    <link href="http://cuijing.me/2015/02/06/Java/1-Java-Base/3-Java-operator/"/>
    <id>http://cuijing.me/2015/02/06/Java/1-Java-Base/3-Java-operator/</id>
    <published>2015-02-06T00:30:00.000Z</published>
    <updated>2016-04-13T13:23:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>运算符是一种特殊的符号，用以表示数据的运算、赋值和比较等。<br><a id="more"></a></p><h1 id="算术运算符："><a href="#算术运算符：" class="headerlink" title="算术运算符：+  -  + - * / % ++ -- +"></a>算术运算符：<code>+  -  + - * / % ++ -- +</code></h1><p>注意：</p><ul><li>/ :   <code>int i = 12;  i = i / 5;</code></li><li>%：最后的符号只跟被模数相同</li><li>前++：先+1，后参与运算     </li><li>后++：先参与运算，后+1</li><li>+：String字符串与其他数据类型只能做连接运算，且结果为String类型。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// + 在 String 字符串只能拼接字符 ， 但在 char : ' ' 请看下例</span></span><br><span class="line">System.out.println(<span class="string">'*'</span> + <span class="string">'\t'</span> + <span class="string">'*'</span>);       <span class="comment">// 93</span></span><br><span class="line">System.out.println(<span class="string">"*"</span> + <span class="string">'\t'</span> + <span class="string">'*'</span>);       <span class="comment">// *  *</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//取模：%：取余数. 结果的符号取决于被模数</span></span><br><span class="line"><span class="keyword">int</span> i1 =  <span class="number">12</span> %  <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> i2 = -<span class="number">12</span> %  <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> i3 =  <span class="number">12</span> % (-<span class="number">5</span>);</span><br><span class="line"><span class="keyword">int</span> i4 = -<span class="number">12</span> % (-<span class="number">5</span>);</span><br><span class="line">System.out.println(i1);        <span class="comment">//2</span></span><br><span class="line">System.out.println(i2);        <span class="comment">//-2</span></span><br><span class="line">System.out.println(i3);        <span class="comment">//2</span></span><br><span class="line">System.out.println(i4);        <span class="comment">//-2 </span></span><br><span class="line">   </span><br><span class="line"><span class="comment">// 后++：先以此时的值参加运算，即i++还是原来的值，但是i的值加了1</span></span><br><span class="line"><span class="comment">// ++前：先以此时的值自增1，即i的值加了1，再参加运算</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> myInt1 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> myInt2 = myInt1++;          <span class="comment">//后++</span></span><br><span class="line">System.out.println(myInt1);    <span class="comment">//11</span></span><br><span class="line">System.out.println(myInt2);    <span class="comment">//10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> myInt3 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> myInt4 = ++myInt3;          <span class="comment">//前++</span></span><br><span class="line">System.out.println(myInt3);    <span class="comment">//11</span></span><br><span class="line">System.out.println(myInt4);    <span class="comment">//11</span></span><br></pre></td></tr></table></figure><h1 id="赋值运算符："><a href="#赋值运算符：" class="headerlink" title="赋值运算符： =    +=   -=  *=    /=   %="></a>赋值运算符： <code>=    +=   -=  *=    /=   %=</code></h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i= <span class="number">12</span>；</span><br><span class="line">i  = i * <span class="number">5</span>;</span><br><span class="line">i *= <span class="number">5</span>; <span class="comment">//与上一行代码同样的意思</span></span><br><span class="line"><span class="comment">// 特别地</span></span><br><span class="line"><span class="keyword">int</span> i1 = <span class="number">10</span>;</span><br><span class="line">i1 += <span class="number">3</span>; <span class="comment">//i1 = i1 + 3;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">short</span> s = <span class="number">10</span>;</span><br><span class="line"><span class="comment">//s = s + 3;编译不通过</span></span><br><span class="line">s = ( <span class="keyword">short</span> )(s + <span class="number">1</span>);<span class="comment">//不建议如此实现</span></span><br><span class="line">s += <span class="number">1</span>; <span class="comment">//既可以实现运算，又不会更改s的数据类型。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i2 = <span class="number">12</span>;</span><br><span class="line">i2 %= <span class="number">5</span>; <span class="comment">//i2 = i2 % 5;</span></span><br><span class="line">  </span><br><span class="line">System.out.println(i1);</span><br><span class="line">System.out.println(s);</span><br><span class="line">System.out.println(i2);    <span class="comment">//2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> b1 = <span class="keyword">false</span> ;</span><br><span class="line"><span class="comment">// 区分好 == 和 = 的区别。</span></span><br><span class="line"><span class="keyword">if</span>( b1 = <span class="keyword">true</span> )</span><br><span class="line">    System.out.println(<span class="string">"结果为真"</span> );</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    System.out.println(<span class="string">"结果为假"</span> );</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">i *= <span class="number">0.1</span>;</span><br><span class="line">System.out.println(i);     <span class="comment">//0</span></span><br></pre></td></tr></table></figure><h1 id="比较运算符-gt-lt-gt-lt-instanceof"><a href="#比较运算符-gt-lt-gt-lt-instanceof" class="headerlink" title="比较运算符 ==   &gt;    &lt;    &gt;=    &lt;=     instanceof"></a>比较运算符 <code>==   &gt;    &lt;    &gt;=    &lt;=     instanceof</code></h1><p>区分 ==  与 =  区别。<br>进行比较运算操作以后，返回一个boolean类型的值，即结果要么是true，要么是false。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 表达的是4 &gt; 3或者 4 = 3 结果是true</span></span><br><span class="line"><span class="keyword">if</span>(<span class="number">4</span> &gt;= <span class="number">3</span>)&#123;</span><br><span class="line">    System.out.println(<span class="string">"true"</span>); </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 不能写为：if(1 &lt; i &lt; 10)&#123; &#125;</span></span><br><span class="line"><span class="keyword">if</span>(i &gt; <span class="number">1</span> &amp;&amp; i &lt; <span class="number">10</span>)&#123; &#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">// instanceof </span></span><br><span class="line"><span class="keyword">if</span>(<span class="string">"Hello"</span> <span class="keyword">instanceof</span> String )&#123;</span><br><span class="line">    System.out.println(<span class="string">"字符串 Hello 是 String 对象"</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="逻辑运算符-amp-amp-amp"><a href="#逻辑运算符-amp-amp-amp" class="headerlink" title="逻辑运算符  &amp;     &amp;&amp;      |      ||       ^       !"></a>逻辑运算符  <code>&amp;     &amp;&amp;      |      ||       ^       !</code></h1><p>运算符的两端是boolean值<br>区分 &amp;  与 &amp;&amp; 的区别，以及 |  与 || 的区别<br>我们使用的时候，强烈建议选择&amp;&amp; ， ||<br><img src="http://oov0wb0gl.bkt.clouddn.com/2017-04-27-14932698543307.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestLogic</span></span>&#123;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">               <span class="keyword">boolean</span> a = <span class="keyword">true</span> ;</span><br><span class="line">               <span class="keyword">boolean</span> b = <span class="keyword">false</span> ;</span><br><span class="line">               System.out.println(a &amp; b);   <span class="comment">// 逻辑与 false</span></span><br><span class="line">               System.out.println(a &amp;&amp; b);  <span class="comment">// 短路或 false</span></span><br><span class="line">               System.out.println(a | b);   <span class="comment">// 逻辑或 true</span></span><br><span class="line">               System.out.println(a || b);  <span class="comment">// 短路或 true </span></span><br><span class="line">               System.out.println(a &amp; !b);  <span class="comment">// 逻辑非 true</span></span><br><span class="line">               System.out.println(a ^ b);   <span class="comment">// 逻辑异或 (同 false 异 true) </span></span><br><span class="line">               </span><br><span class="line">               <span class="comment">//&amp; 与 &amp;&amp; 的区别：&amp;:不管左边是true还是false，右端都会进行运算。</span></span><br><span class="line">               <span class="comment">//&amp;&amp;:当左端为false时，右端不再进行运算</span></span><br><span class="line">               <span class="comment">//以后使用时，建议使用 &amp;&amp;</span></span><br><span class="line">               <span class="keyword">int</span> i1 = <span class="number">10</span>;</span><br><span class="line">               <span class="keyword">if</span>(b &amp; (i1++) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    System.out.println(<span class="string">"今天天气很晴朗"</span> );</span><br><span class="line">               &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                    System.out.println(<span class="string">"难得没有雾霾"</span> );</span><br><span class="line">               &#125;</span><br><span class="line">               System.out.println(i1);<span class="comment">//11</span></span><br><span class="line">               </span><br><span class="line">               <span class="keyword">int</span> i2 = <span class="number">10</span>;</span><br><span class="line">               <span class="keyword">if</span>(b &amp;&amp; (i2++) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                     System.out.println(<span class="string">"今天天气很晴朗"</span> );</span><br><span class="line">               &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                    System.out.println(<span class="string">"难得没有雾霾"</span> );</span><br><span class="line">               &#125;</span><br><span class="line">               System.out.println(i2);<span class="comment">//10</span></span><br><span class="line">               </span><br><span class="line">               <span class="comment">// | 与 || 的区别：|：当左端为true时，右端照样做运算。</span></span><br><span class="line">               <span class="comment">// ||:当左端为true时，右端不再进行运算。</span></span><br><span class="line">               <span class="comment">//我们在使用时，选择：||</span></span><br><span class="line">               <span class="keyword">int</span> i3 = <span class="number">10</span>;</span><br><span class="line">               <span class="keyword">if</span>(a | i3++ &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    System. out.println(<span class="string">"今天天气很晴朗"</span> );</span><br><span class="line">               &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                    System. out.println(<span class="string">"难得没有雾霾"</span> );</span><br><span class="line">               &#125;</span><br><span class="line">               System. out.println(i3);<span class="comment">//11</span></span><br><span class="line">               </span><br><span class="line">               <span class="keyword">int</span> i4 = <span class="number">10</span>;</span><br><span class="line">               <span class="keyword">if</span>(a || i4++ &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    System. out.println(<span class="string">"今天天气很晴朗"</span> );</span><br><span class="line">               &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                    System. out.println(<span class="string">"难得没有雾霾"</span> );</span><br><span class="line">               &#125;</span><br><span class="line">               System. out.println(i4);<span class="comment">//10</span></span><br><span class="line">          &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="位运算符-lt-lt-gt-gt-gt-gt-gt-amp"><a href="#位运算符-lt-lt-gt-gt-gt-gt-gt-amp" class="headerlink" title="位运算符  &lt;&lt;   &gt;&gt;    &gt;&gt;&gt;     &amp;     |     ^     ~"></a>位运算符  <code>&lt;&lt;   &gt;&gt;    &gt;&gt;&gt;     &amp;     |     ^     ~</code></h1><p>在进行位运算时，Java 会将数值转换为二进制，然后进行运算。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">13</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">12</span>;</span><br><span class="line">a &lt;&lt; <span class="number">2</span>  <span class="comment">// a * 4   1101变成 110100     </span></span><br><span class="line">b &gt;&gt; <span class="number">2</span>  <span class="comment">// a / 4   1101变成 11</span></span><br></pre></td></tr></table></figure><p><img src="http://oov0wb0gl.bkt.clouddn.com/2017-05-06-14932711496603.png" alt=""></p><h1 id="三元运算符-条件-表达式1-表达式2"><a href="#三元运算符-条件-表达式1-表达式2" class="headerlink" title="三元运算符   条件 ? 表达式1 : 表达式2;"></a>三元运算符   <code>条件 ? 表达式1 : 表达式2;</code></h1><ul><li>既然是运算符，一定会返回一个结果，并且结果的数据类型与表达式1，2的类型一致</li><li>表达式1与表达式2 的数据类型一致。</li><li>使用三元运算符的，一定可以转换为if-else。反之不一定成立。</li></ul><p>例子：获取两个数的较大值；获取三个数的最大值。<br>​<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">21</span>;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">23</span>;</span><br><span class="line"><span class="comment">// max记录了i与j的较大值</span></span><br><span class="line"><span class="keyword">int</span> max = (i &gt; j)? i : j;</span><br><span class="line"></span><br><span class="line"><span class="comment">// String str = (i &gt; j)? "i大" : "j大";</span></span><br><span class="line">String str = (i &gt; j)? <span class="string">"i大"</span> : (i == j)? <span class="string">"相等"</span> : <span class="string">"j大"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// String str1 = (i &gt; j)? i : "j大";</span></span><br><span class="line">System. out.println(max);</span><br><span class="line">System. out.println(str);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 互换</span></span><br><span class="line"><span class="keyword">if</span>(i &gt;= j)&#123;</span><br><span class="line">   System. out.println(<span class="string">"较大值为："</span> + i);</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">   System. out.println(<span class="string">"较大值为："</span> + j);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="运算符的优先级"><a href="#运算符的优先级" class="headerlink" title="运算符的优先级"></a>运算符的优先级</h1><p>运算符有不同的优先级，所谓优先级就是表达式运算中的运算顺序。<br>如下表，上一行运算符总优先于下一行。<br>只有单目运算符、三元运算符、赋值运算符是从右向左运算的。</p><p><img src="http://oov0wb0gl.bkt.clouddn.com/2017-04-27-14932694609042.png" alt=""></p><h1 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1、写出输出的结果.</span></span><br><span class="line"><span class="comment">// 考查运算符的优先级</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">             <span class="keyword">int</span> x=<span class="number">0</span>,y=<span class="number">1</span>;</span><br><span class="line">             <span class="keyword">if</span>(++x == y-- &amp; x++ == <span class="number">1</span>||--y==<span class="number">0</span>)</span><br><span class="line">                  System.out.println(<span class="string">"x="</span> +x+<span class="string">",y="</span>+y); <span class="comment">//x = 2,y = 0;</span></span><br><span class="line">             <span class="keyword">else</span></span><br><span class="line">                  System.out.println(<span class="string">"y="</span> +y+<span class="string">",x="</span>+x);</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ----------------------------------------------------</span></span><br><span class="line"><span class="comment">// 2、交换两个数</span></span><br><span class="line"><span class="comment">// int n = 5,m = 13;</span></span><br><span class="line"><span class="comment">// 插入代码，实现n和m值的交换</span></span><br><span class="line">System.out.println(<span class="string">"n="</span>+n+ <span class="string">",m="</span>+m);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n = <span class="number">5</span>,m = <span class="number">13</span>;</span><br><span class="line"><span class="comment">//int temp = n;</span></span><br><span class="line"><span class="comment">//n = m;</span></span><br><span class="line"><span class="comment">//m = temp;</span></span><br><span class="line">System.out.println(<span class="string">"n="</span>+n+ <span class="string">",m="</span>+m);</span><br><span class="line"></span><br><span class="line"><span class="comment">//n = n + m;</span></span><br><span class="line"><span class="comment">//m = n - m;</span></span><br><span class="line"><span class="comment">//n = n - m;</span></span><br><span class="line">System.out.println(<span class="string">"n="</span>+n+ <span class="string">",m="</span>+m);</span><br><span class="line"></span><br><span class="line">n = n ^ m;</span><br><span class="line">m = n ^ m ;</span><br><span class="line">n = n ^ m;</span><br><span class="line">System.out.println(<span class="string">"n="</span>+n+ <span class="string">",m="</span>+m);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ----------------------------------------------------</span></span><br><span class="line"><span class="comment">// 3、手动实现整型数值60的二进制到十六进制的转换</span></span><br><span class="line"></span><br><span class="line">String str1 = Integer.toBinaryString(<span class="number">60</span>);</span><br><span class="line">String str2 = Integer.toHexString(<span class="number">60</span>);</span><br><span class="line"><span class="keyword">int</span> i1 = <span class="number">60</span>;</span><br><span class="line"><span class="keyword">int</span> i2 = i1&amp;<span class="number">15</span>;</span><br><span class="line">String j = (i2 &gt; <span class="number">9</span>)? ( <span class="keyword">char</span>)(i2 -<span class="number">10</span> + <span class="string">'A'</span>)+<span class="string">""</span> : i2+ <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> temp = i1 &gt;&gt;&gt; <span class="number">4</span>;</span><br><span class="line">i2 = temp &amp; <span class="number">15</span>;</span><br><span class="line">String k = (i2 &gt; <span class="number">9</span>)? ( <span class="keyword">char</span>)(i2 -<span class="number">10</span> + <span class="string">'A'</span>)+<span class="string">""</span> : i2+ <span class="string">""</span>;</span><br><span class="line">System.out.println(k+<span class="string">""</span>+j);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ----------------------------------------------------</span></span><br><span class="line"><span class="comment">// 4、写出输出结果。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[ ] args)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> a=<span class="number">3</span>,b=<span class="number">8</span>;</span><br><span class="line">            <span class="keyword">int</span> c=(a&gt;b)?a++:b++;</span><br><span class="line">            System.out.println( <span class="string">"a="</span>+a+<span class="string">"\tb="</span> +b+<span class="string">"\tc="</span>+c);  <span class="comment">//</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">int</span> d=(a&gt;b)?++a:++b;</span><br><span class="line">            System.out.println( <span class="string">"a="</span>+a+<span class="string">"\tb="</span> +b+<span class="string">"\td="</span>+d);  <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> e=(a&lt;b)?a++:b++;</span><br><span class="line">            System.out.println( <span class="string">"a="</span>+a+<span class="string">"\tb="</span> +b+<span class="string">"\te="</span>+e);  <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> f=(a&lt;b)?++a:++b;</span><br><span class="line">            System.out.println( <span class="string">"a="</span>+a+<span class="string">"\tb="</span> +b+<span class="string">"\tf="</span>+f);  <span class="comment">// </span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><code>short s1 = 1; s1 = s1 + 1;</code> 有什么错?<code>short s1 = 1; s1 += 1;</code>有什么错</li></ol><p>答：<code>short s1 = 1; s1 = s1 + 1;</code>（s1+1运算结果是int型，需要强制转换类型）<code>short s1 = 1; s1 += 1;</code>（可以正确编译）</p><ol><li>Java有没有goto</li></ol><p>答：java中的保留字，现在没有在java中使用</p><ol><li>用最有效率的方法算出2乘以8等於几</li></ol><p>答：2 &lt;&lt; 3</p><ol><li>char型变量中能不能存贮一个中文汉字?为什么?</li></ol><p>答：是能够定义成为一个中文的，因为java中以unicode编码，一个char占16个字节，所以放一个中文是没问题的</p><ol><li>float型float f=3.4是否正确?</li></ol><p>答:不正确。精度不准确,应该用强制类型转换，如下所示：float f=(float)3.4</p><ol><li>String是最基本的数据类型吗</li></ol><p>答：基本数据类型包括byte、int、char、long、float、double、boolean和short。java.lang.String类是final类型的，因此不可以继承这个类、不能修改这个类。为了提高效率节省空间，我们应该用StringBuffer类</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;运算符是一种特殊的符号，用以表示数据的运算、赋值和比较等。&lt;br&gt;
    
    </summary>
    
      <category term="Java 基础" scheme="http://cuijing.me/categories/Java-%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="http://cuijing.me/tags/Java/"/>
    
      <category term="基础" scheme="http://cuijing.me/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="运算符" scheme="http://cuijing.me/tags/%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    
  </entry>
  
  <entry>
    <title>Java 内部类</title>
    <link href="http://cuijing.me/2015/02/06/Java/2-Object-Oriented/10-%E5%86%85%E9%83%A8%E7%B1%BB/"/>
    <id>http://cuijing.me/2015/02/06/Java/2-Object-Oriented/10-内部类/</id>
    <published>2015-02-06T00:30:00.000Z</published>
    <updated>2016-05-05T13:12:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h1><p>类的第5个成员：内部类</p><h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><ol><li>相当于说，我们可以在类的内部再定义类。外面的类：外部类。里面定义的类：内部类；</li><li>内部类的分类：成员内部类（声明在类内部且方法外的）；局部内部类（声明在类的方法里）。<a id="more"></a></li></ol><h1 id="Java内部类总结"><a href="#Java内部类总结" class="headerlink" title="Java内部类总结"></a>Java内部类总结</h1><h2 id="1、在方法间定义的非静态内部类："><a href="#1、在方法间定义的非静态内部类：" class="headerlink" title="1、在方法间定义的非静态内部类："></a>1、在方法间定义的非静态内部类：</h2><ul><li>外围类和内部类可互相访问自己的私有成员；</li><li>内部类中不能定义静态成员变量；</li><li>在外部类作用范围之外向要创建内部类对象必须先创建其外部类对象；</li><li>非静态内部类对象有着指向其外部类对象的引用。</li></ul><h2 id="2、在方法间定义的静态内部类："><a href="#2、在方法间定义的静态内部类：" class="headerlink" title="2、在方法间定义的静态内部类："></a>2、在方法间定义的静态内部类：</h2><ul><li>只能访问外部类的静态成员；</li><li>静态内部类没有指向外部的引用。</li></ul><h2 id="3、在方法中定义的局部内部类："><a href="#3、在方法中定义的局部内部类：" class="headerlink" title="3、在方法中定义的局部内部类："></a>3、在方法中定义的局部内部类：</h2><ul><li>该内部类没有任何的访问控制权限；</li><li>可以有构造函数；</li><li>外围类看不见方法中的局部内部类的，但是局部内部类可以访问外围类的任何成员；</li><li>方法体中可以访问局部内部类，但是访问语句必须在定义局部内部类之后；</li><li>只能访问方法体中的常量，即用final修饰的成员。</li></ul><h2 id="4、在方法中定义的匿名内部类："><a href="#4、在方法中定义的匿名内部类：" class="headerlink" title="4、在方法中定义的匿名内部类："></a>4、在方法中定义的匿名内部类：</h2><ul><li>没有构造器，取而代之的是将构造器参数传递给超类构造器；</li><li>当你只需要创建一个类的对象而且用不上它的名字时，使用匿名内部类可以使代码看上去简洁清楚；</li><li>只能访问方法体中的常量，即用final修饰的成员。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> me.cuijing.test;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestInnerClass</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//创建静态内部类的对象：可以直接通过外部类调用静态内部类的构造器</span></span><br><span class="line">       Person.Dog d = <span class="keyword">new</span> Person.Dog();<span class="comment">//Person.new Dog();</span></span><br><span class="line">       <span class="comment">//Person.Bird b = new Person.Bird();</span></span><br><span class="line">       <span class="comment">//创建非静态的内部类的对象：必须先创建外部类的对象，通过外部类的对象调用内部类的构造器</span></span><br><span class="line">       Person p = <span class="keyword">new</span> Person();</span><br><span class="line">       Person.Bird b = p. <span class="keyword">new</span> Bird(); <span class="comment">//new p.Bird();</span></span><br><span class="line">       b.info();</span><br><span class="line">       b.setName( <span class="string">"DuJuan"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">   String name = <span class="string">"CuiJing"</span>;</span><br><span class="line">   <span class="keyword">int</span> age;</span><br><span class="line">   <span class="comment">//成员内部类(非static的)</span></span><br><span class="line">   <span class="class"><span class="keyword">class</span> <span class="title">Bird</span></span>&#123;</span><br><span class="line">       String name = <span class="string">"XiQue"</span>;</span><br><span class="line">       <span class="keyword">int</span> id;</span><br><span class="line">         </span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="title">Bird</span><span class="params">()</span></span>&#123;</span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">           System.out.println(name);                </span><br><span class="line">           System.out.println(<span class="keyword">this</span>.name);           </span><br><span class="line">           System.out.println(Person.<span class="keyword">this</span>.name);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">info</span><span class="params">()</span></span>&#123;</span><br><span class="line">           show();</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">//成员内部类(静态内部类)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println( <span class="string">"我是show()方法"</span> );</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><h2 id="1、实现隐藏"><a href="#1、实现隐藏" class="headerlink" title="1、实现隐藏"></a>1、实现隐藏</h2><p>平时我们对类的访问权限，都是通过类前面的访问修饰符来限制的，一般的非内部类，是不允许有 private 与protected权限的，但内部类可以，所以我们能通过内部类来隐藏我们的信息。可以看下面的例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接口</span></span><br><span class="line"><span class="keyword">package</span> insidecategory;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Incrementable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">increment</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体类</span></span><br><span class="line"><span class="keyword">package</span> insidecategory;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">InsideClass</span> <span class="keyword">implements</span> <span class="title">InterfaceTest</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function">         </span>&#123;</span><br><span class="line">             System.out.println(<span class="string">"这是一个测试"</span>);</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> InterfaceTest <span class="title">getIn</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> InsideClass();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端程序</span></span><br><span class="line"><span class="keyword">package</span> insidecategory;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestExample</span> </span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Example a = <span class="keyword">new</span> Example();</span><br><span class="line">        InterfaceTest a1= a.getIn();</span><br><span class="line">        a1.test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从这段代码里面我只知道<code>Example的getIn()</code>方法能返回一个InterfaceTest 实例但我并不知道这个实例是这么实现的。而且由于<code>InsideClass</code> 是<code>private</code>的，所以我们如果不看代码的话根本看不到这个具体类的名字，所以说它可以很好的实现隐藏。</p><h2 id="2、可以无条件地访问外围类的所有元素"><a href="#2、可以无条件地访问外围类的所有元素" class="headerlink" title="2、可以无条件地访问外围类的所有元素"></a>2、可以无条件地访问外围类的所有元素</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> insidecategory;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TagBean</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name=<span class="string">"CuiJing"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">InTest</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">InTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> InTest();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        TagBean bb = <span class="keyword">new</span> TagBean();</span><br><span class="line">        bb.test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>name这个变量是在TagBean里面定义的私有变量。这个变量在内部类中可以无条件地访问System.out.println(name);</p><h2 id="3、可以实现多重继承"><a href="#3、可以实现多重继承" class="headerlink" title="3、可以实现多重继承"></a>3、可以实现多重继承</h2><p>这个特点非常重要，个人认为它是内部类存在的最大理由之一。正是由于他的存在使得Java的继承机制更加完善。大家都知道Java只能继承一个类，它的多重继承在我们没有学习内部类之前是用接口来实现的。但使用接口有时候有很多不方便的地方。比如我们实现一个接口就必须实现它里面的所有方法。而有了内部类就不一样了。它可以使我们的类继承多个具体类或抽象类。大家看下面的例子。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">类一</span><br><span class="line"><span class="keyword">package</span> insidecategory;</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"CuiJing"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">类二</span><br><span class="line"><span class="keyword">package</span> insidecategory;</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example2</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">age</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">25</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">类三</span><br><span class="line"><span class="keyword">package</span> insidecategory;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainExample</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">test1</span> <span class="keyword">extends</span> <span class="title">Example1</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.name();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">test2</span> <span class="keyword">extends</span> <span class="title">Example2</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">age</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.age();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> test1().name();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">age</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> test2().age();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        MainExample mi = <span class="keyword">new</span> MainExample();</span><br><span class="line">        System.out.println(<span class="string">"姓名:"</span> + mi.name());</span><br><span class="line">        System.out.println(<span class="string">"年龄:"</span> + mi.age());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大家注意看类三，里面分别实现了两个内部类 test1,和test2 ，test1类又继承了Example1，test2继承了Example2，这样我们的类三MainExample就拥有了Example1和Example2的方法和属性，也就间接地实现了多继承。</p><h2 id="4、避免修改接口而实现同一个类中两种同名方法的调用。"><a href="#4、避免修改接口而实现同一个类中两种同名方法的调用。" class="headerlink" title="4、避免修改接口而实现同一个类中两种同名方法的调用。"></a>4、避免修改接口而实现同一个类中两种同名方法的调用。</h2><p> 大家假想一下如果，你的类要继承一个类，还要实现一个接口，可是你发觉你继承的类和接口里面有两个同名的方法怎么办？你怎么区分它们？这就需要我们的内部类了。看下面的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接口</span></span><br><span class="line"><span class="keyword">package</span> insidecategory;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Incrementable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">increment</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类 MyIncrement</span></span><br><span class="line"><span class="keyword">package</span> insidecategory;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyIncrement</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">increment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Other increment()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">(MyIncrement f)</span> </span>&#123;</span><br><span class="line">        f.increment();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大家看上面的<code>increment()</code>方法，两个方法都是一样的。在看下面这个类要继承这两个类，如果不用内部类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> insidecategory;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Callee2</span> <span class="keyword">extends</span> <span class="title">MyIncrement</span> <span class="keyword">implements</span> <span class="title">Incrementable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">increment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//代码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>想问一下大家 <code>increment()</code> 这个方法是属于覆盖<code>MyIncrement</code>这里的方法呢？还是<code>Incrementable</code>这里的方法。我怎么能调到<code>MyIncrement</code>这里的方法？显然这是不好区分的。而我们如果用内部类就很好解决这一问题了。</p><p>看下面代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> insidecategory;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Callee2</span> <span class="keyword">extends</span> <span class="title">MyIncrement</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">incr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        i++;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Closure</span> <span class="keyword">implements</span> <span class="title">Incrementable</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">increment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            incr();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">Incrementable <span class="title">getCallbackReference</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Closure();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以用内部类来实现接口，这样就不会与外围类的方法冲突了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;内部类&quot;&gt;&lt;a href=&quot;#内部类&quot; class=&quot;headerlink&quot; title=&quot;内部类&quot;&gt;&lt;/a&gt;内部类&lt;/h1&gt;&lt;p&gt;类的第5个成员：内部类&lt;/p&gt;
&lt;h1 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;相当于说，我们可以在类的内部再定义类。外面的类：外部类。里面定义的类：内部类；&lt;/li&gt;
&lt;li&gt;内部类的分类：成员内部类（声明在类内部且方法外的）；局部内部类（声明在类的方法里）。
    
    </summary>
    
      <category term="Java 基础" scheme="http://cuijing.me/categories/Java-%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="http://cuijing.me/tags/Java/"/>
    
      <category term="面向对象" scheme="http://cuijing.me/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
      <category term="内部类" scheme="http://cuijing.me/tags/%E5%86%85%E9%83%A8%E7%B1%BB/"/>
    
      <category term="inner class" scheme="http://cuijing.me/tags/inner-class/"/>
    
  </entry>
  
  <entry>
    <title>Java 异常注意事项</title>
    <link href="http://cuijing.me/2015/02/06/Java/3-Exception/2-%E5%BC%82%E5%B8%B8%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
    <id>http://cuijing.me/2015/02/06/Java/3-Exception/2-异常注意事项/</id>
    <published>2015-02-06T00:30:00.000Z</published>
    <updated>2016-05-04T12:15:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java中如何处理异常"><a href="#Java中如何处理异常" class="headerlink" title="Java中如何处理异常"></a>Java中如何处理异常</h1><p>在Java中进行异常处理的话，对于可能会发生异常的代码，可以选择三种方法来进行异常处理：<br><a id="more"></a></p><ol><li><p>对代码块用<code>try..catch</code>进行异常捕获处理；</p></li><li><p>在该代码的方法体外用<code>throws</code>进行抛出声明，告知此方法的调用者这段代码可能会出现这些异常，你需要谨慎处理。此时有两种情况：如果声明抛出的异常是非运行时异常，此方法的调用者必须显示地用<code>try..catch</code>块进行捕获或者继续向上层抛出异常。如果声明抛出的异常是运行时异常，此方法的调用者可以选择地进行异常捕获处理。 </p></li><li><p>在代码块用<code>throw</code>手动抛出一个异常对象，此时也有两种情况，跟 2 中的类似：如果抛出的异常对象是非运行时异常，此方法的调用者必须显示地用<code>try..catch</code>块进行捕获或者继续向上层抛出异常。如果抛出的异常对象是运行时异常，此方法的调用者可以选择地进行异常捕获处理。 如果最终将异常抛给<code>main</code>方法，则相当于交给JVM自动处理，此时JVM会简单地打印异常信息</p></li></ol><h1 id="深刻理解try-catch-finally"><a href="#深刻理解try-catch-finally" class="headerlink" title="深刻理解try,catch,finally"></a>深刻理解try,catch,finally</h1><p>try关键字用来包围可能会出现异常的逻辑代码，它单独无法使用，必须配合catch或者finally使用。Java编译器允许的组合使用形式只有以下三种形式：</p><ul><li>try…catch…;       </li><li>try….finally……;    </li><li>try….catch…finally…</li></ul><p>当然catch块可以有多个，注意try块只能有一个,finally块是可选的（但是最多只能有一个finally块）。</p><p>三个块执行的顺序为try—&gt;catch—&gt;finally。</p><p>当然如果没有发生异常，则catch块不会执行。但是finally块无论在什么情况下都是会执行的（这点要非常注意，因此部分情况下，都会将释放资源的操作放在finally块中进行）。在有多个catch块的时候，是按照catch块的先后顺序进行匹配的，一旦异常类型被一个catch块匹配，则不会与后面的catch块进行匹配。</p><p>在使用try..catch..finally块的时候，注意千万不要在finally块中使用return，因为finally中的return会覆盖已有的返回值。下面看一个例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">public class TestFinally1 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        String str = new TestFinally1().openFile();</span><br><span class="line">        System. out.println(str);</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    public String openFile() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            FileInputStream inputStream = new FileInputStream(&quot;d:/a.txt&quot; );</span><br><span class="line">            int ch = inputStream.read();</span><br><span class="line">            System.out.println( &quot;aaa&quot;);</span><br><span class="line">            return &quot;step1&quot;;</span><br><span class="line">        &#125;catch (FileNotFoundException e) &#123;</span><br><span class="line">            System.out.println( &quot;file not found&quot;);</span><br><span class="line">            return &quot;step2&quot;;</span><br><span class="line">        &#125;catch (IOException e) &#123;</span><br><span class="line">            System.out.println( &quot;io exception&quot;);</span><br><span class="line">            return &quot;step3&quot;;</span><br><span class="line">        &#125;finally&#123;</span><br><span class="line">            System.out.println(&quot;finally block&quot; );</span><br><span class="line">            //return &quot;finally&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段程序的输出结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">file not found</span><br><span class="line">finally block</span><br><span class="line">step2</span><br></pre></td></tr></table></figure><p>  可以看出，在try块中发生FileNotFoundException之后，就跳到第一个catch块，打印”file not found”信息，并将”step2”赋值给返回值，然后执行finally块，最后将返回值返回。从这个例子说明，无论try块或者catch块中是否包含return语句，都会执行finally块。<br>如果将这个程序稍微修改一下，将finally块中的return语句注释去掉，运行结果是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">file not found</span><br><span class="line">finally block</span><br><span class="line">finally</span><br></pre></td></tr></table></figure><p>最后打印出的是”finally”，返回值被重新覆盖了。<br>因此如果方法有返回值，切忌不要再finally中使用return，这样会使得程序结构变得混乱。</p><h1 id="异常处理和设计的几个建议"><a href="#异常处理和设计的几个建议" class="headerlink" title="异常处理和设计的几个建议"></a>异常处理和设计的几个建议</h1><p>以下是根据前人总结的一些异常处理的建议</p><h2 id="1、只在必要使用异常的地方才使用异常"><a href="#1、只在必要使用异常的地方才使用异常" class="headerlink" title="1、只在必要使用异常的地方才使用异常"></a>1、只在必要使用异常的地方才使用异常</h2><p>只在必要使用异常的地方才使用异常，不要用异常去控制程序的流程。<br>谨慎地使用异常，异常捕获的代价非常高昂，异常使用过多会严重影响程序的性能。如果在程序中能够用<code>if语句</code>和<code>Boolean变量</code>来进行逻辑判断，那么尽量减少异常的使用，从而避免不必要的异常捕获和处理。</p><p>比如下面这段经典的程序：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public void useExceptionsForFlowControl() &#123;  </span><br><span class="line">    try &#123; </span><br><span class="line">        while (true) &#123;  </span><br><span class="line">            increaseCount(); </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125; catch (MaximumCountReachedException ex) &#123; </span><br><span class="line">    </span><br><span class="line">    &#125;  </span><br><span class="line">    //Continue execution </span><br><span class="line">&#125;  </span><br><span class="line">   </span><br><span class="line">public void increaseCount() throws MaximumCountReachedException &#123;  </span><br><span class="line">    if (count &gt;= 5000) </span><br><span class="line">        throw new  MaximumCountReachedException();  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上边的useExceptionsForFlowControl()用一个无限循环来增加count直到抛出异常，这种做法并没有说让代码不易读，而是使得程序执行效率降低。 </p><h2 id="2、切忌使用空catch块"><a href="#2、切忌使用空catch块" class="headerlink" title="2、切忌使用空catch块"></a>2、切忌使用空catch块</h2><p>在捕获了异常之后什么都不做，相当于忽略了这个异常。千万不要使用空的catch块，空的catch块意味着你在程序中隐藏了错误和异常，并且很可能导致程序出现不可控的执行结果。如果你非常肯定捕获到的异常不会以任何方式对程序造成影响，最好用Log日志将该异常进行记录，以便日后方便更新和维护。 </p><h2 id="3、检查异常和非检查异常的选择"><a href="#3、检查异常和非检查异常的选择" class="headerlink" title="3、检查异常和非检查异常的选择"></a>3、检查异常和非检查异常的选择</h2><p>一旦你决定抛出异常，你就要决定抛出什么异常。这里面的主要问题就是抛出检查异常还是非检查异常。 </p><p>检查异常导致了太多的try…catch代码，可能有很多检查异常对开发人员来说是无法合理地进行处理的，比如SQLException，而开发人员却不得不去进行try…catch，这样就会导致经常出现这样一种情况：逻辑代码只有很少的几行，而进行异常捕获和处理的代码却有很多行。这样不仅导致逻辑代码阅读起来晦涩难懂，而且降低了程序的性能。</p><p>建议尽量避免检查异常的使用，如果确实该异常情况的出现很普遍，需要提醒调用者注意处理的话，就使用检查异常；否则使用非检查异常。 因此，在一般情况下，我觉得<strong>尽量将检查异常转变为非检查异常交给上层处理</strong>。</p><h2 id="4、注意catch块的顺序"><a href="#4、注意catch块的顺序" class="headerlink" title="4、注意catch块的顺序"></a>4、注意catch块的顺序</h2><p>不要把上层类的异常放在最前面的catch块。比如下面这段代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">try &#123;</span><br><span class="line">    FileInputStream inputStream = new FileInputStream( &quot;d:/a.txt&quot;);</span><br><span class="line">    int ch = inputStream.read();</span><br><span class="line">    System.out.println(&quot;aaa&quot;);</span><br><span class="line">    return &quot;step1&quot;;</span><br><span class="line">&#125; catch (IOException e ) &#123;</span><br><span class="line">    System.out.println(&quot;io exception&quot;);        </span><br><span class="line">    return &quot;step2&quot;;</span><br><span class="line">&#125;catch (FileNotFoundException e) &#123;</span><br><span class="line">    System.out.println(&quot;file not found&quot;);         </span><br><span class="line">    return &quot;step3&quot;;</span><br><span class="line">&#125;finally&#123;</span><br><span class="line">    System.out.println(&quot;finally block&quot;);</span><br><span class="line">    //return &quot;finally&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二个catch的FileNotFoundException将永远不会被捕获到，因为FileNotFoundException是IOException的子类。</p><h2 id="5、不要将提供给用户看的信息放在异常信息里"><a href="#5、不要将提供给用户看的信息放在异常信息里" class="headerlink" title="5、不要将提供给用户看的信息放在异常信息里"></a>5、不要将提供给用户看的信息放在异常信息里</h2><p>比如下面这段代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">try &#123;</span><br><span class="line">    FileInputStream inputStream = new FileInputStream( &quot;d:/a.txt&quot;);</span><br><span class="line">    int ch = inputStream.read();</span><br><span class="line">    System.out.println(&quot;aaa&quot;);</span><br><span class="line">    return &quot;step1&quot;;</span><br><span class="line">&#125; catch (IOException e ) &#123;</span><br><span class="line">    System.out.println(&quot;io exception&quot;);        </span><br><span class="line">    return &quot;step2&quot;; </span><br><span class="line">&#125;catch (FileNotFoundException e) &#123;</span><br><span class="line">    System.out.println(&quot;file not found&quot;);         </span><br><span class="line">    return &quot;step3&quot;;</span><br><span class="line">&#125;finally&#123;</span><br><span class="line">    System.out.println(&quot;finally block&quot;);</span><br><span class="line">    //return &quot;finally&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>展示给用户错误提示信息最好不要跟程序混淆一起，比较好的方式是将所有错误提示信息放在一个配置文件中统一管理。 </p><h2 id="6、避免多次在日志信息中记录同一个异常"><a href="#6、避免多次在日志信息中记录同一个异常" class="headerlink" title="6、避免多次在日志信息中记录同一个异常"></a>6、避免多次在日志信息中记录同一个异常</h2><p>只在异常最开始发生的地方进行日志信息记录。很多情况下异常都是层层向上跑出的，如果在每次向上抛出的时候，都Log到日志系统中，则会导致无从查找异常发生的根源。 </p><h2 id="7、异常处理尽量放在高层进行"><a href="#7、异常处理尽量放在高层进行" class="headerlink" title="7、异常处理尽量放在高层进行"></a>7、异常处理尽量放在高层进行</h2><p>尽量将异常统一抛给上层调用者，由上层调用者统一之时如何进行处理。如果在每个出现异常的地方都直接进行处理，会导致程序异常处理流程混乱，不利于后期维护和异常错误排查。由上层统一进行处理会使得整个程序的流程清晰易懂。 </p><h2 id="8、在finally中释放资源"><a href="#8、在finally中释放资源" class="headerlink" title="8、在finally中释放资源"></a>8、在finally中释放资源</h2><p>如果有使用文件读取、网络操作以及数据库操作等，记得在finally中释放资源。这样不仅会使得程序占用更少的资源，也会避免不必要的由于资源未释放而发生的异常情况。                                    </p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Java中如何处理异常&quot;&gt;&lt;a href=&quot;#Java中如何处理异常&quot; class=&quot;headerlink&quot; title=&quot;Java中如何处理异常&quot;&gt;&lt;/a&gt;Java中如何处理异常&lt;/h1&gt;&lt;p&gt;在Java中进行异常处理的话，对于可能会发生异常的代码，可以选择三种方法来进行异常处理：&lt;br&gt;
    
    </summary>
    
      <category term="Java 基础" scheme="http://cuijing.me/categories/Java-%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="http://cuijing.me/tags/Java/"/>
    
      <category term="面向对象" scheme="http://cuijing.me/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
      <category term="Exception" scheme="http://cuijing.me/tags/Exception/"/>
    
  </entry>
  
  <entry>
    <title>Java 分支结构</title>
    <link href="http://cuijing.me/2015/02/06/Java/1-Java-Base/4-Java-Flow-control/"/>
    <id>http://cuijing.me/2015/02/06/Java/1-Java-Base/4-Java-Flow-control/</id>
    <published>2015-02-06T00:30:00.000Z</published>
    <updated>2016-04-13T14:23:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="分支结构："><a href="#分支结构：" class="headerlink" title="分支结构："></a>分支结构：</h1><a id="more"></a><h2 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断:"></a>条件判断:</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ①</span></span><br><span class="line"><span class="keyword">if</span>(条件表达式)&#123;   &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ②</span></span><br><span class="line"><span class="keyword">if</span>(条件表达式)&#123;</span><br><span class="line">    <span class="comment">//执行的语句1；</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//执行的语句2；</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ③</span></span><br><span class="line"><span class="keyword">if</span>(条件表达式<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="comment">//执行的语句1；</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(条件表达式<span class="number">2</span>)&#123;</span><br><span class="line">    <span class="comment">//执行的语句2；</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>( 条件表达式<span class="number">3</span>)&#123;</span><br><span class="line">    <span class="comment">//执行的语句3；</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//执行的语句4；</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>一旦满足某个条件表达式，则进入其执行语句块执行，执行完毕，跳出当前的条件判断结构，不会执行其以下的条件结构语句。</li><li>如果诸多个条件表达式之间为“互斥”关系，多个结构可以上下调换顺序，如果诸多个条件表达式之间为“包含”关系，要求条件表达式范围小的写在范围大的上面。</li><li>说明：如果if-else if-else条件的执行语句块{}只有一条语句的话，那么这一对{}可以省略。建议：不要省略{}</li></ol><h2 id="选择结构"><a href="#选择结构" class="headerlink" title="选择结构"></a>选择结构</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(变量)&#123;</span><br><span class="line">     <span class="keyword">case</span> 值<span class="number">1</span>:     <span class="comment">//break;</span></span><br><span class="line">     <span class="keyword">case</span> 值<span class="number">2</span>:     <span class="comment">//break;</span></span><br><span class="line">     ...</span><br><span class="line">     <span class="keyword">default</span>:        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>变量可以为如下的数据类型：byte  short int char 枚举 (Java1.7及以后支持字符串)String</li><li>case后只能填写变量的值，不能写范围。</li><li>default是可以省略的。若，没有以上case ，则默认执行此行代码，并且其位置也是灵活的，但是通常将其放在case语句之后。</li><li>一旦满足某个case语句，则进入执行其操作。直至遇到break或者程序终止。</li><li>若要判断的语句的条件满足switch变量的数据类型，且值不多的情况下，建议选择switch-case，除此之外，选择if-else。</li></ol><p><strong>代码示例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">对学生成绩大于60分的，输出“合格”。低于60分的，输出“不合格”。</span></span><br><span class="line"><span class="comment">说明：</span></span><br><span class="line"><span class="comment">1.当多个case语句处理的语句块一致时，可以统一来书写</span></span><br><span class="line"><span class="comment">2.一定情况下switch-case与if-else之间可以相互转换。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestSwitch2</span> </span>&#123;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">            System. out.println(<span class="string">"请输入一个学生的成绩："</span> );</span><br><span class="line">            Scanner s = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">             <span class="keyword">int</span> score = s.nextInt();</span><br><span class="line">             <span class="keyword">if</span>(score &gt;= <span class="number">60</span>)&#123;</span><br><span class="line">                  System. out.println(<span class="string">"及格"</span> );</span><br><span class="line">            &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                  System. out.println(<span class="string">"不及格"</span> );</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            switch(score)&#123;</span></span><br><span class="line"><span class="comment">                  case 100:</span></span><br><span class="line"><span class="comment">                  ...</span></span><br><span class="line"><span class="comment">                  case 0:</span></span><br><span class="line"><span class="comment">                  default:</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">             <span class="keyword">switch</span>(score / <span class="number">10</span>)&#123;</span><br><span class="line">                   <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">                   <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">                   <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">                   <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                   <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                        System. out.println(<span class="string">"及格"</span> );</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                   <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                   <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                   <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                   <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                   <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                   <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                        System. out.println(<span class="string">"不及格"</span> );</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                   <span class="keyword">default</span>:</span><br><span class="line">                        System. out.println(<span class="string">"输入有误"</span> );</span><br><span class="line">                        <span class="keyword">break</span>; </span><br><span class="line">            &#125;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//从键盘分别输入年、月、日，判断这一天是当年的第几天</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestYearMonthDay</span></span>&#123;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">            Scanner s = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">            System.out.println(<span class="string">"请输入年份："</span> );</span><br><span class="line">            <span class="keyword">int</span> year = s.nextInt();</span><br><span class="line">            System.out.println(<span class="string">"请输入月份："</span> );</span><br><span class="line">            <span class="keyword">int</span> month = s.nextInt();</span><br><span class="line">            System.out.println(<span class="string">"请输入日期："</span> );</span><br><span class="line">            <span class="keyword">int</span> day = s.nextInt();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> sum = <span class="number">0</span>;<span class="comment">//用来记录year年month月day日是year年第几天</span></span><br><span class="line">            <span class="comment">//使用switch-case</span></span><br><span class="line">            <span class="keyword">switch</span>(month)&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">                      sum += <span class="number">30</span>; <span class="comment">//30:十一月份的总天数</span></span><br><span class="line">                <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">                      sum += <span class="number">31</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">                      sum += <span class="number">30</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">                      sum += <span class="number">31</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">                      sum += <span class="number">31</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                      sum += <span class="number">30</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                      sum += <span class="number">31</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                      sum += <span class="number">30</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                      sum += <span class="number">31</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                       <span class="keyword">if</span>((year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span>) || year % <span class="number">400</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                            sum += <span class="number">29</span>;</span><br><span class="line">                       &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                            sum += <span class="number">28</span>;</span><br><span class="line">                       &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                      sum += <span class="number">31</span>; <span class="comment">//31:是一月份的天数</span></span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                      sum += day;</span><br><span class="line">           </span><br><span class="line">            &#125;</span><br><span class="line">            System. out.println(sum);</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h1><h2 id="循环控制"><a href="#循环控制" class="headerlink" title="循环控制"></a>循环控制</h2><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//①初始化条件</span></span><br><span class="line"><span class="comment">//②循环条件</span></span><br><span class="line"><span class="comment">//③迭代部分</span></span><br><span class="line"><span class="comment">//④循环体</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//执行顺序   1243  243  243  243 ...</span></span><br><span class="line"><span class="keyword">for</span>(①;②;③)&#123;</span><br><span class="line">④</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行顺序    1243  243  243  243 ...</span></span><br><span class="line">①</span><br><span class="line"><span class="keyword">while</span>(②)&#123;</span><br><span class="line">④</span><br><span class="line">③</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//执行顺序    1432  432  432  432 ...</span></span><br><span class="line">①</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">④</span><br><span class="line">③</span><br><span class="line">&#125;<span class="keyword">while</span>(②);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">注：</span></span><br><span class="line"><span class="comment">1. 不同的循环结构之间可以相互转换</span></span><br><span class="line"><span class="comment">2. while和do-while的区别：do-while程序至少会执行一次</span></span><br><span class="line"><span class="comment">3. 嵌套循环：循环结构还可以声明循环。让内层循环结构整体充当外层循环的循环体。</span></span><br><span class="line"><span class="comment">若外层循环执行m次，内层循环执行n次，整个程序执行m*n次。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="无限循环控制"><a href="#无限循环控制" class="headerlink" title="无限循环控制"></a>无限循环控制</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(  ;;  )&#123;</span><br><span class="line">   ...</span><br><span class="line">   <span class="keyword">if</span>(  )&#123;</span><br><span class="line">     <span class="keyword">break</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">   ...</span><br><span class="line">   <span class="keyword">if</span>(  )&#123;</span><br><span class="line">     <span class="keyword">break</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>往往我们在无限循环结构内部提供循环的终止条件，使用break关键字。否则，此循环将无限制的执行下去，形成死循环！死循环是我们要避免的。</p><h2 id="break-与-continue"><a href="#break-与-continue" class="headerlink" title="break 与 continue"></a>break 与 continue</h2><p>break:</p><blockquote><p>使用switch-case结构或者循环结构中<br>在循环结构中，一旦执行到break，就跳出当前循环。</p></blockquote><p>continue:使用在循环结构中</p><blockquote><p>一旦执行到continue，就跳出当次循环。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">10</span>;i++)&#123;</span><br><span class="line">     <span class="keyword">if</span>(i % <span class="number">4</span> == <span class="number">0</span>)&#123;</span><br><span class="line">          <span class="comment">//break; //123</span></span><br><span class="line">          <span class="keyword">continue</span>;  <span class="comment">//123567910</span></span><br><span class="line">     &#125;</span><br><span class="line">     System.out.print(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//在嵌套循环中，使用带标签的break和continue。</span></span><br><span class="line">label:<span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">1</span>;i &lt; <span class="number">5</span>;i++)&#123;    </span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= <span class="number">10</span>;j++)&#123;       </span><br><span class="line">              <span class="keyword">if</span>(j % <span class="number">4</span> == <span class="number">0</span>)&#123;            </span><br><span class="line">                    <span class="comment">//break;              </span></span><br><span class="line">                    <span class="comment">//continue;              </span></span><br><span class="line">                    <span class="comment">//break label;    意思是跳出i循环，所有的循环结束</span></span><br><span class="line">                    <span class="keyword">continue</span> label;   <span class="comment">//意思是跳出j循环，开始i循环     </span></span><br><span class="line">              &#125;         </span><br><span class="line">                     System.out.print(j);   </span><br><span class="line">       &#125;</span><br><span class="line">          System.out.println();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">1、打印以下三行</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">******</span></span><br><span class="line"><span class="comment">******</span></span><br><span class="line"><span class="comment">******</span></span><br><span class="line"><span class="comment">说明：外层循环控制行数，内层循环控制列数</span></span><br><span class="line"><span class="comment">for(int i = 0;i &lt; 3;i++)&#123;</span></span><br><span class="line"><span class="comment">     for(int j = 0;j &lt; 6;j++)&#123;</span></span><br><span class="line"><span class="comment">          System.out.print("*");</span></span><br><span class="line"><span class="comment">     &#125;</span></span><br><span class="line"><span class="comment">     System.out.println();</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestJiuJiu</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">9</span>;i++)&#123;<span class="comment">//一共有9行</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= i;j++)&#123;<span class="comment">//每行有i个等式</span></span><br><span class="line">                System. out.print(i + <span class="string">"*"</span> + j + <span class="string">"="</span> + i*j + <span class="string">"\t"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System. out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">2、九九乘法表  3、输出100内的质数。（两种）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1 * 1 = 1</span></span><br><span class="line"><span class="comment">2 * 1 = 2  2 * 2 = 4</span></span><br><span class="line"><span class="comment">...</span></span><br><span class="line"><span class="comment">9 * 1 = 9   ....    9 * 9 = 81</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPrintNumber2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//boolean flag = false;</span></span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis(); <span class="comment">//获取系统当前的毫秒数</span></span><br><span class="line">        l: <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i &lt;= <span class="number">100</span>;i++)&#123;<span class="comment">//实现100以内的自然数的遍历</span></span><br><span class="line">            <span class="comment">//如何判断i是否为一个质数</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">2</span>;j &lt;= Math.sqrt (i);j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i % j == <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="comment">//flag = true;</span></span><br><span class="line">                    <span class="comment">//break;</span></span><br><span class="line">                    <span class="keyword">continue</span> l;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//if(!flag)&#123;//if(flag == false)&#123;</span></span><br><span class="line">            System. out.println(i);</span><br><span class="line">            <span class="comment">//&#125;</span></span><br><span class="line">            <span class="comment">//flag = false;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System. out.println(<span class="string">"所花费的时间为："</span> + (end - start));</span><br><span class="line">        <span class="comment">//35535--加上break：10059--使用Math.sqrt():</span></span><br><span class="line">         </span><br><span class="line">        System. out.println(Big.isPrime(<span class="number">88</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">问题一：</span></span><br><span class="line"><span class="comment">从键盘读入个数为10个的整数，并判断读入的正数和负数的个数。</span></span><br><span class="line"><span class="comment">问题二：</span></span><br><span class="line"><span class="comment">从键盘读入个数不确定的整数，并判断读入的正数和负数的个数，输入为0时结束程序。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestExer</span></span>&#123;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">            Scanner s = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">             <span class="keyword">int</span> a = <span class="number">0</span>;<span class="comment">//记录正数的个数</span></span><br><span class="line">             <span class="keyword">int</span> b = <span class="number">0</span>;<span class="comment">//记录负数的个数</span></span><br><span class="line">             <span class="comment">//for(;;)&#123;</span></span><br><span class="line">             <span class="keyword">while</span>(<span class="keyword">true</span> )&#123;</span><br><span class="line">                  System. out.println(<span class="string">"请输入一个整数："</span> );</span><br><span class="line">                   <span class="keyword">int</span> num = s.nextInt();</span><br><span class="line">                   <span class="keyword">if</span>(num &gt; <span class="number">0</span>)</span><br><span class="line">                        a++;</span><br><span class="line">                   <span class="keyword">else</span> <span class="keyword">if</span> (num &lt; <span class="number">0</span>)</span><br><span class="line">                        b++;</span><br><span class="line">                   <span class="keyword">else</span></span><br><span class="line">                         <span class="keyword">break</span>;      </span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    问题一：</span></span><br><span class="line"><span class="comment">    for( int i = 0;i &lt; 10;i++)&#123;</span></span><br><span class="line"><span class="comment">       System.out.println("请输入第" + (i + 1) + "个整数");</span></span><br><span class="line"><span class="comment">        int num = s.nextInt();</span></span><br><span class="line"><span class="comment">       if( num &gt; 0)</span></span><br><span class="line"><span class="comment">             a++;</span></span><br><span class="line"><span class="comment">       else if( num &lt; 0)</span></span><br><span class="line"><span class="comment">             b++;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">            System. out.println(<span class="string">"正数的个数为："</span> + a);</span><br><span class="line">            System. out.println(<span class="string">"负数的个数为："</span> + b);</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求调和级数中从第多少项开始值大于10，调和级数的第n项形式为：1+1/2+1/3+…+1/n</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ;;i++)&#123;</span><br><span class="line">        sum += <span class="number">1.0</span> / i; </span><br><span class="line">        <span class="keyword">if</span> (sum &gt; <span class="number">10</span>)&#123;</span><br><span class="line">            System.out.println( <span class="string">"调和级数中从第"</span> + i +<span class="string">"项开始值大于10"</span> );</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">若sum是int型,i是int型，在做1/i的时候会做整数除法得到0</span></span><br><span class="line"><span class="comment">（1除以大于1的数都得0）并且得到的结果加到sum后还是取整，</span></span><br><span class="line"><span class="comment">完全得不到小数位。因此sum要声明为double型sum = sum+1/i;</span></span><br><span class="line"><span class="comment">要改为sum = sum+1.0/i;</span></span><br><span class="line"><span class="comment">if 后面到break; 要用大括号括起来</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;分支结构：&quot;&gt;&lt;a href=&quot;#分支结构：&quot; class=&quot;headerlink&quot; title=&quot;分支结构：&quot;&gt;&lt;/a&gt;分支结构：&lt;/h1&gt;
    
    </summary>
    
      <category term="Java 基础" scheme="http://cuijing.me/categories/Java-%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="http://cuijing.me/tags/Java/"/>
    
      <category term="基础" scheme="http://cuijing.me/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="流程控制" scheme="http://cuijing.me/tags/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>Java 数组</title>
    <link href="http://cuijing.me/2015/02/06/Java/1-Java-Base/5-Java-Array/"/>
    <id>http://cuijing.me/2015/02/06/Java/1-Java-Base/5-Java-Array/</id>
    <published>2015-02-06T00:30:00.000Z</published>
    <updated>2016-04-13T14:53:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>数组：相同数据类型的数据的组合。如： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> score1 = <span class="number">72</span>;</span><br><span class="line"><span class="keyword">int</span> score2 = <span class="number">90</span>;</span><br><span class="line"><span class="keyword">int</span> score3 = <span class="number">59</span>;</span><br></pre></td></tr></table></figure><p>数组一旦初始化，其长度是不可变的。<br><a id="more"></a></p><h1 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h1><h2 id="1、数组的初始化"><a href="#1、数组的初始化" class="headerlink" title="1、数组的初始化"></a>1、数组的初始化</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//静态初始化：在声明并初始化数组与给数组相应的元素赋值操作同时进行。</span></span><br><span class="line"><span class="keyword">int</span>[] scores1 = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">72</span>,<span class="number">90</span>,<span class="number">59</span>&#125;;       </span><br><span class="line"></span><br><span class="line"><span class="comment">//动态初始化：在声明并初始化数组与给数组相应的元素赋值操作分开进行。</span></span><br><span class="line"><span class="comment">// int[] scores2 = new int[3];  也对</span></span><br><span class="line"><span class="keyword">int</span> scores2[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];                      </span><br><span class="line">scores2[<span class="number">0</span>] = <span class="number">72</span>;</span><br><span class="line">scores2[<span class="number">1</span>] = <span class="number">90</span>;</span><br><span class="line">scores2[<span class="number">2</span>] = <span class="number">59</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明数组的错误写法：</span></span><br><span class="line"><span class="comment">// 1、静态初始化就不要声明数组长度了</span></span><br><span class="line">String[] names = <span class="keyword">new</span> String[<span class="number">5</span>]&#123;<span class="string">"AA"</span>,<span class="string">"BB"</span>,<span class="string">"CC"</span>&#125;;   </span><br><span class="line"></span><br><span class="line"><span class="comment">//2、数组不可以用基本数据类型的方式初始化</span></span><br><span class="line"><span class="keyword">int</span> i[<span class="number">10</span>];       </span><br><span class="line"></span><br><span class="line"><span class="comment">//3、少了[]</span></span><br><span class="line"><span class="keyword">int</span> i = <span class="keyword">new</span> <span class="keyword">int</span>[];</span><br></pre></td></tr></table></figure><p>注：不管是动态还是静态初始化数组，一定在创建的时候，就指明了数组的长度！</p><h2 id="2、如何引用数组元素："><a href="#2、如何引用数组元素：" class="headerlink" title="2、如何引用数组元素："></a>2、如何引用数组元素：</h2><p>通过数组的下角标的方式。下角标从0开始，到n-1结束。其中n为数组的长度。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(scores2[<span class="number">0</span>]); <span class="comment">// 72</span></span><br><span class="line">System.out.println(scores2[<span class="number">1</span>]); <span class="comment">// 90</span></span><br><span class="line">System.out.println(scores2[<span class="number">2</span>]); <span class="comment">// 59</span></span><br></pre></td></tr></table></figure><h2 id="3、数组的长度："><a href="#3、数组的长度：" class="headerlink" title="3、数组的长度："></a>3、数组的长度：</h2><p>通过数组的属性<code>length</code>来调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(scores2.length);<span class="comment">//3</span></span><br></pre></td></tr></table></figure><h2 id="4、如何遍历数组"><a href="#4、如何遍历数组" class="headerlink" title="4、如何遍历数组"></a>4、如何遍历数组</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 手动</span></span><br><span class="line">System.out.println(scores2[<span class="number">0</span>]);</span><br><span class="line">System.out.println(scores2[<span class="number">1</span>]);</span><br><span class="line">System.out.println(scores2[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环打印</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; scores2;i++)&#123;</span><br><span class="line">      System.out.println(scores2[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5、关于数组元素的默认初始化值"><a href="#5、关于数组元素的默认初始化值" class="headerlink" title="5、关于数组元素的默认初始化值"></a>5、关于数组元素的默认初始化值</h2><ol><li>byte short int long 而言：0</li><li>float double 而言：0.0</li><li>char而言：空格</li><li>boolean而言：false</li><li>引用类型变量而言String :null</li></ol><h2 id="6、数组的内存结构"><a href="#6、数组的内存结构" class="headerlink" title="6、数组的内存结构"></a>6、数组的内存结构</h2><p><img src="http://oov0wb0gl.bkt.clouddn.com/2017-05-07-14941543419100.jpg" alt=""></p><h1 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h1><h2 id="1、声明并初始化"><a href="#1、声明并初始化" class="headerlink" title="1、声明并初始化"></a>1、声明并初始化</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//二维数组的初始化</span></span><br><span class="line">scores2 = <span class="keyword">new</span> <span class="keyword">int</span> [][]&#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;,&#123;<span class="number">6</span>&#125;&#125;;<span class="comment">//静态初始化</span></span><br><span class="line">  </span><br><span class="line">names = <span class="keyword">new</span> String[<span class="number">6</span>][<span class="number">5</span>];<span class="comment">//动态初始化的方式一</span></span><br><span class="line">names = <span class="keyword">new</span> String[<span class="number">6</span>][]; <span class="comment">//动态初始化的方式二</span></span><br><span class="line">names[<span class="number">0</span>] = <span class="keyword">new</span> String[<span class="number">5</span>];</span><br><span class="line">names[<span class="number">1</span>] = <span class="keyword">new</span> String[<span class="number">4</span>];</span><br><span class="line">names[<span class="number">2</span>] = <span class="keyword">new</span> String[<span class="number">7</span>];</span><br><span class="line">names[<span class="number">3</span>] = <span class="keyword">new</span> String[<span class="number">5</span>];</span><br><span class="line">names[<span class="number">4</span>] = <span class="keyword">new</span> String[<span class="number">8</span>];</span><br><span class="line">names[<span class="number">5</span>] = <span class="keyword">new</span> String[<span class="number">5</span>];</span><br><span class="line">  </span><br><span class="line"><span class="comment">//错误的初始化方式</span></span><br><span class="line"><span class="comment">//names = new String[][];</span></span><br><span class="line"><span class="comment">//names = new String[][5];</span></span><br></pre></td></tr></table></figure><h2 id="2、如何引用二维数组的元素："><a href="#2、如何引用二维数组的元素：" class="headerlink" title="2、如何引用二维数组的元素："></a>2、如何引用二维数组的元素：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] i = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>][<span class="number">2</span>]; <span class="comment">//int [] i[] = new int[3][2];</span></span><br><span class="line">i[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">60</span>;</span><br><span class="line">i[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">50</span>;</span><br><span class="line">i[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">40</span>;</span><br><span class="line">i[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">90</span>;</span><br><span class="line">i[<span class="number">2</span>][<span class="number">0</span>] = <span class="number">99</span>;</span><br><span class="line">i[<span class="number">2</span>][<span class="number">1</span>] = <span class="number">100</span>;</span><br></pre></td></tr></table></figure><h2 id="3、二维数组的长度："><a href="#3、二维数组的长度：" class="headerlink" title="3、二维数组的长度："></a>3、二维数组的长度：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//二维数组的长度：length属性</span></span><br><span class="line">System.out.println(i.length );<span class="comment">//3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//二维数组中元素的长度</span></span><br><span class="line">System.out.println(i[<span class="number">0</span>].length );<span class="comment">//2</span></span><br><span class="line">System.out.println(names.length );<span class="comment">//6</span></span><br><span class="line">System.out.println(names[<span class="number">4</span>].length );<span class="comment">//8</span></span><br><span class="line">System.out.println();</span><br></pre></td></tr></table></figure><h2 id="4、遍历二维数组"><a href="#4、遍历二维数组" class="headerlink" title="4、遍历二维数组"></a>4、遍历二维数组</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; arr.length;i++)&#123;</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; arr[i].length;j++)&#123;</span><br><span class="line">          System.out.print(arr[i][j] + <span class="string">"\t"</span>);    </span><br><span class="line">     &#125;</span><br><span class="line">     System.out.println();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5、二维数组的结构："><a href="#5、二维数组的结构：" class="headerlink" title="5、二维数组的结构："></a>5、二维数组的结构：</h2><p><img src="http://oov0wb0gl.bkt.clouddn.com/2017-05-07-14941571785880.jpg" alt=""></p><h1 id="数组常见异常"><a href="#数组常见异常" class="headerlink" title="数组常见异常"></a>数组常见异常</h1><h2 id="1、下标越界-java-lang-ArrayIndexOutOfBoundsException"><a href="#1、下标越界-java-lang-ArrayIndexOutOfBoundsException" class="headerlink" title="1、下标越界: java.lang.ArrayIndexOutOfBoundsException"></a>1、下标越界: java.lang.ArrayIndexOutOfBoundsException</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] i = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">i[<span class="number">0</span>] = <span class="number">90</span>;</span><br><span class="line">i[<span class="number">10</span>] = <span class="number">99</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> m = <span class="number">0</span>;m &lt;= i.length;m++)&#123;</span><br><span class="line">   System.out.println(i[m]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、空指针：NullPointerException"><a href="#2、空指针：NullPointerException" class="headerlink" title="2、空指针：NullPointerException"></a>2、空指针：NullPointerException</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一种：</span></span><br><span class="line"><span class="keyword">boolean</span>[] b = <span class="keyword">new</span> <span class="keyword">boolean</span>[<span class="number">3</span>];</span><br><span class="line">b = <span class="keyword">null</span>;</span><br><span class="line">System.out.println(b[<span class="number">0</span>]);</span><br><span class="line">  </span><br><span class="line"><span class="comment">//第二种：</span></span><br><span class="line">String[] str = <span class="keyword">new</span> String[<span class="number">4</span>];</span><br><span class="line">System.out.println( str[<span class="number">3</span>].toString());<span class="comment">// null的对象来调方法也会出现此异常</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">//第三种：</span></span><br><span class="line"><span class="keyword">int</span>[][] j = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>][];</span><br><span class="line">j[<span class="number">2</span>][<span class="number">0</span>] = <span class="number">12</span>;           <span class="comment">// j[2][] 是空数组,出现此异常</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;数组：相同数据类型的数据的组合。如： &lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; score1 = &lt;span class=&quot;number&quot;&gt;72&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; score2 = &lt;span class=&quot;number&quot;&gt;90&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; score3 = &lt;span class=&quot;number&quot;&gt;59&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;数组一旦初始化，其长度是不可变的。&lt;br&gt;
    
    </summary>
    
      <category term="Java 基础" scheme="http://cuijing.me/categories/Java-%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="http://cuijing.me/tags/Java/"/>
    
      <category term="基础" scheme="http://cuijing.me/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="数组" scheme="http://cuijing.me/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
</feed>
